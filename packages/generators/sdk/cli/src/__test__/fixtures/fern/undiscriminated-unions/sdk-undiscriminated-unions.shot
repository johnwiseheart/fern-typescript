// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`runGenerator undiscriminated-unions 1`] = `
Array [
  Object {
    "contents": Array [
      Object {
        "contents": Array [
          Object {
            "contents": "name: ci

on: [push]

jobs:
  compile:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up node
        uses: actions/setup-node@v3

      - name: Compile
        run: yarn && yarn build
  
  publish:
    needs: [ compile ]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up node
        uses: actions/setup-node@v3

      - name: Install dependencies
        run: yarn install

      - name: Build
        run: yarn build

      - name: Publish to npm
        run: |
          npm config set //registry.npmjs.org/:_authToken \${NPM_TOKEN}
          npm publish --access public
        env:
          NPM_TOKEN: \${{ secrets.NPM_TOKEN }}",
            "name": "ci.yml",
            "type": "file",
          },
        ],
        "name": "workflows",
        "type": "directory",
      },
    ],
    "name": ".github",
    "type": "directory",
  },
  Object {
    "contents": "node_modules
.DS_Store
/dist
/Client.d.ts
/Client.js
/index.d.ts
/index.js
/api
/core
/errors
/serialization",
    "name": ".gitignore",
    "type": "file",
  },
  Object {
    "contents": "node_modules
src
.gitignore
.github
.fernignore
.prettierrc.yml
tsconfig.json
yarn.lock",
    "name": ".npmignore",
    "type": "file",
  },
  Object {
    "contents": "tabWidth: 4
printWidth: 120
",
    "name": ".prettierrc.yml",
    "type": "file",
  },
  Object {
    "contents": Array [
      Object {
        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"./core\\";
import { File_ } from \\"./api/resources/file/client/Client\\";
export declare namespace FernApiClient {
    interface Options {
        environment: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
    }
}
export declare class FernApiClient {
    protected readonly _options: FernApiClient.Options;
    constructor(_options: FernApiClient.Options);
    protected _file: File_ | undefined;
    get file(): File_;
}
",
        "name": "Client.d.ts",
        "type": "file",
      },
      Object {
        "contents": "\\"use strict\\";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.FernApiClient = void 0;
const Client_1 = require(\\"./api/resources/file/client/Client\\");
class FernApiClient {
    constructor(_options) {
        this._options = _options;
    }
    get file() {
        var _a;
        return ((_a = this._file) !== null && _a !== void 0 ? _a : (this._file = new Client_1.File_(this._options)));
    }
}
exports.FernApiClient = FernApiClient;
",
        "name": "Client.js",
        "type": "file",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "export * from \\"./resources\\";
",
            "name": "index.d.ts",
            "type": "file",
          },
          Object {
            "contents": "\\"use strict\\";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || (\\"get\\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== \\"default\\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
__exportStar(require(\\"./resources\\"), exports);
",
            "name": "index.js",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": Array [
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
import * as FernApi from \\"../../..\\";
export declare namespace File_ {
    interface Options {
        environment: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
    }
}
export declare class File_ {
    protected readonly _options: File_.Options;
    constructor(_options: File_.Options);
    get(request: FernApi.MyUnion, _requestOptions?: File_.RequestOptions): Promise<FernApi.MyUnion>;
}
",
                        "name": "Client.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || (\\"get\\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, \\"default\\", { enumerable: true, value: v });
}) : function(o, v) {
    o[\\"default\\"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== \\"default\\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator[\\"throw\\"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.File_ = void 0;
const core = __importStar(require(\\"../../../../core\\"));
const serializers = __importStar(require(\\"../../../../serialization\\"));
const errors = __importStar(require(\\"../../../../errors\\"));
class File_ {
    constructor(_options) {
        this._options = _options;
    }
    get(request, _requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: yield core.Supplier.get(this._options.environment),
                method: \\"POST\\",
                headers: {
                    \\"X-Fern-Language\\": \\"JavaScript\\",
                    \\"X-Fern-SDK-Name\\": \\"@fern/api\\",
                    \\"X-Fern-SDK-Version\\": \\"0.0.1\\",
                },
                contentType: \\"application/json\\",
                body: yield serializers.MyUnion.jsonOrThrow(request, { unrecognizedObjectKeys: \\"strip\\" }),
                timeoutMs: (_requestOptions === null || _requestOptions === void 0 ? void 0 : _requestOptions.timeoutInSeconds) !== undefined ? _requestOptions.timeoutInSeconds * 1000 : 60000,
            });
            if (_response.ok) {
                return yield serializers.MyUnion.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: \\"passthrough\\",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: [\\"response\\"],
                });
            }
            if (_response.error.reason === \\"status-code\\") {
                throw new errors.FernApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case \\"non-json\\":
                    throw new errors.FernApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case \\"timeout\\":
                    throw new errors.FernApiTimeoutError();
                case \\"unknown\\":
                    throw new errors.FernApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
}
exports.File_ = File_;
",
                        "name": "Client.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "export {};
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
",
                        "name": "index.js",
                        "type": "file",
                      },
                    ],
                    "name": "client",
                    "type": "directory",
                  },
                  Object {
                    "contents": "export * from \\"./types\\";
export * from \\"./client\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || (\\"get\\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== \\"default\\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
__exportStar(require(\\"./types\\"), exports);
__exportStar(require(\\"./client\\"), exports);
",
                    "name": "index.js",
                    "type": "file",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export declare type MyUnion = string | string[] | number | number[] | number[][];
",
                        "name": "MyUnion.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
Object.defineProperty(exports, \\"__esModule\\", { value: true });
",
                        "name": "MyUnion.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * from \\"./MyUnion\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || (\\"get\\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== \\"default\\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
__exportStar(require(\\"./MyUnion\\"), exports);
",
                        "name": "index.js",
                        "type": "file",
                      },
                    ],
                    "name": "types",
                    "type": "directory",
                  },
                ],
                "name": "file",
                "type": "directory",
              },
              Object {
                "contents": "export * as file from \\"./file\\";
export * from \\"./file/types\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
              Object {
                "contents": "\\"use strict\\";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || (\\"get\\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, \\"default\\", { enumerable: true, value: v });
}) : function(o, v) {
    o[\\"default\\"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== \\"default\\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== \\"default\\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.file = void 0;
exports.file = __importStar(require(\\"./file\\"));
__exportStar(require(\\"./file/types\\"), exports);
",
                "name": "index.js",
                "type": "file",
              },
            ],
            "name": "resources",
            "type": "directory",
          },
        ],
        "name": "api",
        "type": "directory",
      },
      Object {
        "contents": Array [
          Object {
            "contents": Array [
              Object {
                "contents": "export declare type APIResponse<Success, Failure> = SuccessfulResponse<Success> | FailedResponse<Failure>;
export interface SuccessfulResponse<T> {
    ok: true;
    body: T;
}
export interface FailedResponse<T> {
    ok: false;
    error: T;
}
",
                "name": "APIResponse.d.ts",
                "type": "file",
              },
              Object {
                "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
",
                "name": "APIResponse.js",
                "type": "file",
              },
              Object {
                "contents": "import { default as URLSearchParams } from \\"@ungap/url-search-params\\";
import { AxiosAdapter, AxiosProgressEvent } from \\"axios\\";
import { APIResponse } from \\"./APIResponse\\";
export declare type FetchFunction = <R = unknown>(args: Fetcher.Args) => Promise<APIResponse<R, Fetcher.Error>>;
export declare namespace Fetcher {
    interface Args {
        url: string;
        method: string;
        contentType?: string;
        headers?: Record<string, string | undefined>;
        queryParameters?: URLSearchParams;
        body?: unknown;
        timeoutMs?: number;
        withCredentials?: boolean;
        responseType?: \\"json\\" | \\"blob\\";
        adapter?: AxiosAdapter;
        onUploadProgress?: (event: AxiosProgressEvent) => void;
    }
    type Error = FailedStatusCodeError | NonJsonError | TimeoutError | UnknownError;
    interface FailedStatusCodeError {
        reason: \\"status-code\\";
        statusCode: number;
        body: unknown;
    }
    interface NonJsonError {
        reason: \\"non-json\\";
        statusCode: number;
        rawBody: string;
    }
    interface TimeoutError {
        reason: \\"timeout\\";
    }
    interface UnknownError {
        reason: \\"unknown\\";
        errorMessage: string;
    }
}
export declare const fetcher: FetchFunction;
",
                "name": "Fetcher.d.ts",
                "type": "file",
              },
              Object {
                "contents": "\\"use strict\\";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator[\\"throw\\"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { \\"default\\": mod };
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.fetcher = void 0;
const axios_1 = __importDefault(require(\\"axios\\"));
function fetcherImpl(args) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const headers = {};
        if (args.body !== undefined && args.contentType != null) {
            headers[\\"Content-Type\\"] = args.contentType;
        }
        if (args.headers != null) {
            for (const [key, value] of Object.entries(args.headers)) {
                if (value != null) {
                    headers[key] = value;
                }
            }
        }
        try {
            const response = yield (0, axios_1.default)({
                url: args.url,
                params: args.queryParameters,
                method: args.method,
                headers,
                data: args.body,
                validateStatus: () => true,
                transformResponse: (response) => response,
                timeout: args.timeoutMs,
                transitional: {
                    clarifyTimeoutError: true,
                },
                withCredentials: args.withCredentials,
                adapter: args.adapter,
                onUploadProgress: args.onUploadProgress,
                maxBodyLength: Infinity,
                maxContentLength: Infinity,
                responseType: (_a = args.responseType) !== null && _a !== void 0 ? _a : \\"json\\",
            });
            let body;
            if (args.responseType === \\"blob\\") {
                body = response.data;
            }
            else if (response.data != null && response.data.length > 0) {
                try {
                    body = (_b = JSON.parse(response.data)) !== null && _b !== void 0 ? _b : undefined;
                }
                catch (_c) {
                    return {
                        ok: false,
                        error: {
                            reason: \\"non-json\\",
                            statusCode: response.status,
                            rawBody: response.data,
                        },
                    };
                }
            }
            if (response.status >= 200 && response.status < 400) {
                return {
                    ok: true,
                    body: body,
                };
            }
            else {
                return {
                    ok: false,
                    error: {
                        reason: \\"status-code\\",
                        statusCode: response.status,
                        body,
                    },
                };
            }
        }
        catch (error) {
            if (error.code === \\"ETIMEDOUT\\") {
                return {
                    ok: false,
                    error: {
                        reason: \\"timeout\\",
                    },
                };
            }
            return {
                ok: false,
                error: {
                    reason: \\"unknown\\",
                    errorMessage: error.message,
                },
            };
        }
    });
}
exports.fetcher = fetcherImpl;
",
                "name": "Fetcher.js",
                "type": "file",
              },
              Object {
                "contents": "export declare type Supplier<T> = T | Promise<T> | (() => T | Promise<T>);
export declare const Supplier: {
    get: <T>(supplier: Supplier<T>) => Promise<T>;
};
",
                "name": "Supplier.d.ts",
                "type": "file",
              },
              Object {
                "contents": "\\"use strict\\";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator[\\"throw\\"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.Supplier = void 0;
exports.Supplier = {
    get: (supplier) => __awaiter(void 0, void 0, void 0, function* () {
        if (typeof supplier === \\"function\\") {
            return supplier();
        }
        else {
            return supplier;
        }
    }),
};
",
                "name": "Supplier.js",
                "type": "file",
              },
              Object {
                "contents": "export type { APIResponse } from \\"./APIResponse\\";
export { fetcher } from \\"./Fetcher\\";
export type { Fetcher, FetchFunction } from \\"./Fetcher\\";
export { Supplier } from \\"./Supplier\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
              Object {
                "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.Supplier = exports.fetcher = void 0;
var Fetcher_1 = require(\\"./Fetcher\\");
Object.defineProperty(exports, \\"fetcher\\", { enumerable: true, get: function () { return Fetcher_1.fetcher; } });
var Supplier_1 = require(\\"./Supplier\\");
Object.defineProperty(exports, \\"Supplier\\", { enumerable: true, get: function () { return Supplier_1.Supplier; } });
",
                "name": "index.js",
                "type": "file",
              },
            ],
            "name": "fetcher",
            "type": "directory",
          },
          Object {
            "contents": "export * from \\"./fetcher\\";
export * as serialization from \\"./schemas\\";
",
            "name": "index.d.ts",
            "type": "file",
          },
          Object {
            "contents": "\\"use strict\\";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || (\\"get\\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, \\"default\\", { enumerable: true, value: v });
}) : function(o, v) {
    o[\\"default\\"] = v;
});
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== \\"default\\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== \\"default\\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.serialization = void 0;
__exportStar(require(\\"./fetcher\\"), exports);
exports.serialization = __importStar(require(\\"./schemas\\"));
",
            "name": "index.js",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "import { SchemaUtils } from \\"./builders\\";
import { MaybePromise } from \\"./utils/MaybePromise\\";
export declare type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
export declare type inferRaw<S extends Schema> = S extends Schema<infer Raw, any> ? Raw : never;
export declare type inferParsed<S extends Schema> = S extends Schema<any, infer Parsed> ? Parsed : never;
export interface BaseSchema<Raw, Parsed> {
    parse: (raw: unknown, opts?: SchemaOptions) => MaybePromise<MaybeValid<Parsed>>;
    json: (parsed: unknown, opts?: SchemaOptions) => MaybePromise<MaybeValid<Raw>>;
    getType: () => SchemaType | Promise<SchemaType>;
}
export declare const SchemaType: {
    readonly DATE: \\"date\\";
    readonly ENUM: \\"enum\\";
    readonly LIST: \\"list\\";
    readonly STRING_LITERAL: \\"stringLiteral\\";
    readonly OBJECT: \\"object\\";
    readonly ANY: \\"any\\";
    readonly BOOLEAN: \\"boolean\\";
    readonly NUMBER: \\"number\\";
    readonly STRING: \\"string\\";
    readonly UNKNOWN: \\"unknown\\";
    readonly RECORD: \\"record\\";
    readonly SET: \\"set\\";
    readonly UNION: \\"union\\";
    readonly UNDISCRIMINATED_UNION: \\"undiscriminatedUnion\\";
    readonly OPTIONAL: \\"optional\\";
};
export declare type SchemaType = typeof SchemaType[keyof typeof SchemaType];
export declare type MaybeValid<T> = Valid<T> | Invalid;
export interface Valid<T> {
    ok: true;
    value: T;
}
export interface Invalid {
    ok: false;
    errors: ValidationError[];
}
export interface ValidationError {
    path: string[];
    message: string;
}
export interface SchemaOptions {
    /**
     * how to handle unrecognized keys in objects
     *
     * @default \\"fail\\"
     */
    unrecognizedObjectKeys?: \\"fail\\" | \\"passthrough\\" | \\"strip\\";
    /**
     * whether to fail when an unrecognized discriminant value is
     * encountered in a union
     *
     * @default false
     */
    allowUnrecognizedUnionMembers?: boolean;
    /**
     * whether to fail when an unrecognized enum value is encountered
     *
     * @default false
     */
    allowUnrecognizedEnumValues?: boolean;
    /**
     * whether to allow data that doesn't conform to the schema.
     * invalid data is passed through without transformation.
     *
     * when this is enabled, .parse() and .json() will always
     * return \`ok: true\`. \`.parseOrThrow()\` and \`.jsonOrThrow()\`
     * will never fail.
     *
     * @default false
     */
    skipValidation?: boolean;
    /**
     * each validation failure contains a \\"path\\" property, which is
     * the breadcrumbs to the offending node in the JSON. you can supply
     * a prefix that is prepended to all the errors' paths. this can be
     * helpful for zurg's internal debug logging.
     */
    breadcrumbsPrefix?: string[];
}
",
                "name": "Schema.d.ts",
                "type": "file",
              },
              Object {
                "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.SchemaType = void 0;
exports.SchemaType = {
    DATE: \\"date\\",
    ENUM: \\"enum\\",
    LIST: \\"list\\",
    STRING_LITERAL: \\"stringLiteral\\",
    OBJECT: \\"object\\",
    ANY: \\"any\\",
    BOOLEAN: \\"boolean\\",
    NUMBER: \\"number\\",
    STRING: \\"string\\",
    UNKNOWN: \\"unknown\\",
    RECORD: \\"record\\",
    SET: \\"set\\",
    UNION: \\"union\\",
    UNDISCRIMINATED_UNION: \\"undiscriminatedUnion\\",
    OPTIONAL: \\"optional\\",
};
",
                "name": "Schema.js",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { Schema } from \\"../../Schema\\";
export declare function date(): Schema<string, Date>;
",
                        "name": "date.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.date = void 0;
const Schema_1 = require(\\"../../Schema\\");
const getErrorMessageForIncorrectType_1 = require(\\"../../utils/getErrorMessageForIncorrectType\\");
const maybeSkipValidation_1 = require(\\"../../utils/maybeSkipValidation\\");
const schema_utils_1 = require(\\"../schema-utils\\");
// https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
const ISO_8601_REGEX = /^([+-]?\\\\d{4}(?!\\\\d{2}\\\\b))((-?)((0[1-9]|1[0-2])(\\\\3([12]\\\\d|0[1-9]|3[01]))?|W([0-4]\\\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\\\d|[12]\\\\d{2}|3([0-5]\\\\d|6[1-6])))([T\\\\s]((([01]\\\\d|2[0-3])((:?)[0-5]\\\\d)?|24:?00)([.,]\\\\d+(?!:))?)?(\\\\17[0-5]\\\\d([.,]\\\\d+)?)?([zZ]|([+-])([01]\\\\d|2[0-3]):?([0-5]\\\\d)?)?)?)?$/;
function date() {
    const baseSchema = {
        parse: (raw, { breadcrumbsPrefix = [] } = {}) => {
            if (typeof raw !== \\"string\\") {
                return {
                    ok: false,
                    errors: [
                        {
                            path: breadcrumbsPrefix,
                            message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(raw, \\"string\\"),
                        },
                    ],
                };
            }
            if (!ISO_8601_REGEX.test(raw)) {
                return {
                    ok: false,
                    errors: [
                        {
                            path: breadcrumbsPrefix,
                            message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(raw, \\"ISO 8601 date string\\"),
                        },
                    ],
                };
            }
            return {
                ok: true,
                value: new Date(raw),
            };
        },
        json: (date, { breadcrumbsPrefix = [] } = {}) => {
            if (date instanceof Date) {
                return {
                    ok: true,
                    value: date.toISOString(),
                };
            }
            else {
                return {
                    ok: false,
                    errors: [
                        {
                            path: breadcrumbsPrefix,
                            message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(date, \\"Date object\\"),
                        },
                    ],
                };
            }
        },
        getType: () => Schema_1.SchemaType.DATE,
    };
    return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema));
}
exports.date = date;
",
                        "name": "date.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { date } from \\"./date\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.date = void 0;
var date_1 = require(\\"./date\\");
Object.defineProperty(exports, \\"date\\", { enumerable: true, get: function () { return date_1.date; } });
",
                        "name": "index.js",
                        "type": "file",
                      },
                    ],
                    "name": "date",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { Schema } from \\"../../Schema\\";
export declare function enum_<U extends string, E extends U[]>(values: E): Schema<E[number], E[number]>;
",
                        "name": "enum.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.enum_ = void 0;
const Schema_1 = require(\\"../../Schema\\");
const createIdentitySchemaCreator_1 = require(\\"../../utils/createIdentitySchemaCreator\\");
const getErrorMessageForIncorrectType_1 = require(\\"../../utils/getErrorMessageForIncorrectType\\");
function enum_(values) {
    const validValues = new Set(values);
    const schemaCreator = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.ENUM, (value, { allowUnrecognizedEnumValues, breadcrumbsPrefix = [] } = {}) => {
        if (typeof value !== \\"string\\") {
            return {
                ok: false,
                errors: [
                    {
                        path: breadcrumbsPrefix,
                        message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, \\"string\\"),
                    },
                ],
            };
        }
        if (!validValues.has(value) && !allowUnrecognizedEnumValues) {
            return {
                ok: false,
                errors: [
                    {
                        path: breadcrumbsPrefix,
                        message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, \\"enum\\"),
                    },
                ],
            };
        }
        return {
            ok: true,
            value: value,
        };
    });
    return schemaCreator();
}
exports.enum_ = enum_;
",
                        "name": "enum.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { enum_ } from \\"./enum\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.enum_ = void 0;
var enum_1 = require(\\"./enum\\");
Object.defineProperty(exports, \\"enum_\\", { enumerable: true, get: function () { return enum_1.enum_; } });
",
                        "name": "index.js",
                        "type": "file",
                      },
                    ],
                    "name": "enum",
                    "type": "directory",
                  },
                  Object {
                    "contents": "export * from \\"./date\\";
export * from \\"./enum\\";
export * from \\"./lazy\\";
export * from \\"./list\\";
export * from \\"./literals\\";
export * from \\"./object\\";
export * from \\"./object-like\\";
export * from \\"./primitives\\";
export * from \\"./record\\";
export * from \\"./schema-utils\\";
export * from \\"./set\\";
export * from \\"./undiscriminated-union\\";
export * from \\"./union\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || (\\"get\\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== \\"default\\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
__exportStar(require(\\"./date\\"), exports);
__exportStar(require(\\"./enum\\"), exports);
__exportStar(require(\\"./lazy\\"), exports);
__exportStar(require(\\"./list\\"), exports);
__exportStar(require(\\"./literals\\"), exports);
__exportStar(require(\\"./object\\"), exports);
__exportStar(require(\\"./object-like\\"), exports);
__exportStar(require(\\"./primitives\\"), exports);
__exportStar(require(\\"./record\\"), exports);
__exportStar(require(\\"./schema-utils\\"), exports);
__exportStar(require(\\"./set\\"), exports);
__exportStar(require(\\"./undiscriminated-union\\"), exports);
__exportStar(require(\\"./union\\"), exports);
",
                    "name": "index.js",
                    "type": "file",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export { lazy } from \\"./lazy\\";
export type { SchemaGetter } from \\"./lazy\\";
export { lazyObject } from \\"./lazyObject\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.lazyObject = exports.lazy = void 0;
var lazy_1 = require(\\"./lazy\\");
Object.defineProperty(exports, \\"lazy\\", { enumerable: true, get: function () { return lazy_1.lazy; } });
var lazyObject_1 = require(\\"./lazyObject\\");
Object.defineProperty(exports, \\"lazyObject\\", { enumerable: true, get: function () { return lazyObject_1.lazyObject; } });
",
                        "name": "index.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { BaseSchema, Schema } from \\"../../Schema\\";
export declare type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType | Promise<SchemaType>;
export declare function lazy<Raw, Parsed>(getter: SchemaGetter<Schema<Raw, Parsed>>): Schema<Raw, Parsed>;
export declare function constructLazyBaseSchema<Raw, Parsed>(getter: SchemaGetter<Schema<Raw, Parsed>>): BaseSchema<Raw, Parsed>;
export declare function getMemoizedSchema<SchemaType extends Schema<any, any>>(getter: SchemaGetter<SchemaType>): Promise<SchemaType>;
",
                        "name": "lazy.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator[\\"throw\\"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.getMemoizedSchema = exports.constructLazyBaseSchema = exports.lazy = void 0;
const schema_utils_1 = require(\\"../schema-utils\\");
function lazy(getter) {
    const baseSchema = constructLazyBaseSchema(getter);
    return Object.assign(Object.assign({}, baseSchema), (0, schema_utils_1.getSchemaUtils)(baseSchema));
}
exports.lazy = lazy;
function constructLazyBaseSchema(getter) {
    return {
        parse: (raw, opts) => __awaiter(this, void 0, void 0, function* () { return (yield getMemoizedSchema(getter)).parse(raw, opts); }),
        json: (parsed, opts) => __awaiter(this, void 0, void 0, function* () { return (yield getMemoizedSchema(getter)).json(parsed, opts); }),
        getType: () => __awaiter(this, void 0, void 0, function* () { return (yield getMemoizedSchema(getter)).getType(); }),
    };
}
exports.constructLazyBaseSchema = constructLazyBaseSchema;
function getMemoizedSchema(getter) {
    return __awaiter(this, void 0, void 0, function* () {
        const castedGetter = getter;
        if (castedGetter.__zurg_memoized == null) {
            castedGetter.__zurg_memoized = yield getter();
        }
        return castedGetter.__zurg_memoized;
    });
}
exports.getMemoizedSchema = getMemoizedSchema;
",
                        "name": "lazy.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { ObjectSchema } from \\"../object/types\\";
import { SchemaGetter } from \\"./lazy\\";
export declare function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed>;
",
                        "name": "lazyObject.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator[\\"throw\\"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.lazyObject = void 0;
const object_1 = require(\\"../object\\");
const object_like_1 = require(\\"../object-like\\");
const schema_utils_1 = require(\\"../schema-utils\\");
const lazy_1 = require(\\"./lazy\\");
function lazyObject(getter) {
    const baseSchema = Object.assign(Object.assign({}, (0, lazy_1.constructLazyBaseSchema)(getter)), { _getRawProperties: () => __awaiter(this, void 0, void 0, function* () { return (yield (0, lazy_1.getMemoizedSchema)(getter))._getRawProperties(); }), _getParsedProperties: () => __awaiter(this, void 0, void 0, function* () { return (yield (0, lazy_1.getMemoizedSchema)(getter))._getParsedProperties(); }) });
    return Object.assign(Object.assign(Object.assign(Object.assign({}, baseSchema), (0, schema_utils_1.getSchemaUtils)(baseSchema)), (0, object_like_1.getObjectLikeUtils)(baseSchema)), (0, object_1.getObjectUtils)(baseSchema));
}
exports.lazyObject = lazyObject;
",
                        "name": "lazyObject.js",
                        "type": "file",
                      },
                    ],
                    "name": "lazy",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export { list } from \\"./list\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.list = void 0;
var list_1 = require(\\"./list\\");
Object.defineProperty(exports, \\"list\\", { enumerable: true, get: function () { return list_1.list; } });
",
                        "name": "index.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { Schema } from \\"../../Schema\\";
export declare function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]>;
",
                        "name": "list.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator[\\"throw\\"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.list = void 0;
const Schema_1 = require(\\"../../Schema\\");
const getErrorMessageForIncorrectType_1 = require(\\"../../utils/getErrorMessageForIncorrectType\\");
const maybeSkipValidation_1 = require(\\"../../utils/maybeSkipValidation\\");
const schema_utils_1 = require(\\"../schema-utils\\");
function list(schema) {
    const baseSchema = {
        parse: (raw, opts) => __awaiter(this, void 0, void 0, function* () {
            return validateAndTransformArray(raw, (item, index) => {
                var _a;
                return schema.parse(item, Object.assign(Object.assign({}, opts), { breadcrumbsPrefix: [...((_a = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a !== void 0 ? _a : []), \`[\${index}]\`] }));
            });
        }),
        json: (parsed, opts) => validateAndTransformArray(parsed, (item, index) => {
            var _a;
            return schema.json(item, Object.assign(Object.assign({}, opts), { breadcrumbsPrefix: [...((_a = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a !== void 0 ? _a : []), \`[\${index}]\`] }));
        }),
        getType: () => Schema_1.SchemaType.LIST,
    };
    return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema));
}
exports.list = list;
function validateAndTransformArray(value, transformItem) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!Array.isArray(value)) {
            return {
                ok: false,
                errors: [
                    {
                        message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, \\"list\\"),
                        path: [],
                    },
                ],
            };
        }
        const maybeValidItems = yield Promise.all(value.map((item, index) => transformItem(item, index)));
        return maybeValidItems.reduce((acc, item) => {
            if (acc.ok && item.ok) {
                return {
                    ok: true,
                    value: [...acc.value, item.value],
                };
            }
            const errors = [];
            if (!acc.ok) {
                errors.push(...acc.errors);
            }
            if (!item.ok) {
                errors.push(...item.errors);
            }
            return {
                ok: false,
                errors,
            };
        }, { ok: true, value: [] });
    });
}
",
                        "name": "list.js",
                        "type": "file",
                      },
                    ],
                    "name": "list",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export { stringLiteral } from \\"./stringLiteral\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.stringLiteral = void 0;
var stringLiteral_1 = require(\\"./stringLiteral\\");
Object.defineProperty(exports, \\"stringLiteral\\", { enumerable: true, get: function () { return stringLiteral_1.stringLiteral; } });
",
                        "name": "index.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { Schema } from \\"../../Schema\\";
export declare function stringLiteral<V extends string>(literal: V): Schema<V, V>;
",
                        "name": "stringLiteral.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.stringLiteral = void 0;
const Schema_1 = require(\\"../../Schema\\");
const createIdentitySchemaCreator_1 = require(\\"../../utils/createIdentitySchemaCreator\\");
const getErrorMessageForIncorrectType_1 = require(\\"../../utils/getErrorMessageForIncorrectType\\");
function stringLiteral(literal) {
    const schemaCreator = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.STRING_LITERAL, (value, { breadcrumbsPrefix = [] } = {}) => {
        if (value === literal) {
            return {
                ok: true,
                value: literal,
            };
        }
        else {
            return {
                ok: false,
                errors: [
                    {
                        path: breadcrumbsPrefix,
                        message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, \`\\"\${literal}\\"\`),
                    },
                ],
            };
        }
    });
    return schemaCreator();
}
exports.stringLiteral = stringLiteral;
",
                        "name": "stringLiteral.js",
                        "type": "file",
                      },
                    ],
                    "name": "literals",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export { getObjectUtils, object } from \\"./object\\";
export { isProperty, property } from \\"./property\\";
export type { Property } from \\"./property\\";
export type { BaseObjectSchema, inferObjectSchemaFromPropertySchemas, inferParsedObject, inferParsedObjectFromPropertySchemas, inferParsedPropertySchema, inferRawKey, inferRawObject, inferRawObjectFromPropertySchemas, inferRawPropertySchema, ObjectSchema, ObjectUtils, PropertySchemas, } from \\"./types\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.property = exports.isProperty = exports.object = exports.getObjectUtils = void 0;
var object_1 = require(\\"./object\\");
Object.defineProperty(exports, \\"getObjectUtils\\", { enumerable: true, get: function () { return object_1.getObjectUtils; } });
Object.defineProperty(exports, \\"object\\", { enumerable: true, get: function () { return object_1.object; } });
var property_1 = require(\\"./property\\");
Object.defineProperty(exports, \\"isProperty\\", { enumerable: true, get: function () { return property_1.isProperty; } });
Object.defineProperty(exports, \\"property\\", { enumerable: true, get: function () { return property_1.property; } });
",
                        "name": "index.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { BaseObjectSchema, inferObjectSchemaFromPropertySchemas, ObjectUtils, PropertySchemas } from \\"./types\\";
export declare function object<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(schemas: T): inferObjectSchemaFromPropertySchemas<T>;
export declare function getObjectUtils<Raw, Parsed>(schema: BaseObjectSchema<Raw, Parsed>): ObjectUtils<Raw, Parsed>;
",
                        "name": "object.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator[\\"throw\\"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.getObjectUtils = exports.object = void 0;
const Schema_1 = require(\\"../../Schema\\");
const entries_1 = require(\\"../../utils/entries\\");
const filterObject_1 = require(\\"../../utils/filterObject\\");
const getErrorMessageForIncorrectType_1 = require(\\"../../utils/getErrorMessageForIncorrectType\\");
const isPlainObject_1 = require(\\"../../utils/isPlainObject\\");
const keys_1 = require(\\"../../utils/keys\\");
const maybeSkipValidation_1 = require(\\"../../utils/maybeSkipValidation\\");
const partition_1 = require(\\"../../utils/partition\\");
const object_like_1 = require(\\"../object-like\\");
const schema_utils_1 = require(\\"../schema-utils\\");
const property_1 = require(\\"./property\\");
function object(schemas) {
    const baseSchema = {
        _getRawProperties: () => Promise.resolve(Object.entries(schemas).map(([parsedKey, propertySchema]) => (0, property_1.isProperty)(propertySchema) ? propertySchema.rawKey : parsedKey)),
        _getParsedProperties: () => Promise.resolve((0, keys_1.keys)(schemas)),
        parse: (raw, opts) => __awaiter(this, void 0, void 0, function* () {
            const rawKeyToProperty = {};
            const requiredKeys = [];
            for (const [parsedKey, schemaOrObjectProperty] of (0, entries_1.entries)(schemas)) {
                const rawKey = (0, property_1.isProperty)(schemaOrObjectProperty) ? schemaOrObjectProperty.rawKey : parsedKey;
                const valueSchema = (0, property_1.isProperty)(schemaOrObjectProperty)
                    ? schemaOrObjectProperty.valueSchema
                    : schemaOrObjectProperty;
                const property = {
                    rawKey,
                    parsedKey: parsedKey,
                    valueSchema,
                };
                rawKeyToProperty[rawKey] = property;
                if (yield isSchemaRequired(valueSchema)) {
                    requiredKeys.push(rawKey);
                }
            }
            return validateAndTransformObject({
                value: raw,
                requiredKeys,
                getProperty: (rawKey) => {
                    const property = rawKeyToProperty[rawKey];
                    if (property == null) {
                        return undefined;
                    }
                    return {
                        transformedKey: property.parsedKey,
                        transform: (propertyValue) => {
                            var _a;
                            return property.valueSchema.parse(propertyValue, Object.assign(Object.assign({}, opts), { breadcrumbsPrefix: [...((_a = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a !== void 0 ? _a : []), rawKey] }));
                        },
                    };
                },
                unrecognizedObjectKeys: opts === null || opts === void 0 ? void 0 : opts.unrecognizedObjectKeys,
                skipValidation: opts === null || opts === void 0 ? void 0 : opts.skipValidation,
                breadcrumbsPrefix: opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix,
            });
        }),
        json: (parsed, opts) => __awaiter(this, void 0, void 0, function* () {
            const requiredKeys = [];
            for (const [parsedKey, schemaOrObjectProperty] of (0, entries_1.entries)(schemas)) {
                const valueSchema = (0, property_1.isProperty)(schemaOrObjectProperty)
                    ? schemaOrObjectProperty.valueSchema
                    : schemaOrObjectProperty;
                if (yield isSchemaRequired(valueSchema)) {
                    requiredKeys.push(parsedKey);
                }
            }
            return validateAndTransformObject({
                value: parsed,
                requiredKeys,
                getProperty: (parsedKey) => {
                    const property = schemas[parsedKey];
                    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
                    if (property == null) {
                        return undefined;
                    }
                    if ((0, property_1.isProperty)(property)) {
                        return {
                            transformedKey: property.rawKey,
                            transform: (propertyValue) => {
                                var _a;
                                return property.valueSchema.json(propertyValue, Object.assign(Object.assign({}, opts), { breadcrumbsPrefix: [...((_a = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a !== void 0 ? _a : []), parsedKey] }));
                            },
                        };
                    }
                    else {
                        return {
                            transformedKey: parsedKey,
                            transform: (propertyValue) => {
                                var _a;
                                return property.json(propertyValue, Object.assign(Object.assign({}, opts), { breadcrumbsPrefix: [...((_a = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a !== void 0 ? _a : []), parsedKey] }));
                            },
                        };
                    }
                },
                unrecognizedObjectKeys: opts === null || opts === void 0 ? void 0 : opts.unrecognizedObjectKeys,
                skipValidation: opts === null || opts === void 0 ? void 0 : opts.skipValidation,
                breadcrumbsPrefix: opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix,
            });
        }),
        getType: () => Schema_1.SchemaType.OBJECT,
    };
    return Object.assign(Object.assign(Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema)), (0, object_like_1.getObjectLikeUtils)(baseSchema)), getObjectUtils(baseSchema));
}
exports.object = object;
function validateAndTransformObject({ value, requiredKeys, getProperty, unrecognizedObjectKeys = \\"fail\\", skipValidation = false, breadcrumbsPrefix = [], }) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!(0, isPlainObject_1.isPlainObject)(value)) {
            return {
                ok: false,
                errors: [
                    {
                        path: breadcrumbsPrefix,
                        message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, \\"object\\"),
                    },
                ],
            };
        }
        const missingRequiredKeys = new Set(requiredKeys);
        const errors = [];
        const transformed = {};
        for (const [preTransformedKey, preTransformedItemValue] of Object.entries(value)) {
            const property = getProperty(preTransformedKey);
            if (property != null) {
                missingRequiredKeys.delete(preTransformedKey);
                const value = yield property.transform(preTransformedItemValue);
                if (value.ok) {
                    transformed[property.transformedKey] = value.value;
                }
                else {
                    transformed[preTransformedKey] = preTransformedItemValue;
                    errors.push(...value.errors);
                }
            }
            else {
                switch (unrecognizedObjectKeys) {
                    case \\"fail\\":
                        errors.push({
                            path: [...breadcrumbsPrefix, preTransformedKey],
                            message: \`Unexpected key \\"\${preTransformedKey}\\"\`,
                        });
                        break;
                    case \\"strip\\":
                        break;
                    case \\"passthrough\\":
                        transformed[preTransformedKey] = preTransformedItemValue;
                        break;
                }
            }
        }
        errors.push(...requiredKeys
            .filter((key) => missingRequiredKeys.has(key))
            .map((key) => ({
            path: breadcrumbsPrefix,
            message: \`Missing required key \\"\${key}\\"\`,
        })));
        if (errors.length === 0 || skipValidation) {
            return {
                ok: true,
                value: transformed,
            };
        }
        else {
            return {
                ok: false,
                errors,
            };
        }
    });
}
function getObjectUtils(schema) {
    return {
        extend: (extension) => {
            const baseSchema = {
                _getParsedProperties: () => __awaiter(this, void 0, void 0, function* () {
                    return [
                        ...(yield schema._getParsedProperties()),
                        ...(yield extension._getParsedProperties()),
                    ];
                }),
                _getRawProperties: () => __awaiter(this, void 0, void 0, function* () {
                    return [
                        ...(yield schema._getRawProperties()),
                        ...(yield extension._getRawProperties()),
                    ];
                }),
                parse: (raw, opts) => __awaiter(this, void 0, void 0, function* () {
                    return validateAndTransformExtendedObject({
                        extensionKeys: yield extension._getRawProperties(),
                        value: raw,
                        transformBase: (rawBase) => schema.parse(rawBase, opts),
                        transformExtension: (rawExtension) => extension.parse(rawExtension, opts),
                    });
                }),
                json: (parsed, opts) => __awaiter(this, void 0, void 0, function* () {
                    return validateAndTransformExtendedObject({
                        extensionKeys: yield extension._getParsedProperties(),
                        value: parsed,
                        transformBase: (parsedBase) => schema.json(parsedBase, opts),
                        transformExtension: (parsedExtension) => extension.json(parsedExtension, opts),
                    });
                }),
                getType: () => Schema_1.SchemaType.OBJECT,
            };
            return Object.assign(Object.assign(Object.assign(Object.assign({}, baseSchema), (0, schema_utils_1.getSchemaUtils)(baseSchema)), (0, object_like_1.getObjectLikeUtils)(baseSchema)), getObjectUtils(baseSchema));
        },
    };
}
exports.getObjectUtils = getObjectUtils;
function validateAndTransformExtendedObject({ extensionKeys, value, transformBase, transformExtension, }) {
    return __awaiter(this, void 0, void 0, function* () {
        const extensionPropertiesSet = new Set(extensionKeys);
        const [extensionProperties, baseProperties] = (0, partition_1.partition)((0, keys_1.keys)(value), (key) => extensionPropertiesSet.has(key));
        const transformedBase = yield transformBase((0, filterObject_1.filterObject)(value, baseProperties));
        const transformedExtension = yield transformExtension((0, filterObject_1.filterObject)(value, extensionProperties));
        if (transformedBase.ok && transformedExtension.ok) {
            return {
                ok: true,
                value: Object.assign(Object.assign({}, transformedBase.value), transformedExtension.value),
            };
        }
        else {
            return {
                ok: false,
                errors: [
                    ...(transformedBase.ok ? [] : transformedBase.errors),
                    ...(transformedExtension.ok ? [] : transformedExtension.errors),
                ],
            };
        }
    });
}
function isSchemaRequired(schema) {
    return __awaiter(this, void 0, void 0, function* () {
        return !(yield isSchemaOptional(schema));
    });
}
function isSchemaOptional(schema) {
    return __awaiter(this, void 0, void 0, function* () {
        switch (yield schema.getType()) {
            case Schema_1.SchemaType.ANY:
            case Schema_1.SchemaType.UNKNOWN:
            case Schema_1.SchemaType.OPTIONAL:
                return true;
            default:
                return false;
        }
    });
}
",
                        "name": "object.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { Schema } from \\"../../Schema\\";
export declare function property<RawKey extends string, RawValue, ParsedValue>(rawKey: RawKey, valueSchema: Schema<RawValue, ParsedValue>): Property<RawKey, RawValue, ParsedValue>;
export interface Property<RawKey extends string, RawValue, ParsedValue> {
    rawKey: RawKey;
    valueSchema: Schema<RawValue, ParsedValue>;
    isProperty: true;
}
export declare function isProperty<O extends Property<any, any, any>>(maybeProperty: unknown): maybeProperty is O;
",
                        "name": "property.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.isProperty = exports.property = void 0;
function property(rawKey, valueSchema) {
    return {
        rawKey,
        valueSchema,
        isProperty: true,
    };
}
exports.property = property;
function isProperty(maybeProperty) {
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
    return maybeProperty.isProperty;
}
exports.isProperty = isProperty;
",
                        "name": "property.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { BaseSchema, inferParsed, inferRaw, Schema } from \\"../../Schema\\";
import { addQuestionMarksToNullableProperties } from \\"../../utils/addQuestionMarksToNullableProperties\\";
import { ObjectLikeUtils } from \\"../object-like\\";
import { SchemaUtils } from \\"../schema-utils\\";
import { Property } from \\"./property\\";
export declare type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> & ObjectLikeUtils<Raw, Parsed> & ObjectUtils<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
export interface BaseObjectSchema<Raw, Parsed> extends BaseSchema<Raw, Parsed> {
    _getRawProperties: () => Promise<(keyof Raw)[]>;
    _getParsedProperties: () => Promise<(keyof Parsed)[]>;
}
export interface ObjectUtils<Raw, Parsed> {
    extend: <RawExtension, ParsedExtension>(schemas: ObjectSchema<RawExtension, ParsedExtension>) => ObjectSchema<Raw & RawExtension, Parsed & ParsedExtension>;
}
export declare type inferRawObject<O extends ObjectSchema<any, any>> = O extends ObjectSchema<infer Raw, any> ? Raw : never;
export declare type inferParsedObject<O extends ObjectSchema<any, any>> = O extends ObjectSchema<any, infer Parsed> ? Parsed : never;
export declare type inferObjectSchemaFromPropertySchemas<T extends PropertySchemas<keyof T>> = ObjectSchema<inferRawObjectFromPropertySchemas<T>, inferParsedObjectFromPropertySchemas<T>>;
export declare type inferRawObjectFromPropertySchemas<T extends PropertySchemas<keyof T>> = addQuestionMarksToNullableProperties<{
    [ParsedKey in keyof T as inferRawKey<ParsedKey, T[ParsedKey]>]: inferRawPropertySchema<T[ParsedKey]>;
}>;
export declare type inferParsedObjectFromPropertySchemas<T extends PropertySchemas<keyof T>> = addQuestionMarksToNullableProperties<{
    [K in keyof T]: inferParsedPropertySchema<T[K]>;
}>;
export declare type PropertySchemas<ParsedKeys extends string | number | symbol> = Record<ParsedKeys, Property<any, any, any> | Schema<any, any>>;
export declare type inferRawPropertySchema<P extends Property<any, any, any> | Schema<any, any>> = P extends Property<any, infer Raw, any> ? Raw : P extends Schema<any, any> ? inferRaw<P> : never;
export declare type inferParsedPropertySchema<P extends Property<any, any, any> | Schema<any, any>> = P extends Property<any, any, infer Parsed> ? Parsed : P extends Schema<any, any> ? inferParsed<P> : never;
export declare type inferRawKey<ParsedKey extends string | number | symbol, P extends Property<any, any, any> | Schema<any, any>> = P extends Property<infer Raw, any, any> ? Raw : ParsedKey;
",
                        "name": "types.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
",
                        "name": "types.js",
                        "type": "file",
                      },
                    ],
                    "name": "object",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { BaseSchema } from \\"../../Schema\\";
import { ObjectLikeSchema, ObjectLikeUtils } from \\"./types\\";
export declare function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed>;
/**
 * object-like utils are defined in one file to resolve issues with circular imports
 */
export declare function withParsedProperties<RawObjectShape, ParsedObjectShape, Properties>(objectLike: BaseSchema<RawObjectShape, ParsedObjectShape>, properties: {
    [K in keyof Properties]: Properties[K] | ((parsed: ParsedObjectShape) => Properties[K]);
}): ObjectLikeSchema<RawObjectShape, ParsedObjectShape & Properties>;
",
                        "name": "getObjectLikeUtils.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator[\\"throw\\"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.withParsedProperties = exports.getObjectLikeUtils = void 0;
const filterObject_1 = require(\\"../../utils/filterObject\\");
const getErrorMessageForIncorrectType_1 = require(\\"../../utils/getErrorMessageForIncorrectType\\");
const isPlainObject_1 = require(\\"../../utils/isPlainObject\\");
const schema_utils_1 = require(\\"../schema-utils\\");
function getObjectLikeUtils(schema) {
    return {
        withParsedProperties: (properties) => withParsedProperties(schema, properties),
    };
}
exports.getObjectLikeUtils = getObjectLikeUtils;
/**
 * object-like utils are defined in one file to resolve issues with circular imports
 */
function withParsedProperties(objectLike, properties) {
    const objectSchema = {
        parse: (raw, opts) => __awaiter(this, void 0, void 0, function* () {
            const parsedObject = yield objectLike.parse(raw, opts);
            if (!parsedObject.ok) {
                return parsedObject;
            }
            const additionalProperties = Object.entries(properties).reduce((processed, [key, value]) => {
                return Object.assign(Object.assign({}, processed), { [key]: typeof value === \\"function\\" ? value(parsedObject.value) : value });
            }, {});
            return {
                ok: true,
                value: Object.assign(Object.assign({}, parsedObject.value), additionalProperties),
            };
        }),
        json: (parsed, opts) => {
            var _a;
            if (!(0, isPlainObject_1.isPlainObject)(parsed)) {
                return {
                    ok: false,
                    errors: [
                        {
                            path: (_a = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a !== void 0 ? _a : [],
                            message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(parsed, \\"object\\"),
                        },
                    ],
                };
            }
            // strip out added properties
            const addedPropertyKeys = new Set(Object.keys(properties));
            const parsedWithoutAddedProperties = (0, filterObject_1.filterObject)(parsed, Object.keys(parsed).filter((key) => !addedPropertyKeys.has(key)));
            return objectLike.json(parsedWithoutAddedProperties, opts);
        },
        getType: () => objectLike.getType(),
    };
    return Object.assign(Object.assign(Object.assign({}, objectSchema), (0, schema_utils_1.getSchemaUtils)(objectSchema)), getObjectLikeUtils(objectSchema));
}
exports.withParsedProperties = withParsedProperties;
",
                        "name": "getObjectLikeUtils.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { getObjectLikeUtils, withParsedProperties } from \\"./getObjectLikeUtils\\";
export type { ObjectLikeSchema, ObjectLikeUtils } from \\"./types\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.withParsedProperties = exports.getObjectLikeUtils = void 0;
var getObjectLikeUtils_1 = require(\\"./getObjectLikeUtils\\");
Object.defineProperty(exports, \\"getObjectLikeUtils\\", { enumerable: true, get: function () { return getObjectLikeUtils_1.getObjectLikeUtils; } });
Object.defineProperty(exports, \\"withParsedProperties\\", { enumerable: true, get: function () { return getObjectLikeUtils_1.withParsedProperties; } });
",
                        "name": "index.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { BaseSchema, Schema } from \\"../../Schema\\";
export declare type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> & BaseSchema<Raw, Parsed> & ObjectLikeUtils<Raw, Parsed>;
export interface ObjectLikeUtils<Raw, Parsed> {
    withParsedProperties: <T extends Record<string, any>>(properties: {
        [K in keyof T]: T[K] | ((parsed: Parsed) => T[K]);
    }) => ObjectLikeSchema<Raw, Parsed & T>;
}
",
                        "name": "types.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
",
                        "name": "types.js",
                        "type": "file",
                      },
                    ],
                    "name": "object-like",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export declare const any: () => import(\\"../../Schema\\").Schema<any, any>;
",
                        "name": "any.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.any = void 0;
const Schema_1 = require(\\"../../Schema\\");
const createIdentitySchemaCreator_1 = require(\\"../../utils/createIdentitySchemaCreator\\");
exports.any = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.ANY, (value) => ({ ok: true, value }));
",
                        "name": "any.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "export declare const boolean: () => import(\\"../../Schema\\").Schema<boolean, boolean>;
",
                        "name": "boolean.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.boolean = void 0;
const Schema_1 = require(\\"../../Schema\\");
const createIdentitySchemaCreator_1 = require(\\"../../utils/createIdentitySchemaCreator\\");
const getErrorMessageForIncorrectType_1 = require(\\"../../utils/getErrorMessageForIncorrectType\\");
exports.boolean = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.BOOLEAN, (value, { breadcrumbsPrefix = [] } = {}) => {
    if (typeof value === \\"boolean\\") {
        return {
            ok: true,
            value,
        };
    }
    else {
        return {
            ok: false,
            errors: [
                {
                    path: breadcrumbsPrefix,
                    message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, \\"boolean\\"),
                },
            ],
        };
    }
});
",
                        "name": "boolean.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { any } from \\"./any\\";
export { boolean } from \\"./boolean\\";
export { number } from \\"./number\\";
export { string } from \\"./string\\";
export { unknown } from \\"./unknown\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.unknown = exports.string = exports.number = exports.boolean = exports.any = void 0;
var any_1 = require(\\"./any\\");
Object.defineProperty(exports, \\"any\\", { enumerable: true, get: function () { return any_1.any; } });
var boolean_1 = require(\\"./boolean\\");
Object.defineProperty(exports, \\"boolean\\", { enumerable: true, get: function () { return boolean_1.boolean; } });
var number_1 = require(\\"./number\\");
Object.defineProperty(exports, \\"number\\", { enumerable: true, get: function () { return number_1.number; } });
var string_1 = require(\\"./string\\");
Object.defineProperty(exports, \\"string\\", { enumerable: true, get: function () { return string_1.string; } });
var unknown_1 = require(\\"./unknown\\");
Object.defineProperty(exports, \\"unknown\\", { enumerable: true, get: function () { return unknown_1.unknown; } });
",
                        "name": "index.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "export declare const number: () => import(\\"../../Schema\\").Schema<number, number>;
",
                        "name": "number.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.number = void 0;
const Schema_1 = require(\\"../../Schema\\");
const createIdentitySchemaCreator_1 = require(\\"../../utils/createIdentitySchemaCreator\\");
const getErrorMessageForIncorrectType_1 = require(\\"../../utils/getErrorMessageForIncorrectType\\");
exports.number = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.NUMBER, (value, { breadcrumbsPrefix = [] } = {}) => {
    if (typeof value === \\"number\\") {
        return {
            ok: true,
            value,
        };
    }
    else {
        return {
            ok: false,
            errors: [
                {
                    path: breadcrumbsPrefix,
                    message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, \\"number\\"),
                },
            ],
        };
    }
});
",
                        "name": "number.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "export declare const string: () => import(\\"../../Schema\\").Schema<string, string>;
",
                        "name": "string.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.string = void 0;
const Schema_1 = require(\\"../../Schema\\");
const createIdentitySchemaCreator_1 = require(\\"../../utils/createIdentitySchemaCreator\\");
const getErrorMessageForIncorrectType_1 = require(\\"../../utils/getErrorMessageForIncorrectType\\");
exports.string = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.STRING, (value, { breadcrumbsPrefix = [] } = {}) => {
    if (typeof value === \\"string\\") {
        return {
            ok: true,
            value,
        };
    }
    else {
        return {
            ok: false,
            errors: [
                {
                    path: breadcrumbsPrefix,
                    message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, \\"string\\"),
                },
            ],
        };
    }
});
",
                        "name": "string.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "export declare const unknown: () => import(\\"../../Schema\\").Schema<unknown, unknown>;
",
                        "name": "unknown.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.unknown = void 0;
const Schema_1 = require(\\"../../Schema\\");
const createIdentitySchemaCreator_1 = require(\\"../../utils/createIdentitySchemaCreator\\");
exports.unknown = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.UNKNOWN, (value) => ({ ok: true, value }));
",
                        "name": "unknown.js",
                        "type": "file",
                      },
                    ],
                    "name": "primitives",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export { record } from \\"./record\\";
export type { BaseRecordSchema, RecordSchema } from \\"./types\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.record = void 0;
var record_1 = require(\\"./record\\");
Object.defineProperty(exports, \\"record\\", { enumerable: true, get: function () { return record_1.record; } });
",
                        "name": "index.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { Schema } from \\"../../Schema\\";
import { RecordSchema } from \\"./types\\";
export declare function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(keySchema: Schema<RawKey, ParsedKey>, valueSchema: Schema<RawValue, ParsedValue>): RecordSchema<RawKey, RawValue, ParsedKey, ParsedValue>;
",
                        "name": "record.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator[\\"throw\\"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.record = void 0;
const Schema_1 = require(\\"../../Schema\\");
const entries_1 = require(\\"../../utils/entries\\");
const getErrorMessageForIncorrectType_1 = require(\\"../../utils/getErrorMessageForIncorrectType\\");
const isPlainObject_1 = require(\\"../../utils/isPlainObject\\");
const maybeSkipValidation_1 = require(\\"../../utils/maybeSkipValidation\\");
const schema_utils_1 = require(\\"../schema-utils\\");
function record(keySchema, valueSchema) {
    const baseSchema = {
        parse: (raw, opts) => __awaiter(this, void 0, void 0, function* () {
            return validateAndTransformRecord({
                value: raw,
                isKeyNumeric: (yield keySchema.getType()) === Schema_1.SchemaType.NUMBER,
                transformKey: (key) => {
                    var _a;
                    return keySchema.parse(key, Object.assign(Object.assign({}, opts), { breadcrumbsPrefix: [...((_a = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a !== void 0 ? _a : []), \`\${key} (key)\`] }));
                },
                transformValue: (value, key) => {
                    var _a;
                    return valueSchema.parse(value, Object.assign(Object.assign({}, opts), { breadcrumbsPrefix: [...((_a = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a !== void 0 ? _a : []), \`\${key}\`] }));
                },
                breadcrumbsPrefix: opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix,
            });
        }),
        json: (parsed, opts) => __awaiter(this, void 0, void 0, function* () {
            return validateAndTransformRecord({
                value: parsed,
                isKeyNumeric: (yield keySchema.getType()) === Schema_1.SchemaType.NUMBER,
                transformKey: (key) => {
                    var _a;
                    return keySchema.json(key, Object.assign(Object.assign({}, opts), { breadcrumbsPrefix: [...((_a = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a !== void 0 ? _a : []), \`\${key} (key)\`] }));
                },
                transformValue: (value, key) => {
                    var _a;
                    return valueSchema.json(value, Object.assign(Object.assign({}, opts), { breadcrumbsPrefix: [...((_a = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a !== void 0 ? _a : []), \`\${key}\`] }));
                },
                breadcrumbsPrefix: opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix,
            });
        }),
        getType: () => Schema_1.SchemaType.RECORD,
    };
    return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema));
}
exports.record = record;
function validateAndTransformRecord({ value, isKeyNumeric, transformKey, transformValue, breadcrumbsPrefix = [], }) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!(0, isPlainObject_1.isPlainObject)(value)) {
            return {
                ok: false,
                errors: [
                    {
                        path: breadcrumbsPrefix,
                        message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, \\"object\\"),
                    },
                ],
            };
        }
        return (0, entries_1.entries)(value).reduce((accPromise, [stringKey, value]) => __awaiter(this, void 0, void 0, function* () {
            // skip nullish keys
            if (value == null) {
                return accPromise;
            }
            const acc = yield accPromise;
            let key = stringKey;
            if (isKeyNumeric) {
                const numberKey = stringKey.length > 0 ? Number(stringKey) : NaN;
                if (!isNaN(numberKey)) {
                    key = numberKey;
                }
            }
            const transformedKey = yield transformKey(key);
            const transformedValue = yield transformValue(value, key);
            if (acc.ok && transformedKey.ok && transformedValue.ok) {
                return {
                    ok: true,
                    value: Object.assign(Object.assign({}, acc.value), { [transformedKey.value]: transformedValue.value }),
                };
            }
            const errors = [];
            if (!acc.ok) {
                errors.push(...acc.errors);
            }
            if (!transformedKey.ok) {
                errors.push(...transformedKey.errors);
            }
            if (!transformedValue.ok) {
                errors.push(...transformedValue.errors);
            }
            return {
                ok: false,
                errors,
            };
        }), Promise.resolve({ ok: true, value: {} }));
    });
}
",
                        "name": "record.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { BaseSchema } from \\"../../Schema\\";
import { SchemaUtils } from \\"../schema-utils\\";
export declare type RecordSchema<RawKey extends string | number, RawValue, ParsedKey extends string | number, ParsedValue> = BaseRecordSchema<RawKey, RawValue, ParsedKey, ParsedValue> & SchemaUtils<Record<RawKey, RawValue>, Record<ParsedKey, ParsedValue>>;
export declare type BaseRecordSchema<RawKey extends string | number, RawValue, ParsedKey extends string | number, ParsedValue> = BaseSchema<Record<RawKey, RawValue>, Record<ParsedKey, ParsedValue>>;
",
                        "name": "types.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
",
                        "name": "types.js",
                        "type": "file",
                      },
                    ],
                    "name": "record",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { ValidationError } from \\"../../Schema\\";
export declare class JsonError extends Error {
    readonly errors: ValidationError[];
    constructor(errors: ValidationError[]);
}
",
                        "name": "JsonError.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.JsonError = void 0;
const stringifyValidationErrors_1 = require(\\"./stringifyValidationErrors\\");
class JsonError extends Error {
    constructor(errors) {
        super(errors.map(stringifyValidationErrors_1.stringifyValidationError).join(\\"; \\"));
        this.errors = errors;
        Object.setPrototypeOf(this, JsonError.prototype);
    }
}
exports.JsonError = JsonError;
",
                        "name": "JsonError.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { ValidationError } from \\"../../Schema\\";
export declare class ParseError extends Error {
    readonly errors: ValidationError[];
    constructor(errors: ValidationError[]);
}
",
                        "name": "ParseError.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.ParseError = void 0;
const stringifyValidationErrors_1 = require(\\"./stringifyValidationErrors\\");
class ParseError extends Error {
    constructor(errors) {
        super(errors.map(stringifyValidationErrors_1.stringifyValidationError).join(\\"; \\"));
        this.errors = errors;
        Object.setPrototypeOf(this, ParseError.prototype);
    }
}
exports.ParseError = ParseError;
",
                        "name": "ParseError.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { BaseSchema, Schema, SchemaOptions } from \\"../../Schema\\";
export interface SchemaUtils<Raw, Parsed> {
    optional: () => Schema<Raw | null | undefined, Parsed | undefined>;
    transform: <Transformed>(transformer: SchemaTransformer<Parsed, Transformed>) => Schema<Raw, Transformed>;
    parseOrThrow: (raw: unknown, opts?: SchemaOptions) => Promise<Parsed>;
    jsonOrThrow: (raw: unknown, opts?: SchemaOptions) => Promise<Raw>;
}
export interface SchemaTransformer<Parsed, Transformed> {
    transform: (parsed: Parsed) => Transformed;
    untransform: (transformed: any) => Parsed;
}
export declare function getSchemaUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): SchemaUtils<Raw, Parsed>;
/**
 * schema utils are defined in one file to resolve issues with circular imports
 */
export declare function optional<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): Schema<Raw | null | undefined, Parsed | undefined>;
export declare function transform<Raw, Parsed, Transformed>(schema: BaseSchema<Raw, Parsed>, transformer: SchemaTransformer<Parsed, Transformed>): Schema<Raw, Transformed>;
",
                        "name": "getSchemaUtils.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator[\\"throw\\"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.transform = exports.optional = exports.getSchemaUtils = void 0;
const Schema_1 = require(\\"../../Schema\\");
const JsonError_1 = require(\\"./JsonError\\");
const ParseError_1 = require(\\"./ParseError\\");
function getSchemaUtils(schema) {
    return {
        optional: () => optional(schema),
        transform: (transformer) => transform(schema, transformer),
        parseOrThrow: (raw, opts) => __awaiter(this, void 0, void 0, function* () {
            const parsed = yield schema.parse(raw, opts);
            if (parsed.ok) {
                return parsed.value;
            }
            throw new ParseError_1.ParseError(parsed.errors);
        }),
        jsonOrThrow: (parsed, opts) => __awaiter(this, void 0, void 0, function* () {
            const raw = yield schema.json(parsed, opts);
            if (raw.ok) {
                return raw.value;
            }
            throw new JsonError_1.JsonError(raw.errors);
        }),
    };
}
exports.getSchemaUtils = getSchemaUtils;
/**
 * schema utils are defined in one file to resolve issues with circular imports
 */
function optional(schema) {
    const baseSchema = {
        parse: (raw, opts) => {
            if (raw == null) {
                return {
                    ok: true,
                    value: undefined,
                };
            }
            return schema.parse(raw, opts);
        },
        json: (parsed, opts) => {
            if (parsed == null) {
                return {
                    ok: true,
                    value: null,
                };
            }
            return schema.json(parsed, opts);
        },
        getType: () => Schema_1.SchemaType.OPTIONAL,
    };
    return Object.assign(Object.assign({}, baseSchema), getSchemaUtils(baseSchema));
}
exports.optional = optional;
function transform(schema, transformer) {
    const baseSchema = {
        parse: (raw, opts) => __awaiter(this, void 0, void 0, function* () {
            const parsed = yield schema.parse(raw, opts);
            if (!parsed.ok) {
                return parsed;
            }
            return {
                ok: true,
                value: transformer.transform(parsed.value),
            };
        }),
        json: (transformed, opts) => __awaiter(this, void 0, void 0, function* () {
            const parsed = yield transformer.untransform(transformed);
            return schema.json(parsed, opts);
        }),
        getType: () => schema.getType(),
    };
    return Object.assign(Object.assign({}, baseSchema), getSchemaUtils(baseSchema));
}
exports.transform = transform;
",
                        "name": "getSchemaUtils.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { getSchemaUtils, optional, transform } from \\"./getSchemaUtils\\";
export type { SchemaUtils } from \\"./getSchemaUtils\\";
export { JsonError } from \\"./JsonError\\";
export { ParseError } from \\"./ParseError\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.ParseError = exports.JsonError = exports.transform = exports.optional = exports.getSchemaUtils = void 0;
var getSchemaUtils_1 = require(\\"./getSchemaUtils\\");
Object.defineProperty(exports, \\"getSchemaUtils\\", { enumerable: true, get: function () { return getSchemaUtils_1.getSchemaUtils; } });
Object.defineProperty(exports, \\"optional\\", { enumerable: true, get: function () { return getSchemaUtils_1.optional; } });
Object.defineProperty(exports, \\"transform\\", { enumerable: true, get: function () { return getSchemaUtils_1.transform; } });
var JsonError_1 = require(\\"./JsonError\\");
Object.defineProperty(exports, \\"JsonError\\", { enumerable: true, get: function () { return JsonError_1.JsonError; } });
var ParseError_1 = require(\\"./ParseError\\");
Object.defineProperty(exports, \\"ParseError\\", { enumerable: true, get: function () { return ParseError_1.ParseError; } });
",
                        "name": "index.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { ValidationError } from \\"../../Schema\\";
export declare function stringifyValidationError(error: ValidationError): string;
",
                        "name": "stringifyValidationErrors.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.stringifyValidationError = void 0;
function stringifyValidationError(error) {
    if (error.path.length === 0) {
        return error.message;
    }
    return \`\${error.path.join(\\" -> \\")}: \${error.message}\`;
}
exports.stringifyValidationError = stringifyValidationError;
",
                        "name": "stringifyValidationErrors.js",
                        "type": "file",
                      },
                    ],
                    "name": "schema-utils",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export { set } from \\"./set\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.set = void 0;
var set_1 = require(\\"./set\\");
Object.defineProperty(exports, \\"set\\", { enumerable: true, get: function () { return set_1.set; } });
",
                        "name": "index.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { Schema } from \\"../../Schema\\";
export declare function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>>;
",
                        "name": "set.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator[\\"throw\\"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.set = void 0;
const Schema_1 = require(\\"../../Schema\\");
const getErrorMessageForIncorrectType_1 = require(\\"../../utils/getErrorMessageForIncorrectType\\");
const maybeSkipValidation_1 = require(\\"../../utils/maybeSkipValidation\\");
const list_1 = require(\\"../list\\");
const schema_utils_1 = require(\\"../schema-utils\\");
function set(schema) {
    const listSchema = (0, list_1.list)(schema);
    const baseSchema = {
        parse: (raw, opts) => __awaiter(this, void 0, void 0, function* () {
            const parsedList = yield listSchema.parse(raw, opts);
            if (parsedList.ok) {
                return {
                    ok: true,
                    value: new Set(parsedList.value),
                };
            }
            else {
                return parsedList;
            }
        }),
        json: (parsed, opts) => __awaiter(this, void 0, void 0, function* () {
            var _a;
            if (!(parsed instanceof Set)) {
                return {
                    ok: false,
                    errors: [
                        {
                            path: (_a = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a !== void 0 ? _a : [],
                            message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(parsed, \\"Set\\"),
                        },
                    ],
                };
            }
            const jsonList = yield listSchema.json([...parsed], opts);
            return jsonList;
        }),
        getType: () => Schema_1.SchemaType.SET,
    };
    return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema));
}
exports.set = set;
",
                        "name": "set.js",
                        "type": "file",
                      },
                    ],
                    "name": "set",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema, UndiscriminatedUnionSchema, } from \\"./types\\";
export { undiscriminatedUnion } from \\"./undiscriminatedUnion\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.undiscriminatedUnion = void 0;
var undiscriminatedUnion_1 = require(\\"./undiscriminatedUnion\\");
Object.defineProperty(exports, \\"undiscriminatedUnion\\", { enumerable: true, get: function () { return undiscriminatedUnion_1.undiscriminatedUnion; } });
",
                        "name": "index.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { inferParsed, inferRaw, Schema } from \\"../../Schema\\";
export declare type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<inferRawUnidiscriminatedUnionSchema<Schemas>, inferParsedUnidiscriminatedUnionSchema<Schemas>>;
export declare type inferRawUnidiscriminatedUnionSchema<Schemas extends [...Schema[]]> = inferRaw<Schemas[number]>;
export declare type inferParsedUnidiscriminatedUnionSchema<Schemas extends [...Schema[]]> = inferParsed<Schemas[number]>;
",
                        "name": "types.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
",
                        "name": "types.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { Schema } from \\"../../Schema\\";
import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from \\"./types\\";
export declare function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(schemas: Schemas): Schema<inferRawUnidiscriminatedUnionSchema<Schemas>, inferParsedUnidiscriminatedUnionSchema<Schemas>>;
",
                        "name": "undiscriminatedUnion.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator[\\"throw\\"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.undiscriminatedUnion = void 0;
const Schema_1 = require(\\"../../Schema\\");
const maybeSkipValidation_1 = require(\\"../../utils/maybeSkipValidation\\");
const schema_utils_1 = require(\\"../schema-utils\\");
function undiscriminatedUnion(schemas) {
    const baseSchema = {
        parse: (raw, opts) => __awaiter(this, void 0, void 0, function* () {
            return validateAndTransformUndiscriminatedUnion((schema) => schema.parse(raw, opts), schemas);
        }),
        json: (parsed, opts) => __awaiter(this, void 0, void 0, function* () {
            return validateAndTransformUndiscriminatedUnion((schema) => schema.json(parsed, opts), schemas);
        }),
        getType: () => Schema_1.SchemaType.UNDISCRIMINATED_UNION,
    };
    return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema));
}
exports.undiscriminatedUnion = undiscriminatedUnion;
function validateAndTransformUndiscriminatedUnion(transform, schemas) {
    return __awaiter(this, void 0, void 0, function* () {
        const errors = [];
        for (const [index, schema] of schemas.entries()) {
            const transformed = yield transform(schema);
            if (transformed.ok) {
                return transformed;
            }
            else {
                for (const error of errors) {
                    errors.push({
                        path: error.path,
                        message: \`[Variant \${index}] \${error.message}\`,
                    });
                }
            }
        }
        return {
            ok: false,
            errors,
        };
    });
}
",
                        "name": "undiscriminatedUnion.js",
                        "type": "file",
                      },
                    ],
                    "name": "undiscriminated-union",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export declare function discriminant<RawDiscriminant extends string, ParsedDiscriminant extends string>(parsedDiscriminant: ParsedDiscriminant, rawDiscriminant: RawDiscriminant): Discriminant<RawDiscriminant, ParsedDiscriminant>;
export interface Discriminant<RawDiscriminant extends string, ParsedDiscriminant extends string> {
    parsedDiscriminant: ParsedDiscriminant;
    rawDiscriminant: RawDiscriminant;
}
",
                        "name": "discriminant.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.discriminant = void 0;
function discriminant(parsedDiscriminant, rawDiscriminant) {
    return {
        parsedDiscriminant,
        rawDiscriminant,
    };
}
exports.discriminant = discriminant;
",
                        "name": "discriminant.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { discriminant } from \\"./discriminant\\";
export type { Discriminant } from \\"./discriminant\\";
export type { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes, } from \\"./types\\";
export { union } from \\"./union\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.union = exports.discriminant = void 0;
var discriminant_1 = require(\\"./discriminant\\");
Object.defineProperty(exports, \\"discriminant\\", { enumerable: true, get: function () { return discriminant_1.discriminant; } });
var union_1 = require(\\"./union\\");
Object.defineProperty(exports, \\"union\\", { enumerable: true, get: function () { return union_1.union; } });
",
                        "name": "index.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { inferParsedObject, inferRawObject, ObjectSchema } from \\"../object\\";
import { Discriminant } from \\"./discriminant\\";
export declare type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
    [K in DiscriminantValues]: ObjectSchema<any, any>;
};
export declare type inferRawUnion<D extends string | Discriminant<any, any>, U extends UnionSubtypes<keyof U>> = {
    [K in keyof U]: Record<inferRawDiscriminant<D>, K> & inferRawObject<U[K]>;
}[keyof U];
export declare type inferParsedUnion<D extends string | Discriminant<any, any>, U extends UnionSubtypes<keyof U>> = {
    [K in keyof U]: Record<inferParsedDiscriminant<D>, K> & inferParsedObject<U[K]>;
}[keyof U];
export declare type inferRawDiscriminant<D extends string | Discriminant<any, any>> = D extends string ? D : D extends Discriminant<infer Raw, any> ? Raw : never;
export declare type inferParsedDiscriminant<D extends string | Discriminant<any, any>> = D extends string ? D : D extends Discriminant<any, infer Parsed> ? Parsed : never;
",
                        "name": "types.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
",
                        "name": "types.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { ObjectLikeSchema } from \\"../object-like\\";
import { Discriminant } from \\"./discriminant\\";
import { inferParsedUnion, inferRawUnion, UnionSubtypes } from \\"./types\\";
export declare function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(discriminant: D, union: U): ObjectLikeSchema<inferRawUnion<D, U>, inferParsedUnion<D, U>>;
",
                        "name": "union.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator[\\"throw\\"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.union = void 0;
const Schema_1 = require(\\"../../Schema\\");
const getErrorMessageForIncorrectType_1 = require(\\"../../utils/getErrorMessageForIncorrectType\\");
const isPlainObject_1 = require(\\"../../utils/isPlainObject\\");
const keys_1 = require(\\"../../utils/keys\\");
const maybeSkipValidation_1 = require(\\"../../utils/maybeSkipValidation\\");
const enum_1 = require(\\"../enum\\");
const object_like_1 = require(\\"../object-like\\");
const schema_utils_1 = require(\\"../schema-utils\\");
function union(discriminant, union) {
    const rawDiscriminant = typeof discriminant === \\"string\\" ? discriminant : discriminant.rawDiscriminant;
    const parsedDiscriminant = typeof discriminant === \\"string\\"
        ? discriminant
        : discriminant.parsedDiscriminant;
    const discriminantValueSchema = (0, enum_1.enum_)((0, keys_1.keys)(union));
    const baseSchema = {
        parse: (raw, opts) => __awaiter(this, void 0, void 0, function* () {
            return transformAndValidateUnion({
                value: raw,
                discriminant: rawDiscriminant,
                transformedDiscriminant: parsedDiscriminant,
                transformDiscriminantValue: (discriminantValue) => {
                    var _a;
                    return discriminantValueSchema.parse(discriminantValue, {
                        allowUnrecognizedEnumValues: opts === null || opts === void 0 ? void 0 : opts.allowUnrecognizedUnionMembers,
                        breadcrumbsPrefix: [...((_a = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a !== void 0 ? _a : []), rawDiscriminant],
                    });
                },
                getAdditionalPropertiesSchema: (discriminantValue) => union[discriminantValue],
                allowUnrecognizedUnionMembers: opts === null || opts === void 0 ? void 0 : opts.allowUnrecognizedUnionMembers,
                transformAdditionalProperties: (additionalProperties, additionalPropertiesSchema) => additionalPropertiesSchema.parse(additionalProperties, opts),
                breadcrumbsPrefix: opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix,
            });
        }),
        json: (parsed, opts) => __awaiter(this, void 0, void 0, function* () {
            return transformAndValidateUnion({
                value: parsed,
                discriminant: parsedDiscriminant,
                transformedDiscriminant: rawDiscriminant,
                transformDiscriminantValue: (discriminantValue) => {
                    var _a;
                    return discriminantValueSchema.json(discriminantValue, {
                        allowUnrecognizedEnumValues: opts === null || opts === void 0 ? void 0 : opts.allowUnrecognizedUnionMembers,
                        breadcrumbsPrefix: [...((_a = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a !== void 0 ? _a : []), parsedDiscriminant],
                    });
                },
                getAdditionalPropertiesSchema: (discriminantValue) => union[discriminantValue],
                allowUnrecognizedUnionMembers: opts === null || opts === void 0 ? void 0 : opts.allowUnrecognizedUnionMembers,
                transformAdditionalProperties: (additionalProperties, additionalPropertiesSchema) => additionalPropertiesSchema.json(additionalProperties, opts),
                breadcrumbsPrefix: opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix,
            });
        }),
        getType: () => Schema_1.SchemaType.UNION,
    };
    return Object.assign(Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema)), (0, object_like_1.getObjectLikeUtils)(baseSchema));
}
exports.union = union;
function transformAndValidateUnion({ value, discriminant, transformedDiscriminant, transformDiscriminantValue, getAdditionalPropertiesSchema, allowUnrecognizedUnionMembers = false, transformAdditionalProperties, breadcrumbsPrefix = [], }) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!(0, isPlainObject_1.isPlainObject)(value)) {
            return {
                ok: false,
                errors: [
                    {
                        path: breadcrumbsPrefix,
                        message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, \\"object\\"),
                    },
                ],
            };
        }
        const _a = value, _b = discriminant, discriminantValue = _a[_b], additionalProperties = __rest(_a, [typeof _b === \\"symbol\\" ? _b : _b + \\"\\"]);
        if (discriminantValue == null) {
            return {
                ok: false,
                errors: [
                    {
                        path: breadcrumbsPrefix,
                        message: \`Missing discriminant (\\"\${discriminant}\\")\`,
                    },
                ],
            };
        }
        const transformedDiscriminantValue = yield transformDiscriminantValue(discriminantValue);
        if (!transformedDiscriminantValue.ok) {
            return {
                ok: false,
                errors: transformedDiscriminantValue.errors,
            };
        }
        const additionalPropertiesSchema = getAdditionalPropertiesSchema(transformedDiscriminantValue.value);
        if (additionalPropertiesSchema == null) {
            if (allowUnrecognizedUnionMembers) {
                return {
                    ok: true,
                    value: Object.assign({ [transformedDiscriminant]: transformedDiscriminantValue.value }, additionalProperties),
                };
            }
            else {
                return {
                    ok: false,
                    errors: [
                        {
                            path: [...breadcrumbsPrefix, discriminant],
                            message: \\"Unexpected discriminant value\\",
                        },
                    ],
                };
            }
        }
        const transformedAdditionalProperties = yield transformAdditionalProperties(additionalProperties, additionalPropertiesSchema);
        if (!transformedAdditionalProperties.ok) {
            return transformedAdditionalProperties;
        }
        return {
            ok: true,
            value: Object.assign({ [transformedDiscriminant]: discriminantValue }, transformedAdditionalProperties.value),
        };
    });
}
",
                        "name": "union.js",
                        "type": "file",
                      },
                    ],
                    "name": "union",
                    "type": "directory",
                  },
                ],
                "name": "builders",
                "type": "directory",
              },
              Object {
                "contents": "export * from \\"./builders\\";
export type { inferParsed, inferRaw, Schema, SchemaOptions } from \\"./Schema\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
              Object {
                "contents": "\\"use strict\\";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || (\\"get\\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== \\"default\\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
__exportStar(require(\\"./builders\\"), exports);
",
                "name": "index.js",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export declare type MaybePromise<T> = T | Promise<T>;
",
                    "name": "MaybePromise.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
",
                    "name": "MaybePromise.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export declare type addQuestionMarksToNullableProperties<T> = {
    [K in OptionalKeys<T>]?: T[K];
} & Pick<T, RequiredKeys<T>>;
export declare type OptionalKeys<T> = {
    [K in keyof T]-?: undefined extends T[K] ? K : null extends T[K] ? K : 1 extends (any extends T[K] ? 0 : 1) ? never : K;
}[keyof T];
export declare type RequiredKeys<T> = Exclude<keyof T, OptionalKeys<T>>;
",
                    "name": "addQuestionMarksToNullableProperties.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
",
                    "name": "addQuestionMarksToNullableProperties.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MaybeValid, Schema, SchemaOptions, SchemaType } from \\"../Schema\\";
export declare function createIdentitySchemaCreator<T>(schemaType: SchemaType, validate: (value: unknown, opts?: SchemaOptions) => MaybeValid<T>): () => Schema<T, T>;
",
                    "name": "createIdentitySchemaCreator.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.createIdentitySchemaCreator = void 0;
const schema_utils_1 = require(\\"../builders/schema-utils\\");
const maybeSkipValidation_1 = require(\\"./maybeSkipValidation\\");
function createIdentitySchemaCreator(schemaType, validate) {
    return () => {
        const baseSchema = {
            parse: validate,
            json: validate,
            getType: () => schemaType,
        };
        return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema));
    };
}
exports.createIdentitySchemaCreator = createIdentitySchemaCreator;
",
                    "name": "createIdentitySchemaCreator.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export declare function entries<T>(object: T): [keyof T, T[keyof T]][];
",
                    "name": "entries.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.entries = void 0;
function entries(object) {
    return Object.entries(object);
}
exports.entries = entries;
",
                    "name": "entries.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export declare function filterObject<T, K extends keyof T>(obj: T, keysToInclude: K[]): Pick<T, K>;
",
                    "name": "filterObject.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.filterObject = void 0;
function filterObject(obj, keysToInclude) {
    const keysToIncludeSet = new Set(keysToInclude);
    return Object.entries(obj).reduce((acc, [key, value]) => {
        if (keysToIncludeSet.has(key)) {
            acc[key] = value;
        }
        return acc;
        // eslint-disable-next-line @typescript-eslint/prefer-reduce-type-parameter
    }, {});
}
exports.filterObject = filterObject;
",
                    "name": "filterObject.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export declare function getErrorMessageForIncorrectType(value: unknown, expectedType: string): string;
",
                    "name": "getErrorMessageForIncorrectType.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.getErrorMessageForIncorrectType = void 0;
function getErrorMessageForIncorrectType(value, expectedType) {
    return \`Expected \${expectedType}. Received \${getTypeAsString(value)}.\`;
}
exports.getErrorMessageForIncorrectType = getErrorMessageForIncorrectType;
function getTypeAsString(value) {
    if (Array.isArray(value)) {
        return \\"list\\";
    }
    if (value === null) {
        return \\"null\\";
    }
    switch (typeof value) {
        case \\"string\\":
            return \`\\"\${value}\\"\`;
        case \\"number\\":
        case \\"boolean\\":
        case \\"undefined\\":
            return \`\${value}\`;
    }
    return typeof value;
}
",
                    "name": "getErrorMessageForIncorrectType.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export declare function isPlainObject(value: unknown): value is Record<string, unknown>;
",
                    "name": "isPlainObject.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.isPlainObject = void 0;
// borrowed from https://github.com/lodash/lodash/blob/master/isPlainObject.js
function isPlainObject(value) {
    if (typeof value !== \\"object\\" || value === null) {
        return false;
    }
    if (Object.getPrototypeOf(value) === null) {
        return true;
    }
    let proto = value;
    while (Object.getPrototypeOf(proto) !== null) {
        proto = Object.getPrototypeOf(proto);
    }
    return Object.getPrototypeOf(value) === proto;
}
exports.isPlainObject = isPlainObject;
",
                    "name": "isPlainObject.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export declare function keys<T>(object: T): (keyof T)[];
",
                    "name": "keys.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.keys = void 0;
function keys(object) {
    return Object.keys(object);
}
exports.keys = keys;
",
                    "name": "keys.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { BaseSchema } from \\"../Schema\\";
export declare function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S;
",
                    "name": "maybeSkipValidation.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator[\\"throw\\"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.maybeSkipValidation = void 0;
function maybeSkipValidation(schema) {
    return Object.assign(Object.assign({}, schema), { json: transformAndMaybeSkipValidation(schema.json), parse: transformAndMaybeSkipValidation(schema.parse) });
}
exports.maybeSkipValidation = maybeSkipValidation;
function transformAndMaybeSkipValidation(transform) {
    return (value, opts) => __awaiter(this, void 0, void 0, function* () {
        const transformed = yield transform(value, opts);
        const { skipValidation = false } = opts !== null && opts !== void 0 ? opts : {};
        if (!transformed.ok && skipValidation) {
            // eslint-disable-next-line no-console
            console.warn([
                \\"Failed to validate.\\",
                ...transformed.errors.map((error) => \\"  - \\" +
                    (error.path.length > 0 ? \`\${error.path.join(\\".\\")}: \${error.message}\` : error.message)),
            ].join(\\"\\\\n\\"));
            return {
                ok: true,
                value: value,
            };
        }
        else {
            return transformed;
        }
    });
}
",
                    "name": "maybeSkipValidation.js",
                    "type": "file",
                  },
                  Object {
                    "contents": "export declare function partition<T>(items: readonly T[], predicate: (item: T) => boolean): [T[], T[]];
",
                    "name": "partition.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.partition = void 0;
function partition(items, predicate) {
    const trueItems = [], falseItems = [];
    for (const item of items) {
        if (predicate(item)) {
            trueItems.push(item);
        }
        else {
            falseItems.push(item);
        }
    }
    return [trueItems, falseItems];
}
exports.partition = partition;
",
                    "name": "partition.js",
                    "type": "file",
                  },
                ],
                "name": "utils",
                "type": "directory",
              },
            ],
            "name": "schemas",
            "type": "directory",
          },
        ],
        "name": "core",
        "type": "directory",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export declare class FernApiError extends Error {
    readonly statusCode?: number;
    readonly body?: unknown;
    constructor({ message, statusCode, body }: {
        message?: string;
        statusCode?: number;
        body?: unknown;
    });
}
",
            "name": "FernApiError.d.ts",
            "type": "file",
          },
          Object {
            "contents": "\\"use strict\\";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.FernApiError = void 0;
class FernApiError extends Error {
    constructor({ message, statusCode, body }) {
        super(buildMessage({ message, statusCode, body }));
        Object.setPrototypeOf(this, FernApiError.prototype);
        if (statusCode != null) {
            this.statusCode = statusCode;
        }
        if (body !== undefined) {
            this.body = body;
        }
    }
}
exports.FernApiError = FernApiError;
function buildMessage({ message, statusCode, body, }) {
    let lines = [];
    if (message != null) {
        lines.push(message);
    }
    if (statusCode != null) {
        lines.push(\`Status code: \${statusCode.toString()}\`);
    }
    if (body != null) {
        lines.push(\`Body: \${JSON.stringify(body, undefined, 2)}\`);
    }
    return lines.join(\\"\\\\n\\");
}
",
            "name": "FernApiError.js",
            "type": "file",
          },
          Object {
            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export declare class FernApiTimeoutError extends Error {
    constructor();
}
",
            "name": "FernApiTimeoutError.d.ts",
            "type": "file",
          },
          Object {
            "contents": "\\"use strict\\";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.FernApiTimeoutError = void 0;
class FernApiTimeoutError extends Error {
    constructor() {
        super(\\"Timeout\\");
        Object.setPrototypeOf(this, FernApiTimeoutError.prototype);
    }
}
exports.FernApiTimeoutError = FernApiTimeoutError;
",
            "name": "FernApiTimeoutError.js",
            "type": "file",
          },
          Object {
            "contents": "export { FernApiError } from \\"./FernApiError\\";
export { FernApiTimeoutError } from \\"./FernApiTimeoutError\\";
",
            "name": "index.d.ts",
            "type": "file",
          },
          Object {
            "contents": "\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.FernApiTimeoutError = exports.FernApiError = void 0;
var FernApiError_1 = require(\\"./FernApiError\\");
Object.defineProperty(exports, \\"FernApiError\\", { enumerable: true, get: function () { return FernApiError_1.FernApiError; } });
var FernApiTimeoutError_1 = require(\\"./FernApiTimeoutError\\");
Object.defineProperty(exports, \\"FernApiTimeoutError\\", { enumerable: true, get: function () { return FernApiTimeoutError_1.FernApiTimeoutError; } });
",
            "name": "index.js",
            "type": "file",
          },
        ],
        "name": "errors",
        "type": "directory",
      },
      Object {
        "contents": "export * as FernApi from \\"./api\\";
export { FernApiClient } from \\"./Client\\";
export { FernApiError, FernApiTimeoutError } from \\"./errors\\";
",
        "name": "index.d.ts",
        "type": "file",
      },
      Object {
        "contents": "\\"use strict\\";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || (\\"get\\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, \\"default\\", { enumerable: true, value: v });
}) : function(o, v) {
    o[\\"default\\"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== \\"default\\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.FernApiTimeoutError = exports.FernApiError = exports.FernApiClient = exports.FernApi = void 0;
exports.FernApi = __importStar(require(\\"./api\\"));
var Client_1 = require(\\"./Client\\");
Object.defineProperty(exports, \\"FernApiClient\\", { enumerable: true, get: function () { return Client_1.FernApiClient; } });
var errors_1 = require(\\"./errors\\");
Object.defineProperty(exports, \\"FernApiError\\", { enumerable: true, get: function () { return errors_1.FernApiError; } });
Object.defineProperty(exports, \\"FernApiTimeoutError\\", { enumerable: true, get: function () { return errors_1.FernApiTimeoutError; } });
",
        "name": "index.js",
        "type": "file",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "export * from \\"./resources\\";
",
            "name": "index.d.ts",
            "type": "file",
          },
          Object {
            "contents": "\\"use strict\\";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || (\\"get\\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== \\"default\\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
__exportStar(require(\\"./resources\\"), exports);
",
            "name": "index.js",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": Array [
                  Object {
                    "contents": "export * from \\"./types\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "\\"use strict\\";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || (\\"get\\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== \\"default\\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
__exportStar(require(\\"./types\\"), exports);
",
                    "name": "index.js",
                    "type": "file",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as FernApi from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const MyUnion: core.serialization.Schema<serializers.MyUnion.Raw, FernApi.MyUnion>;
export declare namespace MyUnion {
    type Raw = string | string[] | number | number[] | number[][];
}
",
                        "name": "MyUnion.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || (\\"get\\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, \\"default\\", { enumerable: true, value: v });
}) : function(o, v) {
    o[\\"default\\"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== \\"default\\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.MyUnion = void 0;
const core = __importStar(require(\\"../../../../core\\"));
exports.MyUnion = core.serialization.undiscriminatedUnion([
    core.serialization.string(),
    core.serialization.list(core.serialization.string()),
    core.serialization.number(),
    core.serialization.list(core.serialization.number()),
    core.serialization.list(core.serialization.list(core.serialization.number())),
]);
",
                        "name": "MyUnion.js",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * from \\"./MyUnion\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "\\"use strict\\";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || (\\"get\\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== \\"default\\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
__exportStar(require(\\"./MyUnion\\"), exports);
",
                        "name": "index.js",
                        "type": "file",
                      },
                    ],
                    "name": "types",
                    "type": "directory",
                  },
                ],
                "name": "file",
                "type": "directory",
              },
              Object {
                "contents": "export * as file from \\"./file\\";
export * from \\"./file/types\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
              Object {
                "contents": "\\"use strict\\";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || (\\"get\\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, \\"default\\", { enumerable: true, value: v });
}) : function(o, v) {
    o[\\"default\\"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== \\"default\\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== \\"default\\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, \\"__esModule\\", { value: true });
exports.file = void 0;
exports.file = __importStar(require(\\"./file\\"));
__exportStar(require(\\"./file/types\\"), exports);
",
                "name": "index.js",
                "type": "file",
              },
            ],
            "name": "resources",
            "type": "directory",
          },
        ],
        "name": "serialization",
        "type": "directory",
      },
    ],
    "name": "dist",
    "type": "directory",
  },
  Object {
    "contents": "{
    \\"name\\": \\"@fern/api\\",
    \\"version\\": \\"0.0.1\\",
    \\"repository\\": \\"https://github.com/fern/api}\\",
    \\"main\\": \\"./index.js\\",
    \\"types\\": \\"./index.d.ts\\",
    \\"scripts\\": {
        \\"format\\": \\"prettier --write 'src/**/*.ts'\\",
        \\"build\\": \\"tsc\\",
        \\"prepack\\": \\"cp -rv dist/. .\\"
    },
    \\"dependencies\\": {
        \\"@ungap/url-search-params\\": \\"0.2.2\\",
        \\"axios\\": \\"1.4.0\\"
    },
    \\"devDependencies\\": {
        \\"@types/node\\": \\"17.0.33\\",
        \\"prettier\\": \\"2.7.1\\",
        \\"typescript\\": \\"4.6.4\\"
    }
}
",
    "name": "package.json",
    "type": "file",
  },
  Object {
    "contents": Array [
      Object {
        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from \\"./core\\";
import { File_ } from \\"./api/resources/file/client/Client\\";

export declare namespace FernApiClient {
    interface Options {
        environment: core.Supplier<string>;
    }

    interface RequestOptions {
        timeoutInSeconds?: number;
    }
}

export class FernApiClient {
    constructor(protected readonly _options: FernApiClient.Options) {}

    protected _file: File_ | undefined;

    public get file(): File_ {
        return (this._file ??= new File_(this._options));
    }
}
",
        "name": "Client.ts",
        "type": "file",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "export * from \\"./resources\\";
",
            "name": "index.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": Array [
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from \\"../../../../core\\";
import * as FernApi from \\"../../..\\";
import * as serializers from \\"../../../../serialization\\";
import * as errors from \\"../../../../errors\\";

export declare namespace File_ {
    interface Options {
        environment: core.Supplier<string>;
    }

    interface RequestOptions {
        timeoutInSeconds?: number;
    }
}

export class File_ {
    constructor(protected readonly _options: File_.Options) {}

    public async get(request: FernApi.MyUnion, _requestOptions?: File_.RequestOptions): Promise<FernApi.MyUnion> {
        const _response = await core.fetcher({
            url: await core.Supplier.get(this._options.environment),
            method: \\"POST\\",
            headers: {
                \\"X-Fern-Language\\": \\"JavaScript\\",
                \\"X-Fern-SDK-Name\\": \\"@fern/api\\",
                \\"X-Fern-SDK-Version\\": \\"0.0.1\\",
            },
            contentType: \\"application/json\\",
            body: await serializers.MyUnion.jsonOrThrow(request, { unrecognizedObjectKeys: \\"strip\\" }),
            timeoutMs:
                _requestOptions?.timeoutInSeconds !== undefined ? _requestOptions.timeoutInSeconds * 1000 : 60000,
        });
        if (_response.ok) {
            return await serializers.MyUnion.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: \\"passthrough\\",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: [\\"response\\"],
            });
        }

        if (_response.error.reason === \\"status-code\\") {
            throw new errors.FernApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case \\"non-json\\":
                throw new errors.FernApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case \\"timeout\\":
                throw new errors.FernApiTimeoutError();
            case \\"unknown\\":
                throw new errors.FernApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
",
                        "name": "Client.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export {};
",
                        "name": "index.ts",
                        "type": "file",
                      },
                    ],
                    "name": "client",
                    "type": "directory",
                  },
                  Object {
                    "contents": "export * from \\"./types\\";
export * from \\"./client\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export type MyUnion = string | string[] | number | number[] | number[][];
",
                        "name": "MyUnion.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * from \\"./MyUnion\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                    ],
                    "name": "types",
                    "type": "directory",
                  },
                ],
                "name": "file",
                "type": "directory",
              },
              Object {
                "contents": "export * as file from \\"./file\\";
export * from \\"./file/types\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "resources",
            "type": "directory",
          },
        ],
        "name": "api",
        "type": "directory",
      },
      Object {
        "contents": Array [
          Object {
            "contents": Array [
              Object {
                "contents": "export type APIResponse<Success, Failure> = SuccessfulResponse<Success> | FailedResponse<Failure>;

export interface SuccessfulResponse<T> {
    ok: true;
    body: T;
}

export interface FailedResponse<T> {
    ok: false;
    error: T;
}
",
                "name": "APIResponse.ts",
                "type": "file",
              },
              Object {
                "contents": "import { default as URLSearchParams } from \\"@ungap/url-search-params\\";
import axios, { AxiosAdapter, AxiosError, AxiosProgressEvent } from \\"axios\\";
import { APIResponse } from \\"./APIResponse\\";

export type FetchFunction = <R = unknown>(args: Fetcher.Args) => Promise<APIResponse<R, Fetcher.Error>>;

export declare namespace Fetcher {
    export interface Args {
        url: string;
        method: string;
        contentType?: string;
        headers?: Record<string, string | undefined>;
        queryParameters?: URLSearchParams;
        body?: unknown;
        timeoutMs?: number;
        withCredentials?: boolean;
        responseType?: \\"json\\" | \\"blob\\";
        adapter?: AxiosAdapter;
        onUploadProgress?: (event: AxiosProgressEvent) => void;
    }

    export type Error = FailedStatusCodeError | NonJsonError | TimeoutError | UnknownError;

    export interface FailedStatusCodeError {
        reason: \\"status-code\\";
        statusCode: number;
        body: unknown;
    }

    export interface NonJsonError {
        reason: \\"non-json\\";
        statusCode: number;
        rawBody: string;
    }

    export interface TimeoutError {
        reason: \\"timeout\\";
    }

    export interface UnknownError {
        reason: \\"unknown\\";
        errorMessage: string;
    }
}

async function fetcherImpl<R = unknown>(args: Fetcher.Args): Promise<APIResponse<R, Fetcher.Error>> {
    const headers: Record<string, string> = {};
    if (args.body !== undefined && args.contentType != null) {
        headers[\\"Content-Type\\"] = args.contentType;
    }

    if (args.headers != null) {
        for (const [key, value] of Object.entries(args.headers)) {
            if (value != null) {
                headers[key] = value;
            }
        }
    }

    try {
        const response = await axios({
            url: args.url,
            params: args.queryParameters,
            method: args.method,
            headers,
            data: args.body,
            validateStatus: () => true,
            transformResponse: (response) => response,
            timeout: args.timeoutMs,
            transitional: {
                clarifyTimeoutError: true,
            },
            withCredentials: args.withCredentials,
            adapter: args.adapter,
            onUploadProgress: args.onUploadProgress,
            maxBodyLength: Infinity,
            maxContentLength: Infinity,
            responseType: args.responseType ?? \\"json\\",
        });

        let body: unknown;
        if (args.responseType === \\"blob\\") {
            body = response.data;
        } else if (response.data != null && response.data.length > 0) {
            try {
                body = JSON.parse(response.data) ?? undefined;
            } catch {
                return {
                    ok: false,
                    error: {
                        reason: \\"non-json\\",
                        statusCode: response.status,
                        rawBody: response.data,
                    },
                };
            }
        }

        if (response.status >= 200 && response.status < 400) {
            return {
                ok: true,
                body: body as R,
            };
        } else {
            return {
                ok: false,
                error: {
                    reason: \\"status-code\\",
                    statusCode: response.status,
                    body,
                },
            };
        }
    } catch (error) {
        if ((error as AxiosError).code === \\"ETIMEDOUT\\") {
            return {
                ok: false,
                error: {
                    reason: \\"timeout\\",
                },
            };
        }

        return {
            ok: false,
            error: {
                reason: \\"unknown\\",
                errorMessage: (error as AxiosError).message,
            },
        };
    }
}

export const fetcher: FetchFunction = fetcherImpl;
",
                "name": "Fetcher.ts",
                "type": "file",
              },
              Object {
                "contents": "export type Supplier<T> = T | Promise<T> | (() => T | Promise<T>);

export const Supplier = {
    get: async <T>(supplier: Supplier<T>): Promise<T> => {
        if (typeof supplier === \\"function\\") {
            return (supplier as () => T)();
        } else {
            return supplier;
        }
    },
};
",
                "name": "Supplier.ts",
                "type": "file",
              },
              Object {
                "contents": "export type { APIResponse } from \\"./APIResponse\\";
export { fetcher } from \\"./Fetcher\\";
export type { Fetcher, FetchFunction } from \\"./Fetcher\\";
export { Supplier } from \\"./Supplier\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "fetcher",
            "type": "directory",
          },
          Object {
            "contents": "export * from \\"./fetcher\\";
export * as serialization from \\"./schemas\\";
",
            "name": "index.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "import { SchemaUtils } from \\"./builders\\";
import { MaybePromise } from \\"./utils/MaybePromise\\";

export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;

export type inferRaw<S extends Schema> = S extends Schema<infer Raw, any> ? Raw : never;
export type inferParsed<S extends Schema> = S extends Schema<any, infer Parsed> ? Parsed : never;

export interface BaseSchema<Raw, Parsed> {
    parse: (raw: unknown, opts?: SchemaOptions) => MaybePromise<MaybeValid<Parsed>>;
    json: (parsed: unknown, opts?: SchemaOptions) => MaybePromise<MaybeValid<Raw>>;
    getType: () => SchemaType | Promise<SchemaType>;
}

export const SchemaType = {
    DATE: \\"date\\",
    ENUM: \\"enum\\",
    LIST: \\"list\\",
    STRING_LITERAL: \\"stringLiteral\\",
    OBJECT: \\"object\\",
    ANY: \\"any\\",
    BOOLEAN: \\"boolean\\",
    NUMBER: \\"number\\",
    STRING: \\"string\\",
    UNKNOWN: \\"unknown\\",
    RECORD: \\"record\\",
    SET: \\"set\\",
    UNION: \\"union\\",
    UNDISCRIMINATED_UNION: \\"undiscriminatedUnion\\",
    OPTIONAL: \\"optional\\",
} as const;
export type SchemaType = typeof SchemaType[keyof typeof SchemaType];

export type MaybeValid<T> = Valid<T> | Invalid;

export interface Valid<T> {
    ok: true;
    value: T;
}

export interface Invalid {
    ok: false;
    errors: ValidationError[];
}

export interface ValidationError {
    path: string[];
    message: string;
}

export interface SchemaOptions {
    /**
     * how to handle unrecognized keys in objects
     *
     * @default \\"fail\\"
     */
    unrecognizedObjectKeys?: \\"fail\\" | \\"passthrough\\" | \\"strip\\";

    /**
     * whether to fail when an unrecognized discriminant value is
     * encountered in a union
     *
     * @default false
     */
    allowUnrecognizedUnionMembers?: boolean;

    /**
     * whether to fail when an unrecognized enum value is encountered
     *
     * @default false
     */
    allowUnrecognizedEnumValues?: boolean;

    /**
     * whether to allow data that doesn't conform to the schema.
     * invalid data is passed through without transformation.
     *
     * when this is enabled, .parse() and .json() will always
     * return \`ok: true\`. \`.parseOrThrow()\` and \`.jsonOrThrow()\`
     * will never fail.
     *
     * @default false
     */
    skipValidation?: boolean;

    /**
     * each validation failure contains a \\"path\\" property, which is
     * the breadcrumbs to the offending node in the JSON. you can supply
     * a prefix that is prepended to all the errors' paths. this can be
     * helpful for zurg's internal debug logging.
     */
    breadcrumbsPrefix?: string[];
}
",
                "name": "Schema.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { BaseSchema, Schema, SchemaType } from \\"../../Schema\\";
import { getErrorMessageForIncorrectType } from \\"../../utils/getErrorMessageForIncorrectType\\";
import { maybeSkipValidation } from \\"../../utils/maybeSkipValidation\\";
import { getSchemaUtils } from \\"../schema-utils\\";

// https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
const ISO_8601_REGEX =
    /^([+-]?\\\\d{4}(?!\\\\d{2}\\\\b))((-?)((0[1-9]|1[0-2])(\\\\3([12]\\\\d|0[1-9]|3[01]))?|W([0-4]\\\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\\\d|[12]\\\\d{2}|3([0-5]\\\\d|6[1-6])))([T\\\\s]((([01]\\\\d|2[0-3])((:?)[0-5]\\\\d)?|24:?00)([.,]\\\\d+(?!:))?)?(\\\\17[0-5]\\\\d([.,]\\\\d+)?)?([zZ]|([+-])([01]\\\\d|2[0-3]):?([0-5]\\\\d)?)?)?)?$/;

export function date(): Schema<string, Date> {
    const baseSchema: BaseSchema<string, Date> = {
        parse: (raw, { breadcrumbsPrefix = [] } = {}) => {
            if (typeof raw !== \\"string\\") {
                return {
                    ok: false,
                    errors: [
                        {
                            path: breadcrumbsPrefix,
                            message: getErrorMessageForIncorrectType(raw, \\"string\\"),
                        },
                    ],
                };
            }
            if (!ISO_8601_REGEX.test(raw)) {
                return {
                    ok: false,
                    errors: [
                        {
                            path: breadcrumbsPrefix,
                            message: getErrorMessageForIncorrectType(raw, \\"ISO 8601 date string\\"),
                        },
                    ],
                };
            }
            return {
                ok: true,
                value: new Date(raw),
            };
        },
        json: (date, { breadcrumbsPrefix = [] } = {}) => {
            if (date instanceof Date) {
                return {
                    ok: true,
                    value: date.toISOString(),
                };
            } else {
                return {
                    ok: false,
                    errors: [
                        {
                            path: breadcrumbsPrefix,
                            message: getErrorMessageForIncorrectType(date, \\"Date object\\"),
                        },
                    ],
                };
            }
        },
        getType: () => SchemaType.DATE,
    };

    return {
        ...maybeSkipValidation(baseSchema),
        ...getSchemaUtils(baseSchema),
    };
}
",
                        "name": "date.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { date } from \\"./date\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                    ],
                    "name": "date",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { Schema, SchemaType } from \\"../../Schema\\";
import { createIdentitySchemaCreator } from \\"../../utils/createIdentitySchemaCreator\\";
import { getErrorMessageForIncorrectType } from \\"../../utils/getErrorMessageForIncorrectType\\";

export function enum_<U extends string, E extends U[]>(values: E): Schema<E[number], E[number]> {
    const validValues = new Set<string>(values);

    const schemaCreator = createIdentitySchemaCreator(
        SchemaType.ENUM,
        (value, { allowUnrecognizedEnumValues, breadcrumbsPrefix = [] } = {}) => {
            if (typeof value !== \\"string\\") {
                return {
                    ok: false,
                    errors: [
                        {
                            path: breadcrumbsPrefix,
                            message: getErrorMessageForIncorrectType(value, \\"string\\"),
                        },
                    ],
                };
            }

            if (!validValues.has(value) && !allowUnrecognizedEnumValues) {
                return {
                    ok: false,
                    errors: [
                        {
                            path: breadcrumbsPrefix,
                            message: getErrorMessageForIncorrectType(value, \\"enum\\"),
                        },
                    ],
                };
            }

            return {
                ok: true,
                value: value as U,
            };
        }
    );

    return schemaCreator();
}
",
                        "name": "enum.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { enum_ } from \\"./enum\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                    ],
                    "name": "enum",
                    "type": "directory",
                  },
                  Object {
                    "contents": "export * from \\"./date\\";
export * from \\"./enum\\";
export * from \\"./lazy\\";
export * from \\"./list\\";
export * from \\"./literals\\";
export * from \\"./object\\";
export * from \\"./object-like\\";
export * from \\"./primitives\\";
export * from \\"./record\\";
export * from \\"./schema-utils\\";
export * from \\"./set\\";
export * from \\"./undiscriminated-union\\";
export * from \\"./union\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export { lazy } from \\"./lazy\\";
export type { SchemaGetter } from \\"./lazy\\";
export { lazyObject } from \\"./lazyObject\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { BaseSchema, Schema } from \\"../../Schema\\";
import { getSchemaUtils } from \\"../schema-utils\\";

export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType | Promise<SchemaType>;

export function lazy<Raw, Parsed>(getter: SchemaGetter<Schema<Raw, Parsed>>): Schema<Raw, Parsed> {
    const baseSchema = constructLazyBaseSchema(getter);
    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
    };
}

export function constructLazyBaseSchema<Raw, Parsed>(
    getter: SchemaGetter<Schema<Raw, Parsed>>
): BaseSchema<Raw, Parsed> {
    return {
        parse: async (raw, opts) => (await getMemoizedSchema(getter)).parse(raw, opts),
        json: async (parsed, opts) => (await getMemoizedSchema(getter)).json(parsed, opts),
        getType: async () => (await getMemoizedSchema(getter)).getType(),
    };
}

type MemoizedGetter<SchemaType extends Schema<any, any>> = SchemaGetter<SchemaType> & { __zurg_memoized?: SchemaType };

export async function getMemoizedSchema<SchemaType extends Schema<any, any>>(
    getter: SchemaGetter<SchemaType>
): Promise<SchemaType> {
    const castedGetter = getter as MemoizedGetter<SchemaType>;
    if (castedGetter.__zurg_memoized == null) {
        castedGetter.__zurg_memoized = await getter();
    }
    return castedGetter.__zurg_memoized;
}
",
                        "name": "lazy.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { getObjectUtils } from \\"../object\\";
import { getObjectLikeUtils } from \\"../object-like\\";
import { BaseObjectSchema, ObjectSchema } from \\"../object/types\\";
import { getSchemaUtils } from \\"../schema-utils\\";
import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from \\"./lazy\\";

export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
    const baseSchema: BaseObjectSchema<Raw, Parsed> = {
        ...constructLazyBaseSchema(getter),
        _getRawProperties: async () => (await getMemoizedSchema(getter))._getRawProperties(),
        _getParsedProperties: async () => (await getMemoizedSchema(getter))._getParsedProperties(),
    };

    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
        ...getObjectLikeUtils(baseSchema),
        ...getObjectUtils(baseSchema),
    };
}
",
                        "name": "lazyObject.ts",
                        "type": "file",
                      },
                    ],
                    "name": "lazy",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export { list } from \\"./list\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from \\"../../Schema\\";
import { getErrorMessageForIncorrectType } from \\"../../utils/getErrorMessageForIncorrectType\\";
import { MaybePromise } from \\"../../utils/MaybePromise\\";
import { maybeSkipValidation } from \\"../../utils/maybeSkipValidation\\";
import { getSchemaUtils } from \\"../schema-utils\\";

export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
    const baseSchema: BaseSchema<Raw[], Parsed[]> = {
        parse: async (raw, opts) =>
            validateAndTransformArray(raw, (item, index) =>
                schema.parse(item, {
                    ...opts,
                    breadcrumbsPrefix: [...(opts?.breadcrumbsPrefix ?? []), \`[\${index}]\`],
                })
            ),
        json: (parsed, opts) =>
            validateAndTransformArray(parsed, (item, index) =>
                schema.json(item, {
                    ...opts,
                    breadcrumbsPrefix: [...(opts?.breadcrumbsPrefix ?? []), \`[\${index}]\`],
                })
            ),
        getType: () => SchemaType.LIST,
    };

    return {
        ...maybeSkipValidation(baseSchema),
        ...getSchemaUtils(baseSchema),
    };
}

async function validateAndTransformArray<Raw, Parsed>(
    value: unknown,
    transformItem: (item: Raw, index: number) => MaybePromise<MaybeValid<Parsed>>
): Promise<MaybeValid<Parsed[]>> {
    if (!Array.isArray(value)) {
        return {
            ok: false,
            errors: [
                {
                    message: getErrorMessageForIncorrectType(value, \\"list\\"),
                    path: [],
                },
            ],
        };
    }

    const maybeValidItems = await Promise.all(value.map((item, index) => transformItem(item, index)));

    return maybeValidItems.reduce<MaybeValid<Parsed[]>>(
        (acc, item) => {
            if (acc.ok && item.ok) {
                return {
                    ok: true,
                    value: [...acc.value, item.value],
                };
            }

            const errors: ValidationError[] = [];
            if (!acc.ok) {
                errors.push(...acc.errors);
            }
            if (!item.ok) {
                errors.push(...item.errors);
            }

            return {
                ok: false,
                errors,
            };
        },
        { ok: true, value: [] }
    );
}
",
                        "name": "list.ts",
                        "type": "file",
                      },
                    ],
                    "name": "list",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export { stringLiteral } from \\"./stringLiteral\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { Schema, SchemaType } from \\"../../Schema\\";
import { createIdentitySchemaCreator } from \\"../../utils/createIdentitySchemaCreator\\";
import { getErrorMessageForIncorrectType } from \\"../../utils/getErrorMessageForIncorrectType\\";

export function stringLiteral<V extends string>(literal: V): Schema<V, V> {
    const schemaCreator = createIdentitySchemaCreator(
        SchemaType.STRING_LITERAL,
        (value, { breadcrumbsPrefix = [] } = {}) => {
            if (value === literal) {
                return {
                    ok: true,
                    value: literal,
                };
            } else {
                return {
                    ok: false,
                    errors: [
                        {
                            path: breadcrumbsPrefix,
                            message: getErrorMessageForIncorrectType(value, \`\\"\${literal}\\"\`),
                        },
                    ],
                };
            }
        }
    );

    return schemaCreator();
}
",
                        "name": "stringLiteral.ts",
                        "type": "file",
                      },
                    ],
                    "name": "literals",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export { getObjectUtils, object } from \\"./object\\";
export { isProperty, property } from \\"./property\\";
export type { Property } from \\"./property\\";
export type {
    BaseObjectSchema,
    inferObjectSchemaFromPropertySchemas,
    inferParsedObject,
    inferParsedObjectFromPropertySchemas,
    inferParsedPropertySchema,
    inferRawKey,
    inferRawObject,
    inferRawObjectFromPropertySchemas,
    inferRawPropertySchema,
    ObjectSchema,
    ObjectUtils,
    PropertySchemas,
} from \\"./types\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MaybeValid, Schema, SchemaType, ValidationError } from \\"../../Schema\\";
import { entries } from \\"../../utils/entries\\";
import { filterObject } from \\"../../utils/filterObject\\";
import { getErrorMessageForIncorrectType } from \\"../../utils/getErrorMessageForIncorrectType\\";
import { isPlainObject } from \\"../../utils/isPlainObject\\";
import { keys } from \\"../../utils/keys\\";
import { MaybePromise } from \\"../../utils/MaybePromise\\";
import { maybeSkipValidation } from \\"../../utils/maybeSkipValidation\\";
import { partition } from \\"../../utils/partition\\";
import { getObjectLikeUtils } from \\"../object-like\\";
import { getSchemaUtils } from \\"../schema-utils\\";
import { isProperty } from \\"./property\\";
import {
    BaseObjectSchema,
    inferObjectSchemaFromPropertySchemas,
    inferParsedObjectFromPropertySchemas,
    inferRawObjectFromPropertySchemas,
    ObjectSchema,
    ObjectUtils,
    PropertySchemas,
} from \\"./types\\";

interface ObjectPropertyWithRawKey {
    rawKey: string;
    parsedKey: string;
    valueSchema: Schema<any, any>;
}

export function object<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
    schemas: T
): inferObjectSchemaFromPropertySchemas<T> {
    const baseSchema: BaseObjectSchema<
        inferRawObjectFromPropertySchemas<T>,
        inferParsedObjectFromPropertySchemas<T>
    > = {
        _getRawProperties: () =>
            Promise.resolve(
                Object.entries(schemas).map(([parsedKey, propertySchema]) =>
                    isProperty(propertySchema) ? propertySchema.rawKey : parsedKey
                ) as unknown as (keyof inferRawObjectFromPropertySchemas<T>)[]
            ),
        _getParsedProperties: () =>
            Promise.resolve(keys(schemas) as unknown as (keyof inferParsedObjectFromPropertySchemas<T>)[]),

        parse: async (raw, opts) => {
            const rawKeyToProperty: Record<string, ObjectPropertyWithRawKey> = {};
            const requiredKeys: string[] = [];

            for (const [parsedKey, schemaOrObjectProperty] of entries(schemas)) {
                const rawKey = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.rawKey : parsedKey;
                const valueSchema: Schema<any, any> = isProperty(schemaOrObjectProperty)
                    ? schemaOrObjectProperty.valueSchema
                    : schemaOrObjectProperty;

                const property: ObjectPropertyWithRawKey = {
                    rawKey,
                    parsedKey: parsedKey as string,
                    valueSchema,
                };

                rawKeyToProperty[rawKey] = property;

                if (await isSchemaRequired(valueSchema)) {
                    requiredKeys.push(rawKey);
                }
            }

            return validateAndTransformObject({
                value: raw,
                requiredKeys,
                getProperty: (rawKey) => {
                    const property = rawKeyToProperty[rawKey];
                    if (property == null) {
                        return undefined;
                    }
                    return {
                        transformedKey: property.parsedKey,
                        transform: (propertyValue) =>
                            property.valueSchema.parse(propertyValue, {
                                ...opts,
                                breadcrumbsPrefix: [...(opts?.breadcrumbsPrefix ?? []), rawKey],
                            }),
                    };
                },
                unrecognizedObjectKeys: opts?.unrecognizedObjectKeys,
                skipValidation: opts?.skipValidation,
                breadcrumbsPrefix: opts?.breadcrumbsPrefix,
            });
        },

        json: async (parsed, opts) => {
            const requiredKeys: string[] = [];

            for (const [parsedKey, schemaOrObjectProperty] of entries(schemas)) {
                const valueSchema: Schema<any, any> = isProperty(schemaOrObjectProperty)
                    ? schemaOrObjectProperty.valueSchema
                    : schemaOrObjectProperty;

                if (await isSchemaRequired(valueSchema)) {
                    requiredKeys.push(parsedKey as string);
                }
            }

            return validateAndTransformObject({
                value: parsed,
                requiredKeys,
                getProperty: (
                    parsedKey
                ):
                    | { transformedKey: string; transform: (propertyValue: unknown) => MaybePromise<MaybeValid<any>> }
                    | undefined => {
                    const property = schemas[parsedKey as keyof T];

                    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
                    if (property == null) {
                        return undefined;
                    }

                    if (isProperty(property)) {
                        return {
                            transformedKey: property.rawKey,
                            transform: (propertyValue) =>
                                property.valueSchema.json(propertyValue, {
                                    ...opts,
                                    breadcrumbsPrefix: [...(opts?.breadcrumbsPrefix ?? []), parsedKey],
                                }),
                        };
                    } else {
                        return {
                            transformedKey: parsedKey,
                            transform: (propertyValue) =>
                                property.json(propertyValue, {
                                    ...opts,
                                    breadcrumbsPrefix: [...(opts?.breadcrumbsPrefix ?? []), parsedKey],
                                }),
                        };
                    }
                },
                unrecognizedObjectKeys: opts?.unrecognizedObjectKeys,
                skipValidation: opts?.skipValidation,
                breadcrumbsPrefix: opts?.breadcrumbsPrefix,
            });
        },

        getType: () => SchemaType.OBJECT,
    };

    return {
        ...maybeSkipValidation(baseSchema),
        ...getSchemaUtils(baseSchema),
        ...getObjectLikeUtils(baseSchema),
        ...getObjectUtils(baseSchema),
    };
}

async function validateAndTransformObject<Transformed>({
    value,
    requiredKeys,
    getProperty,
    unrecognizedObjectKeys = \\"fail\\",
    skipValidation = false,
    breadcrumbsPrefix = [],
}: {
    value: unknown;
    requiredKeys: string[];
    getProperty: (
        preTransformedKey: string
    ) => { transformedKey: string; transform: (propertyValue: unknown) => MaybePromise<MaybeValid<any>> } | undefined;
    unrecognizedObjectKeys: \\"fail\\" | \\"passthrough\\" | \\"strip\\" | undefined;
    skipValidation: boolean | undefined;
    breadcrumbsPrefix: string[] | undefined;
}): Promise<MaybeValid<Transformed>> {
    if (!isPlainObject(value)) {
        return {
            ok: false,
            errors: [
                {
                    path: breadcrumbsPrefix,
                    message: getErrorMessageForIncorrectType(value, \\"object\\"),
                },
            ],
        };
    }

    const missingRequiredKeys = new Set(requiredKeys);
    const errors: ValidationError[] = [];
    const transformed: Record<string | number | symbol, any> = {};

    for (const [preTransformedKey, preTransformedItemValue] of Object.entries(value)) {
        const property = getProperty(preTransformedKey);

        if (property != null) {
            missingRequiredKeys.delete(preTransformedKey);

            const value = await property.transform(preTransformedItemValue);
            if (value.ok) {
                transformed[property.transformedKey] = value.value;
            } else {
                transformed[preTransformedKey] = preTransformedItemValue;
                errors.push(...value.errors);
            }
        } else {
            switch (unrecognizedObjectKeys) {
                case \\"fail\\":
                    errors.push({
                        path: [...breadcrumbsPrefix, preTransformedKey],
                        message: \`Unexpected key \\"\${preTransformedKey}\\"\`,
                    });
                    break;
                case \\"strip\\":
                    break;
                case \\"passthrough\\":
                    transformed[preTransformedKey] = preTransformedItemValue;
                    break;
            }
        }
    }

    errors.push(
        ...requiredKeys
            .filter((key) => missingRequiredKeys.has(key))
            .map((key) => ({
                path: breadcrumbsPrefix,
                message: \`Missing required key \\"\${key}\\"\`,
            }))
    );

    if (errors.length === 0 || skipValidation) {
        return {
            ok: true,
            value: transformed as Transformed,
        };
    } else {
        return {
            ok: false,
            errors,
        };
    }
}

export function getObjectUtils<Raw, Parsed>(schema: BaseObjectSchema<Raw, Parsed>): ObjectUtils<Raw, Parsed> {
    return {
        extend: <RawExtension, ParsedExtension>(extension: ObjectSchema<RawExtension, ParsedExtension>) => {
            const baseSchema: BaseObjectSchema<Raw & RawExtension, Parsed & ParsedExtension> = {
                _getParsedProperties: async () => [
                    ...(await schema._getParsedProperties()),
                    ...(await extension._getParsedProperties()),
                ],
                _getRawProperties: async () => [
                    ...(await schema._getRawProperties()),
                    ...(await extension._getRawProperties()),
                ],
                parse: async (raw, opts) => {
                    return validateAndTransformExtendedObject({
                        extensionKeys: await extension._getRawProperties(),
                        value: raw,
                        transformBase: (rawBase) => schema.parse(rawBase, opts),
                        transformExtension: (rawExtension) => extension.parse(rawExtension, opts),
                    });
                },
                json: async (parsed, opts) => {
                    return validateAndTransformExtendedObject({
                        extensionKeys: await extension._getParsedProperties(),
                        value: parsed,
                        transformBase: (parsedBase) => schema.json(parsedBase, opts),
                        transformExtension: (parsedExtension) => extension.json(parsedExtension, opts),
                    });
                },
                getType: () => SchemaType.OBJECT,
            };

            return {
                ...baseSchema,
                ...getSchemaUtils(baseSchema),
                ...getObjectLikeUtils(baseSchema),
                ...getObjectUtils(baseSchema),
            };
        },
    };
}

async function validateAndTransformExtendedObject<PreTransformedExtension, TransformedBase, TransformedExtension>({
    extensionKeys,
    value,
    transformBase,
    transformExtension,
}: {
    extensionKeys: (keyof PreTransformedExtension)[];
    value: unknown;
    transformBase: (value: unknown) => MaybePromise<MaybeValid<TransformedBase>>;
    transformExtension: (value: unknown) => MaybePromise<MaybeValid<TransformedExtension>>;
}): Promise<MaybeValid<TransformedBase & TransformedExtension>> {
    const extensionPropertiesSet = new Set(extensionKeys);
    const [extensionProperties, baseProperties] = partition(keys(value), (key) =>
        extensionPropertiesSet.has(key as keyof PreTransformedExtension)
    );

    const transformedBase = await transformBase(filterObject(value, baseProperties));
    const transformedExtension = await transformExtension(filterObject(value, extensionProperties));

    if (transformedBase.ok && transformedExtension.ok) {
        return {
            ok: true,
            value: {
                ...transformedBase.value,
                ...transformedExtension.value,
            },
        };
    } else {
        return {
            ok: false,
            errors: [
                ...(transformedBase.ok ? [] : transformedBase.errors),
                ...(transformedExtension.ok ? [] : transformedExtension.errors),
            ],
        };
    }
}

async function isSchemaRequired(schema: Schema<any, any>): Promise<boolean> {
    return !(await isSchemaOptional(schema));
}

async function isSchemaOptional(schema: Schema<any, any>): Promise<boolean> {
    switch (await schema.getType()) {
        case SchemaType.ANY:
        case SchemaType.UNKNOWN:
        case SchemaType.OPTIONAL:
            return true;
        default:
            return false;
    }
}
",
                        "name": "object.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { Schema } from \\"../../Schema\\";

export function property<RawKey extends string, RawValue, ParsedValue>(
    rawKey: RawKey,
    valueSchema: Schema<RawValue, ParsedValue>
): Property<RawKey, RawValue, ParsedValue> {
    return {
        rawKey,
        valueSchema,
        isProperty: true,
    };
}

export interface Property<RawKey extends string, RawValue, ParsedValue> {
    rawKey: RawKey;
    valueSchema: Schema<RawValue, ParsedValue>;
    isProperty: true;
}

export function isProperty<O extends Property<any, any, any>>(maybeProperty: unknown): maybeProperty is O {
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
    return (maybeProperty as O).isProperty;
}
",
                        "name": "property.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { BaseSchema, inferParsed, inferRaw, Schema } from \\"../../Schema\\";
import { addQuestionMarksToNullableProperties } from \\"../../utils/addQuestionMarksToNullableProperties\\";
import { ObjectLikeUtils } from \\"../object-like\\";
import { SchemaUtils } from \\"../schema-utils\\";
import { Property } from \\"./property\\";

export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
    ObjectLikeUtils<Raw, Parsed> &
    ObjectUtils<Raw, Parsed> &
    SchemaUtils<Raw, Parsed>;

export interface BaseObjectSchema<Raw, Parsed> extends BaseSchema<Raw, Parsed> {
    _getRawProperties: () => Promise<(keyof Raw)[]>;
    _getParsedProperties: () => Promise<(keyof Parsed)[]>;
}

export interface ObjectUtils<Raw, Parsed> {
    extend: <RawExtension, ParsedExtension>(
        schemas: ObjectSchema<RawExtension, ParsedExtension>
    ) => ObjectSchema<Raw & RawExtension, Parsed & ParsedExtension>;
}

export type inferRawObject<O extends ObjectSchema<any, any>> = O extends ObjectSchema<infer Raw, any> ? Raw : never;

export type inferParsedObject<O extends ObjectSchema<any, any>> = O extends ObjectSchema<any, infer Parsed>
    ? Parsed
    : never;

export type inferObjectSchemaFromPropertySchemas<T extends PropertySchemas<keyof T>> = ObjectSchema<
    inferRawObjectFromPropertySchemas<T>,
    inferParsedObjectFromPropertySchemas<T>
>;

export type inferRawObjectFromPropertySchemas<T extends PropertySchemas<keyof T>> =
    addQuestionMarksToNullableProperties<{
        [ParsedKey in keyof T as inferRawKey<ParsedKey, T[ParsedKey]>]: inferRawPropertySchema<T[ParsedKey]>;
    }>;

export type inferParsedObjectFromPropertySchemas<T extends PropertySchemas<keyof T>> =
    addQuestionMarksToNullableProperties<{
        [K in keyof T]: inferParsedPropertySchema<T[K]>;
    }>;

export type PropertySchemas<ParsedKeys extends string | number | symbol> = Record<
    ParsedKeys,
    Property<any, any, any> | Schema<any, any>
>;

export type inferRawPropertySchema<P extends Property<any, any, any> | Schema<any, any>> = P extends Property<
    any,
    infer Raw,
    any
>
    ? Raw
    : P extends Schema<any, any>
    ? inferRaw<P>
    : never;

export type inferParsedPropertySchema<P extends Property<any, any, any> | Schema<any, any>> = P extends Property<
    any,
    any,
    infer Parsed
>
    ? Parsed
    : P extends Schema<any, any>
    ? inferParsed<P>
    : never;

export type inferRawKey<
    ParsedKey extends string | number | symbol,
    P extends Property<any, any, any> | Schema<any, any>
> = P extends Property<infer Raw, any, any> ? Raw : ParsedKey;
",
                        "name": "types.ts",
                        "type": "file",
                      },
                    ],
                    "name": "object",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { BaseSchema } from \\"../../Schema\\";
import { filterObject } from \\"../../utils/filterObject\\";
import { getErrorMessageForIncorrectType } from \\"../../utils/getErrorMessageForIncorrectType\\";
import { isPlainObject } from \\"../../utils/isPlainObject\\";
import { getSchemaUtils } from \\"../schema-utils\\";
import { ObjectLikeSchema, ObjectLikeUtils } from \\"./types\\";

export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
    return {
        withParsedProperties: (properties) => withParsedProperties(schema, properties),
    };
}

/**
 * object-like utils are defined in one file to resolve issues with circular imports
 */

export function withParsedProperties<RawObjectShape, ParsedObjectShape, Properties>(
    objectLike: BaseSchema<RawObjectShape, ParsedObjectShape>,
    properties: { [K in keyof Properties]: Properties[K] | ((parsed: ParsedObjectShape) => Properties[K]) }
): ObjectLikeSchema<RawObjectShape, ParsedObjectShape & Properties> {
    const objectSchema: BaseSchema<RawObjectShape, ParsedObjectShape & Properties> = {
        parse: async (raw, opts) => {
            const parsedObject = await objectLike.parse(raw, opts);
            if (!parsedObject.ok) {
                return parsedObject;
            }

            const additionalProperties = Object.entries(properties).reduce<Record<string, any>>(
                (processed, [key, value]) => {
                    return {
                        ...processed,
                        [key]: typeof value === \\"function\\" ? value(parsedObject.value) : value,
                    };
                },
                {}
            );

            return {
                ok: true,
                value: {
                    ...parsedObject.value,
                    ...(additionalProperties as Properties),
                },
            };
        },

        json: (parsed, opts) => {
            if (!isPlainObject(parsed)) {
                return {
                    ok: false,
                    errors: [
                        {
                            path: opts?.breadcrumbsPrefix ?? [],
                            message: getErrorMessageForIncorrectType(parsed, \\"object\\"),
                        },
                    ],
                };
            }

            // strip out added properties
            const addedPropertyKeys = new Set(Object.keys(properties));
            const parsedWithoutAddedProperties = filterObject(
                parsed,
                Object.keys(parsed).filter((key) => !addedPropertyKeys.has(key))
            );

            return objectLike.json(parsedWithoutAddedProperties as ParsedObjectShape, opts);
        },

        getType: () => objectLike.getType(),
    };

    return {
        ...objectSchema,
        ...getSchemaUtils(objectSchema),
        ...getObjectLikeUtils(objectSchema),
    };
}
",
                        "name": "getObjectLikeUtils.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { getObjectLikeUtils, withParsedProperties } from \\"./getObjectLikeUtils\\";
export type { ObjectLikeSchema, ObjectLikeUtils } from \\"./types\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { BaseSchema, Schema } from \\"../../Schema\\";

export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
    BaseSchema<Raw, Parsed> &
    ObjectLikeUtils<Raw, Parsed>;

export interface ObjectLikeUtils<Raw, Parsed> {
    withParsedProperties: <T extends Record<string, any>>(properties: {
        [K in keyof T]: T[K] | ((parsed: Parsed) => T[K]);
    }) => ObjectLikeSchema<Raw, Parsed & T>;
}
",
                        "name": "types.ts",
                        "type": "file",
                      },
                    ],
                    "name": "object-like",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { SchemaType } from \\"../../Schema\\";
import { createIdentitySchemaCreator } from \\"../../utils/createIdentitySchemaCreator\\";

export const any = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({ ok: true, value }));
",
                        "name": "any.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { SchemaType } from \\"../../Schema\\";
import { createIdentitySchemaCreator } from \\"../../utils/createIdentitySchemaCreator\\";
import { getErrorMessageForIncorrectType } from \\"../../utils/getErrorMessageForIncorrectType\\";

export const boolean = createIdentitySchemaCreator<boolean>(
    SchemaType.BOOLEAN,
    (value, { breadcrumbsPrefix = [] } = {}) => {
        if (typeof value === \\"boolean\\") {
            return {
                ok: true,
                value,
            };
        } else {
            return {
                ok: false,
                errors: [
                    {
                        path: breadcrumbsPrefix,
                        message: getErrorMessageForIncorrectType(value, \\"boolean\\"),
                    },
                ],
            };
        }
    }
);
",
                        "name": "boolean.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { any } from \\"./any\\";
export { boolean } from \\"./boolean\\";
export { number } from \\"./number\\";
export { string } from \\"./string\\";
export { unknown } from \\"./unknown\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { SchemaType } from \\"../../Schema\\";
import { createIdentitySchemaCreator } from \\"../../utils/createIdentitySchemaCreator\\";
import { getErrorMessageForIncorrectType } from \\"../../utils/getErrorMessageForIncorrectType\\";

export const number = createIdentitySchemaCreator<number>(
    SchemaType.NUMBER,
    (value, { breadcrumbsPrefix = [] } = {}) => {
        if (typeof value === \\"number\\") {
            return {
                ok: true,
                value,
            };
        } else {
            return {
                ok: false,
                errors: [
                    {
                        path: breadcrumbsPrefix,
                        message: getErrorMessageForIncorrectType(value, \\"number\\"),
                    },
                ],
            };
        }
    }
);
",
                        "name": "number.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { SchemaType } from \\"../../Schema\\";
import { createIdentitySchemaCreator } from \\"../../utils/createIdentitySchemaCreator\\";
import { getErrorMessageForIncorrectType } from \\"../../utils/getErrorMessageForIncorrectType\\";

export const string = createIdentitySchemaCreator<string>(
    SchemaType.STRING,
    (value, { breadcrumbsPrefix = [] } = {}) => {
        if (typeof value === \\"string\\") {
            return {
                ok: true,
                value,
            };
        } else {
            return {
                ok: false,
                errors: [
                    {
                        path: breadcrumbsPrefix,
                        message: getErrorMessageForIncorrectType(value, \\"string\\"),
                    },
                ],
            };
        }
    }
);
",
                        "name": "string.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { SchemaType } from \\"../../Schema\\";
import { createIdentitySchemaCreator } from \\"../../utils/createIdentitySchemaCreator\\";

export const unknown = createIdentitySchemaCreator<unknown>(SchemaType.UNKNOWN, (value) => ({ ok: true, value }));
",
                        "name": "unknown.ts",
                        "type": "file",
                      },
                    ],
                    "name": "primitives",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export { record } from \\"./record\\";
export type { BaseRecordSchema, RecordSchema } from \\"./types\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { MaybeValid, Schema, SchemaType, ValidationError } from \\"../../Schema\\";
import { entries } from \\"../../utils/entries\\";
import { getErrorMessageForIncorrectType } from \\"../../utils/getErrorMessageForIncorrectType\\";
import { isPlainObject } from \\"../../utils/isPlainObject\\";
import { MaybePromise } from \\"../../utils/MaybePromise\\";
import { maybeSkipValidation } from \\"../../utils/maybeSkipValidation\\";
import { getSchemaUtils } from \\"../schema-utils\\";
import { BaseRecordSchema, RecordSchema } from \\"./types\\";

export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
    keySchema: Schema<RawKey, ParsedKey>,
    valueSchema: Schema<RawValue, ParsedValue>
): RecordSchema<RawKey, RawValue, ParsedKey, ParsedValue> {
    const baseSchema: BaseRecordSchema<RawKey, RawValue, ParsedKey, ParsedValue> = {
        parse: async (raw, opts) => {
            return validateAndTransformRecord({
                value: raw,
                isKeyNumeric: (await keySchema.getType()) === SchemaType.NUMBER,
                transformKey: (key) =>
                    keySchema.parse(key, {
                        ...opts,
                        breadcrumbsPrefix: [...(opts?.breadcrumbsPrefix ?? []), \`\${key} (key)\`],
                    }),
                transformValue: (value, key) =>
                    valueSchema.parse(value, {
                        ...opts,
                        breadcrumbsPrefix: [...(opts?.breadcrumbsPrefix ?? []), \`\${key}\`],
                    }),
                breadcrumbsPrefix: opts?.breadcrumbsPrefix,
            });
        },
        json: async (parsed, opts) => {
            return validateAndTransformRecord({
                value: parsed,
                isKeyNumeric: (await keySchema.getType()) === SchemaType.NUMBER,
                transformKey: (key) =>
                    keySchema.json(key, {
                        ...opts,
                        breadcrumbsPrefix: [...(opts?.breadcrumbsPrefix ?? []), \`\${key} (key)\`],
                    }),
                transformValue: (value, key) =>
                    valueSchema.json(value, {
                        ...opts,
                        breadcrumbsPrefix: [...(opts?.breadcrumbsPrefix ?? []), \`\${key}\`],
                    }),
                breadcrumbsPrefix: opts?.breadcrumbsPrefix,
            });
        },
        getType: () => SchemaType.RECORD,
    };

    return {
        ...maybeSkipValidation(baseSchema),
        ...getSchemaUtils(baseSchema),
    };
}

async function validateAndTransformRecord<TransformedKey extends string | number, TransformedValue>({
    value,
    isKeyNumeric,
    transformKey,
    transformValue,
    breadcrumbsPrefix = [],
}: {
    value: unknown;
    isKeyNumeric: boolean;
    transformKey: (key: string | number) => MaybePromise<MaybeValid<TransformedKey>>;
    transformValue: (value: unknown, key: string | number) => MaybePromise<MaybeValid<TransformedValue>>;
    breadcrumbsPrefix: string[] | undefined;
}): Promise<MaybeValid<Record<TransformedKey, TransformedValue>>> {
    if (!isPlainObject(value)) {
        return {
            ok: false,
            errors: [
                {
                    path: breadcrumbsPrefix,
                    message: getErrorMessageForIncorrectType(value, \\"object\\"),
                },
            ],
        };
    }

    return entries(value).reduce<Promise<MaybeValid<Record<TransformedKey, TransformedValue>>>>(
        async (accPromise, [stringKey, value]) => {
            // skip nullish keys
            if (value == null) {
                return accPromise;
            }

            const acc = await accPromise;

            let key: string | number = stringKey;
            if (isKeyNumeric) {
                const numberKey = stringKey.length > 0 ? Number(stringKey) : NaN;
                if (!isNaN(numberKey)) {
                    key = numberKey;
                }
            }
            const transformedKey = await transformKey(key);

            const transformedValue = await transformValue(value, key);

            if (acc.ok && transformedKey.ok && transformedValue.ok) {
                return {
                    ok: true,
                    value: {
                        ...acc.value,
                        [transformedKey.value]: transformedValue.value,
                    },
                };
            }

            const errors: ValidationError[] = [];
            if (!acc.ok) {
                errors.push(...acc.errors);
            }
            if (!transformedKey.ok) {
                errors.push(...transformedKey.errors);
            }
            if (!transformedValue.ok) {
                errors.push(...transformedValue.errors);
            }

            return {
                ok: false,
                errors,
            };
        },
        Promise.resolve({ ok: true, value: {} as Record<TransformedKey, TransformedValue> })
    );
}
",
                        "name": "record.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { BaseSchema } from \\"../../Schema\\";
import { SchemaUtils } from \\"../schema-utils\\";

export type RecordSchema<
    RawKey extends string | number,
    RawValue,
    ParsedKey extends string | number,
    ParsedValue
> = BaseRecordSchema<RawKey, RawValue, ParsedKey, ParsedValue> &
    SchemaUtils<Record<RawKey, RawValue>, Record<ParsedKey, ParsedValue>>;

export type BaseRecordSchema<
    RawKey extends string | number,
    RawValue,
    ParsedKey extends string | number,
    ParsedValue
> = BaseSchema<Record<RawKey, RawValue>, Record<ParsedKey, ParsedValue>>;
",
                        "name": "types.ts",
                        "type": "file",
                      },
                    ],
                    "name": "record",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { ValidationError } from \\"../../Schema\\";
import { stringifyValidationError } from \\"./stringifyValidationErrors\\";

export class JsonError extends Error {
    constructor(public readonly errors: ValidationError[]) {
        super(errors.map(stringifyValidationError).join(\\"; \\"));
        Object.setPrototypeOf(this, JsonError.prototype);
    }
}
",
                        "name": "JsonError.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { ValidationError } from \\"../../Schema\\";
import { stringifyValidationError } from \\"./stringifyValidationErrors\\";

export class ParseError extends Error {
    constructor(public readonly errors: ValidationError[]) {
        super(errors.map(stringifyValidationError).join(\\"; \\"));
        Object.setPrototypeOf(this, ParseError.prototype);
    }
}
",
                        "name": "ParseError.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { BaseSchema, Schema, SchemaOptions, SchemaType } from \\"../../Schema\\";
import { JsonError } from \\"./JsonError\\";
import { ParseError } from \\"./ParseError\\";

export interface SchemaUtils<Raw, Parsed> {
    optional: () => Schema<Raw | null | undefined, Parsed | undefined>;
    transform: <Transformed>(transformer: SchemaTransformer<Parsed, Transformed>) => Schema<Raw, Transformed>;
    parseOrThrow: (raw: unknown, opts?: SchemaOptions) => Promise<Parsed>;
    jsonOrThrow: (raw: unknown, opts?: SchemaOptions) => Promise<Raw>;
}

export interface SchemaTransformer<Parsed, Transformed> {
    transform: (parsed: Parsed) => Transformed;
    untransform: (transformed: any) => Parsed;
}

export function getSchemaUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): SchemaUtils<Raw, Parsed> {
    return {
        optional: () => optional(schema),
        transform: (transformer) => transform(schema, transformer),
        parseOrThrow: async (raw, opts) => {
            const parsed = await schema.parse(raw, opts);
            if (parsed.ok) {
                return parsed.value;
            }
            throw new ParseError(parsed.errors);
        },
        jsonOrThrow: async (parsed, opts) => {
            const raw = await schema.json(parsed, opts);
            if (raw.ok) {
                return raw.value;
            }
            throw new JsonError(raw.errors);
        },
    };
}

/**
 * schema utils are defined in one file to resolve issues with circular imports
 */

export function optional<Raw, Parsed>(
    schema: BaseSchema<Raw, Parsed>
): Schema<Raw | null | undefined, Parsed | undefined> {
    const baseSchema: BaseSchema<Raw | null | undefined, Parsed | undefined> = {
        parse: (raw, opts) => {
            if (raw == null) {
                return {
                    ok: true,
                    value: undefined,
                };
            }
            return schema.parse(raw, opts);
        },
        json: (parsed, opts) => {
            if (parsed == null) {
                return {
                    ok: true,
                    value: null,
                };
            }
            return schema.json(parsed, opts);
        },
        getType: () => SchemaType.OPTIONAL,
    };

    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
    };
}

export function transform<Raw, Parsed, Transformed>(
    schema: BaseSchema<Raw, Parsed>,
    transformer: SchemaTransformer<Parsed, Transformed>
): Schema<Raw, Transformed> {
    const baseSchema: BaseSchema<Raw, Transformed> = {
        parse: async (raw, opts) => {
            const parsed = await schema.parse(raw, opts);
            if (!parsed.ok) {
                return parsed;
            }
            return {
                ok: true,
                value: transformer.transform(parsed.value),
            };
        },
        json: async (transformed, opts) => {
            const parsed = await transformer.untransform(transformed);
            return schema.json(parsed, opts);
        },
        getType: () => schema.getType(),
    };

    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
    };
}
",
                        "name": "getSchemaUtils.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { getSchemaUtils, optional, transform } from \\"./getSchemaUtils\\";
export type { SchemaUtils } from \\"./getSchemaUtils\\";
export { JsonError } from \\"./JsonError\\";
export { ParseError } from \\"./ParseError\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { ValidationError } from \\"../../Schema\\";

export function stringifyValidationError(error: ValidationError): string {
    if (error.path.length === 0) {
        return error.message;
    }
    return \`\${error.path.join(\\" -> \\")}: \${error.message}\`;
}
",
                        "name": "stringifyValidationErrors.ts",
                        "type": "file",
                      },
                    ],
                    "name": "schema-utils",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export { set } from \\"./set\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { BaseSchema, Schema, SchemaType } from \\"../../Schema\\";
import { getErrorMessageForIncorrectType } from \\"../../utils/getErrorMessageForIncorrectType\\";
import { maybeSkipValidation } from \\"../../utils/maybeSkipValidation\\";
import { list } from \\"../list\\";
import { getSchemaUtils } from \\"../schema-utils\\";

export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
    const listSchema = list(schema);
    const baseSchema: BaseSchema<Raw[], Set<Parsed>> = {
        parse: async (raw, opts) => {
            const parsedList = await listSchema.parse(raw, opts);
            if (parsedList.ok) {
                return {
                    ok: true,
                    value: new Set(parsedList.value),
                };
            } else {
                return parsedList;
            }
        },
        json: async (parsed, opts) => {
            if (!(parsed instanceof Set)) {
                return {
                    ok: false,
                    errors: [
                        {
                            path: opts?.breadcrumbsPrefix ?? [],
                            message: getErrorMessageForIncorrectType(parsed, \\"Set\\"),
                        },
                    ],
                };
            }
            const jsonList = await listSchema.json([...parsed], opts);
            return jsonList;
        },
        getType: () => SchemaType.SET,
    };

    return {
        ...maybeSkipValidation(baseSchema),
        ...getSchemaUtils(baseSchema),
    };
}
",
                        "name": "set.ts",
                        "type": "file",
                      },
                    ],
                    "name": "set",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export type {
    inferParsedUnidiscriminatedUnionSchema,
    inferRawUnidiscriminatedUnionSchema,
    UndiscriminatedUnionSchema,
} from \\"./types\\";
export { undiscriminatedUnion } from \\"./undiscriminatedUnion\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { inferParsed, inferRaw, Schema } from \\"../../Schema\\";

export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
    inferRawUnidiscriminatedUnionSchema<Schemas>,
    inferParsedUnidiscriminatedUnionSchema<Schemas>
>;

export type inferRawUnidiscriminatedUnionSchema<Schemas extends [...Schema[]]> = inferRaw<Schemas[number]>;

export type inferParsedUnidiscriminatedUnionSchema<Schemas extends [...Schema[]]> = inferParsed<Schemas[number]>;
",
                        "name": "types.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from \\"../../Schema\\";
import { MaybePromise } from \\"../../utils/MaybePromise\\";
import { maybeSkipValidation } from \\"../../utils/maybeSkipValidation\\";
import { getSchemaUtils } from \\"../schema-utils\\";
import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from \\"./types\\";

export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
    schemas: Schemas
): Schema<inferRawUnidiscriminatedUnionSchema<Schemas>, inferParsedUnidiscriminatedUnionSchema<Schemas>> {
    const baseSchema: BaseSchema<
        inferRawUnidiscriminatedUnionSchema<Schemas>,
        inferParsedUnidiscriminatedUnionSchema<Schemas>
    > = {
        parse: async (raw, opts) => {
            return validateAndTransformUndiscriminatedUnion<inferParsedUnidiscriminatedUnionSchema<Schemas>>(
                (schema) => schema.parse(raw, opts),
                schemas
            );
        },
        json: async (parsed, opts) => {
            return validateAndTransformUndiscriminatedUnion<inferRawUnidiscriminatedUnionSchema<Schemas>>(
                (schema) => schema.json(parsed, opts),
                schemas
            );
        },
        getType: () => SchemaType.UNDISCRIMINATED_UNION,
    };

    return {
        ...maybeSkipValidation(baseSchema),
        ...getSchemaUtils(baseSchema),
    };
}

async function validateAndTransformUndiscriminatedUnion<Transformed>(
    transform: (schema: Schema<any, any>) => MaybePromise<MaybeValid<Transformed>>,
    schemas: Schema<any, any>[]
): Promise<MaybeValid<Transformed>> {
    const errors: ValidationError[] = [];
    for (const [index, schema] of schemas.entries()) {
        const transformed = await transform(schema);
        if (transformed.ok) {
            return transformed;
        } else {
            for (const error of errors) {
                errors.push({
                    path: error.path,
                    message: \`[Variant \${index}] \${error.message}\`,
                });
            }
        }
    }

    return {
        ok: false,
        errors,
    };
}
",
                        "name": "undiscriminatedUnion.ts",
                        "type": "file",
                      },
                    ],
                    "name": "undiscriminated-union",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export function discriminant<RawDiscriminant extends string, ParsedDiscriminant extends string>(
    parsedDiscriminant: ParsedDiscriminant,
    rawDiscriminant: RawDiscriminant
): Discriminant<RawDiscriminant, ParsedDiscriminant> {
    return {
        parsedDiscriminant,
        rawDiscriminant,
    };
}

export interface Discriminant<RawDiscriminant extends string, ParsedDiscriminant extends string> {
    parsedDiscriminant: ParsedDiscriminant;
    rawDiscriminant: RawDiscriminant;
}
",
                        "name": "discriminant.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { discriminant } from \\"./discriminant\\";
export type { Discriminant } from \\"./discriminant\\";
export type {
    inferParsedDiscriminant,
    inferParsedUnion,
    inferRawDiscriminant,
    inferRawUnion,
    UnionSubtypes,
} from \\"./types\\";
export { union } from \\"./union\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { inferParsedObject, inferRawObject, ObjectSchema } from \\"../object\\";
import { Discriminant } from \\"./discriminant\\";

export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
    [K in DiscriminantValues]: ObjectSchema<any, any>;
};

export type inferRawUnion<D extends string | Discriminant<any, any>, U extends UnionSubtypes<keyof U>> = {
    [K in keyof U]: Record<inferRawDiscriminant<D>, K> & inferRawObject<U[K]>;
}[keyof U];

export type inferParsedUnion<D extends string | Discriminant<any, any>, U extends UnionSubtypes<keyof U>> = {
    [K in keyof U]: Record<inferParsedDiscriminant<D>, K> & inferParsedObject<U[K]>;
}[keyof U];

export type inferRawDiscriminant<D extends string | Discriminant<any, any>> = D extends string
    ? D
    : D extends Discriminant<infer Raw, any>
    ? Raw
    : never;

export type inferParsedDiscriminant<D extends string | Discriminant<any, any>> = D extends string
    ? D
    : D extends Discriminant<any, infer Parsed>
    ? Parsed
    : never;
",
                        "name": "types.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { BaseSchema, MaybeValid, SchemaType } from \\"../../Schema\\";
import { getErrorMessageForIncorrectType } from \\"../../utils/getErrorMessageForIncorrectType\\";
import { isPlainObject } from \\"../../utils/isPlainObject\\";
import { keys } from \\"../../utils/keys\\";
import { MaybePromise } from \\"../../utils/MaybePromise\\";
import { maybeSkipValidation } from \\"../../utils/maybeSkipValidation\\";
import { enum_ } from \\"../enum\\";
import { ObjectSchema } from \\"../object\\";
import { getObjectLikeUtils, ObjectLikeSchema } from \\"../object-like\\";
import { getSchemaUtils } from \\"../schema-utils\\";
import { Discriminant } from \\"./discriminant\\";
import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from \\"./types\\";

export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
    discriminant: D,
    union: U
): ObjectLikeSchema<inferRawUnion<D, U>, inferParsedUnion<D, U>> {
    const rawDiscriminant =
        typeof discriminant === \\"string\\" ? discriminant : (discriminant.rawDiscriminant as inferRawDiscriminant<D>);
    const parsedDiscriminant =
        typeof discriminant === \\"string\\"
            ? discriminant
            : (discriminant.parsedDiscriminant as inferParsedDiscriminant<D>);

    const discriminantValueSchema = enum_(keys(union) as string[]);

    const baseSchema: BaseSchema<inferRawUnion<D, U>, inferParsedUnion<D, U>> = {
        parse: async (raw, opts) => {
            return transformAndValidateUnion({
                value: raw,
                discriminant: rawDiscriminant,
                transformedDiscriminant: parsedDiscriminant,
                transformDiscriminantValue: (discriminantValue) =>
                    discriminantValueSchema.parse(discriminantValue, {
                        allowUnrecognizedEnumValues: opts?.allowUnrecognizedUnionMembers,
                        breadcrumbsPrefix: [...(opts?.breadcrumbsPrefix ?? []), rawDiscriminant],
                    }),
                getAdditionalPropertiesSchema: (discriminantValue) => union[discriminantValue],
                allowUnrecognizedUnionMembers: opts?.allowUnrecognizedUnionMembers,
                transformAdditionalProperties: (additionalProperties, additionalPropertiesSchema) =>
                    additionalPropertiesSchema.parse(additionalProperties, opts),
                breadcrumbsPrefix: opts?.breadcrumbsPrefix,
            });
        },
        json: async (parsed, opts) => {
            return transformAndValidateUnion({
                value: parsed,
                discriminant: parsedDiscriminant,
                transformedDiscriminant: rawDiscriminant,
                transformDiscriminantValue: (discriminantValue) =>
                    discriminantValueSchema.json(discriminantValue, {
                        allowUnrecognizedEnumValues: opts?.allowUnrecognizedUnionMembers,
                        breadcrumbsPrefix: [...(opts?.breadcrumbsPrefix ?? []), parsedDiscriminant],
                    }),
                getAdditionalPropertiesSchema: (discriminantValue) => union[discriminantValue],
                allowUnrecognizedUnionMembers: opts?.allowUnrecognizedUnionMembers,
                transformAdditionalProperties: (additionalProperties, additionalPropertiesSchema) =>
                    additionalPropertiesSchema.json(additionalProperties, opts),
                breadcrumbsPrefix: opts?.breadcrumbsPrefix,
            });
        },
        getType: () => SchemaType.UNION,
    };

    return {
        ...maybeSkipValidation(baseSchema),
        ...getSchemaUtils(baseSchema),
        ...getObjectLikeUtils(baseSchema),
    };
}

async function transformAndValidateUnion<
    TransformedDiscriminant extends string,
    TransformedDiscriminantValue extends string,
    TransformedAdditionalProperties
>({
    value,
    discriminant,
    transformedDiscriminant,
    transformDiscriminantValue,
    getAdditionalPropertiesSchema,
    allowUnrecognizedUnionMembers = false,
    transformAdditionalProperties,
    breadcrumbsPrefix = [],
}: {
    value: unknown;
    discriminant: string;
    transformedDiscriminant: TransformedDiscriminant;
    transformDiscriminantValue: (discriminantValue: unknown) => MaybePromise<MaybeValid<TransformedDiscriminantValue>>;
    getAdditionalPropertiesSchema: (discriminantValue: string) => ObjectSchema<any, any> | undefined;
    allowUnrecognizedUnionMembers: boolean | undefined;
    transformAdditionalProperties: (
        additionalProperties: unknown,
        additionalPropertiesSchema: ObjectSchema<any, any>
    ) => MaybePromise<MaybeValid<TransformedAdditionalProperties>>;
    breadcrumbsPrefix: string[] | undefined;
}): Promise<
    MaybeValid<Record<TransformedDiscriminant, TransformedDiscriminantValue> & TransformedAdditionalProperties>
> {
    if (!isPlainObject(value)) {
        return {
            ok: false,
            errors: [
                {
                    path: breadcrumbsPrefix,
                    message: getErrorMessageForIncorrectType(value, \\"object\\"),
                },
            ],
        };
    }

    const { [discriminant]: discriminantValue, ...additionalProperties } = value;

    if (discriminantValue == null) {
        return {
            ok: false,
            errors: [
                {
                    path: breadcrumbsPrefix,
                    message: \`Missing discriminant (\\"\${discriminant}\\")\`,
                },
            ],
        };
    }

    const transformedDiscriminantValue = await transformDiscriminantValue(discriminantValue);
    if (!transformedDiscriminantValue.ok) {
        return {
            ok: false,
            errors: transformedDiscriminantValue.errors,
        };
    }

    const additionalPropertiesSchema = getAdditionalPropertiesSchema(transformedDiscriminantValue.value);

    if (additionalPropertiesSchema == null) {
        if (allowUnrecognizedUnionMembers) {
            return {
                ok: true,
                value: {
                    [transformedDiscriminant]: transformedDiscriminantValue.value,
                    ...additionalProperties,
                } as Record<TransformedDiscriminant, TransformedDiscriminantValue> & TransformedAdditionalProperties,
            };
        } else {
            return {
                ok: false,
                errors: [
                    {
                        path: [...breadcrumbsPrefix, discriminant],
                        message: \\"Unexpected discriminant value\\",
                    },
                ],
            };
        }
    }

    const transformedAdditionalProperties = await transformAdditionalProperties(
        additionalProperties,
        additionalPropertiesSchema
    );
    if (!transformedAdditionalProperties.ok) {
        return transformedAdditionalProperties;
    }

    return {
        ok: true,
        value: {
            [transformedDiscriminant]: discriminantValue,
            ...transformedAdditionalProperties.value,
        } as Record<TransformedDiscriminant, TransformedDiscriminantValue> & TransformedAdditionalProperties,
    };
}
",
                        "name": "union.ts",
                        "type": "file",
                      },
                    ],
                    "name": "union",
                    "type": "directory",
                  },
                ],
                "name": "builders",
                "type": "directory",
              },
              Object {
                "contents": "export * from \\"./builders\\";
export type { inferParsed, inferRaw, Schema, SchemaOptions } from \\"./Schema\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export type MaybePromise<T> = T | Promise<T>;
",
                    "name": "MaybePromise.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export type addQuestionMarksToNullableProperties<T> = {
    [K in OptionalKeys<T>]?: T[K];
} & Pick<T, RequiredKeys<T>>;

export type OptionalKeys<T> = {
    [K in keyof T]-?: undefined extends T[K]
        ? K
        : null extends T[K]
        ? K
        : 1 extends (any extends T[K] ? 0 : 1)
        ? never
        : K;
}[keyof T];

export type RequiredKeys<T> = Exclude<keyof T, OptionalKeys<T>>;
",
                    "name": "addQuestionMarksToNullableProperties.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { getSchemaUtils } from \\"../builders/schema-utils\\";
import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from \\"../Schema\\";
import { maybeSkipValidation } from \\"./maybeSkipValidation\\";

export function createIdentitySchemaCreator<T>(
    schemaType: SchemaType,
    validate: (value: unknown, opts?: SchemaOptions) => MaybeValid<T>
): () => Schema<T, T> {
    return () => {
        const baseSchema: BaseSchema<T, T> = {
            parse: validate,
            json: validate,
            getType: () => schemaType,
        };

        return {
            ...maybeSkipValidation(baseSchema),
            ...getSchemaUtils(baseSchema),
        };
    };
}
",
                    "name": "createIdentitySchemaCreator.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export function entries<T>(object: T): [keyof T, T[keyof T]][] {
    return Object.entries(object) as [keyof T, T[keyof T]][];
}
",
                    "name": "entries.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export function filterObject<T, K extends keyof T>(obj: T, keysToInclude: K[]): Pick<T, K> {
    const keysToIncludeSet = new Set(keysToInclude);
    return Object.entries(obj).reduce((acc, [key, value]) => {
        if (keysToIncludeSet.has(key as K)) {
            acc[key as K] = value;
        }
        return acc;
        // eslint-disable-next-line @typescript-eslint/prefer-reduce-type-parameter
    }, {} as Pick<T, K>);
}
",
                    "name": "filterObject.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export function getErrorMessageForIncorrectType(value: unknown, expectedType: string): string {
    return \`Expected \${expectedType}. Received \${getTypeAsString(value)}.\`;
}

function getTypeAsString(value: unknown): string {
    if (Array.isArray(value)) {
        return \\"list\\";
    }
    if (value === null) {
        return \\"null\\";
    }
    switch (typeof value) {
        case \\"string\\":
            return \`\\"\${value}\\"\`;
        case \\"number\\":
        case \\"boolean\\":
        case \\"undefined\\":
            return \`\${value}\`;
    }
    return typeof value;
}
",
                    "name": "getErrorMessageForIncorrectType.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "// borrowed from https://github.com/lodash/lodash/blob/master/isPlainObject.js
export function isPlainObject(value: unknown): value is Record<string, unknown> {
    if (typeof value !== \\"object\\" || value === null) {
        return false;
    }

    if (Object.getPrototypeOf(value) === null) {
        return true;
    }

    let proto = value;
    while (Object.getPrototypeOf(proto) !== null) {
        proto = Object.getPrototypeOf(proto);
    }

    return Object.getPrototypeOf(value) === proto;
}
",
                    "name": "isPlainObject.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export function keys<T>(object: T): (keyof T)[] {
    return Object.keys(object) as (keyof T)[];
}
",
                    "name": "keys.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { BaseSchema, MaybeValid, SchemaOptions } from \\"../Schema\\";
import { MaybePromise } from \\"./MaybePromise\\";

export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
    return {
        ...schema,
        json: transformAndMaybeSkipValidation(schema.json),
        parse: transformAndMaybeSkipValidation(schema.parse),
    };
}

function transformAndMaybeSkipValidation<T>(
    transform: (value: unknown, opts?: SchemaOptions) => MaybePromise<MaybeValid<T>>
): (value: unknown, opts?: SchemaOptions) => MaybePromise<MaybeValid<T>> {
    return async (value, opts): Promise<MaybeValid<T>> => {
        const transformed = await transform(value, opts);
        const { skipValidation = false } = opts ?? {};
        if (!transformed.ok && skipValidation) {
            // eslint-disable-next-line no-console
            console.warn(
                [
                    \\"Failed to validate.\\",
                    ...transformed.errors.map(
                        (error) =>
                            \\"  - \\" +
                            (error.path.length > 0 ? \`\${error.path.join(\\".\\")}: \${error.message}\` : error.message)
                    ),
                ].join(\\"\\\\n\\")
            );

            return {
                ok: true,
                value: value as T,
            };
        } else {
            return transformed;
        }
    };
}
",
                    "name": "maybeSkipValidation.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export function partition<T>(items: readonly T[], predicate: (item: T) => boolean): [T[], T[]] {
    const trueItems: T[] = [],
        falseItems: T[] = [];
    for (const item of items) {
        if (predicate(item)) {
            trueItems.push(item);
        } else {
            falseItems.push(item);
        }
    }
    return [trueItems, falseItems];
}
",
                    "name": "partition.ts",
                    "type": "file",
                  },
                ],
                "name": "utils",
                "type": "directory",
              },
            ],
            "name": "schemas",
            "type": "directory",
          },
        ],
        "name": "core",
        "type": "directory",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export class FernApiError extends Error {
    readonly statusCode?: number;
    readonly body?: unknown;

    constructor({ message, statusCode, body }: { message?: string; statusCode?: number; body?: unknown }) {
        super(buildMessage({ message, statusCode, body }));
        Object.setPrototypeOf(this, FernApiError.prototype);
        if (statusCode != null) {
            this.statusCode = statusCode;
        }

        if (body !== undefined) {
            this.body = body;
        }
    }
}

function buildMessage({
    message,
    statusCode,
    body,
}: {
    message: string | undefined;
    statusCode: number | undefined;
    body: unknown | undefined;
}): string {
    let lines: string[] = [];
    if (message != null) {
        lines.push(message);
    }

    if (statusCode != null) {
        lines.push(\`Status code: \${statusCode.toString()}\`);
    }

    if (body != null) {
        lines.push(\`Body: \${JSON.stringify(body, undefined, 2)}\`);
    }

    return lines.join(\\"\\\\n\\");
}
",
            "name": "FernApiError.ts",
            "type": "file",
          },
          Object {
            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export class FernApiTimeoutError extends Error {
    constructor() {
        super(\\"Timeout\\");
        Object.setPrototypeOf(this, FernApiTimeoutError.prototype);
    }
}
",
            "name": "FernApiTimeoutError.ts",
            "type": "file",
          },
          Object {
            "contents": "export { FernApiError } from \\"./FernApiError\\";
export { FernApiTimeoutError } from \\"./FernApiTimeoutError\\";
",
            "name": "index.ts",
            "type": "file",
          },
        ],
        "name": "errors",
        "type": "directory",
      },
      Object {
        "contents": "export * as FernApi from \\"./api\\";
export { FernApiClient } from \\"./Client\\";
export { FernApiError, FernApiTimeoutError } from \\"./errors\\";
",
        "name": "index.ts",
        "type": "file",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "export * from \\"./resources\\";
",
            "name": "index.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": Array [
                  Object {
                    "contents": "export * from \\"./types\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import * as FernApi from \\"../../../../api\\";
import * as core from \\"../../../../core\\";

export const MyUnion: core.serialization.Schema<serializers.MyUnion.Raw, FernApi.MyUnion> =
    core.serialization.undiscriminatedUnion([
        core.serialization.string(),
        core.serialization.list(core.serialization.string()),
        core.serialization.number(),
        core.serialization.list(core.serialization.number()),
        core.serialization.list(core.serialization.list(core.serialization.number())),
    ]);

export declare namespace MyUnion {
    type Raw = string | string[] | number | number[] | number[][];
}
",
                        "name": "MyUnion.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * from \\"./MyUnion\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                    ],
                    "name": "types",
                    "type": "directory",
                  },
                ],
                "name": "file",
                "type": "directory",
              },
              Object {
                "contents": "export * as file from \\"./file\\";
export * from \\"./file/types\\";
",
                "name": "index.ts",
                "type": "file",
              },
            ],
            "name": "resources",
            "type": "directory",
          },
        ],
        "name": "serialization",
        "type": "directory",
      },
    ],
    "name": "src",
    "type": "directory",
  },
  Object {
    "contents": "{
    \\"compilerOptions\\": {
        \\"extendedDiagnostics\\": true,
        \\"strict\\": true,
        \\"target\\": \\"ES6\\",
        \\"module\\": \\"CommonJS\\",
        \\"moduleResolution\\": \\"node\\",
        \\"esModuleInterop\\": true,
        \\"skipLibCheck\\": true,
        \\"declaration\\": true,
        \\"noUnusedParameters\\": true,
        \\"outDir\\": \\"dist\\",
        \\"rootDir\\": \\"src\\",
        \\"baseUrl\\": \\"src\\"
    },
    \\"include\\": [
        \\"src\\"
    ],
    \\"exclude\\": []
}",
    "name": "tsconfig.json",
    "type": "file",
  },
]
`;
