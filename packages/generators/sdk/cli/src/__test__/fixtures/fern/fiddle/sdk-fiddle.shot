// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`runGenerator fiddle 1`] = `
Array [
  Object {
    "contents": "// this is needed for older versions of TypeScript
// that don't read the \\"exports\\" field in package.json
export * from \\"./types/core\\";
            ",
    "name": "core.d.ts",
    "type": "file",
  },
  Object {
    "contents": Array [
      Object {
        "contents": Array [
          Object {
            "contents": Array [
              Object {
                "contents": "\\"use strict\\";
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b ||= {})
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __restKey = (key) => typeof key === \\"symbol\\" ? key : key + \\"\\";
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all3) => {
  for (var name in all3)
    __defProp(target, name, { get: all3[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === \\"object\\" || typeof from === \\"function\\") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, \\"__esModule\\", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/core/index.ts
var core_exports = {};
__export(core_exports, {
  BasicAuth: () => BasicAuth,
  BearerToken: () => BearerToken,
  Supplier: () => Supplier,
  fetcher: () => fetcher,
  serialization: () => schemas_exports
});
module.exports = __toCommonJS(core_exports);

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/bind.js
function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/utils.js
var { toString } = Object.prototype;
var { getPrototypeOf } = Object;
var kindOf = ((cache) => (thing) => {
  const str = toString.call(thing);
  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(/* @__PURE__ */ Object.create(null));
var kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type;
};
var typeOfTest = (type) => (thing) => typeof thing === type;
var { isArray } = Array;
var isUndefined = typeOfTest(\\"undefined\\");
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}
var isArrayBuffer = kindOfTest(\\"ArrayBuffer\\");
function isArrayBufferView(val) {
  let result;
  if (typeof ArrayBuffer !== \\"undefined\\" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
var isString = typeOfTest(\\"string\\");
var isFunction = typeOfTest(\\"function\\");
var isNumber = typeOfTest(\\"number\\");
var isObject = (thing) => thing !== null && typeof thing === \\"object\\";
var isBoolean = (thing) => thing === true || thing === false;
var isPlainObject = (val) => {
  if (kindOf(val) !== \\"object\\") {
    return false;
  }
  const prototype3 = getPrototypeOf(val);
  return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
};
var isDate = kindOfTest(\\"Date\\");
var isFile = kindOfTest(\\"File\\");
var isBlob = kindOfTest(\\"Blob\\");
var isFileList = kindOfTest(\\"FileList\\");
var isStream = (val) => isObject(val) && isFunction(val.pipe);
var isFormData = (thing) => {
  let kind;
  return thing && (typeof FormData === \\"function\\" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === \\"formdata\\" || kind === \\"object\\" && isFunction(thing.toString) && thing.toString() === \\"[object FormData]\\"));
};
var isURLSearchParams = kindOfTest(\\"URLSearchParams\\");
var trim = (str) => str.trim ? str.trim() : str.replace(/^[\\\\s\\\\uFEFF\\\\xA0]+|[\\\\s\\\\uFEFF\\\\xA0]+$/g, \\"\\");
function forEach(obj, fn, { allOwnKeys = false } = {}) {
  if (obj === null || typeof obj === \\"undefined\\") {
    return;
  }
  let i;
  let l;
  if (typeof obj !== \\"object\\") {
    obj = [obj];
  }
  if (isArray(obj)) {
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    const keys2 = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys2.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys2[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}
function findKey(obj, key) {
  key = key.toLowerCase();
  const keys2 = Object.keys(obj);
  let i = keys2.length;
  let _key;
  while (i-- > 0) {
    _key = keys2[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
var _global = (() => {
  if (typeof globalThis !== \\"undefined\\")
    return globalThis;
  return typeof self !== \\"undefined\\" ? self : typeof window !== \\"undefined\\" ? window : global;
})();
var isContextDefined = (context) => !isUndefined(context) && context !== _global;
function merge() {
  const { caseless } = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };
  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}
var extend = (a, b, thisArg, { allOwnKeys } = {}) => {
  forEach(b, (val, key) => {
    if (thisArg && isFunction(val)) {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  }, { allOwnKeys });
  return a;
};
var stripBOM = (content) => {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
};
var inherits = (constructor, superConstructor, props, descriptors2) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, \\"super\\", {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
};
var toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};
  destObj = destObj || {};
  if (sourceObj == null)
    return destObj;
  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
  return destObj;
};
var endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === void 0 || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};
var toArray = (thing) => {
  if (!thing)
    return null;
  if (isArray(thing))
    return thing;
  let i = thing.length;
  if (!isNumber(i))
    return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
};
var isTypedArray = ((TypedArray) => {
  return (thing) => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== \\"undefined\\" && getPrototypeOf(Uint8Array));
var forEachEntry = (obj, fn) => {
  const generator = obj && obj[Symbol.iterator];
  const iterator = generator.call(obj);
  let result;
  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
};
var matchAll = (regExp, str) => {
  let matches;
  const arr = [];
  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }
  return arr;
};
var isHTMLForm = kindOfTest(\\"HTMLFormElement\\");
var toCamelCase = (str) => {
  return str.toLowerCase().replace(
    /[-_\\\\s]([a-z\\\\d])(\\\\w*)/g,
    function replacer(m, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};
var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
var isRegExp = kindOfTest(\\"RegExp\\");
var reduceDescriptors = (obj, reducer) => {
  const descriptors2 = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};
  forEach(descriptors2, (descriptor, name) => {
    if (reducer(descriptor, name, obj) !== false) {
      reducedDescriptors[name] = descriptor;
    }
  });
  Object.defineProperties(obj, reducedDescriptors);
};
var freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    if (isFunction(obj) && [\\"arguments\\", \\"caller\\", \\"callee\\"].indexOf(name) !== -1) {
      return false;
    }
    const value = obj[name];
    if (!isFunction(value))
      return;
    descriptor.enumerable = false;
    if (\\"writable\\" in descriptor) {
      descriptor.writable = false;
      return;
    }
    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error(\\"Can not rewrite read-only method '\\" + name + \\"'\\");
      };
    }
  });
};
var toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};
  const define = (arr) => {
    arr.forEach((value) => {
      obj[value] = true;
    });
  };
  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
  return obj;
};
var noop = () => {
};
var toFiniteNumber = (value, defaultValue) => {
  value = +value;
  return Number.isFinite(value) ? value : defaultValue;
};
var ALPHA = \\"abcdefghijklmnopqrstuvwxyz\\";
var DIGIT = \\"0123456789\\";
var ALPHABET = {
  DIGIT,
  ALPHA,
  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
};
var generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
  let str = \\"\\";
  const { length } = alphabet;
  while (size--) {
    str += alphabet[Math.random() * length | 0];
  }
  return str;
};
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === \\"FormData\\" && thing[Symbol.iterator]);
}
var toJSONObject = (obj) => {
  const stack = new Array(10);
  const visit = (source, i) => {
    if (isObject(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }
      if (!(\\"toJSON\\" in source)) {
        stack[i] = source;
        const target = isArray(source) ? [] : {};
        forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });
        stack[i] = void 0;
        return target;
      }
    }
    return source;
  };
  return visit(obj, 0);
};
var isAsyncFn = kindOfTest(\\"AsyncFunction\\");
var isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
var utils_default = {
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject,
  isPlainObject,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty,
  // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  ALPHABET,
  generateString,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable
};

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/AxiosError.js
function AxiosError(message, code, config, request, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message;
  this.name = \\"AxiosError\\";
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  response && (this.response = response);
}
utils_default.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: utils_default.toJSONObject(this.config),
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});
var prototype = AxiosError.prototype;
var descriptors = {};
[
  \\"ERR_BAD_OPTION_VALUE\\",
  \\"ERR_BAD_OPTION\\",
  \\"ECONNABORTED\\",
  \\"ETIMEDOUT\\",
  \\"ERR_NETWORK\\",
  \\"ERR_FR_TOO_MANY_REDIRECTS\\",
  \\"ERR_DEPRECATED\\",
  \\"ERR_BAD_RESPONSE\\",
  \\"ERR_BAD_REQUEST\\",
  \\"ERR_CANCELED\\",
  \\"ERR_NOT_SUPPORT\\",
  \\"ERR_INVALID_URL\\"
  // eslint-disable-next-line func-names
].forEach((code) => {
  descriptors[code] = { value: code };
});
Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, \\"isAxiosError\\", { value: true });
AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(prototype);
  utils_default.toFlatObject(error, axiosError, function filter2(obj) {
    return obj !== Error.prototype;
  }, (prop) => {
    return prop !== \\"isAxiosError\\";
  });
  AxiosError.call(axiosError, error.message, code, config, request, response);
  axiosError.cause = error;
  axiosError.name = error.name;
  customProps && Object.assign(axiosError, customProps);
  return axiosError;
};
var AxiosError_default = AxiosError;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/null.js
var null_default = null;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/toFormData.js
function isVisitable(thing) {
  return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
}
function removeBrackets(key) {
  return utils_default.endsWith(key, \\"[]\\") ? key.slice(0, -2) : key;
}
function renderKey(path, key, dots) {
  if (!path)
    return key;
  return path.concat(key).map(function each(token, i) {
    token = removeBrackets(token);
    return !dots && i ? \\"[\\" + token + \\"]\\" : token;
  }).join(dots ? \\".\\" : \\"\\");
}
function isFlatArray(arr) {
  return utils_default.isArray(arr) && !arr.some(isVisitable);
}
var predicates = utils_default.toFlatObject(utils_default, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});
function toFormData(obj, formData, options) {
  if (!utils_default.isObject(obj)) {
    throw new TypeError(\\"target must be an object\\");
  }
  formData = formData || new (null_default || FormData)();
  options = utils_default.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    return !utils_default.isUndefined(source[option]);
  });
  const metaTokens = options.metaTokens;
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== \\"undefined\\" && Blob;
  const useBlob = _Blob && utils_default.isSpecCompliantForm(formData);
  if (!utils_default.isFunction(visitor)) {
    throw new TypeError(\\"visitor must be a function\\");
  }
  function convertValue(value) {
    if (value === null)
      return \\"\\";
    if (utils_default.isDate(value)) {
      return value.toISOString();
    }
    if (!useBlob && utils_default.isBlob(value)) {
      throw new AxiosError_default(\\"Blob is not supported. Use a Buffer instead.\\");
    }
    if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {
      return useBlob && typeof Blob === \\"function\\" ? new Blob([value]) : Buffer.from(value);
    }
    return value;
  }
  function defaultVisitor(value, key, path) {
    let arr = value;
    if (value && !path && typeof value === \\"object\\") {
      if (utils_default.endsWith(key, \\"{}\\")) {
        key = metaTokens ? key : key.slice(0, -2);
        value = JSON.stringify(value);
      } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key, \\"[]\\")) && (arr = utils_default.toArray(value))) {
        key = removeBrackets(key);
        arr.forEach(function each(el, index) {
          !(utils_default.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + \\"[]\\",
            convertValue(el)
          );
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path, key, dots), convertValue(value));
    return false;
  }
  const stack = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });
  function build(value, path) {
    if (utils_default.isUndefined(value))
      return;
    if (stack.indexOf(value) !== -1) {
      throw Error(\\"Circular reference detected in \\" + path.join(\\".\\"));
    }
    stack.push(value);
    utils_default.forEach(value, function each(el, key) {
      const result = !(utils_default.isUndefined(el) || el === null) && visitor.call(
        formData,
        el,
        utils_default.isString(key) ? key.trim() : key,
        path,
        exposedHelpers
      );
      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });
    stack.pop();
  }
  if (!utils_default.isObject(obj)) {
    throw new TypeError(\\"data must be an object\\");
  }
  build(obj);
  return formData;
}
var toFormData_default = toFormData;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/AxiosURLSearchParams.js
function encode(str) {
  const charMap = {
    \\"!\\": \\"%21\\",
    \\"'\\": \\"%27\\",
    \\"(\\": \\"%28\\",
    \\")\\": \\"%29\\",
    \\"~\\": \\"%7E\\",
    \\"%20\\": \\"+\\",
    \\"%00\\": \\"\\\\0\\"
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && toFormData_default(params, this, options);
}
var prototype2 = AxiosURLSearchParams.prototype;
prototype2.append = function append(name, value) {
  this._pairs.push([name, value]);
};
prototype2.toString = function toString2(encoder) {
  const _encode2 = encoder ? function(value) {
    return encoder.call(this, value, encode);
  } : encode;
  return this._pairs.map(function each(pair) {
    return _encode2(pair[0]) + \\"=\\" + _encode2(pair[1]);
  }, \\"\\").join(\\"&\\");
};
var AxiosURLSearchParams_default = AxiosURLSearchParams;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/buildURL.js
function encode2(val) {
  return encodeURIComponent(val).replace(/%3A/gi, \\":\\").replace(/%24/g, \\"$\\").replace(/%2C/gi, \\",\\").replace(/%20/g, \\"+\\").replace(/%5B/gi, \\"[\\").replace(/%5D/gi, \\"]\\");
}
function buildURL(url, params, options) {
  if (!params) {
    return url;
  }
  const _encode2 = options && options.encode || encode2;
  const serializeFn = options && options.serialize;
  let serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode2);
  }
  if (serializedParams) {
    const hashmarkIndex = url.indexOf(\\"#\\");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf(\\"?\\") === -1 ? \\"?\\" : \\"&\\") + serializedParams;
  }
  return url;
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/InterceptorManager.js
var InterceptorManager = class {
  constructor() {
    this.handlers = [];
  }
  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle \`then\` for a \`Promise\`
   * @param {Function} rejected The function to handle \`reject\` for a \`Promise\`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }
  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by \`use\`
   *
   * @returns {Boolean} \`true\` if the interceptor was removed, \`false\` otherwise
   */
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }
  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }
  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become \`null\` calling \`eject\`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    utils_default.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
};
var InterceptorManager_default = InterceptorManager;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/defaults/transitional.js
var transitional_default = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/browser/classes/URLSearchParams.js
var URLSearchParams_default = typeof URLSearchParams !== \\"undefined\\" ? URLSearchParams : AxiosURLSearchParams_default;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/browser/classes/FormData.js
var FormData_default = typeof FormData !== \\"undefined\\" ? FormData : null;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/browser/classes/Blob.js
var Blob_default = typeof Blob !== \\"undefined\\" ? Blob : null;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/browser/index.js
var isStandardBrowserEnv = (() => {
  let product;
  if (typeof navigator !== \\"undefined\\" && ((product = navigator.product) === \\"ReactNative\\" || product === \\"NativeScript\\" || product === \\"NS\\")) {
    return false;
  }
  return typeof window !== \\"undefined\\" && typeof document !== \\"undefined\\";
})();
var isStandardBrowserWebWorkerEnv = (() => {
  return typeof WorkerGlobalScope !== \\"undefined\\" && // eslint-disable-next-line no-undef
  self instanceof WorkerGlobalScope && typeof self.importScripts === \\"function\\";
})();
var browser_default = {
  isBrowser: true,
  classes: {
    URLSearchParams: URLSearchParams_default,
    FormData: FormData_default,
    Blob: Blob_default
  },
  isStandardBrowserEnv,
  isStandardBrowserWebWorkerEnv,
  protocols: [\\"http\\", \\"https\\", \\"file\\", \\"blob\\", \\"url\\", \\"data\\"]
};

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/toURLEncodedForm.js
function toURLEncodedForm(data, options) {
  return toFormData_default(data, new browser_default.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (browser_default.isNode && utils_default.isBuffer(value)) {
        this.append(key, value.toString(\\"base64\\"));
        return false;
      }
      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/formDataToJSON.js
function parsePropPath(name) {
  return utils_default.matchAll(/\\\\w+|\\\\[(\\\\w*)]/g, name).map((match) => {
    return match[0] === \\"[]\\" ? \\"\\" : match[1] || match[0];
  });
}
function arrayToObject(arr) {
  const obj = {};
  const keys2 = Object.keys(arr);
  let i;
  const len = keys2.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys2[i];
    obj[key] = arr[key];
  }
  return obj;
}
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];
    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils_default.isArray(target) ? target.length : name;
    if (isLast) {
      if (utils_default.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !utils_default.isObject(target[name])) {
      target[name] = [];
    }
    const result = buildPath(path, value, target[name], index);
    if (result && utils_default.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
    const obj = {};
    utils_default.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}
var formDataToJSON_default = formDataToJSON;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/defaults/index.js
var DEFAULT_CONTENT_TYPE = {
  \\"Content-Type\\": void 0
};
function stringifySafely(rawValue, parser, encoder) {
  if (utils_default.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils_default.trim(rawValue);
    } catch (e) {
      if (e.name !== \\"SyntaxError\\") {
        throw e;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
var defaults = {
  transitional: transitional_default,
  adapter: [\\"xhr\\", \\"http\\"],
  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || \\"\\";
    const hasJSONContentType = contentType.indexOf(\\"application/json\\") > -1;
    const isObjectPayload = utils_default.isObject(data);
    if (isObjectPayload && utils_default.isHTMLForm(data)) {
      data = new FormData(data);
    }
    const isFormData2 = utils_default.isFormData(data);
    if (isFormData2) {
      if (!hasJSONContentType) {
        return data;
      }
      return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;
    }
    if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data)) {
      return data;
    }
    if (utils_default.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils_default.isURLSearchParams(data)) {
      headers.setContentType(\\"application/x-www-form-urlencoded;charset=utf-8\\", false);
      return data.toString();
    }
    let isFileList2;
    if (isObjectPayload) {
      if (contentType.indexOf(\\"application/x-www-form-urlencoded\\") > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }
      if ((isFileList2 = utils_default.isFileList(data)) || contentType.indexOf(\\"multipart/form-data\\") > -1) {
        const _FormData = this.env && this.env.FormData;
        return toFormData_default(
          isFileList2 ? { \\"files[]\\": data } : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }
    if (isObjectPayload || hasJSONContentType) {
      headers.setContentType(\\"application/json\\", false);
      return stringifySafely(data);
    }
    return data;
  }],
  transformResponse: [function transformResponse(data) {
    const transitional2 = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
    const JSONRequested = this.responseType === \\"json\\";
    if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
      const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === \\"SyntaxError\\") {
            throw AxiosError_default.from(e, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }
    return data;
  }],
  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: \\"XSRF-TOKEN\\",
  xsrfHeaderName: \\"X-XSRF-TOKEN\\",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: browser_default.classes.FormData,
    Blob: browser_default.classes.Blob
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      \\"Accept\\": \\"application/json, text/plain, */*\\"
    }
  }
};
utils_default.forEach([\\"delete\\", \\"get\\", \\"head\\"], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});
utils_default.forEach([\\"post\\", \\"put\\", \\"patch\\"], function forEachMethodWithData(method) {
  defaults.headers[method] = utils_default.merge(DEFAULT_CONTENT_TYPE);
});
var defaults_default = defaults;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/parseHeaders.js
var ignoreDuplicateOf = utils_default.toObjectSet([
  \\"age\\",
  \\"authorization\\",
  \\"content-length\\",
  \\"content-type\\",
  \\"etag\\",
  \\"expires\\",
  \\"from\\",
  \\"host\\",
  \\"if-modified-since\\",
  \\"if-unmodified-since\\",
  \\"last-modified\\",
  \\"location\\",
  \\"max-forwards\\",
  \\"proxy-authorization\\",
  \\"referer\\",
  \\"retry-after\\",
  \\"user-agent\\"
]);
var parseHeaders_default = (rawHeaders) => {
  const parsed = {};
  let key;
  let val;
  let i;
  rawHeaders && rawHeaders.split(\\"\\\\n\\").forEach(function parser(line) {
    i = line.indexOf(\\":\\");
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();
    if (!key || parsed[key] && ignoreDuplicateOf[key]) {
      return;
    }
    if (key === \\"set-cookie\\") {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + \\", \\" + val : val;
    }
  });
  return parsed;
};

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/AxiosHeaders.js
var $internals = Symbol(\\"internals\\");
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
  const tokens = /* @__PURE__ */ Object.create(null);
  const tokensRE = /([^\\\\s,;=]+)\\\\s*(?:=\\\\s*([^,;]+))?/g;
  let match;
  while (match = tokensRE.exec(str)) {
    tokens[match[1]] = match[2];
  }
  return tokens;
}
var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^\`|~,!#$%&'*+.]+$/.test(str.trim());
function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
  if (utils_default.isFunction(filter2)) {
    return filter2.call(this, value, header);
  }
  if (isHeaderNameFilter) {
    value = header;
  }
  if (!utils_default.isString(value))
    return;
  if (utils_default.isString(filter2)) {
    return value.indexOf(filter2) !== -1;
  }
  if (utils_default.isRegExp(filter2)) {
    return filter2.test(value);
  }
}
function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\\\\d])(\\\\w*)/g, (w, char, str) => {
    return char.toUpperCase() + str;
  });
}
function buildAccessors(obj, header) {
  const accessorName = utils_default.toCamelCase(\\" \\" + header);
  [\\"get\\", \\"set\\", \\"has\\"].forEach((methodName) => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}
var AxiosHeaders = class {
  constructor(headers) {
    headers && this.set(headers);
  }
  set(header, valueOrRewrite, rewrite) {
    const self2 = this;
    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);
      if (!lHeader) {
        throw new Error(\\"header name must be a non-empty string\\");
      }
      const key = utils_default.findKey(self2, lHeader);
      if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
        self2[key || _header] = normalizeValue(_value);
      }
    }
    const setHeaders = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
    if (utils_default.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite);
    } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(parseHeaders_default(header), valueOrRewrite);
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }
    return this;
  }
  get(header, parser) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      if (key) {
        const value = this[key];
        if (!parser) {
          return value;
        }
        if (parser === true) {
          return parseTokens(value);
        }
        if (utils_default.isFunction(parser)) {
          return parser.call(this, value, key);
        }
        if (utils_default.isRegExp(parser)) {
          return parser.exec(value);
        }
        throw new TypeError(\\"parser must be boolean|regexp|function\\");
      }
    }
  }
  has(header, matcher) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }
    return false;
  }
  delete(header, matcher) {
    const self2 = this;
    let deleted = false;
    function deleteHeader(_header) {
      _header = normalizeHeader(_header);
      if (_header) {
        const key = utils_default.findKey(self2, _header);
        if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
          delete self2[key];
          deleted = true;
        }
      }
    }
    if (utils_default.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }
    return deleted;
  }
  clear(matcher) {
    const keys2 = Object.keys(this);
    let i = keys2.length;
    let deleted = false;
    while (i--) {
      const key = keys2[i];
      if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }
    return deleted;
  }
  normalize(format) {
    const self2 = this;
    const headers = {};
    utils_default.forEach(this, (value, header) => {
      const key = utils_default.findKey(headers, header);
      if (key) {
        self2[key] = normalizeValue(value);
        delete self2[header];
        return;
      }
      const normalized = format ? formatHeader(header) : String(header).trim();
      if (normalized !== header) {
        delete self2[header];
      }
      self2[normalized] = normalizeValue(value);
      headers[normalized] = true;
    });
    return this;
  }
  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }
  toJSON(asStrings) {
    const obj = /* @__PURE__ */ Object.create(null);
    utils_default.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils_default.isArray(value) ? value.join(\\", \\") : value);
    });
    return obj;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + \\": \\" + value).join(\\"\\\\n\\");
  }
  get [Symbol.toStringTag]() {
    return \\"AxiosHeaders\\";
  }
  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }
  static concat(first, ...targets) {
    const computed = new this(first);
    targets.forEach((target) => computed.set(target));
    return computed;
  }
  static accessor(header) {
    const internals = this[$internals] = this[$internals] = {
      accessors: {}
    };
    const accessors = internals.accessors;
    const prototype3 = this.prototype;
    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);
      if (!accessors[lHeader]) {
        buildAccessors(prototype3, _header);
        accessors[lHeader] = true;
      }
    }
    utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
    return this;
  }
};
AxiosHeaders.accessor([\\"Content-Type\\", \\"Content-Length\\", \\"Accept\\", \\"Accept-Encoding\\", \\"User-Agent\\", \\"Authorization\\"]);
utils_default.freezeMethods(AxiosHeaders.prototype);
utils_default.freezeMethods(AxiosHeaders);
var AxiosHeaders_default = AxiosHeaders;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/transformData.js
function transformData(fns, response) {
  const config = this || defaults_default;
  const context = response || config;
  const headers = AxiosHeaders_default.from(context.headers);
  let data = context.data;
  utils_default.forEach(fns, function transform2(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
  });
  headers.normalize();
  return data;
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/cancel/isCancel.js
function isCancel(value) {
  return !!(value && value.__CANCEL__);
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/cancel/CanceledError.js
function CanceledError(message, config, request) {
  AxiosError_default.call(this, message == null ? \\"canceled\\" : message, AxiosError_default.ERR_CANCELED, config, request);
  this.name = \\"CanceledError\\";
}
utils_default.inherits(CanceledError, AxiosError_default, {
  __CANCEL__: true
});
var CanceledError_default = CanceledError;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/settle.js
function settle(resolve, reject, response) {
  const validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError_default(
      \\"Request failed with status code \\" + response.status,
      [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/cookies.js
var cookies_default = browser_default.isStandardBrowserEnv ? function standardBrowserEnv() {
  return {
    write: function write(name, value, expires, path, domain, secure) {
      const cookie = [];
      cookie.push(name + \\"=\\" + encodeURIComponent(value));
      if (utils_default.isNumber(expires)) {
        cookie.push(\\"expires=\\" + new Date(expires).toGMTString());
      }
      if (utils_default.isString(path)) {
        cookie.push(\\"path=\\" + path);
      }
      if (utils_default.isString(domain)) {
        cookie.push(\\"domain=\\" + domain);
      }
      if (secure === true) {
        cookie.push(\\"secure\\");
      }
      document.cookie = cookie.join(\\"; \\");
    },
    read: function read(name) {
      const match = document.cookie.match(new RegExp(\\"(^|;\\\\\\\\s*)(\\" + name + \\")=([^;]*)\\"));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove: function remove(name) {
      this.write(name, \\"\\", Date.now() - 864e5);
    }
  };
}() : function nonStandardBrowserEnv() {
  return {
    write: function write() {
    },
    read: function read() {
      return null;
    },
    remove: function remove() {
    }
  };
}();

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/isAbsoluteURL.js
function isAbsoluteURL(url) {
  return /^([a-z][a-z\\\\d+\\\\-.]*:)?\\\\/\\\\//i.test(url);
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/combineURLs.js
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\\\\/+$/, \\"\\") + \\"/\\" + relativeURL.replace(/^\\\\/+/, \\"\\") : baseURL;
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/buildFullPath.js
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/isURLSameOrigin.js
var isURLSameOrigin_default = browser_default.isStandardBrowserEnv ? function standardBrowserEnv2() {
  const msie = /(msie|trident)/i.test(navigator.userAgent);
  const urlParsingNode = document.createElement(\\"a\\");
  let originURL;
  function resolveURL(url) {
    let href = url;
    if (msie) {
      urlParsingNode.setAttribute(\\"href\\", href);
      href = urlParsingNode.href;
    }
    urlParsingNode.setAttribute(\\"href\\", href);
    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, \\"\\") : \\"\\",
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\\\?/, \\"\\") : \\"\\",
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, \\"\\") : \\"\\",
      hostname: urlParsingNode.hostname,
      port: urlParsingNode.port,
      pathname: urlParsingNode.pathname.charAt(0) === \\"/\\" ? urlParsingNode.pathname : \\"/\\" + urlParsingNode.pathname
    };
  }
  originURL = resolveURL(window.location.href);
  return function isURLSameOrigin(requestURL) {
    const parsed = utils_default.isString(requestURL) ? resolveURL(requestURL) : requestURL;
    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
  };
}() : function nonStandardBrowserEnv2() {
  return function isURLSameOrigin() {
    return true;
  };
}();

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/parseProtocol.js
function parseProtocol(url) {
  const match = /^([-+\\\\w]{1,25})(:?\\\\/\\\\/|:)/.exec(url);
  return match && match[1] || \\"\\";
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/speedometer.js
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;
  min = min !== void 0 ? min : 1e3;
  return function push(chunkLength) {
    const now = Date.now();
    const startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now;
    }
    bytes[head] = chunkLength;
    timestamps[head] = now;
    let i = tail;
    let bytesCount = 0;
    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now - firstSampleTS < min) {
      return;
    }
    const passed = startedAt && now - startedAt;
    return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
  };
}
var speedometer_default = speedometer;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/adapters/xhr.js
function progressEventReducer(listener, isDownloadStream) {
  let bytesNotified = 0;
  const _speedometer = speedometer_default(50, 250);
  return (e) => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : void 0;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;
    bytesNotified = loaded;
    const data = {
      loaded,
      total,
      progress: total ? loaded / total : void 0,
      bytes: progressBytes,
      rate: rate ? rate : void 0,
      estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
      event: e
    };
    data[isDownloadStream ? \\"download\\" : \\"upload\\"] = true;
    listener(data);
  };
}
var isXHRAdapterSupported = typeof XMLHttpRequest !== \\"undefined\\";
var xhr_default = isXHRAdapterSupported && function(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    let requestData = config.data;
    const requestHeaders = AxiosHeaders_default.from(config.headers).normalize();
    const responseType = config.responseType;
    let onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }
      if (config.signal) {
        config.signal.removeEventListener(\\"abort\\", onCanceled);
      }
    }
    if (utils_default.isFormData(requestData)) {
      if (browser_default.isStandardBrowserEnv || browser_default.isStandardBrowserWebWorkerEnv) {
        requestHeaders.setContentType(false);
      } else {
        requestHeaders.setContentType(\\"multipart/form-data;\\", false);
      }
    }
    let request = new XMLHttpRequest();
    if (config.auth) {
      const username = config.auth.username || \\"\\";
      const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : \\"\\";
      requestHeaders.set(\\"Authorization\\", \\"Basic \\" + btoa(username + \\":\\" + password));
    }
    const fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
    request.timeout = config.timeout;
    function onloadend() {
      if (!request) {
        return;
      }
      const responseHeaders = AxiosHeaders_default.from(
        \\"getAllResponseHeaders\\" in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === \\"text\\" || responseType === \\"json\\" ? request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };
      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);
      request = null;
    }
    if (\\"onloadend\\" in request) {
      request.onloadend = onloadend;
    } else {
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf(\\"file:\\") === 0)) {
          return;
        }
        setTimeout(onloadend);
      };
    }
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }
      reject(new AxiosError_default(\\"Request aborted\\", AxiosError_default.ECONNABORTED, config, request));
      request = null;
    };
    request.onerror = function handleError() {
      reject(new AxiosError_default(\\"Network Error\\", AxiosError_default.ERR_NETWORK, config, request));
      request = null;
    };
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = config.timeout ? \\"timeout of \\" + config.timeout + \\"ms exceeded\\" : \\"timeout exceeded\\";
      const transitional2 = config.transitional || transitional_default;
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(new AxiosError_default(
        timeoutErrorMessage,
        transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,
        config,
        request
      ));
      request = null;
    };
    if (browser_default.isStandardBrowserEnv) {
      const xsrfValue = (config.withCredentials || isURLSameOrigin_default(fullPath)) && config.xsrfCookieName && cookies_default.read(config.xsrfCookieName);
      if (xsrfValue) {
        requestHeaders.set(config.xsrfHeaderName, xsrfValue);
      }
    }
    requestData === void 0 && requestHeaders.setContentType(null);
    if (\\"setRequestHeader\\" in request) {
      utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }
    if (!utils_default.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }
    if (responseType && responseType !== \\"json\\") {
      request.responseType = config.responseType;
    }
    if (typeof config.onDownloadProgress === \\"function\\") {
      request.addEventListener(\\"progress\\", progressEventReducer(config.onDownloadProgress, true));
    }
    if (typeof config.onUploadProgress === \\"function\\" && request.upload) {
      request.upload.addEventListener(\\"progress\\", progressEventReducer(config.onUploadProgress));
    }
    if (config.cancelToken || config.signal) {
      onCanceled = (cancel) => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new CanceledError_default(null, config, request) : cancel);
        request.abort();
        request = null;
      };
      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener(\\"abort\\", onCanceled);
      }
    }
    const protocol = parseProtocol(fullPath);
    if (protocol && browser_default.protocols.indexOf(protocol) === -1) {
      reject(new AxiosError_default(\\"Unsupported protocol \\" + protocol + \\":\\", AxiosError_default.ERR_BAD_REQUEST, config));
      return;
    }
    request.send(requestData || null);
  });
};

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/adapters/adapters.js
var knownAdapters = {
  http: null_default,
  xhr: xhr_default
};
utils_default.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, \\"name\\", { value });
    } catch (e) {
    }
    Object.defineProperty(fn, \\"adapterName\\", { value });
  }
});
var adapters_default = {
  getAdapter: (adapters) => {
    adapters = utils_default.isArray(adapters) ? adapters : [adapters];
    const { length } = adapters;
    let nameOrAdapter;
    let adapter;
    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters[i];
      if (adapter = utils_default.isString(nameOrAdapter) ? knownAdapters[nameOrAdapter.toLowerCase()] : nameOrAdapter) {
        break;
      }
    }
    if (!adapter) {
      if (adapter === false) {
        throw new AxiosError_default(
          \`Adapter \${nameOrAdapter} is not supported by the environment\`,
          \\"ERR_NOT_SUPPORT\\"
        );
      }
      throw new Error(
        utils_default.hasOwnProp(knownAdapters, nameOrAdapter) ? \`Adapter '\${nameOrAdapter}' is not available in the build\` : \`Unknown adapter '\${nameOrAdapter}'\`
      );
    }
    if (!utils_default.isFunction(adapter)) {
      throw new TypeError(\\"adapter is not a function\\");
    }
    return adapter;
  },
  adapters: knownAdapters
};

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/dispatchRequest.js
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
  if (config.signal && config.signal.aborted) {
    throw new CanceledError_default(null, config);
  }
}
function dispatchRequest(config) {
  throwIfCancellationRequested(config);
  config.headers = AxiosHeaders_default.from(config.headers);
  config.data = transformData.call(
    config,
    config.transformRequest
  );
  if ([\\"post\\", \\"put\\", \\"patch\\"].indexOf(config.method) !== -1) {
    config.headers.setContentType(\\"application/x-www-form-urlencoded\\", false);
  }
  const adapter = adapters_default.getAdapter(config.adapter || defaults_default.adapter);
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);
    response.data = transformData.call(
      config,
      config.transformResponse,
      response
    );
    response.headers = AxiosHeaders_default.from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
      }
    }
    return Promise.reject(reason);
  });
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/mergeConfig.js
var headersToObject = (thing) => thing instanceof AxiosHeaders_default ? thing.toJSON() : thing;
function mergeConfig(config1, config2) {
  config2 = config2 || {};
  const config = {};
  function getMergedValue(target, source, caseless) {
    if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
      return utils_default.merge.call({ caseless }, target, source);
    } else if (utils_default.isPlainObject(source)) {
      return utils_default.merge({}, source);
    } else if (utils_default.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(a, b, caseless) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(a, b, caseless);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a, caseless);
    }
  }
  function valueFromConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    }
  }
  function defaultToConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a);
    }
  }
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(void 0, a);
    }
  }
  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
  };
  utils_default.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge2 = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge2(config1[prop], config2[prop], prop);
    utils_default.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/env/data.js
var VERSION = \\"1.4.0\\";

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/validator.js
var validators = {};
[\\"object\\", \\"boolean\\", \\"number\\", \\"function\\", \\"string\\", \\"symbol\\"].forEach((type, i) => {
  validators[type] = function validator(thing) {
    return typeof thing === type || \\"a\\" + (i < 1 ? \\"n \\" : \\" \\") + type;
  };
});
var deprecatedWarnings = {};
validators.transitional = function transitional(validator, version2, message) {
  function formatMessage(opt, desc) {
    return \\"[Axios v\\" + VERSION + \\"] Transitional option '\\" + opt + \\"'\\" + desc + (message ? \\". \\" + message : \\"\\");
  }
  return (value, opt, opts) => {
    if (validator === false) {
      throw new AxiosError_default(
        formatMessage(opt, \\" has been removed\\" + (version2 ? \\" in \\" + version2 : \\"\\")),
        AxiosError_default.ERR_DEPRECATED
      );
    }
    if (version2 && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(
        formatMessage(
          opt,
          \\" has been deprecated since v\\" + version2 + \\" and will be removed in the near future\\"
        )
      );
    }
    return validator ? validator(value, opt, opts) : true;
  };
};
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== \\"object\\") {
    throw new AxiosError_default(\\"options must be an object\\", AxiosError_default.ERR_BAD_OPTION_VALUE);
  }
  const keys2 = Object.keys(options);
  let i = keys2.length;
  while (i-- > 0) {
    const opt = keys2[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === void 0 || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError_default(\\"option \\" + opt + \\" must be \\" + result, AxiosError_default.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError_default(\\"Unknown option \\" + opt, AxiosError_default.ERR_BAD_OPTION);
    }
  }
}
var validator_default = {
  assertOptions,
  validators
};

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/Axios.js
var validators2 = validator_default.validators;
var Axios = class {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager_default(),
      response: new InterceptorManager_default()
    };
  }
  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  request(configOrUrl, config) {
    if (typeof configOrUrl === \\"string\\") {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }
    config = mergeConfig(this.defaults, config);
    const { transitional: transitional2, paramsSerializer, headers } = config;
    if (transitional2 !== void 0) {
      validator_default.assertOptions(transitional2, {
        silentJSONParsing: validators2.transitional(validators2.boolean),
        forcedJSONParsing: validators2.transitional(validators2.boolean),
        clarifyTimeoutError: validators2.transitional(validators2.boolean)
      }, false);
    }
    if (paramsSerializer != null) {
      if (utils_default.isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        };
      } else {
        validator_default.assertOptions(paramsSerializer, {
          encode: validators2.function,
          serialize: validators2.function
        }, true);
      }
    }
    config.method = (config.method || this.defaults.method || \\"get\\").toLowerCase();
    let contextHeaders;
    contextHeaders = headers && utils_default.merge(
      headers.common,
      headers[config.method]
    );
    contextHeaders && utils_default.forEach(
      [\\"delete\\", \\"get\\", \\"head\\", \\"post\\", \\"put\\", \\"patch\\", \\"common\\"],
      (method) => {
        delete headers[method];
      }
    );
    config.headers = AxiosHeaders_default.concat(contextHeaders, headers);
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === \\"function\\" && interceptor.runWhen(config) === false) {
        return;
      }
      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    let promise;
    let i = 0;
    let len;
    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), void 0];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;
      promise = Promise.resolve(config);
      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }
      return promise;
    }
    len = requestInterceptorChain.length;
    let newConfig = config;
    i = 0;
    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }
    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }
    i = 0;
    len = responseInterceptorChain.length;
    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }
    return promise;
  }
  getUri(config) {
    config = mergeConfig(this.defaults, config);
    const fullPath = buildFullPath(config.baseURL, config.url);
    return buildURL(fullPath, config.params, config.paramsSerializer);
  }
};
utils_default.forEach([\\"delete\\", \\"get\\", \\"head\\", \\"options\\"], function forEachMethodNoData2(method) {
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});
utils_default.forEach([\\"post\\", \\"put\\", \\"patch\\"], function forEachMethodWithData2(method) {
  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig(config || {}, {
        method,
        headers: isForm ? {
          \\"Content-Type\\": \\"multipart/form-data\\"
        } : {},
        url,
        data
      }));
    };
  }
  Axios.prototype[method] = generateHTTPMethod();
  Axios.prototype[method + \\"Form\\"] = generateHTTPMethod(true);
});
var Axios_default = Axios;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/cancel/CancelToken.js
var CancelToken = class {
  constructor(executor) {
    if (typeof executor !== \\"function\\") {
      throw new TypeError(\\"executor must be a function.\\");
    }
    let resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });
    const token = this;
    this.promise.then((cancel) => {
      if (!token._listeners)
        return;
      let i = token._listeners.length;
      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });
    this.promise.then = (onfulfilled) => {
      let _resolve;
      const promise = new Promise((resolve) => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);
      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };
      return promise;
    };
    executor(function cancel(message, config, request) {
      if (token.reason) {
        return;
      }
      token.reason = new CanceledError_default(message, config, request);
      resolvePromise(token.reason);
    });
  }
  /**
   * Throws a \`CanceledError\` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }
  /**
   * Subscribe to the cancel signal
   */
  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }
    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }
  /**
   * Unsubscribe from the cancel signal
   */
  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }
  /**
   * Returns an object that contains a new \`CancelToken\` and a function that, when called,
   * cancels the \`CancelToken\`.
   */
  static source() {
    let cancel;
    const token = new CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  }
};
var CancelToken_default = CancelToken;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/spread.js
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/isAxiosError.js
function isAxiosError(payload) {
  return utils_default.isObject(payload) && payload.isAxiosError === true;
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/HttpStatusCode.js
var HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511
};
Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});
var HttpStatusCode_default = HttpStatusCode;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/axios.js
function createInstance(defaultConfig) {
  const context = new Axios_default(defaultConfig);
  const instance = bind(Axios_default.prototype.request, context);
  utils_default.extend(instance, Axios_default.prototype, context, { allOwnKeys: true });
  utils_default.extend(instance, context, null, { allOwnKeys: true });
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };
  return instance;
}
var axios = createInstance(defaults_default);
axios.Axios = Axios_default;
axios.CanceledError = CanceledError_default;
axios.CancelToken = CancelToken_default;
axios.isCancel = isCancel;
axios.VERSION = VERSION;
axios.toFormData = toFormData_default;
axios.AxiosError = AxiosError_default;
axios.Cancel = axios.CanceledError;
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = spread;
axios.isAxiosError = isAxiosError;
axios.mergeConfig = mergeConfig;
axios.AxiosHeaders = AxiosHeaders_default;
axios.formToJSON = (thing) => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
axios.HttpStatusCode = HttpStatusCode_default;
axios.default = axios;
var axios_default = axios;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/index.js
var {
  Axios: Axios2,
  AxiosError: AxiosError2,
  CanceledError: CanceledError2,
  isCancel: isCancel2,
  CancelToken: CancelToken2,
  VERSION: VERSION2,
  all: all2,
  Cancel,
  isAxiosError: isAxiosError2,
  spread: spread2,
  toFormData: toFormData2,
  AxiosHeaders: AxiosHeaders2,
  HttpStatusCode: HttpStatusCode2,
  formToJSON,
  mergeConfig: mergeConfig2
} = axios_default;

// src/core/fetcher/Fetcher.ts
function fetcherImpl(args) {
  return __async(this, null, function* () {
    var _a, _b;
    const headers = {};
    if (args.body !== void 0 && args.contentType != null) {
      headers[\\"Content-Type\\"] = args.contentType;
    }
    if (args.headers != null) {
      for (const [key, value] of Object.entries(args.headers)) {
        if (value != null) {
          headers[key] = value;
        }
      }
    }
    try {
      const response = yield axios_default({
        url: args.url,
        params: args.queryParameters,
        method: args.method,
        headers,
        data: args.body,
        validateStatus: () => true,
        transformResponse: (response2) => response2,
        timeout: args.timeoutMs,
        transitional: {
          clarifyTimeoutError: true
        },
        withCredentials: args.withCredentials,
        adapter: args.adapter,
        onUploadProgress: args.onUploadProgress,
        maxBodyLength: Infinity,
        maxContentLength: Infinity,
        responseType: (_a = args.responseType) != null ? _a : \\"json\\"
      });
      let body;
      if (args.responseType === \\"blob\\") {
        body = response.data;
      } else if (response.data != null && response.data.length > 0) {
        try {
          body = (_b = JSON.parse(response.data)) != null ? _b : void 0;
        } catch (e) {
          return {
            ok: false,
            error: {
              reason: \\"non-json\\",
              statusCode: response.status,
              rawBody: response.data
            }
          };
        }
      }
      if (response.status >= 200 && response.status < 400) {
        return {
          ok: true,
          body
        };
      } else {
        return {
          ok: false,
          error: {
            reason: \\"status-code\\",
            statusCode: response.status,
            body
          }
        };
      }
    } catch (error) {
      if (error.code === \\"ETIMEDOUT\\") {
        return {
          ok: false,
          error: {
            reason: \\"timeout\\"
          }
        };
      }
      return {
        ok: false,
        error: {
          reason: \\"unknown\\",
          errorMessage: error.message
        }
      };
    }
  });
}
var fetcher = fetcherImpl;

// src/core/fetcher/Supplier.ts
var Supplier = {
  get: (supplier) => __async(void 0, null, function* () {
    if (typeof supplier === \\"function\\") {
      return supplier();
    } else {
      return supplier;
    }
  })
};

// .yarn/cache/js-base64-npm-3.7.2-706fb77a0b-573f28e9a2.zip/node_modules/js-base64/base64.mjs
var version = \\"3.7.2\\";
var VERSION3 = version;
var _hasatob = typeof atob === \\"function\\";
var _hasbtoa = typeof btoa === \\"function\\";
var _hasBuffer = typeof Buffer === \\"function\\";
var _TD = typeof TextDecoder === \\"function\\" ? new TextDecoder() : void 0;
var _TE = typeof TextEncoder === \\"function\\" ? new TextEncoder() : void 0;
var b64ch = \\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\";
var b64chs = Array.prototype.slice.call(b64ch);
var b64tab = ((a) => {
  let tab = {};
  a.forEach((c, i) => tab[c] = i);
  return tab;
})(b64chs);
var b64re = /^(?:[A-Za-z\\\\d+\\\\/]{4})*?(?:[A-Za-z\\\\d+\\\\/]{2}(?:==)?|[A-Za-z\\\\d+\\\\/]{3}=?)?$/;
var _fromCC = String.fromCharCode.bind(String);
var _U8Afrom = typeof Uint8Array.from === \\"function\\" ? Uint8Array.from.bind(Uint8Array) : (it, fn = (x) => x) => new Uint8Array(Array.prototype.slice.call(it, 0).map(fn));
var _mkUriSafe = (src) => src.replace(/=/g, \\"\\").replace(/[+\\\\/]/g, (m0) => m0 == \\"+\\" ? \\"-\\" : \\"_\\");
var _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\\\\+\\\\/]/g, \\"\\");
var btoaPolyfill = (bin) => {
  let u32, c0, c1, c2, asc = \\"\\";
  const pad = bin.length % 3;
  for (let i = 0; i < bin.length; ) {
    if ((c0 = bin.charCodeAt(i++)) > 255 || (c1 = bin.charCodeAt(i++)) > 255 || (c2 = bin.charCodeAt(i++)) > 255)
      throw new TypeError(\\"invalid character found\\");
    u32 = c0 << 16 | c1 << 8 | c2;
    asc += b64chs[u32 >> 18 & 63] + b64chs[u32 >> 12 & 63] + b64chs[u32 >> 6 & 63] + b64chs[u32 & 63];
  }
  return pad ? asc.slice(0, pad - 3) + \\"===\\".substring(pad) : asc;
};
var _btoa = _hasbtoa ? (bin) => btoa(bin) : _hasBuffer ? (bin) => Buffer.from(bin, \\"binary\\").toString(\\"base64\\") : btoaPolyfill;
var _fromUint8Array = _hasBuffer ? (u8a) => Buffer.from(u8a).toString(\\"base64\\") : (u8a) => {
  const maxargs = 4096;
  let strs = [];
  for (let i = 0, l = u8a.length; i < l; i += maxargs) {
    strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));
  }
  return _btoa(strs.join(\\"\\"));
};
var fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);
var cb_utob = (c) => {
  if (c.length < 2) {
    var cc = c.charCodeAt(0);
    return cc < 128 ? c : cc < 2048 ? _fromCC(192 | cc >>> 6) + _fromCC(128 | cc & 63) : _fromCC(224 | cc >>> 12 & 15) + _fromCC(128 | cc >>> 6 & 63) + _fromCC(128 | cc & 63);
  } else {
    var cc = 65536 + (c.charCodeAt(0) - 55296) * 1024 + (c.charCodeAt(1) - 56320);
    return _fromCC(240 | cc >>> 18 & 7) + _fromCC(128 | cc >>> 12 & 63) + _fromCC(128 | cc >>> 6 & 63) + _fromCC(128 | cc & 63);
  }
};
var re_utob = /[\\\\uD800-\\\\uDBFF][\\\\uDC00-\\\\uDFFFF]|[^\\\\x00-\\\\x7F]/g;
var utob = (u) => u.replace(re_utob, cb_utob);
var _encode = _hasBuffer ? (s) => Buffer.from(s, \\"utf8\\").toString(\\"base64\\") : _TE ? (s) => _fromUint8Array(_TE.encode(s)) : (s) => _btoa(utob(s));
var encode3 = (src, urlsafe = false) => urlsafe ? _mkUriSafe(_encode(src)) : _encode(src);
var encodeURI = (src) => encode3(src, true);
var re_btou = /[\\\\xC0-\\\\xDF][\\\\x80-\\\\xBF]|[\\\\xE0-\\\\xEF][\\\\x80-\\\\xBF]{2}|[\\\\xF0-\\\\xF7][\\\\x80-\\\\xBF]{3}/g;
var cb_btou = (cccc) => {
  switch (cccc.length) {
    case 4:
      var cp = (7 & cccc.charCodeAt(0)) << 18 | (63 & cccc.charCodeAt(1)) << 12 | (63 & cccc.charCodeAt(2)) << 6 | 63 & cccc.charCodeAt(3), offset = cp - 65536;
      return _fromCC((offset >>> 10) + 55296) + _fromCC((offset & 1023) + 56320);
    case 3:
      return _fromCC((15 & cccc.charCodeAt(0)) << 12 | (63 & cccc.charCodeAt(1)) << 6 | 63 & cccc.charCodeAt(2));
    default:
      return _fromCC((31 & cccc.charCodeAt(0)) << 6 | 63 & cccc.charCodeAt(1));
  }
};
var btou = (b) => b.replace(re_btou, cb_btou);
var atobPolyfill = (asc) => {
  asc = asc.replace(/\\\\s+/g, \\"\\");
  if (!b64re.test(asc))
    throw new TypeError(\\"malformed base64.\\");
  asc += \\"==\\".slice(2 - (asc.length & 3));
  let u24, bin = \\"\\", r1, r2;
  for (let i = 0; i < asc.length; ) {
    u24 = b64tab[asc.charAt(i++)] << 18 | b64tab[asc.charAt(i++)] << 12 | (r1 = b64tab[asc.charAt(i++)]) << 6 | (r2 = b64tab[asc.charAt(i++)]);
    bin += r1 === 64 ? _fromCC(u24 >> 16 & 255) : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255) : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);
  }
  return bin;
};
var _atob = _hasatob ? (asc) => atob(_tidyB64(asc)) : _hasBuffer ? (asc) => Buffer.from(asc, \\"base64\\").toString(\\"binary\\") : atobPolyfill;
var _toUint8Array = _hasBuffer ? (a) => _U8Afrom(Buffer.from(a, \\"base64\\")) : (a) => _U8Afrom(_atob(a), (c) => c.charCodeAt(0));
var toUint8Array = (a) => _toUint8Array(_unURI(a));
var _decode = _hasBuffer ? (a) => Buffer.from(a, \\"base64\\").toString(\\"utf8\\") : _TD ? (a) => _TD.decode(_toUint8Array(a)) : (a) => btou(_atob(a));
var _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == \\"-\\" ? \\"+\\" : \\"/\\"));
var decode = (src) => _decode(_unURI(src));
var isValid = (src) => {
  if (typeof src !== \\"string\\")
    return false;
  const s = src.replace(/\\\\s+/g, \\"\\").replace(/={0,2}$/, \\"\\");
  return !/[^\\\\s0-9a-zA-Z\\\\+/]/.test(s) || !/[^\\\\s0-9a-zA-Z\\\\-_]/.test(s);
};
var _noEnum = (v) => {
  return {
    value: v,
    enumerable: false,
    writable: true,
    configurable: true
  };
};
var extendString = function() {
  const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));
  _add(\\"fromBase64\\", function() {
    return decode(this);
  });
  _add(\\"toBase64\\", function(urlsafe) {
    return encode3(this, urlsafe);
  });
  _add(\\"toBase64URI\\", function() {
    return encode3(this, true);
  });
  _add(\\"toBase64URL\\", function() {
    return encode3(this, true);
  });
  _add(\\"toUint8Array\\", function() {
    return toUint8Array(this);
  });
};
var extendUint8Array = function() {
  const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));
  _add(\\"toBase64\\", function(urlsafe) {
    return fromUint8Array(this, urlsafe);
  });
  _add(\\"toBase64URI\\", function() {
    return fromUint8Array(this, true);
  });
  _add(\\"toBase64URL\\", function() {
    return fromUint8Array(this, true);
  });
};
var extendBuiltins = () => {
  extendString();
  extendUint8Array();
};
var gBase64 = {
  version,
  VERSION: VERSION3,
  atob: _atob,
  atobPolyfill,
  btoa: _btoa,
  btoaPolyfill,
  fromBase64: decode,
  toBase64: encode3,
  encode: encode3,
  encodeURI,
  encodeURL: encodeURI,
  utob,
  btou,
  decode,
  isValid,
  fromUint8Array,
  toUint8Array,
  extendString,
  extendUint8Array,
  extendBuiltins
};

// src/core/auth/BasicAuth.ts
var BASIC_AUTH_HEADER_PREFIX = /^Basic /i;
var BasicAuth = {
  toAuthorizationHeader: (basicAuth) => {
    if (basicAuth == null) {
      return void 0;
    }
    const token = gBase64.encode(\`\${basicAuth.username}:\${basicAuth.password}\`);
    return \`Basic \${token}\`;
  },
  fromAuthorizationHeader: (header) => {
    const credentials = header.replace(BASIC_AUTH_HEADER_PREFIX, \\"\\");
    const decoded = gBase64.decode(credentials);
    const [username, password] = decoded.split(\\":\\", 2);
    if (username == null || password == null) {
      throw new Error(\\"Invalid basic auth\\");
    }
    return {
      username,
      password
    };
  }
};

// src/core/auth/BearerToken.ts
var BEARER_AUTH_HEADER_PREFIX = /^Bearer /i;
var BearerToken = {
  toAuthorizationHeader: (token) => {
    if (token == null) {
      return void 0;
    }
    return \`Bearer \${token}\`;
  },
  fromAuthorizationHeader: (header) => {
    return header.replace(BEARER_AUTH_HEADER_PREFIX, \\"\\").trim();
  }
};

// src/core/schemas/index.ts
var schemas_exports = {};
__export(schemas_exports, {
  JsonError: () => JsonError,
  ParseError: () => ParseError,
  any: () => any,
  boolean: () => boolean,
  date: () => date,
  discriminant: () => discriminant,
  enum_: () => enum_,
  getObjectLikeUtils: () => getObjectLikeUtils,
  getObjectUtils: () => getObjectUtils,
  getSchemaUtils: () => getSchemaUtils,
  isProperty: () => isProperty,
  lazy: () => lazy,
  lazyObject: () => lazyObject,
  list: () => list,
  number: () => number,
  object: () => object,
  optional: () => optional,
  property: () => property,
  record: () => record,
  set: () => set,
  string: () => string,
  stringLiteral: () => stringLiteral,
  transform: () => transform,
  undiscriminatedUnion: () => undiscriminatedUnion,
  union: () => union,
  unknown: () => unknown,
  withParsedProperties: () => withParsedProperties
});

// src/core/schemas/Schema.ts
var SchemaType = {
  DATE: \\"date\\",
  ENUM: \\"enum\\",
  LIST: \\"list\\",
  STRING_LITERAL: \\"stringLiteral\\",
  OBJECT: \\"object\\",
  ANY: \\"any\\",
  BOOLEAN: \\"boolean\\",
  NUMBER: \\"number\\",
  STRING: \\"string\\",
  UNKNOWN: \\"unknown\\",
  RECORD: \\"record\\",
  SET: \\"set\\",
  UNION: \\"union\\",
  UNDISCRIMINATED_UNION: \\"undiscriminatedUnion\\",
  OPTIONAL: \\"optional\\"
};

// src/core/schemas/utils/getErrorMessageForIncorrectType.ts
function getErrorMessageForIncorrectType(value, expectedType) {
  return \`Expected \${expectedType}. Received \${getTypeAsString(value)}.\`;
}
function getTypeAsString(value) {
  if (Array.isArray(value)) {
    return \\"list\\";
  }
  if (value === null) {
    return \\"null\\";
  }
  switch (typeof value) {
    case \\"string\\":
      return \`\\"\${value}\\"\`;
    case \\"number\\":
    case \\"boolean\\":
    case \\"undefined\\":
      return \`\${value}\`;
  }
  return typeof value;
}

// src/core/schemas/utils/maybeSkipValidation.ts
function maybeSkipValidation(schema) {
  return __spreadProps(__spreadValues({}, schema), {
    json: transformAndMaybeSkipValidation(schema.json),
    parse: transformAndMaybeSkipValidation(schema.parse)
  });
}
function transformAndMaybeSkipValidation(transform2) {
  return (value, opts) => __async(this, null, function* () {
    const transformed = yield transform2(value, opts);
    const { skipValidation = false } = opts != null ? opts : {};
    if (!transformed.ok && skipValidation) {
      console.warn(
        [
          \\"Failed to validate.\\",
          ...transformed.errors.map(
            (error) => \\"  - \\" + (error.path.length > 0 ? \`\${error.path.join(\\".\\")}: \${error.message}\` : error.message)
          )
        ].join(\\"\\\\n\\")
      );
      return {
        ok: true,
        value
      };
    } else {
      return transformed;
    }
  });
}

// src/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
function stringifyValidationError(error) {
  if (error.path.length === 0) {
    return error.message;
  }
  return \`\${error.path.join(\\" -> \\")}: \${error.message}\`;
}

// src/core/schemas/builders/schema-utils/JsonError.ts
var JsonError = class extends Error {
  constructor(errors) {
    super(errors.map(stringifyValidationError).join(\\"; \\"));
    this.errors = errors;
    Object.setPrototypeOf(this, JsonError.prototype);
  }
};

// src/core/schemas/builders/schema-utils/ParseError.ts
var ParseError = class extends Error {
  constructor(errors) {
    super(errors.map(stringifyValidationError).join(\\"; \\"));
    this.errors = errors;
    Object.setPrototypeOf(this, ParseError.prototype);
  }
};

// src/core/schemas/builders/schema-utils/getSchemaUtils.ts
function getSchemaUtils(schema) {
  return {
    optional: () => optional(schema),
    transform: (transformer) => transform(schema, transformer),
    parseOrThrow: (raw, opts) => __async(this, null, function* () {
      const parsed = yield schema.parse(raw, opts);
      if (parsed.ok) {
        return parsed.value;
      }
      throw new ParseError(parsed.errors);
    }),
    jsonOrThrow: (parsed, opts) => __async(this, null, function* () {
      const raw = yield schema.json(parsed, opts);
      if (raw.ok) {
        return raw.value;
      }
      throw new JsonError(raw.errors);
    })
  };
}
function optional(schema) {
  const baseSchema = {
    parse: (raw, opts) => {
      if (raw == null) {
        return {
          ok: true,
          value: void 0
        };
      }
      return schema.parse(raw, opts);
    },
    json: (parsed, opts) => {
      if (parsed == null) {
        return {
          ok: true,
          value: null
        };
      }
      return schema.json(parsed, opts);
    },
    getType: () => SchemaType.OPTIONAL
  };
  return __spreadValues(__spreadValues({}, baseSchema), getSchemaUtils(baseSchema));
}
function transform(schema, transformer) {
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      const parsed = yield schema.parse(raw, opts);
      if (!parsed.ok) {
        return parsed;
      }
      return {
        ok: true,
        value: transformer.transform(parsed.value)
      };
    }),
    json: (transformed, opts) => __async(this, null, function* () {
      const parsed = yield transformer.untransform(transformed);
      return schema.json(parsed, opts);
    }),
    getType: () => schema.getType()
  };
  return __spreadValues(__spreadValues({}, baseSchema), getSchemaUtils(baseSchema));
}

// src/core/schemas/builders/date/date.ts
var ISO_8601_REGEX = /^([+-]?\\\\d{4}(?!\\\\d{2}\\\\b))((-?)((0[1-9]|1[0-2])(\\\\3([12]\\\\d|0[1-9]|3[01]))?|W([0-4]\\\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\\\d|[12]\\\\d{2}|3([0-5]\\\\d|6[1-6])))([T\\\\s]((([01]\\\\d|2[0-3])((:?)[0-5]\\\\d)?|24:?00)([.,]\\\\d+(?!:))?)?(\\\\17[0-5]\\\\d([.,]\\\\d+)?)?([zZ]|([+-])([01]\\\\d|2[0-3]):?([0-5]\\\\d)?)?)?)?$/;
function date() {
  const baseSchema = {
    parse: (raw, { breadcrumbsPrefix = [] } = {}) => {
      if (typeof raw !== \\"string\\") {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(raw, \\"string\\")
            }
          ]
        };
      }
      if (!ISO_8601_REGEX.test(raw)) {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(raw, \\"ISO 8601 date string\\")
            }
          ]
        };
      }
      return {
        ok: true,
        value: new Date(raw)
      };
    },
    json: (date2, { breadcrumbsPrefix = [] } = {}) => {
      if (date2 instanceof Date) {
        return {
          ok: true,
          value: date2.toISOString()
        };
      } else {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(date2, \\"Date object\\")
            }
          ]
        };
      }
    },
    getType: () => SchemaType.DATE
  };
  return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
}

// src/core/schemas/utils/createIdentitySchemaCreator.ts
function createIdentitySchemaCreator(schemaType, validate) {
  return () => {
    const baseSchema = {
      parse: validate,
      json: validate,
      getType: () => schemaType
    };
    return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
  };
}

// src/core/schemas/builders/enum/enum.ts
function enum_(values) {
  const validValues = new Set(values);
  const schemaCreator = createIdentitySchemaCreator(
    SchemaType.ENUM,
    (value, { allowUnrecognizedEnumValues, breadcrumbsPrefix = [] } = {}) => {
      if (typeof value !== \\"string\\") {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(value, \\"string\\")
            }
          ]
        };
      }
      if (!validValues.has(value) && !allowUnrecognizedEnumValues) {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(value, \\"enum\\")
            }
          ]
        };
      }
      return {
        ok: true,
        value
      };
    }
  );
  return schemaCreator();
}

// src/core/schemas/builders/lazy/lazy.ts
function lazy(getter) {
  const baseSchema = constructLazyBaseSchema(getter);
  return __spreadValues(__spreadValues({}, baseSchema), getSchemaUtils(baseSchema));
}
function constructLazyBaseSchema(getter) {
  return {
    parse: (raw, opts) => __async(this, null, function* () {
      return (yield getMemoizedSchema(getter)).parse(raw, opts);
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      return (yield getMemoizedSchema(getter)).json(parsed, opts);
    }),
    getType: () => __async(this, null, function* () {
      return (yield getMemoizedSchema(getter)).getType();
    })
  };
}
function getMemoizedSchema(getter) {
  return __async(this, null, function* () {
    const castedGetter = getter;
    if (castedGetter.__zurg_memoized == null) {
      castedGetter.__zurg_memoized = yield getter();
    }
    return castedGetter.__zurg_memoized;
  });
}

// src/core/schemas/utils/entries.ts
function entries(object2) {
  return Object.entries(object2);
}

// src/core/schemas/utils/filterObject.ts
function filterObject(obj, keysToInclude) {
  const keysToIncludeSet = new Set(keysToInclude);
  return Object.entries(obj).reduce((acc, [key, value]) => {
    if (keysToIncludeSet.has(key)) {
      acc[key] = value;
    }
    return acc;
  }, {});
}

// src/core/schemas/utils/isPlainObject.ts
function isPlainObject2(value) {
  if (typeof value !== \\"object\\" || value === null) {
    return false;
  }
  if (Object.getPrototypeOf(value) === null) {
    return true;
  }
  let proto = value;
  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }
  return Object.getPrototypeOf(value) === proto;
}

// src/core/schemas/utils/keys.ts
function keys(object2) {
  return Object.keys(object2);
}

// src/core/schemas/utils/partition.ts
function partition(items, predicate) {
  const trueItems = [], falseItems = [];
  for (const item of items) {
    if (predicate(item)) {
      trueItems.push(item);
    } else {
      falseItems.push(item);
    }
  }
  return [trueItems, falseItems];
}

// src/core/schemas/builders/object-like/getObjectLikeUtils.ts
function getObjectLikeUtils(schema) {
  return {
    withParsedProperties: (properties) => withParsedProperties(schema, properties)
  };
}
function withParsedProperties(objectLike, properties) {
  const objectSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      const parsedObject = yield objectLike.parse(raw, opts);
      if (!parsedObject.ok) {
        return parsedObject;
      }
      const additionalProperties = Object.entries(properties).reduce(
        (processed, [key, value]) => {
          return __spreadProps(__spreadValues({}, processed), {
            [key]: typeof value === \\"function\\" ? value(parsedObject.value) : value
          });
        },
        {}
      );
      return {
        ok: true,
        value: __spreadValues(__spreadValues({}, parsedObject.value), additionalProperties)
      };
    }),
    json: (parsed, opts) => {
      var _a;
      if (!isPlainObject2(parsed)) {
        return {
          ok: false,
          errors: [
            {
              path: (_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [],
              message: getErrorMessageForIncorrectType(parsed, \\"object\\")
            }
          ]
        };
      }
      const addedPropertyKeys = new Set(Object.keys(properties));
      const parsedWithoutAddedProperties = filterObject(
        parsed,
        Object.keys(parsed).filter((key) => !addedPropertyKeys.has(key))
      );
      return objectLike.json(parsedWithoutAddedProperties, opts);
    },
    getType: () => objectLike.getType()
  };
  return __spreadValues(__spreadValues(__spreadValues({}, objectSchema), getSchemaUtils(objectSchema)), getObjectLikeUtils(objectSchema));
}

// src/core/schemas/builders/object/property.ts
function property(rawKey, valueSchema) {
  return {
    rawKey,
    valueSchema,
    isProperty: true
  };
}
function isProperty(maybeProperty) {
  return maybeProperty.isProperty;
}

// src/core/schemas/builders/object/object.ts
function object(schemas) {
  const baseSchema = {
    _getRawProperties: () => Promise.resolve(
      Object.entries(schemas).map(
        ([parsedKey, propertySchema]) => isProperty(propertySchema) ? propertySchema.rawKey : parsedKey
      )
    ),
    _getParsedProperties: () => Promise.resolve(keys(schemas)),
    parse: (raw, opts) => __async(this, null, function* () {
      const rawKeyToProperty = {};
      const requiredKeys = [];
      for (const [parsedKey, schemaOrObjectProperty] of entries(schemas)) {
        const rawKey = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.rawKey : parsedKey;
        const valueSchema = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.valueSchema : schemaOrObjectProperty;
        const property2 = {
          rawKey,
          parsedKey,
          valueSchema
        };
        rawKeyToProperty[rawKey] = property2;
        if (yield isSchemaRequired(valueSchema)) {
          requiredKeys.push(rawKey);
        }
      }
      return validateAndTransformObject({
        value: raw,
        requiredKeys,
        getProperty: (rawKey) => {
          const property2 = rawKeyToProperty[rawKey];
          if (property2 == null) {
            return void 0;
          }
          return {
            transformedKey: property2.parsedKey,
            transform: (propertyValue) => {
              var _a;
              return property2.valueSchema.parse(propertyValue, __spreadProps(__spreadValues({}, opts), {
                breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], rawKey]
              }));
            }
          };
        },
        unrecognizedObjectKeys: opts == null ? void 0 : opts.unrecognizedObjectKeys,
        skipValidation: opts == null ? void 0 : opts.skipValidation,
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      const requiredKeys = [];
      for (const [parsedKey, schemaOrObjectProperty] of entries(schemas)) {
        const valueSchema = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.valueSchema : schemaOrObjectProperty;
        if (yield isSchemaRequired(valueSchema)) {
          requiredKeys.push(parsedKey);
        }
      }
      return validateAndTransformObject({
        value: parsed,
        requiredKeys,
        getProperty: (parsedKey) => {
          const property2 = schemas[parsedKey];
          if (property2 == null) {
            return void 0;
          }
          if (isProperty(property2)) {
            return {
              transformedKey: property2.rawKey,
              transform: (propertyValue) => {
                var _a;
                return property2.valueSchema.json(propertyValue, __spreadProps(__spreadValues({}, opts), {
                  breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], parsedKey]
                }));
              }
            };
          } else {
            return {
              transformedKey: parsedKey,
              transform: (propertyValue) => {
                var _a;
                return property2.json(propertyValue, __spreadProps(__spreadValues({}, opts), {
                  breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], parsedKey]
                }));
              }
            };
          }
        },
        unrecognizedObjectKeys: opts == null ? void 0 : opts.unrecognizedObjectKeys,
        skipValidation: opts == null ? void 0 : opts.skipValidation,
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    getType: () => SchemaType.OBJECT
  };
  return __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema)), getObjectLikeUtils(baseSchema)), getObjectUtils(baseSchema));
}
function validateAndTransformObject(_0) {
  return __async(this, arguments, function* ({
    value,
    requiredKeys,
    getProperty,
    unrecognizedObjectKeys = \\"fail\\",
    skipValidation = false,
    breadcrumbsPrefix = []
  }) {
    if (!isPlainObject2(value)) {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: getErrorMessageForIncorrectType(value, \\"object\\")
          }
        ]
      };
    }
    const missingRequiredKeys = new Set(requiredKeys);
    const errors = [];
    const transformed = {};
    for (const [preTransformedKey, preTransformedItemValue] of Object.entries(value)) {
      const property2 = getProperty(preTransformedKey);
      if (property2 != null) {
        missingRequiredKeys.delete(preTransformedKey);
        const value2 = yield property2.transform(preTransformedItemValue);
        if (value2.ok) {
          transformed[property2.transformedKey] = value2.value;
        } else {
          transformed[preTransformedKey] = preTransformedItemValue;
          errors.push(...value2.errors);
        }
      } else {
        switch (unrecognizedObjectKeys) {
          case \\"fail\\":
            errors.push({
              path: [...breadcrumbsPrefix, preTransformedKey],
              message: \`Unexpected key \\"\${preTransformedKey}\\"\`
            });
            break;
          case \\"strip\\":
            break;
          case \\"passthrough\\":
            transformed[preTransformedKey] = preTransformedItemValue;
            break;
        }
      }
    }
    errors.push(
      ...requiredKeys.filter((key) => missingRequiredKeys.has(key)).map((key) => ({
        path: breadcrumbsPrefix,
        message: \`Missing required key \\"\${key}\\"\`
      }))
    );
    if (errors.length === 0 || skipValidation) {
      return {
        ok: true,
        value: transformed
      };
    } else {
      return {
        ok: false,
        errors
      };
    }
  });
}
function getObjectUtils(schema) {
  return {
    extend: (extension) => {
      const baseSchema = {
        _getParsedProperties: () => __async(this, null, function* () {
          return [
            ...yield schema._getParsedProperties(),
            ...yield extension._getParsedProperties()
          ];
        }),
        _getRawProperties: () => __async(this, null, function* () {
          return [
            ...yield schema._getRawProperties(),
            ...yield extension._getRawProperties()
          ];
        }),
        parse: (raw, opts) => __async(this, null, function* () {
          return validateAndTransformExtendedObject({
            extensionKeys: yield extension._getRawProperties(),
            value: raw,
            transformBase: (rawBase) => schema.parse(rawBase, opts),
            transformExtension: (rawExtension) => extension.parse(rawExtension, opts)
          });
        }),
        json: (parsed, opts) => __async(this, null, function* () {
          return validateAndTransformExtendedObject({
            extensionKeys: yield extension._getParsedProperties(),
            value: parsed,
            transformBase: (parsedBase) => schema.json(parsedBase, opts),
            transformExtension: (parsedExtension) => extension.json(parsedExtension, opts)
          });
        }),
        getType: () => SchemaType.OBJECT
      };
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, baseSchema), getSchemaUtils(baseSchema)), getObjectLikeUtils(baseSchema)), getObjectUtils(baseSchema));
    }
  };
}
function validateAndTransformExtendedObject(_0) {
  return __async(this, arguments, function* ({
    extensionKeys,
    value,
    transformBase,
    transformExtension
  }) {
    const extensionPropertiesSet = new Set(extensionKeys);
    const [extensionProperties, baseProperties] = partition(
      keys(value),
      (key) => extensionPropertiesSet.has(key)
    );
    const transformedBase = yield transformBase(filterObject(value, baseProperties));
    const transformedExtension = yield transformExtension(filterObject(value, extensionProperties));
    if (transformedBase.ok && transformedExtension.ok) {
      return {
        ok: true,
        value: __spreadValues(__spreadValues({}, transformedBase.value), transformedExtension.value)
      };
    } else {
      return {
        ok: false,
        errors: [
          ...transformedBase.ok ? [] : transformedBase.errors,
          ...transformedExtension.ok ? [] : transformedExtension.errors
        ]
      };
    }
  });
}
function isSchemaRequired(schema) {
  return __async(this, null, function* () {
    return !(yield isSchemaOptional(schema));
  });
}
function isSchemaOptional(schema) {
  return __async(this, null, function* () {
    switch (yield schema.getType()) {
      case SchemaType.ANY:
      case SchemaType.UNKNOWN:
      case SchemaType.OPTIONAL:
        return true;
      default:
        return false;
    }
  });
}

// src/core/schemas/builders/lazy/lazyObject.ts
function lazyObject(getter) {
  const baseSchema = __spreadProps(__spreadValues({}, constructLazyBaseSchema(getter)), {
    _getRawProperties: () => __async(this, null, function* () {
      return (yield getMemoizedSchema(getter))._getRawProperties();
    }),
    _getParsedProperties: () => __async(this, null, function* () {
      return (yield getMemoizedSchema(getter))._getParsedProperties();
    })
  });
  return __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, baseSchema), getSchemaUtils(baseSchema)), getObjectLikeUtils(baseSchema)), getObjectUtils(baseSchema));
}

// src/core/schemas/builders/list/list.ts
function list(schema) {
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      return validateAndTransformArray(
        raw,
        (item, index) => {
          var _a;
          return schema.parse(item, __spreadProps(__spreadValues({}, opts), {
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`[\${index}]\`]
          }));
        }
      );
    }),
    json: (parsed, opts) => validateAndTransformArray(
      parsed,
      (item, index) => {
        var _a;
        return schema.json(item, __spreadProps(__spreadValues({}, opts), {
          breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`[\${index}]\`]
        }));
      }
    ),
    getType: () => SchemaType.LIST
  };
  return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
}
function validateAndTransformArray(value, transformItem) {
  return __async(this, null, function* () {
    if (!Array.isArray(value)) {
      return {
        ok: false,
        errors: [
          {
            message: getErrorMessageForIncorrectType(value, \\"list\\"),
            path: []
          }
        ]
      };
    }
    const maybeValidItems = yield Promise.all(value.map((item, index) => transformItem(item, index)));
    return maybeValidItems.reduce(
      (acc, item) => {
        if (acc.ok && item.ok) {
          return {
            ok: true,
            value: [...acc.value, item.value]
          };
        }
        const errors = [];
        if (!acc.ok) {
          errors.push(...acc.errors);
        }
        if (!item.ok) {
          errors.push(...item.errors);
        }
        return {
          ok: false,
          errors
        };
      },
      { ok: true, value: [] }
    );
  });
}

// src/core/schemas/builders/literals/stringLiteral.ts
function stringLiteral(literal) {
  const schemaCreator = createIdentitySchemaCreator(
    SchemaType.STRING_LITERAL,
    (value, { breadcrumbsPrefix = [] } = {}) => {
      if (value === literal) {
        return {
          ok: true,
          value: literal
        };
      } else {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(value, \`\\"\${literal}\\"\`)
            }
          ]
        };
      }
    }
  );
  return schemaCreator();
}

// src/core/schemas/builders/primitives/any.ts
var any = createIdentitySchemaCreator(SchemaType.ANY, (value) => ({ ok: true, value }));

// src/core/schemas/builders/primitives/boolean.ts
var boolean = createIdentitySchemaCreator(
  SchemaType.BOOLEAN,
  (value, { breadcrumbsPrefix = [] } = {}) => {
    if (typeof value === \\"boolean\\") {
      return {
        ok: true,
        value
      };
    } else {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: getErrorMessageForIncorrectType(value, \\"boolean\\")
          }
        ]
      };
    }
  }
);

// src/core/schemas/builders/primitives/number.ts
var number = createIdentitySchemaCreator(
  SchemaType.NUMBER,
  (value, { breadcrumbsPrefix = [] } = {}) => {
    if (typeof value === \\"number\\") {
      return {
        ok: true,
        value
      };
    } else {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: getErrorMessageForIncorrectType(value, \\"number\\")
          }
        ]
      };
    }
  }
);

// src/core/schemas/builders/primitives/string.ts
var string = createIdentitySchemaCreator(
  SchemaType.STRING,
  (value, { breadcrumbsPrefix = [] } = {}) => {
    if (typeof value === \\"string\\") {
      return {
        ok: true,
        value
      };
    } else {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: getErrorMessageForIncorrectType(value, \\"string\\")
          }
        ]
      };
    }
  }
);

// src/core/schemas/builders/primitives/unknown.ts
var unknown = createIdentitySchemaCreator(SchemaType.UNKNOWN, (value) => ({ ok: true, value }));

// src/core/schemas/builders/record/record.ts
function record(keySchema, valueSchema) {
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      return validateAndTransformRecord({
        value: raw,
        isKeyNumeric: (yield keySchema.getType()) === SchemaType.NUMBER,
        transformKey: (key) => {
          var _a;
          return keySchema.parse(key, __spreadProps(__spreadValues({}, opts), {
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`\${key} (key)\`]
          }));
        },
        transformValue: (value, key) => {
          var _a;
          return valueSchema.parse(value, __spreadProps(__spreadValues({}, opts), {
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`\${key}\`]
          }));
        },
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      return validateAndTransformRecord({
        value: parsed,
        isKeyNumeric: (yield keySchema.getType()) === SchemaType.NUMBER,
        transformKey: (key) => {
          var _a;
          return keySchema.json(key, __spreadProps(__spreadValues({}, opts), {
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`\${key} (key)\`]
          }));
        },
        transformValue: (value, key) => {
          var _a;
          return valueSchema.json(value, __spreadProps(__spreadValues({}, opts), {
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`\${key}\`]
          }));
        },
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    getType: () => SchemaType.RECORD
  };
  return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
}
function validateAndTransformRecord(_0) {
  return __async(this, arguments, function* ({
    value,
    isKeyNumeric,
    transformKey,
    transformValue,
    breadcrumbsPrefix = []
  }) {
    if (!isPlainObject2(value)) {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: getErrorMessageForIncorrectType(value, \\"object\\")
          }
        ]
      };
    }
    return entries(value).reduce(
      (_02, _1) => __async(this, [_02, _1], function* (accPromise, [stringKey, value2]) {
        if (value2 == null) {
          return accPromise;
        }
        const acc = yield accPromise;
        let key = stringKey;
        if (isKeyNumeric) {
          const numberKey = stringKey.length > 0 ? Number(stringKey) : NaN;
          if (!isNaN(numberKey)) {
            key = numberKey;
          }
        }
        const transformedKey = yield transformKey(key);
        const transformedValue = yield transformValue(value2, key);
        if (acc.ok && transformedKey.ok && transformedValue.ok) {
          return {
            ok: true,
            value: __spreadProps(__spreadValues({}, acc.value), {
              [transformedKey.value]: transformedValue.value
            })
          };
        }
        const errors = [];
        if (!acc.ok) {
          errors.push(...acc.errors);
        }
        if (!transformedKey.ok) {
          errors.push(...transformedKey.errors);
        }
        if (!transformedValue.ok) {
          errors.push(...transformedValue.errors);
        }
        return {
          ok: false,
          errors
        };
      }),
      Promise.resolve({ ok: true, value: {} })
    );
  });
}

// src/core/schemas/builders/set/set.ts
function set(schema) {
  const listSchema = list(schema);
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      const parsedList = yield listSchema.parse(raw, opts);
      if (parsedList.ok) {
        return {
          ok: true,
          value: new Set(parsedList.value)
        };
      } else {
        return parsedList;
      }
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      var _a;
      if (!(parsed instanceof Set)) {
        return {
          ok: false,
          errors: [
            {
              path: (_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [],
              message: getErrorMessageForIncorrectType(parsed, \\"Set\\")
            }
          ]
        };
      }
      const jsonList = yield listSchema.json([...parsed], opts);
      return jsonList;
    }),
    getType: () => SchemaType.SET
  };
  return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
}

// src/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
function undiscriminatedUnion(schemas) {
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      return validateAndTransformUndiscriminatedUnion(
        (schema) => schema.parse(raw, opts),
        schemas
      );
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      return validateAndTransformUndiscriminatedUnion(
        (schema) => schema.json(parsed, opts),
        schemas
      );
    }),
    getType: () => SchemaType.UNDISCRIMINATED_UNION
  };
  return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
}
function validateAndTransformUndiscriminatedUnion(transform2, schemas) {
  return __async(this, null, function* () {
    const errors = [];
    for (const [index, schema] of schemas.entries()) {
      const transformed = yield transform2(schema);
      if (transformed.ok) {
        return transformed;
      } else {
        for (const error of errors) {
          errors.push({
            path: error.path,
            message: \`[Variant \${index}] \${error.message}\`
          });
        }
      }
    }
    return {
      ok: false,
      errors
    };
  });
}

// src/core/schemas/builders/union/discriminant.ts
function discriminant(parsedDiscriminant, rawDiscriminant) {
  return {
    parsedDiscriminant,
    rawDiscriminant
  };
}

// src/core/schemas/builders/union/union.ts
function union(discriminant2, union2) {
  const rawDiscriminant = typeof discriminant2 === \\"string\\" ? discriminant2 : discriminant2.rawDiscriminant;
  const parsedDiscriminant = typeof discriminant2 === \\"string\\" ? discriminant2 : discriminant2.parsedDiscriminant;
  const discriminantValueSchema = enum_(keys(union2));
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      return transformAndValidateUnion({
        value: raw,
        discriminant: rawDiscriminant,
        transformedDiscriminant: parsedDiscriminant,
        transformDiscriminantValue: (discriminantValue) => {
          var _a;
          return discriminantValueSchema.parse(discriminantValue, {
            allowUnrecognizedEnumValues: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], rawDiscriminant]
          });
        },
        getAdditionalPropertiesSchema: (discriminantValue) => union2[discriminantValue],
        allowUnrecognizedUnionMembers: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
        transformAdditionalProperties: (additionalProperties, additionalPropertiesSchema) => additionalPropertiesSchema.parse(additionalProperties, opts),
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      return transformAndValidateUnion({
        value: parsed,
        discriminant: parsedDiscriminant,
        transformedDiscriminant: rawDiscriminant,
        transformDiscriminantValue: (discriminantValue) => {
          var _a;
          return discriminantValueSchema.json(discriminantValue, {
            allowUnrecognizedEnumValues: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], parsedDiscriminant]
          });
        },
        getAdditionalPropertiesSchema: (discriminantValue) => union2[discriminantValue],
        allowUnrecognizedUnionMembers: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
        transformAdditionalProperties: (additionalProperties, additionalPropertiesSchema) => additionalPropertiesSchema.json(additionalProperties, opts),
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    getType: () => SchemaType.UNION
  };
  return __spreadValues(__spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema)), getObjectLikeUtils(baseSchema));
}
function transformAndValidateUnion(_0) {
  return __async(this, arguments, function* ({
    value,
    discriminant: discriminant2,
    transformedDiscriminant,
    transformDiscriminantValue,
    getAdditionalPropertiesSchema,
    allowUnrecognizedUnionMembers = false,
    transformAdditionalProperties,
    breadcrumbsPrefix = []
  }) {
    if (!isPlainObject2(value)) {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: getErrorMessageForIncorrectType(value, \\"object\\")
          }
        ]
      };
    }
    const _a = value, { [discriminant2]: discriminantValue } = _a, additionalProperties = __objRest(_a, [__restKey(discriminant2)]);
    if (discriminantValue == null) {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: \`Missing discriminant (\\"\${discriminant2}\\")\`
          }
        ]
      };
    }
    const transformedDiscriminantValue = yield transformDiscriminantValue(discriminantValue);
    if (!transformedDiscriminantValue.ok) {
      return {
        ok: false,
        errors: transformedDiscriminantValue.errors
      };
    }
    const additionalPropertiesSchema = getAdditionalPropertiesSchema(transformedDiscriminantValue.value);
    if (additionalPropertiesSchema == null) {
      if (allowUnrecognizedUnionMembers) {
        return {
          ok: true,
          value: __spreadValues({
            [transformedDiscriminant]: transformedDiscriminantValue.value
          }, additionalProperties)
        };
      } else {
        return {
          ok: false,
          errors: [
            {
              path: [...breadcrumbsPrefix, discriminant2],
              message: \\"Unexpected discriminant value\\"
            }
          ]
        };
      }
    }
    const transformedAdditionalProperties = yield transformAdditionalProperties(
      additionalProperties,
      additionalPropertiesSchema
    );
    if (!transformedAdditionalProperties.ok) {
      return transformedAdditionalProperties;
    }
    return {
      ok: true,
      value: __spreadValues({
        [transformedDiscriminant]: discriminantValue
      }, transformedAdditionalProperties.value)
    };
  });
}
",
                "name": "core.js",
                "type": "file",
              },
              Object {
                "contents": "\\"use strict\\";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b ||= {})
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __restKey = (key) => typeof key === \\"symbol\\" ? key : key + \\"\\";
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all3) => {
  for (var name in all3)
    __defProp(target, name, { get: all3[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === \\"object\\" || typeof from === \\"function\\") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. \\"__esModule\\" has not been set), then set
  // \\"default\\" to the CommonJS \\"module.exports\\" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \\"default\\", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, \\"__esModule\\", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/api/resources/remoteGen/types/RemoteGenJobId.ts
function RemoteGenJobId(value) {
  return value;
}
var init_RemoteGenJobId = __esm({
  \\"src/api/resources/remoteGen/types/RemoteGenJobId.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/RemoteGenTaskId.ts
function RemoteGenTaskId(value) {
  return value;
}
var init_RemoteGenTaskId = __esm({
  \\"src/api/resources/remoteGen/types/RemoteGenTaskId.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GeneratorIdAndVersion.ts
var init_GeneratorIdAndVersion = __esm({
  \\"src/api/resources/remoteGen/types/GeneratorIdAndVersion.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GeneratorConfig.ts
var init_GeneratorConfig = __esm({
  \\"src/api/resources/remoteGen/types/GeneratorConfig.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GeneratorConfigV2.ts
var init_GeneratorConfigV2 = __esm({
  \\"src/api/resources/remoteGen/types/GeneratorConfigV2.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/OutputMode.ts
var OutputMode;
var init_OutputMode = __esm({
  \\"src/api/resources/remoteGen/types/OutputMode.ts\\"() {
    \\"use strict\\";
    init_api();
    OutputMode = {
      publish: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"publish\\",
          _visit: function(visitor) {
            return OutputMode._visit(this, visitor);
          }
        });
      },
      publishV2: (value) => {
        return {
          publishV2: value,
          type: \\"publishV2\\",
          _visit: function(visitor) {
            return OutputMode._visit(this, visitor);
          }
        };
      },
      downloadFiles: () => {
        return {
          type: \\"downloadFiles\\",
          _visit: function(visitor) {
            return OutputMode._visit(this, visitor);
          }
        };
      },
      github: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"github\\",
          _visit: function(visitor) {
            return OutputMode._visit(this, visitor);
          }
        });
      },
      _unknown: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          _visit: function(visitor) {
            return OutputMode._visit(this, visitor);
          }
        });
      },
      _visit: (value, visitor) => {
        switch (value.type) {
          case \\"publish\\":
            return visitor.publish(value);
          case \\"publishV2\\":
            return visitor.publishV2(value.publishV2);
          case \\"downloadFiles\\":
            return visitor.downloadFiles();
          case \\"github\\":
            return visitor.github(value);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/types/PublishOutputMode.ts
var init_PublishOutputMode = __esm({
  \\"src/api/resources/remoteGen/types/PublishOutputMode.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/PublishOutputModeV2.ts
var PublishOutputModeV2;
var init_PublishOutputModeV2 = __esm({
  \\"src/api/resources/remoteGen/types/PublishOutputModeV2.ts\\"() {
    \\"use strict\\";
    init_api();
    PublishOutputModeV2 = {
      npmOverride: (value) => {
        return {
          npmOverride: value,
          type: \\"npmOverride\\",
          _visit: function(visitor) {
            return PublishOutputModeV2._visit(this, visitor);
          }
        };
      },
      mavenOverride: (value) => {
        return {
          mavenOverride: value,
          type: \\"mavenOverride\\",
          _visit: function(visitor) {
            return PublishOutputModeV2._visit(this, visitor);
          }
        };
      },
      postman: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"postman\\",
          _visit: function(visitor) {
            return PublishOutputModeV2._visit(this, visitor);
          }
        });
      },
      _unknown: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          _visit: function(visitor) {
            return PublishOutputModeV2._visit(this, visitor);
          }
        });
      },
      _visit: (value, visitor) => {
        switch (value.type) {
          case \\"npmOverride\\":
            return visitor.npmOverride(value.npmOverride);
          case \\"mavenOverride\\":
            return visitor.mavenOverride(value.mavenOverride);
          case \\"postman\\":
            return visitor.postman(value);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/types/RegistryOverrides.ts
var init_RegistryOverrides = __esm({
  \\"src/api/resources/remoteGen/types/RegistryOverrides.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GeneratorOutputs.ts
var init_GeneratorOutputs = __esm({
  \\"src/api/resources/remoteGen/types/GeneratorOutputs.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/NpmOutput.ts
var init_NpmOutput = __esm({
  \\"src/api/resources/remoteGen/types/NpmOutput.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/MavenOutput.ts
var init_MavenOutput = __esm({
  \\"src/api/resources/remoteGen/types/MavenOutput.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/PostmanOutput.ts
var init_PostmanOutput = __esm({
  \\"src/api/resources/remoteGen/types/PostmanOutput.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GithubOutputMode.ts
var init_GithubOutputMode = __esm({
  \\"src/api/resources/remoteGen/types/GithubOutputMode.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GithubPublishInfo.ts
var GithubPublishInfo;
var init_GithubPublishInfo = __esm({
  \\"src/api/resources/remoteGen/types/GithubPublishInfo.ts\\"() {
    \\"use strict\\";
    init_api();
    GithubPublishInfo = {
      npm: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"npm\\",
          _visit: function(visitor) {
            return GithubPublishInfo._visit(this, visitor);
          }
        });
      },
      maven: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"maven\\",
          _visit: function(visitor) {
            return GithubPublishInfo._visit(this, visitor);
          }
        });
      },
      postman: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"postman\\",
          _visit: function(visitor) {
            return GithubPublishInfo._visit(this, visitor);
          }
        });
      },
      _unknown: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          _visit: function(visitor) {
            return GithubPublishInfo._visit(this, visitor);
          }
        });
      },
      _visit: (value, visitor) => {
        switch (value.type) {
          case \\"npm\\":
            return visitor.npm(value);
          case \\"maven\\":
            return visitor.maven(value);
          case \\"postman\\":
            return visitor.postman(value);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/types/NpmOutputWithOptionalToken.ts
var init_NpmOutputWithOptionalToken = __esm({
  \\"src/api/resources/remoteGen/types/NpmOutputWithOptionalToken.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/MavenOutputWithOptionalCreds.ts
var init_MavenOutputWithOptionalCreds = __esm({
  \\"src/api/resources/remoteGen/types/MavenOutputWithOptionalCreds.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/UsernamePassword.ts
var init_UsernamePassword = __esm({
  \\"src/api/resources/remoteGen/types/UsernamePassword.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/Task.ts
var init_Task = __esm({
  \\"src/api/resources/remoteGen/types/Task.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/TaskStatus.ts
var TaskStatus;
var init_TaskStatus = __esm({
  \\"src/api/resources/remoteGen/types/TaskStatus.ts\\"() {
    \\"use strict\\";
    init_api();
    TaskStatus = {
      notStarted: () => {
        return {
          type: \\"notStarted\\",
          _visit: function(visitor) {
            return TaskStatus._visit(this, visitor);
          }
        };
      },
      running: () => {
        return {
          type: \\"running\\",
          _visit: function(visitor) {
            return TaskStatus._visit(this, visitor);
          }
        };
      },
      failed: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"failed\\",
          _visit: function(visitor) {
            return TaskStatus._visit(this, visitor);
          }
        });
      },
      finished: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"finished\\",
          _visit: function(visitor) {
            return TaskStatus._visit(this, visitor);
          }
        });
      },
      _unknown: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          _visit: function(visitor) {
            return TaskStatus._visit(this, visitor);
          }
        });
      },
      _visit: (value, visitor) => {
        switch (value.type) {
          case \\"notStarted\\":
            return visitor.notStarted();
          case \\"running\\":
            return visitor.running();
          case \\"failed\\":
            return visitor.failed(value);
          case \\"finished\\":
            return visitor.finished(value);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/types/FailedTaskStatus.ts
var init_FailedTaskStatus = __esm({
  \\"src/api/resources/remoteGen/types/FailedTaskStatus.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/FinishedTaskStatus.ts
var init_FinishedTaskStatus = __esm({
  \\"src/api/resources/remoteGen/types/FinishedTaskStatus.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/TaskLog.ts
var init_TaskLog = __esm({
  \\"src/api/resources/remoteGen/types/TaskLog.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/LogLevel.ts
var LogLevel;
var init_LogLevel = __esm({
  \\"src/api/resources/remoteGen/types/LogLevel.ts\\"() {
    \\"use strict\\";
    LogLevel = {
      Debug: \\"DEBUG\\",
      Info: \\"INFO\\",
      Warn: \\"WARN\\",
      Error: \\"ERROR\\"
    };
  }
});

// src/api/resources/remoteGen/types/Package.ts
var init_Package = __esm({
  \\"src/api/resources/remoteGen/types/Package.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/PackagePublishStatus.ts
var PackagePublishStatus;
var init_PackagePublishStatus = __esm({
  \\"src/api/resources/remoteGen/types/PackagePublishStatus.ts\\"() {
    \\"use strict\\";
    PackagePublishStatus = {
      NotStartedPublishing: \\"NOT_STARTED_PUBLISHING\\",
      Publishing: \\"PUBLISHING\\",
      Published: \\"PUBLISHED\\",
      FailedToPublish: \\"FAILED_TO_PUBLISH\\"
    };
  }
});

// src/api/resources/remoteGen/types/PackageCoordinate.ts
var PackageCoordinate;
var init_PackageCoordinate = __esm({
  \\"src/api/resources/remoteGen/types/PackageCoordinate.ts\\"() {
    \\"use strict\\";
    init_api();
    PackageCoordinate = {
      npm: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"npm\\",
          _visit: function(visitor) {
            return PackageCoordinate._visit(this, visitor);
          }
        });
      },
      maven: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"maven\\",
          _visit: function(visitor) {
            return PackageCoordinate._visit(this, visitor);
          }
        });
      },
      pypi: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"pypi\\",
          _visit: function(visitor) {
            return PackageCoordinate._visit(this, visitor);
          }
        });
      },
      _unknown: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          _visit: function(visitor) {
            return PackageCoordinate._visit(this, visitor);
          }
        });
      },
      _visit: (value, visitor) => {
        switch (value.type) {
          case \\"npm\\":
            return visitor.npm(value);
          case \\"maven\\":
            return visitor.maven(value);
          case \\"pypi\\":
            return visitor.pypi(value);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/types/NpmCoordinate.ts
var init_NpmCoordinate = __esm({
  \\"src/api/resources/remoteGen/types/NpmCoordinate.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/MavenCoordinate.ts
var init_MavenCoordinate = __esm({
  \\"src/api/resources/remoteGen/types/MavenCoordinate.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/PypiCoordinate.ts
var init_PypiCoordinate = __esm({
  \\"src/api/resources/remoteGen/types/PypiCoordinate.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/CreateJobResponse.ts
var init_CreateJobResponse = __esm({
  \\"src/api/resources/remoteGen/types/CreateJobResponse.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GeneratorsDoNotExistErrorBodyType.ts
var init_GeneratorsDoNotExistErrorBodyType = __esm({
  \\"src/api/resources/remoteGen/types/GeneratorsDoNotExistErrorBodyType.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/CannotPublishToNpmScopeDetails.ts
var init_CannotPublishToNpmScopeDetails = __esm({
  \\"src/api/resources/remoteGen/types/CannotPublishToNpmScopeDetails.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/CannotPublishToMavenGroupDetails.ts
var init_CannotPublishToMavenGroupDetails = __esm({
  \\"src/api/resources/remoteGen/types/CannotPublishToMavenGroupDetails.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/InsufficientPermissionsDetails.ts
var init_InsufficientPermissionsDetails = __esm({
  \\"src/api/resources/remoteGen/types/InsufficientPermissionsDetails.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/index.ts
var init_types = __esm({
  \\"src/api/resources/remoteGen/types/index.ts\\"() {
    \\"use strict\\";
    init_RemoteGenJobId();
    init_RemoteGenTaskId();
    init_GeneratorIdAndVersion();
    init_GeneratorConfig();
    init_GeneratorConfigV2();
    init_OutputMode();
    init_PublishOutputMode();
    init_PublishOutputModeV2();
    init_RegistryOverrides();
    init_GeneratorOutputs();
    init_NpmOutput();
    init_MavenOutput();
    init_PostmanOutput();
    init_GithubOutputMode();
    init_GithubPublishInfo();
    init_NpmOutputWithOptionalToken();
    init_MavenOutputWithOptionalCreds();
    init_UsernamePassword();
    init_Task();
    init_TaskStatus();
    init_FailedTaskStatus();
    init_FinishedTaskStatus();
    init_TaskLog();
    init_LogLevel();
    init_Package();
    init_PackagePublishStatus();
    init_PackageCoordinate();
    init_NpmCoordinate();
    init_MavenCoordinate();
    init_PypiCoordinate();
    init_CreateJobResponse();
    init_GeneratorsDoNotExistErrorBodyType();
    init_CannotPublishToNpmScopeDetails();
    init_CannotPublishToMavenGroupDetails();
    init_InsufficientPermissionsDetails();
  }
});

// src/api/resources/remoteGen/client/requests/index.ts
var init_requests = __esm({
  \\"src/api/resources/remoteGen/client/requests/index.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/client/createJob.ts
var createJob_exports = {};
__export(createJob_exports, {
  Error: () => Error2
});
var Error2;
var init_createJob = __esm({
  \\"src/api/resources/remoteGen/client/createJob.ts\\"() {
    \\"use strict\\";
    init_api();
    Error2 = {
      illegalApiNameError: () => {
        return {
          error: \\"IllegalApiNameError\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      generatorsDoNotExistError: (value) => {
        return {
          content: value,
          error: \\"GeneratorsDoNotExistError\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      cannotPublishToNpmScope: (value) => {
        return {
          content: value,
          error: \\"CannotPublishToNpmScope\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      cannotPublishToMavenGroup: (value) => {
        return {
          content: value,
          error: \\"CannotPublishToMavenGroup\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      insufficientPermissions: (value) => {
        return {
          content: value,
          error: \\"InsufficientPermissions\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      _unknown: (fetcherError) => {
        return {
          error: void 0,
          content: fetcherError,
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.error) {
          case \\"IllegalApiNameError\\":
            return visitor.illegalApiNameError();
          case \\"GeneratorsDoNotExistError\\":
            return visitor.generatorsDoNotExistError(value.content);
          case \\"CannotPublishToNpmScope\\":
            return visitor.cannotPublishToNpmScope(value.content);
          case \\"CannotPublishToMavenGroup\\":
            return visitor.cannotPublishToMavenGroup(value.content);
          case \\"InsufficientPermissions\\":
            return visitor.insufficientPermissions(value.content);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/client/createJobV2.ts
var createJobV2_exports = {};
__export(createJobV2_exports, {
  Error: () => Error3
});
var Error3;
var init_createJobV2 = __esm({
  \\"src/api/resources/remoteGen/client/createJobV2.ts\\"() {
    \\"use strict\\";
    init_api();
    Error3 = {
      illegalApiNameError: () => {
        return {
          error: \\"IllegalApiNameError\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      generatorsDoNotExistError: (value) => {
        return {
          content: value,
          error: \\"GeneratorsDoNotExistError\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      cannotPublishToNpmScope: (value) => {
        return {
          content: value,
          error: \\"CannotPublishToNpmScope\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      cannotPublishToMavenGroup: (value) => {
        return {
          content: value,
          error: \\"CannotPublishToMavenGroup\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      insufficientPermissions: (value) => {
        return {
          content: value,
          error: \\"InsufficientPermissions\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      _unknown: (fetcherError) => {
        return {
          error: void 0,
          content: fetcherError,
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.error) {
          case \\"IllegalApiNameError\\":
            return visitor.illegalApiNameError();
          case \\"GeneratorsDoNotExistError\\":
            return visitor.generatorsDoNotExistError(value.content);
          case \\"CannotPublishToNpmScope\\":
            return visitor.cannotPublishToNpmScope(value.content);
          case \\"CannotPublishToMavenGroup\\":
            return visitor.cannotPublishToMavenGroup(value.content);
          case \\"InsufficientPermissions\\":
            return visitor.insufficientPermissions(value.content);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/client/getJobStatus.ts
var getJobStatus_exports = {};
__export(getJobStatus_exports, {
  Error: () => Error4
});
var Error4;
var init_getJobStatus = __esm({
  \\"src/api/resources/remoteGen/client/getJobStatus.ts\\"() {
    \\"use strict\\";
    init_api();
    Error4 = {
      _unknown: (fetcherError) => {
        return {
          error: void 0,
          content: fetcherError,
          _visit: function(visitor) {
            return remoteGen_exports.getJobStatus.Error._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.error) {
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/client/index.ts
var init_client = __esm({
  \\"src/api/resources/remoteGen/client/index.ts\\"() {
    \\"use strict\\";
    init_requests();
    init_createJob();
    init_createJobV2();
    init_getJobStatus();
  }
});

// src/api/resources/remoteGen/index.ts
var remoteGen_exports = {};
__export(remoteGen_exports, {
  GithubPublishInfo: () => GithubPublishInfo,
  LogLevel: () => LogLevel,
  OutputMode: () => OutputMode,
  PackageCoordinate: () => PackageCoordinate,
  PackagePublishStatus: () => PackagePublishStatus,
  PublishOutputModeV2: () => PublishOutputModeV2,
  RemoteGenJobId: () => RemoteGenJobId,
  RemoteGenTaskId: () => RemoteGenTaskId,
  TaskStatus: () => TaskStatus,
  createJob: () => createJob_exports,
  createJobV2: () => createJobV2_exports,
  getJobStatus: () => getJobStatus_exports
});
var init_remoteGen = __esm({
  \\"src/api/resources/remoteGen/index.ts\\"() {
    \\"use strict\\";
    init_types();
    init_client();
  }
});

// src/api/resources/fiddle/client/test.ts
var test_exports = {};
__export(test_exports, {
  Error: () => Error5
});
var Error5;
var init_test = __esm({
  \\"src/api/resources/fiddle/client/test.ts\\"() {
    \\"use strict\\";
    init_api();
    Error5 = {
      _unknown: (fetcherError) => {
        return {
          error: void 0,
          content: fetcherError,
          _visit: function(visitor) {
            return fiddle_exports.test.Error._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.error) {
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/fiddle/client/index.ts
var init_client2 = __esm({
  \\"src/api/resources/fiddle/client/index.ts\\"() {
    \\"use strict\\";
    init_test();
  }
});

// src/api/resources/fiddle/index.ts
var fiddle_exports = {};
__export(fiddle_exports, {
  test: () => test_exports
});
var init_fiddle = __esm({
  \\"src/api/resources/fiddle/index.ts\\"() {
    \\"use strict\\";
    init_client2();
  }
});

// src/api/resources/health/client/status.ts
var status_exports = {};
__export(status_exports, {
  Error: () => Error6
});
var Error6;
var init_status = __esm({
  \\"src/api/resources/health/client/status.ts\\"() {
    \\"use strict\\";
    init_api();
    Error6 = {
      _unknown: (fetcherError) => {
        return {
          error: void 0,
          content: fetcherError,
          _visit: function(visitor) {
            return health_exports.status.Error._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.error) {
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/health/client/index.ts
var init_client3 = __esm({
  \\"src/api/resources/health/client/index.ts\\"() {
    \\"use strict\\";
    init_status();
  }
});

// src/api/resources/health/index.ts
var health_exports = {};
__export(health_exports, {
  status: () => status_exports
});
var init_health = __esm({
  \\"src/api/resources/health/index.ts\\"() {
    \\"use strict\\";
    init_client3();
  }
});

// src/api/resources/index.ts
var init_resources = __esm({
  \\"src/api/resources/index.ts\\"() {
    \\"use strict\\";
    init_remoteGen();
    init_types();
    init_fiddle();
    init_health();
    init_requests();
  }
});

// src/api/index.ts
var api_exports = {};
__export(api_exports, {
  GithubPublishInfo: () => GithubPublishInfo,
  LogLevel: () => LogLevel,
  OutputMode: () => OutputMode,
  PackageCoordinate: () => PackageCoordinate,
  PackagePublishStatus: () => PackagePublishStatus,
  PublishOutputModeV2: () => PublishOutputModeV2,
  RemoteGenJobId: () => RemoteGenJobId,
  RemoteGenTaskId: () => RemoteGenTaskId,
  TaskStatus: () => TaskStatus,
  fiddle: () => fiddle_exports,
  health: () => health_exports,
  remoteGen: () => remoteGen_exports
});
var init_api = __esm({
  \\"src/api/index.ts\\"() {
    \\"use strict\\";
    init_resources();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/bind.js
function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}
var init_bind = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/bind.js\\"() {
    \\"use strict\\";
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/utils.js
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}
function isArrayBufferView(val) {
  let result;
  if (typeof ArrayBuffer !== \\"undefined\\" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
function forEach(obj, fn, { allOwnKeys = false } = {}) {
  if (obj === null || typeof obj === \\"undefined\\") {
    return;
  }
  let i;
  let l;
  if (typeof obj !== \\"object\\") {
    obj = [obj];
  }
  if (isArray(obj)) {
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    const keys2 = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys2.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys2[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}
function findKey(obj, key) {
  key = key.toLowerCase();
  const keys2 = Object.keys(obj);
  let i = keys2.length;
  let _key;
  while (i-- > 0) {
    _key = keys2[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
function merge() {
  const { caseless } = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };
  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === \\"FormData\\" && thing[Symbol.iterator]);
}
var toString, getPrototypeOf, kindOf, kindOfTest, typeOfTest, isArray, isUndefined, isArrayBuffer, isString, isFunction, isNumber, isObject, isBoolean, isPlainObject, isDate, isFile, isBlob, isFileList, isStream, isFormData, isURLSearchParams, trim, _global, isContextDefined, extend, stripBOM, inherits, toFlatObject, endsWith, toArray, isTypedArray, forEachEntry, matchAll, isHTMLForm, toCamelCase, hasOwnProperty, isRegExp, reduceDescriptors, freezeMethods, toObjectSet, noop, toFiniteNumber, ALPHA, DIGIT, ALPHABET, generateString, toJSONObject, isAsyncFn, isThenable, utils_default;
var init_utils = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/utils.js\\"() {
    \\"use strict\\";
    init_bind();
    ({ toString } = Object.prototype);
    ({ getPrototypeOf } = Object);
    kindOf = ((cache) => (thing) => {
      const str = toString.call(thing);
      return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    })(/* @__PURE__ */ Object.create(null));
    kindOfTest = (type) => {
      type = type.toLowerCase();
      return (thing) => kindOf(thing) === type;
    };
    typeOfTest = (type) => (thing) => typeof thing === type;
    ({ isArray } = Array);
    isUndefined = typeOfTest(\\"undefined\\");
    isArrayBuffer = kindOfTest(\\"ArrayBuffer\\");
    isString = typeOfTest(\\"string\\");
    isFunction = typeOfTest(\\"function\\");
    isNumber = typeOfTest(\\"number\\");
    isObject = (thing) => thing !== null && typeof thing === \\"object\\";
    isBoolean = (thing) => thing === true || thing === false;
    isPlainObject = (val) => {
      if (kindOf(val) !== \\"object\\") {
        return false;
      }
      const prototype3 = getPrototypeOf(val);
      return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
    };
    isDate = kindOfTest(\\"Date\\");
    isFile = kindOfTest(\\"File\\");
    isBlob = kindOfTest(\\"Blob\\");
    isFileList = kindOfTest(\\"FileList\\");
    isStream = (val) => isObject(val) && isFunction(val.pipe);
    isFormData = (thing) => {
      let kind;
      return thing && (typeof FormData === \\"function\\" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === \\"formdata\\" || kind === \\"object\\" && isFunction(thing.toString) && thing.toString() === \\"[object FormData]\\"));
    };
    isURLSearchParams = kindOfTest(\\"URLSearchParams\\");
    trim = (str) => str.trim ? str.trim() : str.replace(/^[\\\\s\\\\uFEFF\\\\xA0]+|[\\\\s\\\\uFEFF\\\\xA0]+$/g, \\"\\");
    _global = (() => {
      if (typeof globalThis !== \\"undefined\\")
        return globalThis;
      return typeof self !== \\"undefined\\" ? self : typeof window !== \\"undefined\\" ? window : global;
    })();
    isContextDefined = (context) => !isUndefined(context) && context !== _global;
    extend = (a, b, thisArg, { allOwnKeys } = {}) => {
      forEach(b, (val, key) => {
        if (thisArg && isFunction(val)) {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      }, { allOwnKeys });
      return a;
    };
    stripBOM = (content) => {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    };
    inherits = (constructor, superConstructor, props, descriptors2) => {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
      constructor.prototype.constructor = constructor;
      Object.defineProperty(constructor, \\"super\\", {
        value: superConstructor.prototype
      });
      props && Object.assign(constructor.prototype, props);
    };
    toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
      let props;
      let i;
      let prop;
      const merged = {};
      destObj = destObj || {};
      if (sourceObj == null)
        return destObj;
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    };
    endsWith = (str, searchString, position) => {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      const lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };
    toArray = (thing) => {
      if (!thing)
        return null;
      if (isArray(thing))
        return thing;
      let i = thing.length;
      if (!isNumber(i))
        return null;
      const arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    };
    isTypedArray = ((TypedArray) => {
      return (thing) => {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== \\"undefined\\" && getPrototypeOf(Uint8Array));
    forEachEntry = (obj, fn) => {
      const generator = obj && obj[Symbol.iterator];
      const iterator = generator.call(obj);
      let result;
      while ((result = iterator.next()) && !result.done) {
        const pair = result.value;
        fn.call(obj, pair[0], pair[1]);
      }
    };
    matchAll = (regExp, str) => {
      let matches;
      const arr = [];
      while ((matches = regExp.exec(str)) !== null) {
        arr.push(matches);
      }
      return arr;
    };
    isHTMLForm = kindOfTest(\\"HTMLFormElement\\");
    toCamelCase = (str) => {
      return str.toLowerCase().replace(
        /[-_\\\\s]([a-z\\\\d])(\\\\w*)/g,
        function replacer(m, p1, p2) {
          return p1.toUpperCase() + p2;
        }
      );
    };
    hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
    isRegExp = kindOfTest(\\"RegExp\\");
    reduceDescriptors = (obj, reducer) => {
      const descriptors2 = Object.getOwnPropertyDescriptors(obj);
      const reducedDescriptors = {};
      forEach(descriptors2, (descriptor, name) => {
        if (reducer(descriptor, name, obj) !== false) {
          reducedDescriptors[name] = descriptor;
        }
      });
      Object.defineProperties(obj, reducedDescriptors);
    };
    freezeMethods = (obj) => {
      reduceDescriptors(obj, (descriptor, name) => {
        if (isFunction(obj) && [\\"arguments\\", \\"caller\\", \\"callee\\"].indexOf(name) !== -1) {
          return false;
        }
        const value = obj[name];
        if (!isFunction(value))
          return;
        descriptor.enumerable = false;
        if (\\"writable\\" in descriptor) {
          descriptor.writable = false;
          return;
        }
        if (!descriptor.set) {
          descriptor.set = () => {
            throw Error(\\"Can not rewrite read-only method '\\" + name + \\"'\\");
          };
        }
      });
    };
    toObjectSet = (arrayOrString, delimiter) => {
      const obj = {};
      const define2 = (arr) => {
        arr.forEach((value) => {
          obj[value] = true;
        });
      };
      isArray(arrayOrString) ? define2(arrayOrString) : define2(String(arrayOrString).split(delimiter));
      return obj;
    };
    noop = () => {
    };
    toFiniteNumber = (value, defaultValue) => {
      value = +value;
      return Number.isFinite(value) ? value : defaultValue;
    };
    ALPHA = \\"abcdefghijklmnopqrstuvwxyz\\";
    DIGIT = \\"0123456789\\";
    ALPHABET = {
      DIGIT,
      ALPHA,
      ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
    };
    generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
      let str = \\"\\";
      const { length } = alphabet;
      while (size--) {
        str += alphabet[Math.random() * length | 0];
      }
      return str;
    };
    toJSONObject = (obj) => {
      const stack = new Array(10);
      const visit = (source, i) => {
        if (isObject(source)) {
          if (stack.indexOf(source) >= 0) {
            return;
          }
          if (!(\\"toJSON\\" in source)) {
            stack[i] = source;
            const target = isArray(source) ? [] : {};
            forEach(source, (value, key) => {
              const reducedValue = visit(value, i + 1);
              !isUndefined(reducedValue) && (target[key] = reducedValue);
            });
            stack[i] = void 0;
            return target;
          }
        }
        return source;
      };
      return visit(obj, 0);
    };
    isAsyncFn = kindOfTest(\\"AsyncFunction\\");
    isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
    utils_default = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isBoolean,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isRegExp,
      isFunction,
      isStream,
      isURLSearchParams,
      isTypedArray,
      isFileList,
      forEach,
      merge,
      extend,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray,
      forEachEntry,
      matchAll,
      isHTMLForm,
      hasOwnProperty,
      hasOwnProp: hasOwnProperty,
      // an alias to avoid ESLint no-prototype-builtins detection
      reduceDescriptors,
      freezeMethods,
      toObjectSet,
      toCamelCase,
      noop,
      toFiniteNumber,
      findKey,
      global: _global,
      isContextDefined,
      ALPHABET,
      generateString,
      isSpecCompliantForm,
      toJSONObject,
      isAsyncFn,
      isThenable
    };
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/AxiosError.js
function AxiosError(message, code, config, request, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message;
  this.name = \\"AxiosError\\";
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  response && (this.response = response);
}
var prototype, descriptors, AxiosError_default;
var init_AxiosError = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/AxiosError.js\\"() {
    \\"use strict\\";
    init_utils();
    utils_default.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: utils_default.toJSONObject(this.config),
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      }
    });
    prototype = AxiosError.prototype;
    descriptors = {};
    [
      \\"ERR_BAD_OPTION_VALUE\\",
      \\"ERR_BAD_OPTION\\",
      \\"ECONNABORTED\\",
      \\"ETIMEDOUT\\",
      \\"ERR_NETWORK\\",
      \\"ERR_FR_TOO_MANY_REDIRECTS\\",
      \\"ERR_DEPRECATED\\",
      \\"ERR_BAD_RESPONSE\\",
      \\"ERR_BAD_REQUEST\\",
      \\"ERR_CANCELED\\",
      \\"ERR_NOT_SUPPORT\\",
      \\"ERR_INVALID_URL\\"
      // eslint-disable-next-line func-names
    ].forEach((code) => {
      descriptors[code] = { value: code };
    });
    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype, \\"isAxiosError\\", { value: true });
    AxiosError.from = (error, code, config, request, response, customProps) => {
      const axiosError = Object.create(prototype);
      utils_default.toFlatObject(error, axiosError, function filter2(obj) {
        return obj !== Error.prototype;
      }, (prop) => {
        return prop !== \\"isAxiosError\\";
      });
      AxiosError.call(axiosError, error.message, code, config, request, response);
      axiosError.cause = error;
      axiosError.name = error.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    AxiosError_default = AxiosError;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/null.js
var null_default;
var init_null = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/null.js\\"() {
    null_default = null;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/toFormData.js
function isVisitable(thing) {
  return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
}
function removeBrackets(key) {
  return utils_default.endsWith(key, \\"[]\\") ? key.slice(0, -2) : key;
}
function renderKey(path, key, dots) {
  if (!path)
    return key;
  return path.concat(key).map(function each(token, i) {
    token = removeBrackets(token);
    return !dots && i ? \\"[\\" + token + \\"]\\" : token;
  }).join(dots ? \\".\\" : \\"\\");
}
function isFlatArray(arr) {
  return utils_default.isArray(arr) && !arr.some(isVisitable);
}
function toFormData(obj, formData, options) {
  if (!utils_default.isObject(obj)) {
    throw new TypeError(\\"target must be an object\\");
  }
  formData = formData || new (null_default || FormData)();
  options = utils_default.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    return !utils_default.isUndefined(source[option]);
  });
  const metaTokens = options.metaTokens;
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== \\"undefined\\" && Blob;
  const useBlob = _Blob && utils_default.isSpecCompliantForm(formData);
  if (!utils_default.isFunction(visitor)) {
    throw new TypeError(\\"visitor must be a function\\");
  }
  function convertValue(value) {
    if (value === null)
      return \\"\\";
    if (utils_default.isDate(value)) {
      return value.toISOString();
    }
    if (!useBlob && utils_default.isBlob(value)) {
      throw new AxiosError_default(\\"Blob is not supported. Use a Buffer instead.\\");
    }
    if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {
      return useBlob && typeof Blob === \\"function\\" ? new Blob([value]) : Buffer.from(value);
    }
    return value;
  }
  function defaultVisitor(value, key, path) {
    let arr = value;
    if (value && !path && typeof value === \\"object\\") {
      if (utils_default.endsWith(key, \\"{}\\")) {
        key = metaTokens ? key : key.slice(0, -2);
        value = JSON.stringify(value);
      } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key, \\"[]\\")) && (arr = utils_default.toArray(value))) {
        key = removeBrackets(key);
        arr.forEach(function each(el, index) {
          !(utils_default.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + \\"[]\\",
            convertValue(el)
          );
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path, key, dots), convertValue(value));
    return false;
  }
  const stack = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });
  function build(value, path) {
    if (utils_default.isUndefined(value))
      return;
    if (stack.indexOf(value) !== -1) {
      throw Error(\\"Circular reference detected in \\" + path.join(\\".\\"));
    }
    stack.push(value);
    utils_default.forEach(value, function each(el, key) {
      const result = !(utils_default.isUndefined(el) || el === null) && visitor.call(
        formData,
        el,
        utils_default.isString(key) ? key.trim() : key,
        path,
        exposedHelpers
      );
      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });
    stack.pop();
  }
  if (!utils_default.isObject(obj)) {
    throw new TypeError(\\"data must be an object\\");
  }
  build(obj);
  return formData;
}
var predicates, toFormData_default;
var init_toFormData = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/toFormData.js\\"() {
    \\"use strict\\";
    init_utils();
    init_AxiosError();
    init_null();
    predicates = utils_default.toFlatObject(utils_default, {}, null, function filter(prop) {
      return /^is[A-Z]/.test(prop);
    });
    toFormData_default = toFormData;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/AxiosURLSearchParams.js
function encode(str) {
  const charMap = {
    \\"!\\": \\"%21\\",
    \\"'\\": \\"%27\\",
    \\"(\\": \\"%28\\",
    \\")\\": \\"%29\\",
    \\"~\\": \\"%7E\\",
    \\"%20\\": \\"+\\",
    \\"%00\\": \\"\\\\0\\"
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && toFormData_default(params, this, options);
}
var prototype2, AxiosURLSearchParams_default;
var init_AxiosURLSearchParams = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/AxiosURLSearchParams.js\\"() {
    \\"use strict\\";
    init_toFormData();
    prototype2 = AxiosURLSearchParams.prototype;
    prototype2.append = function append(name, value) {
      this._pairs.push([name, value]);
    };
    prototype2.toString = function toString2(encoder) {
      const _encode = encoder ? function(value) {
        return encoder.call(this, value, encode);
      } : encode;
      return this._pairs.map(function each(pair) {
        return _encode(pair[0]) + \\"=\\" + _encode(pair[1]);
      }, \\"\\").join(\\"&\\");
    };
    AxiosURLSearchParams_default = AxiosURLSearchParams;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/buildURL.js
function encode2(val) {
  return encodeURIComponent(val).replace(/%3A/gi, \\":\\").replace(/%24/g, \\"$\\").replace(/%2C/gi, \\",\\").replace(/%20/g, \\"+\\").replace(/%5B/gi, \\"[\\").replace(/%5D/gi, \\"]\\");
}
function buildURL(url, params, options) {
  if (!params) {
    return url;
  }
  const _encode = options && options.encode || encode2;
  const serializeFn = options && options.serialize;
  let serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode);
  }
  if (serializedParams) {
    const hashmarkIndex = url.indexOf(\\"#\\");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf(\\"?\\") === -1 ? \\"?\\" : \\"&\\") + serializedParams;
  }
  return url;
}
var init_buildURL = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/buildURL.js\\"() {
    \\"use strict\\";
    init_utils();
    init_AxiosURLSearchParams();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/InterceptorManager.js
var InterceptorManager, InterceptorManager_default;
var init_InterceptorManager = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/InterceptorManager.js\\"() {
    \\"use strict\\";
    init_utils();
    InterceptorManager = class {
      constructor() {
        this.handlers = [];
      }
      /**
       * Add a new interceptor to the stack
       *
       * @param {Function} fulfilled The function to handle \`then\` for a \`Promise\`
       * @param {Function} rejected The function to handle \`reject\` for a \`Promise\`
       *
       * @return {Number} An ID used to remove interceptor later
       */
      use(fulfilled, rejected, options) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options ? options.synchronous : false,
          runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
      }
      /**
       * Remove an interceptor from the stack
       *
       * @param {Number} id The ID that was returned by \`use\`
       *
       * @returns {Boolean} \`true\` if the interceptor was removed, \`false\` otherwise
       */
      eject(id) {
        if (this.handlers[id]) {
          this.handlers[id] = null;
        }
      }
      /**
       * Clear all interceptors from the stack
       *
       * @returns {void}
       */
      clear() {
        if (this.handlers) {
          this.handlers = [];
        }
      }
      /**
       * Iterate over all the registered interceptors
       *
       * This method is particularly useful for skipping over any
       * interceptors that may have become \`null\` calling \`eject\`.
       *
       * @param {Function} fn The function to call for each interceptor
       *
       * @returns {void}
       */
      forEach(fn) {
        utils_default.forEach(this.handlers, function forEachHandler(h) {
          if (h !== null) {
            fn(h);
          }
        });
      }
    };
    InterceptorManager_default = InterceptorManager;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/defaults/transitional.js
var transitional_default;
var init_transitional = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/defaults/transitional.js\\"() {
    \\"use strict\\";
    transitional_default = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/browser/classes/URLSearchParams.js
var URLSearchParams_default;
var init_URLSearchParams = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/browser/classes/URLSearchParams.js\\"() {
    \\"use strict\\";
    init_AxiosURLSearchParams();
    URLSearchParams_default = typeof URLSearchParams !== \\"undefined\\" ? URLSearchParams : AxiosURLSearchParams_default;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/browser/classes/FormData.js
var FormData_default;
var init_FormData = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/browser/classes/FormData.js\\"() {
    \\"use strict\\";
    FormData_default = typeof FormData !== \\"undefined\\" ? FormData : null;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/browser/classes/Blob.js
var Blob_default;
var init_Blob = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/browser/classes/Blob.js\\"() {
    \\"use strict\\";
    Blob_default = typeof Blob !== \\"undefined\\" ? Blob : null;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/browser/index.js
var isStandardBrowserEnv, isStandardBrowserWebWorkerEnv, browser_default;
var init_browser = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/browser/index.js\\"() {
    init_URLSearchParams();
    init_FormData();
    init_Blob();
    isStandardBrowserEnv = (() => {
      let product;
      if (typeof navigator !== \\"undefined\\" && ((product = navigator.product) === \\"ReactNative\\" || product === \\"NativeScript\\" || product === \\"NS\\")) {
        return false;
      }
      return typeof window !== \\"undefined\\" && typeof document !== \\"undefined\\";
    })();
    isStandardBrowserWebWorkerEnv = (() => {
      return typeof WorkerGlobalScope !== \\"undefined\\" && // eslint-disable-next-line no-undef
      self instanceof WorkerGlobalScope && typeof self.importScripts === \\"function\\";
    })();
    browser_default = {
      isBrowser: true,
      classes: {
        URLSearchParams: URLSearchParams_default,
        FormData: FormData_default,
        Blob: Blob_default
      },
      isStandardBrowserEnv,
      isStandardBrowserWebWorkerEnv,
      protocols: [\\"http\\", \\"https\\", \\"file\\", \\"blob\\", \\"url\\", \\"data\\"]
    };
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/index.js
var init_platform = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/index.js\\"() {
    init_browser();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/toURLEncodedForm.js
function toURLEncodedForm(data, options) {
  return toFormData_default(data, new browser_default.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (browser_default.isNode && utils_default.isBuffer(value)) {
        this.append(key, value.toString(\\"base64\\"));
        return false;
      }
      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}
var init_toURLEncodedForm = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/toURLEncodedForm.js\\"() {
    \\"use strict\\";
    init_utils();
    init_toFormData();
    init_platform();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/formDataToJSON.js
function parsePropPath(name) {
  return utils_default.matchAll(/\\\\w+|\\\\[(\\\\w*)]/g, name).map((match) => {
    return match[0] === \\"[]\\" ? \\"\\" : match[1] || match[0];
  });
}
function arrayToObject(arr) {
  const obj = {};
  const keys2 = Object.keys(arr);
  let i;
  const len = keys2.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys2[i];
    obj[key] = arr[key];
  }
  return obj;
}
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];
    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils_default.isArray(target) ? target.length : name;
    if (isLast) {
      if (utils_default.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !utils_default.isObject(target[name])) {
      target[name] = [];
    }
    const result = buildPath(path, value, target[name], index);
    if (result && utils_default.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
    const obj = {};
    utils_default.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}
var formDataToJSON_default;
var init_formDataToJSON = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/formDataToJSON.js\\"() {
    \\"use strict\\";
    init_utils();
    formDataToJSON_default = formDataToJSON;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/defaults/index.js
function stringifySafely(rawValue, parser, encoder) {
  if (utils_default.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils_default.trim(rawValue);
    } catch (e) {
      if (e.name !== \\"SyntaxError\\") {
        throw e;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
var DEFAULT_CONTENT_TYPE, defaults, defaults_default;
var init_defaults = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/defaults/index.js\\"() {
    \\"use strict\\";
    init_utils();
    init_AxiosError();
    init_transitional();
    init_toFormData();
    init_toURLEncodedForm();
    init_platform();
    init_formDataToJSON();
    DEFAULT_CONTENT_TYPE = {
      \\"Content-Type\\": void 0
    };
    defaults = {
      transitional: transitional_default,
      adapter: [\\"xhr\\", \\"http\\"],
      transformRequest: [function transformRequest(data, headers) {
        const contentType = headers.getContentType() || \\"\\";
        const hasJSONContentType = contentType.indexOf(\\"application/json\\") > -1;
        const isObjectPayload = utils_default.isObject(data);
        if (isObjectPayload && utils_default.isHTMLForm(data)) {
          data = new FormData(data);
        }
        const isFormData2 = utils_default.isFormData(data);
        if (isFormData2) {
          if (!hasJSONContentType) {
            return data;
          }
          return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;
        }
        if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data)) {
          return data;
        }
        if (utils_default.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils_default.isURLSearchParams(data)) {
          headers.setContentType(\\"application/x-www-form-urlencoded;charset=utf-8\\", false);
          return data.toString();
        }
        let isFileList2;
        if (isObjectPayload) {
          if (contentType.indexOf(\\"application/x-www-form-urlencoded\\") > -1) {
            return toURLEncodedForm(data, this.formSerializer).toString();
          }
          if ((isFileList2 = utils_default.isFileList(data)) || contentType.indexOf(\\"multipart/form-data\\") > -1) {
            const _FormData = this.env && this.env.FormData;
            return toFormData_default(
              isFileList2 ? { \\"files[]\\": data } : data,
              _FormData && new _FormData(),
              this.formSerializer
            );
          }
        }
        if (isObjectPayload || hasJSONContentType) {
          headers.setContentType(\\"application/json\\", false);
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        const transitional2 = this.transitional || defaults.transitional;
        const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
        const JSONRequested = this.responseType === \\"json\\";
        if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
          const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
          const strictJSONParsing = !silentJSONParsing && JSONRequested;
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === \\"SyntaxError\\") {
                throw AxiosError_default.from(e, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: \\"XSRF-TOKEN\\",
      xsrfHeaderName: \\"X-XSRF-TOKEN\\",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: browser_default.classes.FormData,
        Blob: browser_default.classes.Blob
      },
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          \\"Accept\\": \\"application/json, text/plain, */*\\"
        }
      }
    };
    utils_default.forEach([\\"delete\\", \\"get\\", \\"head\\"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils_default.forEach([\\"post\\", \\"put\\", \\"patch\\"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils_default.merge(DEFAULT_CONTENT_TYPE);
    });
    defaults_default = defaults;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/parseHeaders.js
var ignoreDuplicateOf, parseHeaders_default;
var init_parseHeaders = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/parseHeaders.js\\"() {
    \\"use strict\\";
    init_utils();
    ignoreDuplicateOf = utils_default.toObjectSet([
      \\"age\\",
      \\"authorization\\",
      \\"content-length\\",
      \\"content-type\\",
      \\"etag\\",
      \\"expires\\",
      \\"from\\",
      \\"host\\",
      \\"if-modified-since\\",
      \\"if-unmodified-since\\",
      \\"last-modified\\",
      \\"location\\",
      \\"max-forwards\\",
      \\"proxy-authorization\\",
      \\"referer\\",
      \\"retry-after\\",
      \\"user-agent\\"
    ]);
    parseHeaders_default = (rawHeaders) => {
      const parsed = {};
      let key;
      let val;
      let i;
      rawHeaders && rawHeaders.split(\\"\\\\n\\").forEach(function parser(line) {
        i = line.indexOf(\\":\\");
        key = line.substring(0, i).trim().toLowerCase();
        val = line.substring(i + 1).trim();
        if (!key || parsed[key] && ignoreDuplicateOf[key]) {
          return;
        }
        if (key === \\"set-cookie\\") {
          if (parsed[key]) {
            parsed[key].push(val);
          } else {
            parsed[key] = [val];
          }
        } else {
          parsed[key] = parsed[key] ? parsed[key] + \\", \\" + val : val;
        }
      });
      return parsed;
    };
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/AxiosHeaders.js
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
  const tokens = /* @__PURE__ */ Object.create(null);
  const tokensRE = /([^\\\\s,;=]+)\\\\s*(?:=\\\\s*([^,;]+))?/g;
  let match;
  while (match = tokensRE.exec(str)) {
    tokens[match[1]] = match[2];
  }
  return tokens;
}
function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
  if (utils_default.isFunction(filter2)) {
    return filter2.call(this, value, header);
  }
  if (isHeaderNameFilter) {
    value = header;
  }
  if (!utils_default.isString(value))
    return;
  if (utils_default.isString(filter2)) {
    return value.indexOf(filter2) !== -1;
  }
  if (utils_default.isRegExp(filter2)) {
    return filter2.test(value);
  }
}
function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\\\\d])(\\\\w*)/g, (w, char, str) => {
    return char.toUpperCase() + str;
  });
}
function buildAccessors(obj, header) {
  const accessorName = utils_default.toCamelCase(\\" \\" + header);
  [\\"get\\", \\"set\\", \\"has\\"].forEach((methodName) => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}
var $internals, isValidHeaderName, AxiosHeaders, AxiosHeaders_default;
var init_AxiosHeaders = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/AxiosHeaders.js\\"() {
    \\"use strict\\";
    init_utils();
    init_parseHeaders();
    $internals = Symbol(\\"internals\\");
    isValidHeaderName = (str) => /^[-_a-zA-Z0-9^\`|~,!#$%&'*+.]+$/.test(str.trim());
    AxiosHeaders = class {
      constructor(headers) {
        headers && this.set(headers);
      }
      set(header, valueOrRewrite, rewrite) {
        const self2 = this;
        function setHeader(_value, _header, _rewrite) {
          const lHeader = normalizeHeader(_header);
          if (!lHeader) {
            throw new Error(\\"header name must be a non-empty string\\");
          }
          const key = utils_default.findKey(self2, lHeader);
          if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
            self2[key || _header] = normalizeValue(_value);
          }
        }
        const setHeaders = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
        if (utils_default.isPlainObject(header) || header instanceof this.constructor) {
          setHeaders(header, valueOrRewrite);
        } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
          setHeaders(parseHeaders_default(header), valueOrRewrite);
        } else {
          header != null && setHeader(valueOrRewrite, header, rewrite);
        }
        return this;
      }
      get(header, parser) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils_default.findKey(this, header);
          if (key) {
            const value = this[key];
            if (!parser) {
              return value;
            }
            if (parser === true) {
              return parseTokens(value);
            }
            if (utils_default.isFunction(parser)) {
              return parser.call(this, value, key);
            }
            if (utils_default.isRegExp(parser)) {
              return parser.exec(value);
            }
            throw new TypeError(\\"parser must be boolean|regexp|function\\");
          }
        }
      }
      has(header, matcher) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils_default.findKey(this, header);
          return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
        }
        return false;
      }
      delete(header, matcher) {
        const self2 = this;
        let deleted = false;
        function deleteHeader(_header) {
          _header = normalizeHeader(_header);
          if (_header) {
            const key = utils_default.findKey(self2, _header);
            if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
              delete self2[key];
              deleted = true;
            }
          }
        }
        if (utils_default.isArray(header)) {
          header.forEach(deleteHeader);
        } else {
          deleteHeader(header);
        }
        return deleted;
      }
      clear(matcher) {
        const keys2 = Object.keys(this);
        let i = keys2.length;
        let deleted = false;
        while (i--) {
          const key = keys2[i];
          if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
            delete this[key];
            deleted = true;
          }
        }
        return deleted;
      }
      normalize(format) {
        const self2 = this;
        const headers = {};
        utils_default.forEach(this, (value, header) => {
          const key = utils_default.findKey(headers, header);
          if (key) {
            self2[key] = normalizeValue(value);
            delete self2[header];
            return;
          }
          const normalized = format ? formatHeader(header) : String(header).trim();
          if (normalized !== header) {
            delete self2[header];
          }
          self2[normalized] = normalizeValue(value);
          headers[normalized] = true;
        });
        return this;
      }
      concat(...targets) {
        return this.constructor.concat(this, ...targets);
      }
      toJSON(asStrings) {
        const obj = /* @__PURE__ */ Object.create(null);
        utils_default.forEach(this, (value, header) => {
          value != null && value !== false && (obj[header] = asStrings && utils_default.isArray(value) ? value.join(\\", \\") : value);
        });
        return obj;
      }
      [Symbol.iterator]() {
        return Object.entries(this.toJSON())[Symbol.iterator]();
      }
      toString() {
        return Object.entries(this.toJSON()).map(([header, value]) => header + \\": \\" + value).join(\\"\\\\n\\");
      }
      get [Symbol.toStringTag]() {
        return \\"AxiosHeaders\\";
      }
      static from(thing) {
        return thing instanceof this ? thing : new this(thing);
      }
      static concat(first, ...targets) {
        const computed = new this(first);
        targets.forEach((target) => computed.set(target));
        return computed;
      }
      static accessor(header) {
        const internals = this[$internals] = this[$internals] = {
          accessors: {}
        };
        const accessors = internals.accessors;
        const prototype3 = this.prototype;
        function defineAccessor(_header) {
          const lHeader = normalizeHeader(_header);
          if (!accessors[lHeader]) {
            buildAccessors(prototype3, _header);
            accessors[lHeader] = true;
          }
        }
        utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
        return this;
      }
    };
    AxiosHeaders.accessor([\\"Content-Type\\", \\"Content-Length\\", \\"Accept\\", \\"Accept-Encoding\\", \\"User-Agent\\", \\"Authorization\\"]);
    utils_default.freezeMethods(AxiosHeaders.prototype);
    utils_default.freezeMethods(AxiosHeaders);
    AxiosHeaders_default = AxiosHeaders;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/transformData.js
function transformData(fns, response) {
  const config = this || defaults_default;
  const context = response || config;
  const headers = AxiosHeaders_default.from(context.headers);
  let data = context.data;
  utils_default.forEach(fns, function transform2(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
  });
  headers.normalize();
  return data;
}
var init_transformData = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/transformData.js\\"() {
    \\"use strict\\";
    init_utils();
    init_defaults();
    init_AxiosHeaders();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/cancel/isCancel.js
function isCancel(value) {
  return !!(value && value.__CANCEL__);
}
var init_isCancel = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/cancel/isCancel.js\\"() {
    \\"use strict\\";
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/cancel/CanceledError.js
function CanceledError(message, config, request) {
  AxiosError_default.call(this, message == null ? \\"canceled\\" : message, AxiosError_default.ERR_CANCELED, config, request);
  this.name = \\"CanceledError\\";
}
var CanceledError_default;
var init_CanceledError = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/cancel/CanceledError.js\\"() {
    \\"use strict\\";
    init_AxiosError();
    init_utils();
    utils_default.inherits(CanceledError, AxiosError_default, {
      __CANCEL__: true
    });
    CanceledError_default = CanceledError;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/settle.js
function settle(resolve, reject, response) {
  const validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError_default(
      \\"Request failed with status code \\" + response.status,
      [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}
var init_settle = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/settle.js\\"() {
    \\"use strict\\";
    init_AxiosError();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/cookies.js
var cookies_default;
var init_cookies = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/cookies.js\\"() {
    \\"use strict\\";
    init_utils();
    init_platform();
    cookies_default = browser_default.isStandardBrowserEnv ? function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          const cookie = [];
          cookie.push(name + \\"=\\" + encodeURIComponent(value));
          if (utils_default.isNumber(expires)) {
            cookie.push(\\"expires=\\" + new Date(expires).toGMTString());
          }
          if (utils_default.isString(path)) {
            cookie.push(\\"path=\\" + path);
          }
          if (utils_default.isString(domain)) {
            cookie.push(\\"domain=\\" + domain);
          }
          if (secure === true) {
            cookie.push(\\"secure\\");
          }
          document.cookie = cookie.join(\\"; \\");
        },
        read: function read(name) {
          const match = document.cookie.match(new RegExp(\\"(^|;\\\\\\\\s*)(\\" + name + \\")=([^;]*)\\"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
          this.write(name, \\"\\", Date.now() - 864e5);
        }
      };
    }() : function nonStandardBrowserEnv() {
      return {
        write: function write() {
        },
        read: function read() {
          return null;
        },
        remove: function remove() {
        }
      };
    }();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/isAbsoluteURL.js
function isAbsoluteURL(url) {
  return /^([a-z][a-z\\\\d+\\\\-.]*:)?\\\\/\\\\//i.test(url);
}
var init_isAbsoluteURL = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/isAbsoluteURL.js\\"() {
    \\"use strict\\";
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/combineURLs.js
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\\\\/+$/, \\"\\") + \\"/\\" + relativeURL.replace(/^\\\\/+/, \\"\\") : baseURL;
}
var init_combineURLs = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/combineURLs.js\\"() {
    \\"use strict\\";
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/buildFullPath.js
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}
var init_buildFullPath = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/buildFullPath.js\\"() {
    \\"use strict\\";
    init_isAbsoluteURL();
    init_combineURLs();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/isURLSameOrigin.js
var isURLSameOrigin_default;
var init_isURLSameOrigin = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/isURLSameOrigin.js\\"() {
    \\"use strict\\";
    init_utils();
    init_platform();
    isURLSameOrigin_default = browser_default.isStandardBrowserEnv ? function standardBrowserEnv2() {
      const msie = /(msie|trident)/i.test(navigator.userAgent);
      const urlParsingNode = document.createElement(\\"a\\");
      let originURL;
      function resolveURL(url) {
        let href = url;
        if (msie) {
          urlParsingNode.setAttribute(\\"href\\", href);
          href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute(\\"href\\", href);
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, \\"\\") : \\"\\",
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\\\?/, \\"\\") : \\"\\",
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, \\"\\") : \\"\\",
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: urlParsingNode.pathname.charAt(0) === \\"/\\" ? urlParsingNode.pathname : \\"/\\" + urlParsingNode.pathname
        };
      }
      originURL = resolveURL(window.location.href);
      return function isURLSameOrigin(requestURL) {
        const parsed = utils_default.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
      };
    }() : function nonStandardBrowserEnv2() {
      return function isURLSameOrigin() {
        return true;
      };
    }();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/parseProtocol.js
function parseProtocol(url) {
  const match = /^([-+\\\\w]{1,25})(:?\\\\/\\\\/|:)/.exec(url);
  return match && match[1] || \\"\\";
}
var init_parseProtocol = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/parseProtocol.js\\"() {
    \\"use strict\\";
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/speedometer.js
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;
  min = min !== void 0 ? min : 1e3;
  return function push(chunkLength) {
    const now = Date.now();
    const startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now;
    }
    bytes[head] = chunkLength;
    timestamps[head] = now;
    let i = tail;
    let bytesCount = 0;
    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now - firstSampleTS < min) {
      return;
    }
    const passed = startedAt && now - startedAt;
    return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
  };
}
var speedometer_default;
var init_speedometer = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/speedometer.js\\"() {
    \\"use strict\\";
    speedometer_default = speedometer;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/adapters/xhr.js
function progressEventReducer(listener, isDownloadStream) {
  let bytesNotified = 0;
  const _speedometer = speedometer_default(50, 250);
  return (e) => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : void 0;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;
    bytesNotified = loaded;
    const data = {
      loaded,
      total,
      progress: total ? loaded / total : void 0,
      bytes: progressBytes,
      rate: rate ? rate : void 0,
      estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
      event: e
    };
    data[isDownloadStream ? \\"download\\" : \\"upload\\"] = true;
    listener(data);
  };
}
var isXHRAdapterSupported, xhr_default;
var init_xhr = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/adapters/xhr.js\\"() {
    \\"use strict\\";
    init_utils();
    init_settle();
    init_cookies();
    init_buildURL();
    init_buildFullPath();
    init_isURLSameOrigin();
    init_transitional();
    init_AxiosError();
    init_CanceledError();
    init_parseProtocol();
    init_platform();
    init_AxiosHeaders();
    init_speedometer();
    isXHRAdapterSupported = typeof XMLHttpRequest !== \\"undefined\\";
    xhr_default = isXHRAdapterSupported && function(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        let requestData = config.data;
        const requestHeaders = AxiosHeaders_default.from(config.headers).normalize();
        const responseType = config.responseType;
        let onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener(\\"abort\\", onCanceled);
          }
        }
        if (utils_default.isFormData(requestData)) {
          if (browser_default.isStandardBrowserEnv || browser_default.isStandardBrowserWebWorkerEnv) {
            requestHeaders.setContentType(false);
          } else {
            requestHeaders.setContentType(\\"multipart/form-data;\\", false);
          }
        }
        let request = new XMLHttpRequest();
        if (config.auth) {
          const username = config.auth.username || \\"\\";
          const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : \\"\\";
          requestHeaders.set(\\"Authorization\\", \\"Basic \\" + btoa(username + \\":\\" + password));
        }
        const fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          const responseHeaders = AxiosHeaders_default.from(
            \\"getAllResponseHeaders\\" in request && request.getAllResponseHeaders()
          );
          const responseData = !responseType || responseType === \\"text\\" || responseType === \\"json\\" ? request.responseText : request.response;
          const response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if (\\"onloadend\\" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf(\\"file:\\") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(new AxiosError_default(\\"Request aborted\\", AxiosError_default.ECONNABORTED, config, request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(new AxiosError_default(\\"Network Error\\", AxiosError_default.ERR_NETWORK, config, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          let timeoutErrorMessage = config.timeout ? \\"timeout of \\" + config.timeout + \\"ms exceeded\\" : \\"timeout exceeded\\";
          const transitional2 = config.transitional || transitional_default;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(new AxiosError_default(
            timeoutErrorMessage,
            transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,
            config,
            request
          ));
          request = null;
        };
        if (browser_default.isStandardBrowserEnv) {
          const xsrfValue = (config.withCredentials || isURLSameOrigin_default(fullPath)) && config.xsrfCookieName && cookies_default.read(config.xsrfCookieName);
          if (xsrfValue) {
            requestHeaders.set(config.xsrfHeaderName, xsrfValue);
          }
        }
        requestData === void 0 && requestHeaders.setContentType(null);
        if (\\"setRequestHeader\\" in request) {
          utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
            request.setRequestHeader(key, val);
          });
        }
        if (!utils_default.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== \\"json\\") {
          request.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === \\"function\\") {
          request.addEventListener(\\"progress\\", progressEventReducer(config.onDownloadProgress, true));
        }
        if (typeof config.onUploadProgress === \\"function\\" && request.upload) {
          request.upload.addEventListener(\\"progress\\", progressEventReducer(config.onUploadProgress));
        }
        if (config.cancelToken || config.signal) {
          onCanceled = (cancel) => {
            if (!request) {
              return;
            }
            reject(!cancel || cancel.type ? new CanceledError_default(null, config, request) : cancel);
            request.abort();
            request = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener(\\"abort\\", onCanceled);
          }
        }
        const protocol = parseProtocol(fullPath);
        if (protocol && browser_default.protocols.indexOf(protocol) === -1) {
          reject(new AxiosError_default(\\"Unsupported protocol \\" + protocol + \\":\\", AxiosError_default.ERR_BAD_REQUEST, config));
          return;
        }
        request.send(requestData || null);
      });
    };
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/adapters/adapters.js
var knownAdapters, adapters_default;
var init_adapters = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/adapters/adapters.js\\"() {
    init_utils();
    init_null();
    init_xhr();
    init_AxiosError();
    knownAdapters = {
      http: null_default,
      xhr: xhr_default
    };
    utils_default.forEach(knownAdapters, (fn, value) => {
      if (fn) {
        try {
          Object.defineProperty(fn, \\"name\\", { value });
        } catch (e) {
        }
        Object.defineProperty(fn, \\"adapterName\\", { value });
      }
    });
    adapters_default = {
      getAdapter: (adapters) => {
        adapters = utils_default.isArray(adapters) ? adapters : [adapters];
        const { length } = adapters;
        let nameOrAdapter;
        let adapter;
        for (let i = 0; i < length; i++) {
          nameOrAdapter = adapters[i];
          if (adapter = utils_default.isString(nameOrAdapter) ? knownAdapters[nameOrAdapter.toLowerCase()] : nameOrAdapter) {
            break;
          }
        }
        if (!adapter) {
          if (adapter === false) {
            throw new AxiosError_default(
              \`Adapter \${nameOrAdapter} is not supported by the environment\`,
              \\"ERR_NOT_SUPPORT\\"
            );
          }
          throw new Error(
            utils_default.hasOwnProp(knownAdapters, nameOrAdapter) ? \`Adapter '\${nameOrAdapter}' is not available in the build\` : \`Unknown adapter '\${nameOrAdapter}'\`
          );
        }
        if (!utils_default.isFunction(adapter)) {
          throw new TypeError(\\"adapter is not a function\\");
        }
        return adapter;
      },
      adapters: knownAdapters
    };
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/dispatchRequest.js
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
  if (config.signal && config.signal.aborted) {
    throw new CanceledError_default(null, config);
  }
}
function dispatchRequest(config) {
  throwIfCancellationRequested(config);
  config.headers = AxiosHeaders_default.from(config.headers);
  config.data = transformData.call(
    config,
    config.transformRequest
  );
  if ([\\"post\\", \\"put\\", \\"patch\\"].indexOf(config.method) !== -1) {
    config.headers.setContentType(\\"application/x-www-form-urlencoded\\", false);
  }
  const adapter = adapters_default.getAdapter(config.adapter || defaults_default.adapter);
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);
    response.data = transformData.call(
      config,
      config.transformResponse,
      response
    );
    response.headers = AxiosHeaders_default.from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
      }
    }
    return Promise.reject(reason);
  });
}
var init_dispatchRequest = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/dispatchRequest.js\\"() {
    \\"use strict\\";
    init_transformData();
    init_isCancel();
    init_defaults();
    init_CanceledError();
    init_AxiosHeaders();
    init_adapters();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/mergeConfig.js
function mergeConfig(config1, config2) {
  config2 = config2 || {};
  const config = {};
  function getMergedValue(target, source, caseless) {
    if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
      return utils_default.merge.call({ caseless }, target, source);
    } else if (utils_default.isPlainObject(source)) {
      return utils_default.merge({}, source);
    } else if (utils_default.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(a, b, caseless) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(a, b, caseless);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a, caseless);
    }
  }
  function valueFromConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    }
  }
  function defaultToConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a);
    }
  }
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(void 0, a);
    }
  }
  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
  };
  utils_default.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge2 = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge2(config1[prop], config2[prop], prop);
    utils_default.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
}
var headersToObject;
var init_mergeConfig = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/mergeConfig.js\\"() {
    \\"use strict\\";
    init_utils();
    init_AxiosHeaders();
    headersToObject = (thing) => thing instanceof AxiosHeaders_default ? thing.toJSON() : thing;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/env/data.js
var VERSION;
var init_data = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/env/data.js\\"() {
    VERSION = \\"1.4.0\\";
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/validator.js
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== \\"object\\") {
    throw new AxiosError_default(\\"options must be an object\\", AxiosError_default.ERR_BAD_OPTION_VALUE);
  }
  const keys2 = Object.keys(options);
  let i = keys2.length;
  while (i-- > 0) {
    const opt = keys2[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === void 0 || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError_default(\\"option \\" + opt + \\" must be \\" + result, AxiosError_default.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError_default(\\"Unknown option \\" + opt, AxiosError_default.ERR_BAD_OPTION);
    }
  }
}
var validators, deprecatedWarnings, validator_default;
var init_validator = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/validator.js\\"() {
    \\"use strict\\";
    init_data();
    init_AxiosError();
    validators = {};
    [\\"object\\", \\"boolean\\", \\"number\\", \\"function\\", \\"string\\", \\"symbol\\"].forEach((type, i) => {
      validators[type] = function validator(thing) {
        return typeof thing === type || \\"a\\" + (i < 1 ? \\"n \\" : \\" \\") + type;
      };
    });
    deprecatedWarnings = {};
    validators.transitional = function transitional(validator, version, message) {
      function formatMessage(opt, desc) {
        return \\"[Axios v\\" + VERSION + \\"] Transitional option '\\" + opt + \\"'\\" + desc + (message ? \\". \\" + message : \\"\\");
      }
      return (value, opt, opts) => {
        if (validator === false) {
          throw new AxiosError_default(
            formatMessage(opt, \\" has been removed\\" + (version ? \\" in \\" + version : \\"\\")),
            AxiosError_default.ERR_DEPRECATED
          );
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              \\" has been deprecated since v\\" + version + \\" and will be removed in the near future\\"
            )
          );
        }
        return validator ? validator(value, opt, opts) : true;
      };
    };
    validator_default = {
      assertOptions,
      validators
    };
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/Axios.js
var validators2, Axios, Axios_default;
var init_Axios = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/Axios.js\\"() {
    \\"use strict\\";
    init_utils();
    init_buildURL();
    init_InterceptorManager();
    init_dispatchRequest();
    init_mergeConfig();
    init_buildFullPath();
    init_validator();
    init_AxiosHeaders();
    validators2 = validator_default.validators;
    Axios = class {
      constructor(instanceConfig) {
        this.defaults = instanceConfig;
        this.interceptors = {
          request: new InterceptorManager_default(),
          response: new InterceptorManager_default()
        };
      }
      /**
       * Dispatch a request
       *
       * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
       * @param {?Object} config
       *
       * @returns {Promise} The Promise to be fulfilled
       */
      request(configOrUrl, config) {
        if (typeof configOrUrl === \\"string\\") {
          config = config || {};
          config.url = configOrUrl;
        } else {
          config = configOrUrl || {};
        }
        config = mergeConfig(this.defaults, config);
        const { transitional: transitional2, paramsSerializer, headers } = config;
        if (transitional2 !== void 0) {
          validator_default.assertOptions(transitional2, {
            silentJSONParsing: validators2.transitional(validators2.boolean),
            forcedJSONParsing: validators2.transitional(validators2.boolean),
            clarifyTimeoutError: validators2.transitional(validators2.boolean)
          }, false);
        }
        if (paramsSerializer != null) {
          if (utils_default.isFunction(paramsSerializer)) {
            config.paramsSerializer = {
              serialize: paramsSerializer
            };
          } else {
            validator_default.assertOptions(paramsSerializer, {
              encode: validators2.function,
              serialize: validators2.function
            }, true);
          }
        }
        config.method = (config.method || this.defaults.method || \\"get\\").toLowerCase();
        let contextHeaders;
        contextHeaders = headers && utils_default.merge(
          headers.common,
          headers[config.method]
        );
        contextHeaders && utils_default.forEach(
          [\\"delete\\", \\"get\\", \\"head\\", \\"post\\", \\"put\\", \\"patch\\", \\"common\\"],
          (method) => {
            delete headers[method];
          }
        );
        config.headers = AxiosHeaders_default.concat(contextHeaders, headers);
        const requestInterceptorChain = [];
        let synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === \\"function\\" && interceptor.runWhen(config) === false) {
            return;
          }
          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        const responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });
        let promise;
        let i = 0;
        let len;
        if (!synchronousRequestInterceptors) {
          const chain = [dispatchRequest.bind(this), void 0];
          chain.unshift.apply(chain, requestInterceptorChain);
          chain.push.apply(chain, responseInterceptorChain);
          len = chain.length;
          promise = Promise.resolve(config);
          while (i < len) {
            promise = promise.then(chain[i++], chain[i++]);
          }
          return promise;
        }
        len = requestInterceptorChain.length;
        let newConfig = config;
        i = 0;
        while (i < len) {
          const onFulfilled = requestInterceptorChain[i++];
          const onRejected = requestInterceptorChain[i++];
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error) {
            onRejected.call(this, error);
            break;
          }
        }
        try {
          promise = dispatchRequest.call(this, newConfig);
        } catch (error) {
          return Promise.reject(error);
        }
        i = 0;
        len = responseInterceptorChain.length;
        while (i < len) {
          promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
        }
        return promise;
      }
      getUri(config) {
        config = mergeConfig(this.defaults, config);
        const fullPath = buildFullPath(config.baseURL, config.url);
        return buildURL(fullPath, config.params, config.paramsSerializer);
      }
    };
    utils_default.forEach([\\"delete\\", \\"get\\", \\"head\\", \\"options\\"], function forEachMethodNoData2(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils_default.forEach([\\"post\\", \\"put\\", \\"patch\\"], function forEachMethodWithData2(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            headers: isForm ? {
              \\"Content-Type\\": \\"multipart/form-data\\"
            } : {},
            url,
            data
          }));
        };
      }
      Axios.prototype[method] = generateHTTPMethod();
      Axios.prototype[method + \\"Form\\"] = generateHTTPMethod(true);
    });
    Axios_default = Axios;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/cancel/CancelToken.js
var CancelToken, CancelToken_default;
var init_CancelToken = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/cancel/CancelToken.js\\"() {
    \\"use strict\\";
    init_CanceledError();
    CancelToken = class {
      constructor(executor) {
        if (typeof executor !== \\"function\\") {
          throw new TypeError(\\"executor must be a function.\\");
        }
        let resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve) {
          resolvePromise = resolve;
        });
        const token = this;
        this.promise.then((cancel) => {
          if (!token._listeners)
            return;
          let i = token._listeners.length;
          while (i-- > 0) {
            token._listeners[i](cancel);
          }
          token._listeners = null;
        });
        this.promise.then = (onfulfilled) => {
          let _resolve;
          const promise = new Promise((resolve) => {
            token.subscribe(resolve);
            _resolve = resolve;
          }).then(onfulfilled);
          promise.cancel = function reject() {
            token.unsubscribe(_resolve);
          };
          return promise;
        };
        executor(function cancel(message, config, request) {
          if (token.reason) {
            return;
          }
          token.reason = new CanceledError_default(message, config, request);
          resolvePromise(token.reason);
        });
      }
      /**
       * Throws a \`CanceledError\` if cancellation has been requested.
       */
      throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      }
      /**
       * Subscribe to the cancel signal
       */
      subscribe(listener) {
        if (this.reason) {
          listener(this.reason);
          return;
        }
        if (this._listeners) {
          this._listeners.push(listener);
        } else {
          this._listeners = [listener];
        }
      }
      /**
       * Unsubscribe from the cancel signal
       */
      unsubscribe(listener) {
        if (!this._listeners) {
          return;
        }
        const index = this._listeners.indexOf(listener);
        if (index !== -1) {
          this._listeners.splice(index, 1);
        }
      }
      /**
       * Returns an object that contains a new \`CancelToken\` and a function that, when called,
       * cancels the \`CancelToken\`.
       */
      static source() {
        let cancel;
        const token = new CancelToken(function executor(c) {
          cancel = c;
        });
        return {
          token,
          cancel
        };
      }
    };
    CancelToken_default = CancelToken;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/spread.js
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}
var init_spread = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/spread.js\\"() {
    \\"use strict\\";
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/isAxiosError.js
function isAxiosError(payload) {
  return utils_default.isObject(payload) && payload.isAxiosError === true;
}
var init_isAxiosError = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/isAxiosError.js\\"() {
    \\"use strict\\";
    init_utils();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/HttpStatusCode.js
var HttpStatusCode, HttpStatusCode_default;
var init_HttpStatusCode = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/HttpStatusCode.js\\"() {
    HttpStatusCode = {
      Continue: 100,
      SwitchingProtocols: 101,
      Processing: 102,
      EarlyHints: 103,
      Ok: 200,
      Created: 201,
      Accepted: 202,
      NonAuthoritativeInformation: 203,
      NoContent: 204,
      ResetContent: 205,
      PartialContent: 206,
      MultiStatus: 207,
      AlreadyReported: 208,
      ImUsed: 226,
      MultipleChoices: 300,
      MovedPermanently: 301,
      Found: 302,
      SeeOther: 303,
      NotModified: 304,
      UseProxy: 305,
      Unused: 306,
      TemporaryRedirect: 307,
      PermanentRedirect: 308,
      BadRequest: 400,
      Unauthorized: 401,
      PaymentRequired: 402,
      Forbidden: 403,
      NotFound: 404,
      MethodNotAllowed: 405,
      NotAcceptable: 406,
      ProxyAuthenticationRequired: 407,
      RequestTimeout: 408,
      Conflict: 409,
      Gone: 410,
      LengthRequired: 411,
      PreconditionFailed: 412,
      PayloadTooLarge: 413,
      UriTooLong: 414,
      UnsupportedMediaType: 415,
      RangeNotSatisfiable: 416,
      ExpectationFailed: 417,
      ImATeapot: 418,
      MisdirectedRequest: 421,
      UnprocessableEntity: 422,
      Locked: 423,
      FailedDependency: 424,
      TooEarly: 425,
      UpgradeRequired: 426,
      PreconditionRequired: 428,
      TooManyRequests: 429,
      RequestHeaderFieldsTooLarge: 431,
      UnavailableForLegalReasons: 451,
      InternalServerError: 500,
      NotImplemented: 501,
      BadGateway: 502,
      ServiceUnavailable: 503,
      GatewayTimeout: 504,
      HttpVersionNotSupported: 505,
      VariantAlsoNegotiates: 506,
      InsufficientStorage: 507,
      LoopDetected: 508,
      NotExtended: 510,
      NetworkAuthenticationRequired: 511
    };
    Object.entries(HttpStatusCode).forEach(([key, value]) => {
      HttpStatusCode[value] = key;
    });
    HttpStatusCode_default = HttpStatusCode;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/axios.js
function createInstance(defaultConfig) {
  const context = new Axios_default(defaultConfig);
  const instance = bind(Axios_default.prototype.request, context);
  utils_default.extend(instance, Axios_default.prototype, context, { allOwnKeys: true });
  utils_default.extend(instance, context, null, { allOwnKeys: true });
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };
  return instance;
}
var axios, axios_default;
var init_axios = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/axios.js\\"() {
    \\"use strict\\";
    init_utils();
    init_bind();
    init_Axios();
    init_mergeConfig();
    init_defaults();
    init_formDataToJSON();
    init_CanceledError();
    init_CancelToken();
    init_isCancel();
    init_data();
    init_toFormData();
    init_AxiosError();
    init_spread();
    init_isAxiosError();
    init_AxiosHeaders();
    init_HttpStatusCode();
    axios = createInstance(defaults_default);
    axios.Axios = Axios_default;
    axios.CanceledError = CanceledError_default;
    axios.CancelToken = CancelToken_default;
    axios.isCancel = isCancel;
    axios.VERSION = VERSION;
    axios.toFormData = toFormData_default;
    axios.AxiosError = AxiosError_default;
    axios.Cancel = axios.CanceledError;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = spread;
    axios.isAxiosError = isAxiosError;
    axios.mergeConfig = mergeConfig;
    axios.AxiosHeaders = AxiosHeaders_default;
    axios.formToJSON = (thing) => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
    axios.HttpStatusCode = HttpStatusCode_default;
    axios.default = axios;
    axios_default = axios;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/index.js
var Axios2, AxiosError2, CanceledError2, isCancel2, CancelToken2, VERSION2, all2, Cancel, isAxiosError2, spread2, toFormData2, AxiosHeaders2, HttpStatusCode2, formToJSON, mergeConfig2;
var init_axios2 = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/index.js\\"() {
    init_axios();
    ({
      Axios: Axios2,
      AxiosError: AxiosError2,
      CanceledError: CanceledError2,
      isCancel: isCancel2,
      CancelToken: CancelToken2,
      VERSION: VERSION2,
      all: all2,
      Cancel,
      isAxiosError: isAxiosError2,
      spread: spread2,
      toFormData: toFormData2,
      AxiosHeaders: AxiosHeaders2,
      HttpStatusCode: HttpStatusCode2,
      formToJSON,
      mergeConfig: mergeConfig2
    } = axios_default);
  }
});

// src/core/fetcher/Fetcher.ts
function fetcherImpl(args) {
  return __async(this, null, function* () {
    var _a, _b;
    const headers = {};
    if (args.body !== void 0 && args.contentType != null) {
      headers[\\"Content-Type\\"] = args.contentType;
    }
    if (args.headers != null) {
      for (const [key, value] of Object.entries(args.headers)) {
        if (value != null) {
          headers[key] = value;
        }
      }
    }
    try {
      const response = yield axios_default({
        url: args.url,
        params: args.queryParameters,
        method: args.method,
        headers,
        data: args.body,
        validateStatus: () => true,
        transformResponse: (response2) => response2,
        timeout: args.timeoutMs,
        transitional: {
          clarifyTimeoutError: true
        },
        withCredentials: args.withCredentials,
        adapter: args.adapter,
        onUploadProgress: args.onUploadProgress,
        maxBodyLength: Infinity,
        maxContentLength: Infinity,
        responseType: (_a = args.responseType) != null ? _a : \\"json\\"
      });
      let body;
      if (args.responseType === \\"blob\\") {
        body = response.data;
      } else if (response.data != null && response.data.length > 0) {
        try {
          body = (_b = JSON.parse(response.data)) != null ? _b : void 0;
        } catch (e) {
          return {
            ok: false,
            error: {
              reason: \\"non-json\\",
              statusCode: response.status,
              rawBody: response.data
            }
          };
        }
      }
      if (response.status >= 200 && response.status < 400) {
        return {
          ok: true,
          body
        };
      } else {
        return {
          ok: false,
          error: {
            reason: \\"status-code\\",
            statusCode: response.status,
            body
          }
        };
      }
    } catch (error) {
      if (error.code === \\"ETIMEDOUT\\") {
        return {
          ok: false,
          error: {
            reason: \\"timeout\\"
          }
        };
      }
      return {
        ok: false,
        error: {
          reason: \\"unknown\\",
          errorMessage: error.message
        }
      };
    }
  });
}
var fetcher;
var init_Fetcher = __esm({
  \\"src/core/fetcher/Fetcher.ts\\"() {
    \\"use strict\\";
    init_axios2();
    fetcher = fetcherImpl;
  }
});

// src/core/fetcher/Supplier.ts
var Supplier;
var init_Supplier = __esm({
  \\"src/core/fetcher/Supplier.ts\\"() {
    \\"use strict\\";
    Supplier = {
      get: (supplier) => __async(void 0, null, function* () {
        if (typeof supplier === \\"function\\") {
          return supplier();
        } else {
          return supplier;
        }
      })
    };
  }
});

// src/core/fetcher/index.ts
var init_fetcher = __esm({
  \\"src/core/fetcher/index.ts\\"() {
    \\"use strict\\";
    init_Fetcher();
    init_Supplier();
  }
});

// .yarn/cache/js-base64-npm-3.7.2-706fb77a0b-573f28e9a2.zip/node_modules/js-base64/base64.mjs
var _TD, _TE, b64ch, b64chs, b64tab, _fromCC, _U8Afrom;
var init_base64 = __esm({
  \\".yarn/cache/js-base64-npm-3.7.2-706fb77a0b-573f28e9a2.zip/node_modules/js-base64/base64.mjs\\"() {
    _TD = typeof TextDecoder === \\"function\\" ? new TextDecoder() : void 0;
    _TE = typeof TextEncoder === \\"function\\" ? new TextEncoder() : void 0;
    b64ch = \\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\";
    b64chs = Array.prototype.slice.call(b64ch);
    b64tab = ((a) => {
      let tab = {};
      a.forEach((c, i) => tab[c] = i);
      return tab;
    })(b64chs);
    _fromCC = String.fromCharCode.bind(String);
    _U8Afrom = typeof Uint8Array.from === \\"function\\" ? Uint8Array.from.bind(Uint8Array) : (it, fn = (x) => x) => new Uint8Array(Array.prototype.slice.call(it, 0).map(fn));
  }
});

// src/core/auth/BasicAuth.ts
var init_BasicAuth = __esm({
  \\"src/core/auth/BasicAuth.ts\\"() {
    \\"use strict\\";
    init_base64();
  }
});

// src/core/auth/BearerToken.ts
var init_BearerToken = __esm({
  \\"src/core/auth/BearerToken.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/auth/index.ts
var init_auth = __esm({
  \\"src/core/auth/index.ts\\"() {
    \\"use strict\\";
    init_BasicAuth();
    init_BearerToken();
  }
});

// src/core/schemas/Schema.ts
var SchemaType;
var init_Schema = __esm({
  \\"src/core/schemas/Schema.ts\\"() {
    \\"use strict\\";
    SchemaType = {
      DATE: \\"date\\",
      ENUM: \\"enum\\",
      LIST: \\"list\\",
      STRING_LITERAL: \\"stringLiteral\\",
      OBJECT: \\"object\\",
      ANY: \\"any\\",
      BOOLEAN: \\"boolean\\",
      NUMBER: \\"number\\",
      STRING: \\"string\\",
      UNKNOWN: \\"unknown\\",
      RECORD: \\"record\\",
      SET: \\"set\\",
      UNION: \\"union\\",
      UNDISCRIMINATED_UNION: \\"undiscriminatedUnion\\",
      OPTIONAL: \\"optional\\"
    };
  }
});

// src/core/schemas/utils/getErrorMessageForIncorrectType.ts
function getErrorMessageForIncorrectType(value, expectedType) {
  return \`Expected \${expectedType}. Received \${getTypeAsString(value)}.\`;
}
function getTypeAsString(value) {
  if (Array.isArray(value)) {
    return \\"list\\";
  }
  if (value === null) {
    return \\"null\\";
  }
  switch (typeof value) {
    case \\"string\\":
      return \`\\"\${value}\\"\`;
    case \\"number\\":
    case \\"boolean\\":
    case \\"undefined\\":
      return \`\${value}\`;
  }
  return typeof value;
}
var init_getErrorMessageForIncorrectType = __esm({
  \\"src/core/schemas/utils/getErrorMessageForIncorrectType.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/utils/maybeSkipValidation.ts
function maybeSkipValidation(schema) {
  return __spreadProps(__spreadValues({}, schema), {
    json: transformAndMaybeSkipValidation(schema.json),
    parse: transformAndMaybeSkipValidation(schema.parse)
  });
}
function transformAndMaybeSkipValidation(transform2) {
  return (value, opts) => __async(this, null, function* () {
    const transformed = yield transform2(value, opts);
    const { skipValidation = false } = opts != null ? opts : {};
    if (!transformed.ok && skipValidation) {
      console.warn(
        [
          \\"Failed to validate.\\",
          ...transformed.errors.map(
            (error) => \\"  - \\" + (error.path.length > 0 ? \`\${error.path.join(\\".\\")}: \${error.message}\` : error.message)
          )
        ].join(\\"\\\\n\\")
      );
      return {
        ok: true,
        value
      };
    } else {
      return transformed;
    }
  });
}
var init_maybeSkipValidation = __esm({
  \\"src/core/schemas/utils/maybeSkipValidation.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
function stringifyValidationError(error) {
  if (error.path.length === 0) {
    return error.message;
  }
  return \`\${error.path.join(\\" -> \\")}: \${error.message}\`;
}
var init_stringifyValidationErrors = __esm({
  \\"src/core/schemas/builders/schema-utils/stringifyValidationErrors.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/builders/schema-utils/JsonError.ts
var JsonError;
var init_JsonError = __esm({
  \\"src/core/schemas/builders/schema-utils/JsonError.ts\\"() {
    \\"use strict\\";
    init_stringifyValidationErrors();
    JsonError = class extends Error {
      constructor(errors) {
        super(errors.map(stringifyValidationError).join(\\"; \\"));
        this.errors = errors;
        Object.setPrototypeOf(this, JsonError.prototype);
      }
    };
  }
});

// src/core/schemas/builders/schema-utils/ParseError.ts
var ParseError;
var init_ParseError = __esm({
  \\"src/core/schemas/builders/schema-utils/ParseError.ts\\"() {
    \\"use strict\\";
    init_stringifyValidationErrors();
    ParseError = class extends Error {
      constructor(errors) {
        super(errors.map(stringifyValidationError).join(\\"; \\"));
        this.errors = errors;
        Object.setPrototypeOf(this, ParseError.prototype);
      }
    };
  }
});

// src/core/schemas/builders/schema-utils/getSchemaUtils.ts
function getSchemaUtils(schema) {
  return {
    optional: () => optional(schema),
    transform: (transformer) => transform(schema, transformer),
    parseOrThrow: (raw, opts) => __async(this, null, function* () {
      const parsed = yield schema.parse(raw, opts);
      if (parsed.ok) {
        return parsed.value;
      }
      throw new ParseError(parsed.errors);
    }),
    jsonOrThrow: (parsed, opts) => __async(this, null, function* () {
      const raw = yield schema.json(parsed, opts);
      if (raw.ok) {
        return raw.value;
      }
      throw new JsonError(raw.errors);
    })
  };
}
function optional(schema) {
  const baseSchema = {
    parse: (raw, opts) => {
      if (raw == null) {
        return {
          ok: true,
          value: void 0
        };
      }
      return schema.parse(raw, opts);
    },
    json: (parsed, opts) => {
      if (parsed == null) {
        return {
          ok: true,
          value: null
        };
      }
      return schema.json(parsed, opts);
    },
    getType: () => SchemaType.OPTIONAL
  };
  return __spreadValues(__spreadValues({}, baseSchema), getSchemaUtils(baseSchema));
}
function transform(schema, transformer) {
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      const parsed = yield schema.parse(raw, opts);
      if (!parsed.ok) {
        return parsed;
      }
      return {
        ok: true,
        value: transformer.transform(parsed.value)
      };
    }),
    json: (transformed, opts) => __async(this, null, function* () {
      const parsed = yield transformer.untransform(transformed);
      return schema.json(parsed, opts);
    }),
    getType: () => schema.getType()
  };
  return __spreadValues(__spreadValues({}, baseSchema), getSchemaUtils(baseSchema));
}
var init_getSchemaUtils = __esm({
  \\"src/core/schemas/builders/schema-utils/getSchemaUtils.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_JsonError();
    init_ParseError();
  }
});

// src/core/schemas/builders/schema-utils/index.ts
var init_schema_utils = __esm({
  \\"src/core/schemas/builders/schema-utils/index.ts\\"() {
    \\"use strict\\";
    init_getSchemaUtils();
    init_JsonError();
    init_ParseError();
  }
});

// src/core/schemas/builders/date/date.ts
function date() {
  const baseSchema = {
    parse: (raw, { breadcrumbsPrefix = [] } = {}) => {
      if (typeof raw !== \\"string\\") {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(raw, \\"string\\")
            }
          ]
        };
      }
      if (!ISO_8601_REGEX.test(raw)) {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(raw, \\"ISO 8601 date string\\")
            }
          ]
        };
      }
      return {
        ok: true,
        value: new Date(raw)
      };
    },
    json: (date2, { breadcrumbsPrefix = [] } = {}) => {
      if (date2 instanceof Date) {
        return {
          ok: true,
          value: date2.toISOString()
        };
      } else {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(date2, \\"Date object\\")
            }
          ]
        };
      }
    },
    getType: () => SchemaType.DATE
  };
  return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
}
var ISO_8601_REGEX;
var init_date = __esm({
  \\"src/core/schemas/builders/date/date.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_getErrorMessageForIncorrectType();
    init_maybeSkipValidation();
    init_schema_utils();
    ISO_8601_REGEX = /^([+-]?\\\\d{4}(?!\\\\d{2}\\\\b))((-?)((0[1-9]|1[0-2])(\\\\3([12]\\\\d|0[1-9]|3[01]))?|W([0-4]\\\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\\\d|[12]\\\\d{2}|3([0-5]\\\\d|6[1-6])))([T\\\\s]((([01]\\\\d|2[0-3])((:?)[0-5]\\\\d)?|24:?00)([.,]\\\\d+(?!:))?)?(\\\\17[0-5]\\\\d([.,]\\\\d+)?)?([zZ]|([+-])([01]\\\\d|2[0-3]):?([0-5]\\\\d)?)?)?)?$/;
  }
});

// src/core/schemas/builders/date/index.ts
var init_date2 = __esm({
  \\"src/core/schemas/builders/date/index.ts\\"() {
    \\"use strict\\";
    init_date();
  }
});

// src/core/schemas/utils/createIdentitySchemaCreator.ts
function createIdentitySchemaCreator(schemaType, validate) {
  return () => {
    const baseSchema = {
      parse: validate,
      json: validate,
      getType: () => schemaType
    };
    return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
  };
}
var init_createIdentitySchemaCreator = __esm({
  \\"src/core/schemas/utils/createIdentitySchemaCreator.ts\\"() {
    \\"use strict\\";
    init_schema_utils();
    init_maybeSkipValidation();
  }
});

// src/core/schemas/builders/enum/enum.ts
function enum_(values) {
  const validValues = new Set(values);
  const schemaCreator = createIdentitySchemaCreator(
    SchemaType.ENUM,
    (value, { allowUnrecognizedEnumValues, breadcrumbsPrefix = [] } = {}) => {
      if (typeof value !== \\"string\\") {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(value, \\"string\\")
            }
          ]
        };
      }
      if (!validValues.has(value) && !allowUnrecognizedEnumValues) {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(value, \\"enum\\")
            }
          ]
        };
      }
      return {
        ok: true,
        value
      };
    }
  );
  return schemaCreator();
}
var init_enum = __esm({
  \\"src/core/schemas/builders/enum/enum.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    init_getErrorMessageForIncorrectType();
  }
});

// src/core/schemas/builders/enum/index.ts
var init_enum2 = __esm({
  \\"src/core/schemas/builders/enum/index.ts\\"() {
    \\"use strict\\";
    init_enum();
  }
});

// src/core/schemas/builders/lazy/lazy.ts
function lazy(getter) {
  const baseSchema = constructLazyBaseSchema(getter);
  return __spreadValues(__spreadValues({}, baseSchema), getSchemaUtils(baseSchema));
}
function constructLazyBaseSchema(getter) {
  return {
    parse: (raw, opts) => __async(this, null, function* () {
      return (yield getMemoizedSchema(getter)).parse(raw, opts);
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      return (yield getMemoizedSchema(getter)).json(parsed, opts);
    }),
    getType: () => __async(this, null, function* () {
      return (yield getMemoizedSchema(getter)).getType();
    })
  };
}
function getMemoizedSchema(getter) {
  return __async(this, null, function* () {
    const castedGetter = getter;
    if (castedGetter.__zurg_memoized == null) {
      castedGetter.__zurg_memoized = yield getter();
    }
    return castedGetter.__zurg_memoized;
  });
}
var init_lazy = __esm({
  \\"src/core/schemas/builders/lazy/lazy.ts\\"() {
    \\"use strict\\";
    init_schema_utils();
  }
});

// src/core/schemas/utils/entries.ts
function entries(object2) {
  return Object.entries(object2);
}
var init_entries = __esm({
  \\"src/core/schemas/utils/entries.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/utils/filterObject.ts
function filterObject(obj, keysToInclude) {
  const keysToIncludeSet = new Set(keysToInclude);
  return Object.entries(obj).reduce((acc, [key, value]) => {
    if (keysToIncludeSet.has(key)) {
      acc[key] = value;
    }
    return acc;
  }, {});
}
var init_filterObject = __esm({
  \\"src/core/schemas/utils/filterObject.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/utils/isPlainObject.ts
function isPlainObject2(value) {
  if (typeof value !== \\"object\\" || value === null) {
    return false;
  }
  if (Object.getPrototypeOf(value) === null) {
    return true;
  }
  let proto = value;
  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }
  return Object.getPrototypeOf(value) === proto;
}
var init_isPlainObject = __esm({
  \\"src/core/schemas/utils/isPlainObject.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/utils/keys.ts
function keys(object2) {
  return Object.keys(object2);
}
var init_keys = __esm({
  \\"src/core/schemas/utils/keys.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/utils/partition.ts
function partition(items, predicate) {
  const trueItems = [], falseItems = [];
  for (const item of items) {
    if (predicate(item)) {
      trueItems.push(item);
    } else {
      falseItems.push(item);
    }
  }
  return [trueItems, falseItems];
}
var init_partition = __esm({
  \\"src/core/schemas/utils/partition.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/builders/object-like/getObjectLikeUtils.ts
function getObjectLikeUtils(schema) {
  return {
    withParsedProperties: (properties) => withParsedProperties(schema, properties)
  };
}
function withParsedProperties(objectLike, properties) {
  const objectSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      const parsedObject = yield objectLike.parse(raw, opts);
      if (!parsedObject.ok) {
        return parsedObject;
      }
      const additionalProperties = Object.entries(properties).reduce(
        (processed, [key, value]) => {
          return __spreadProps(__spreadValues({}, processed), {
            [key]: typeof value === \\"function\\" ? value(parsedObject.value) : value
          });
        },
        {}
      );
      return {
        ok: true,
        value: __spreadValues(__spreadValues({}, parsedObject.value), additionalProperties)
      };
    }),
    json: (parsed, opts) => {
      var _a;
      if (!isPlainObject2(parsed)) {
        return {
          ok: false,
          errors: [
            {
              path: (_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [],
              message: getErrorMessageForIncorrectType(parsed, \\"object\\")
            }
          ]
        };
      }
      const addedPropertyKeys = new Set(Object.keys(properties));
      const parsedWithoutAddedProperties = filterObject(
        parsed,
        Object.keys(parsed).filter((key) => !addedPropertyKeys.has(key))
      );
      return objectLike.json(parsedWithoutAddedProperties, opts);
    },
    getType: () => objectLike.getType()
  };
  return __spreadValues(__spreadValues(__spreadValues({}, objectSchema), getSchemaUtils(objectSchema)), getObjectLikeUtils(objectSchema));
}
var init_getObjectLikeUtils = __esm({
  \\"src/core/schemas/builders/object-like/getObjectLikeUtils.ts\\"() {
    \\"use strict\\";
    init_filterObject();
    init_getErrorMessageForIncorrectType();
    init_isPlainObject();
    init_schema_utils();
  }
});

// src/core/schemas/builders/object-like/index.ts
var init_object_like = __esm({
  \\"src/core/schemas/builders/object-like/index.ts\\"() {
    \\"use strict\\";
    init_getObjectLikeUtils();
  }
});

// src/core/schemas/builders/object/property.ts
function property(rawKey, valueSchema) {
  return {
    rawKey,
    valueSchema,
    isProperty: true
  };
}
function isProperty(maybeProperty) {
  return maybeProperty.isProperty;
}
var init_property = __esm({
  \\"src/core/schemas/builders/object/property.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/builders/object/object.ts
function object(schemas) {
  const baseSchema = {
    _getRawProperties: () => Promise.resolve(
      Object.entries(schemas).map(
        ([parsedKey, propertySchema]) => isProperty(propertySchema) ? propertySchema.rawKey : parsedKey
      )
    ),
    _getParsedProperties: () => Promise.resolve(keys(schemas)),
    parse: (raw, opts) => __async(this, null, function* () {
      const rawKeyToProperty = {};
      const requiredKeys = [];
      for (const [parsedKey, schemaOrObjectProperty] of entries(schemas)) {
        const rawKey = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.rawKey : parsedKey;
        const valueSchema = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.valueSchema : schemaOrObjectProperty;
        const property2 = {
          rawKey,
          parsedKey,
          valueSchema
        };
        rawKeyToProperty[rawKey] = property2;
        if (yield isSchemaRequired(valueSchema)) {
          requiredKeys.push(rawKey);
        }
      }
      return validateAndTransformObject({
        value: raw,
        requiredKeys,
        getProperty: (rawKey) => {
          const property2 = rawKeyToProperty[rawKey];
          if (property2 == null) {
            return void 0;
          }
          return {
            transformedKey: property2.parsedKey,
            transform: (propertyValue) => {
              var _a;
              return property2.valueSchema.parse(propertyValue, __spreadProps(__spreadValues({}, opts), {
                breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], rawKey]
              }));
            }
          };
        },
        unrecognizedObjectKeys: opts == null ? void 0 : opts.unrecognizedObjectKeys,
        skipValidation: opts == null ? void 0 : opts.skipValidation,
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      const requiredKeys = [];
      for (const [parsedKey, schemaOrObjectProperty] of entries(schemas)) {
        const valueSchema = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.valueSchema : schemaOrObjectProperty;
        if (yield isSchemaRequired(valueSchema)) {
          requiredKeys.push(parsedKey);
        }
      }
      return validateAndTransformObject({
        value: parsed,
        requiredKeys,
        getProperty: (parsedKey) => {
          const property2 = schemas[parsedKey];
          if (property2 == null) {
            return void 0;
          }
          if (isProperty(property2)) {
            return {
              transformedKey: property2.rawKey,
              transform: (propertyValue) => {
                var _a;
                return property2.valueSchema.json(propertyValue, __spreadProps(__spreadValues({}, opts), {
                  breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], parsedKey]
                }));
              }
            };
          } else {
            return {
              transformedKey: parsedKey,
              transform: (propertyValue) => {
                var _a;
                return property2.json(propertyValue, __spreadProps(__spreadValues({}, opts), {
                  breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], parsedKey]
                }));
              }
            };
          }
        },
        unrecognizedObjectKeys: opts == null ? void 0 : opts.unrecognizedObjectKeys,
        skipValidation: opts == null ? void 0 : opts.skipValidation,
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    getType: () => SchemaType.OBJECT
  };
  return __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema)), getObjectLikeUtils(baseSchema)), getObjectUtils(baseSchema));
}
function validateAndTransformObject(_0) {
  return __async(this, arguments, function* ({
    value,
    requiredKeys,
    getProperty,
    unrecognizedObjectKeys = \\"fail\\",
    skipValidation = false,
    breadcrumbsPrefix = []
  }) {
    if (!isPlainObject2(value)) {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: getErrorMessageForIncorrectType(value, \\"object\\")
          }
        ]
      };
    }
    const missingRequiredKeys = new Set(requiredKeys);
    const errors = [];
    const transformed = {};
    for (const [preTransformedKey, preTransformedItemValue] of Object.entries(value)) {
      const property2 = getProperty(preTransformedKey);
      if (property2 != null) {
        missingRequiredKeys.delete(preTransformedKey);
        const value2 = yield property2.transform(preTransformedItemValue);
        if (value2.ok) {
          transformed[property2.transformedKey] = value2.value;
        } else {
          transformed[preTransformedKey] = preTransformedItemValue;
          errors.push(...value2.errors);
        }
      } else {
        switch (unrecognizedObjectKeys) {
          case \\"fail\\":
            errors.push({
              path: [...breadcrumbsPrefix, preTransformedKey],
              message: \`Unexpected key \\"\${preTransformedKey}\\"\`
            });
            break;
          case \\"strip\\":
            break;
          case \\"passthrough\\":
            transformed[preTransformedKey] = preTransformedItemValue;
            break;
        }
      }
    }
    errors.push(
      ...requiredKeys.filter((key) => missingRequiredKeys.has(key)).map((key) => ({
        path: breadcrumbsPrefix,
        message: \`Missing required key \\"\${key}\\"\`
      }))
    );
    if (errors.length === 0 || skipValidation) {
      return {
        ok: true,
        value: transformed
      };
    } else {
      return {
        ok: false,
        errors
      };
    }
  });
}
function getObjectUtils(schema) {
  return {
    extend: (extension) => {
      const baseSchema = {
        _getParsedProperties: () => __async(this, null, function* () {
          return [
            ...yield schema._getParsedProperties(),
            ...yield extension._getParsedProperties()
          ];
        }),
        _getRawProperties: () => __async(this, null, function* () {
          return [
            ...yield schema._getRawProperties(),
            ...yield extension._getRawProperties()
          ];
        }),
        parse: (raw, opts) => __async(this, null, function* () {
          return validateAndTransformExtendedObject({
            extensionKeys: yield extension._getRawProperties(),
            value: raw,
            transformBase: (rawBase) => schema.parse(rawBase, opts),
            transformExtension: (rawExtension) => extension.parse(rawExtension, opts)
          });
        }),
        json: (parsed, opts) => __async(this, null, function* () {
          return validateAndTransformExtendedObject({
            extensionKeys: yield extension._getParsedProperties(),
            value: parsed,
            transformBase: (parsedBase) => schema.json(parsedBase, opts),
            transformExtension: (parsedExtension) => extension.json(parsedExtension, opts)
          });
        }),
        getType: () => SchemaType.OBJECT
      };
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, baseSchema), getSchemaUtils(baseSchema)), getObjectLikeUtils(baseSchema)), getObjectUtils(baseSchema));
    }
  };
}
function validateAndTransformExtendedObject(_0) {
  return __async(this, arguments, function* ({
    extensionKeys,
    value,
    transformBase,
    transformExtension
  }) {
    const extensionPropertiesSet = new Set(extensionKeys);
    const [extensionProperties, baseProperties] = partition(
      keys(value),
      (key) => extensionPropertiesSet.has(key)
    );
    const transformedBase = yield transformBase(filterObject(value, baseProperties));
    const transformedExtension = yield transformExtension(filterObject(value, extensionProperties));
    if (transformedBase.ok && transformedExtension.ok) {
      return {
        ok: true,
        value: __spreadValues(__spreadValues({}, transformedBase.value), transformedExtension.value)
      };
    } else {
      return {
        ok: false,
        errors: [
          ...transformedBase.ok ? [] : transformedBase.errors,
          ...transformedExtension.ok ? [] : transformedExtension.errors
        ]
      };
    }
  });
}
function isSchemaRequired(schema) {
  return __async(this, null, function* () {
    return !(yield isSchemaOptional(schema));
  });
}
function isSchemaOptional(schema) {
  return __async(this, null, function* () {
    switch (yield schema.getType()) {
      case SchemaType.ANY:
      case SchemaType.UNKNOWN:
      case SchemaType.OPTIONAL:
        return true;
      default:
        return false;
    }
  });
}
var init_object = __esm({
  \\"src/core/schemas/builders/object/object.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_entries();
    init_filterObject();
    init_getErrorMessageForIncorrectType();
    init_isPlainObject();
    init_keys();
    init_maybeSkipValidation();
    init_partition();
    init_object_like();
    init_schema_utils();
    init_property();
  }
});

// src/core/schemas/builders/object/index.ts
var init_object2 = __esm({
  \\"src/core/schemas/builders/object/index.ts\\"() {
    \\"use strict\\";
    init_object();
    init_property();
  }
});

// src/core/schemas/builders/lazy/lazyObject.ts
function lazyObject(getter) {
  const baseSchema = __spreadProps(__spreadValues({}, constructLazyBaseSchema(getter)), {
    _getRawProperties: () => __async(this, null, function* () {
      return (yield getMemoizedSchema(getter))._getRawProperties();
    }),
    _getParsedProperties: () => __async(this, null, function* () {
      return (yield getMemoizedSchema(getter))._getParsedProperties();
    })
  });
  return __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, baseSchema), getSchemaUtils(baseSchema)), getObjectLikeUtils(baseSchema)), getObjectUtils(baseSchema));
}
var init_lazyObject = __esm({
  \\"src/core/schemas/builders/lazy/lazyObject.ts\\"() {
    \\"use strict\\";
    init_object2();
    init_object_like();
    init_schema_utils();
    init_lazy();
  }
});

// src/core/schemas/builders/lazy/index.ts
var init_lazy2 = __esm({
  \\"src/core/schemas/builders/lazy/index.ts\\"() {
    \\"use strict\\";
    init_lazy();
    init_lazyObject();
  }
});

// src/core/schemas/builders/list/list.ts
function list(schema) {
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      return validateAndTransformArray(
        raw,
        (item, index) => {
          var _a;
          return schema.parse(item, __spreadProps(__spreadValues({}, opts), {
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`[\${index}]\`]
          }));
        }
      );
    }),
    json: (parsed, opts) => validateAndTransformArray(
      parsed,
      (item, index) => {
        var _a;
        return schema.json(item, __spreadProps(__spreadValues({}, opts), {
          breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`[\${index}]\`]
        }));
      }
    ),
    getType: () => SchemaType.LIST
  };
  return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
}
function validateAndTransformArray(value, transformItem) {
  return __async(this, null, function* () {
    if (!Array.isArray(value)) {
      return {
        ok: false,
        errors: [
          {
            message: getErrorMessageForIncorrectType(value, \\"list\\"),
            path: []
          }
        ]
      };
    }
    const maybeValidItems = yield Promise.all(value.map((item, index) => transformItem(item, index)));
    return maybeValidItems.reduce(
      (acc, item) => {
        if (acc.ok && item.ok) {
          return {
            ok: true,
            value: [...acc.value, item.value]
          };
        }
        const errors = [];
        if (!acc.ok) {
          errors.push(...acc.errors);
        }
        if (!item.ok) {
          errors.push(...item.errors);
        }
        return {
          ok: false,
          errors
        };
      },
      { ok: true, value: [] }
    );
  });
}
var init_list = __esm({
  \\"src/core/schemas/builders/list/list.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_getErrorMessageForIncorrectType();
    init_maybeSkipValidation();
    init_schema_utils();
  }
});

// src/core/schemas/builders/list/index.ts
var init_list2 = __esm({
  \\"src/core/schemas/builders/list/index.ts\\"() {
    \\"use strict\\";
    init_list();
  }
});

// src/core/schemas/builders/literals/stringLiteral.ts
function stringLiteral(literal) {
  const schemaCreator = createIdentitySchemaCreator(
    SchemaType.STRING_LITERAL,
    (value, { breadcrumbsPrefix = [] } = {}) => {
      if (value === literal) {
        return {
          ok: true,
          value: literal
        };
      } else {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(value, \`\\"\${literal}\\"\`)
            }
          ]
        };
      }
    }
  );
  return schemaCreator();
}
var init_stringLiteral = __esm({
  \\"src/core/schemas/builders/literals/stringLiteral.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    init_getErrorMessageForIncorrectType();
  }
});

// src/core/schemas/builders/literals/index.ts
var init_literals = __esm({
  \\"src/core/schemas/builders/literals/index.ts\\"() {
    \\"use strict\\";
    init_stringLiteral();
  }
});

// src/core/schemas/builders/primitives/any.ts
var any;
var init_any = __esm({
  \\"src/core/schemas/builders/primitives/any.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    any = createIdentitySchemaCreator(SchemaType.ANY, (value) => ({ ok: true, value }));
  }
});

// src/core/schemas/builders/primitives/boolean.ts
var boolean;
var init_boolean = __esm({
  \\"src/core/schemas/builders/primitives/boolean.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    init_getErrorMessageForIncorrectType();
    boolean = createIdentitySchemaCreator(
      SchemaType.BOOLEAN,
      (value, { breadcrumbsPrefix = [] } = {}) => {
        if (typeof value === \\"boolean\\") {
          return {
            ok: true,
            value
          };
        } else {
          return {
            ok: false,
            errors: [
              {
                path: breadcrumbsPrefix,
                message: getErrorMessageForIncorrectType(value, \\"boolean\\")
              }
            ]
          };
        }
      }
    );
  }
});

// src/core/schemas/builders/primitives/number.ts
var number;
var init_number = __esm({
  \\"src/core/schemas/builders/primitives/number.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    init_getErrorMessageForIncorrectType();
    number = createIdentitySchemaCreator(
      SchemaType.NUMBER,
      (value, { breadcrumbsPrefix = [] } = {}) => {
        if (typeof value === \\"number\\") {
          return {
            ok: true,
            value
          };
        } else {
          return {
            ok: false,
            errors: [
              {
                path: breadcrumbsPrefix,
                message: getErrorMessageForIncorrectType(value, \\"number\\")
              }
            ]
          };
        }
      }
    );
  }
});

// src/core/schemas/builders/primitives/string.ts
var string;
var init_string = __esm({
  \\"src/core/schemas/builders/primitives/string.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    init_getErrorMessageForIncorrectType();
    string = createIdentitySchemaCreator(
      SchemaType.STRING,
      (value, { breadcrumbsPrefix = [] } = {}) => {
        if (typeof value === \\"string\\") {
          return {
            ok: true,
            value
          };
        } else {
          return {
            ok: false,
            errors: [
              {
                path: breadcrumbsPrefix,
                message: getErrorMessageForIncorrectType(value, \\"string\\")
              }
            ]
          };
        }
      }
    );
  }
});

// src/core/schemas/builders/primitives/unknown.ts
var unknown;
var init_unknown = __esm({
  \\"src/core/schemas/builders/primitives/unknown.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    unknown = createIdentitySchemaCreator(SchemaType.UNKNOWN, (value) => ({ ok: true, value }));
  }
});

// src/core/schemas/builders/primitives/index.ts
var init_primitives = __esm({
  \\"src/core/schemas/builders/primitives/index.ts\\"() {
    \\"use strict\\";
    init_any();
    init_boolean();
    init_number();
    init_string();
    init_unknown();
  }
});

// src/core/schemas/builders/record/record.ts
function record(keySchema, valueSchema) {
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      return validateAndTransformRecord({
        value: raw,
        isKeyNumeric: (yield keySchema.getType()) === SchemaType.NUMBER,
        transformKey: (key) => {
          var _a;
          return keySchema.parse(key, __spreadProps(__spreadValues({}, opts), {
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`\${key} (key)\`]
          }));
        },
        transformValue: (value, key) => {
          var _a;
          return valueSchema.parse(value, __spreadProps(__spreadValues({}, opts), {
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`\${key}\`]
          }));
        },
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      return validateAndTransformRecord({
        value: parsed,
        isKeyNumeric: (yield keySchema.getType()) === SchemaType.NUMBER,
        transformKey: (key) => {
          var _a;
          return keySchema.json(key, __spreadProps(__spreadValues({}, opts), {
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`\${key} (key)\`]
          }));
        },
        transformValue: (value, key) => {
          var _a;
          return valueSchema.json(value, __spreadProps(__spreadValues({}, opts), {
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`\${key}\`]
          }));
        },
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    getType: () => SchemaType.RECORD
  };
  return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
}
function validateAndTransformRecord(_0) {
  return __async(this, arguments, function* ({
    value,
    isKeyNumeric,
    transformKey,
    transformValue,
    breadcrumbsPrefix = []
  }) {
    if (!isPlainObject2(value)) {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: getErrorMessageForIncorrectType(value, \\"object\\")
          }
        ]
      };
    }
    return entries(value).reduce(
      (_02, _1) => __async(this, [_02, _1], function* (accPromise, [stringKey, value2]) {
        if (value2 == null) {
          return accPromise;
        }
        const acc = yield accPromise;
        let key = stringKey;
        if (isKeyNumeric) {
          const numberKey = stringKey.length > 0 ? Number(stringKey) : NaN;
          if (!isNaN(numberKey)) {
            key = numberKey;
          }
        }
        const transformedKey = yield transformKey(key);
        const transformedValue = yield transformValue(value2, key);
        if (acc.ok && transformedKey.ok && transformedValue.ok) {
          return {
            ok: true,
            value: __spreadProps(__spreadValues({}, acc.value), {
              [transformedKey.value]: transformedValue.value
            })
          };
        }
        const errors = [];
        if (!acc.ok) {
          errors.push(...acc.errors);
        }
        if (!transformedKey.ok) {
          errors.push(...transformedKey.errors);
        }
        if (!transformedValue.ok) {
          errors.push(...transformedValue.errors);
        }
        return {
          ok: false,
          errors
        };
      }),
      Promise.resolve({ ok: true, value: {} })
    );
  });
}
var init_record = __esm({
  \\"src/core/schemas/builders/record/record.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_entries();
    init_getErrorMessageForIncorrectType();
    init_isPlainObject();
    init_maybeSkipValidation();
    init_schema_utils();
  }
});

// src/core/schemas/builders/record/index.ts
var init_record2 = __esm({
  \\"src/core/schemas/builders/record/index.ts\\"() {
    \\"use strict\\";
    init_record();
  }
});

// src/core/schemas/builders/set/set.ts
function set(schema) {
  const listSchema = list(schema);
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      const parsedList = yield listSchema.parse(raw, opts);
      if (parsedList.ok) {
        return {
          ok: true,
          value: new Set(parsedList.value)
        };
      } else {
        return parsedList;
      }
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      var _a;
      if (!(parsed instanceof Set)) {
        return {
          ok: false,
          errors: [
            {
              path: (_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [],
              message: getErrorMessageForIncorrectType(parsed, \\"Set\\")
            }
          ]
        };
      }
      const jsonList = yield listSchema.json([...parsed], opts);
      return jsonList;
    }),
    getType: () => SchemaType.SET
  };
  return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
}
var init_set = __esm({
  \\"src/core/schemas/builders/set/set.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_getErrorMessageForIncorrectType();
    init_maybeSkipValidation();
    init_list2();
    init_schema_utils();
  }
});

// src/core/schemas/builders/set/index.ts
var init_set2 = __esm({
  \\"src/core/schemas/builders/set/index.ts\\"() {
    \\"use strict\\";
    init_set();
  }
});

// src/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
function undiscriminatedUnion(schemas) {
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      return validateAndTransformUndiscriminatedUnion(
        (schema) => schema.parse(raw, opts),
        schemas
      );
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      return validateAndTransformUndiscriminatedUnion(
        (schema) => schema.json(parsed, opts),
        schemas
      );
    }),
    getType: () => SchemaType.UNDISCRIMINATED_UNION
  };
  return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
}
function validateAndTransformUndiscriminatedUnion(transform2, schemas) {
  return __async(this, null, function* () {
    const errors = [];
    for (const [index, schema] of schemas.entries()) {
      const transformed = yield transform2(schema);
      if (transformed.ok) {
        return transformed;
      } else {
        for (const error of errors) {
          errors.push({
            path: error.path,
            message: \`[Variant \${index}] \${error.message}\`
          });
        }
      }
    }
    return {
      ok: false,
      errors
    };
  });
}
var init_undiscriminatedUnion = __esm({
  \\"src/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_maybeSkipValidation();
    init_schema_utils();
  }
});

// src/core/schemas/builders/undiscriminated-union/index.ts
var init_undiscriminated_union = __esm({
  \\"src/core/schemas/builders/undiscriminated-union/index.ts\\"() {
    \\"use strict\\";
    init_undiscriminatedUnion();
  }
});

// src/core/schemas/builders/union/discriminant.ts
function discriminant(parsedDiscriminant, rawDiscriminant) {
  return {
    parsedDiscriminant,
    rawDiscriminant
  };
}
var init_discriminant = __esm({
  \\"src/core/schemas/builders/union/discriminant.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/builders/union/union.ts
function union(discriminant2, union2) {
  const rawDiscriminant = typeof discriminant2 === \\"string\\" ? discriminant2 : discriminant2.rawDiscriminant;
  const parsedDiscriminant = typeof discriminant2 === \\"string\\" ? discriminant2 : discriminant2.parsedDiscriminant;
  const discriminantValueSchema = enum_(keys(union2));
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      return transformAndValidateUnion({
        value: raw,
        discriminant: rawDiscriminant,
        transformedDiscriminant: parsedDiscriminant,
        transformDiscriminantValue: (discriminantValue) => {
          var _a;
          return discriminantValueSchema.parse(discriminantValue, {
            allowUnrecognizedEnumValues: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], rawDiscriminant]
          });
        },
        getAdditionalPropertiesSchema: (discriminantValue) => union2[discriminantValue],
        allowUnrecognizedUnionMembers: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
        transformAdditionalProperties: (additionalProperties, additionalPropertiesSchema) => additionalPropertiesSchema.parse(additionalProperties, opts),
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      return transformAndValidateUnion({
        value: parsed,
        discriminant: parsedDiscriminant,
        transformedDiscriminant: rawDiscriminant,
        transformDiscriminantValue: (discriminantValue) => {
          var _a;
          return discriminantValueSchema.json(discriminantValue, {
            allowUnrecognizedEnumValues: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], parsedDiscriminant]
          });
        },
        getAdditionalPropertiesSchema: (discriminantValue) => union2[discriminantValue],
        allowUnrecognizedUnionMembers: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
        transformAdditionalProperties: (additionalProperties, additionalPropertiesSchema) => additionalPropertiesSchema.json(additionalProperties, opts),
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    getType: () => SchemaType.UNION
  };
  return __spreadValues(__spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema)), getObjectLikeUtils(baseSchema));
}
function transformAndValidateUnion(_0) {
  return __async(this, arguments, function* ({
    value,
    discriminant: discriminant2,
    transformedDiscriminant,
    transformDiscriminantValue,
    getAdditionalPropertiesSchema,
    allowUnrecognizedUnionMembers = false,
    transformAdditionalProperties,
    breadcrumbsPrefix = []
  }) {
    if (!isPlainObject2(value)) {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: getErrorMessageForIncorrectType(value, \\"object\\")
          }
        ]
      };
    }
    const _a = value, { [discriminant2]: discriminantValue } = _a, additionalProperties = __objRest(_a, [__restKey(discriminant2)]);
    if (discriminantValue == null) {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: \`Missing discriminant (\\"\${discriminant2}\\")\`
          }
        ]
      };
    }
    const transformedDiscriminantValue = yield transformDiscriminantValue(discriminantValue);
    if (!transformedDiscriminantValue.ok) {
      return {
        ok: false,
        errors: transformedDiscriminantValue.errors
      };
    }
    const additionalPropertiesSchema = getAdditionalPropertiesSchema(transformedDiscriminantValue.value);
    if (additionalPropertiesSchema == null) {
      if (allowUnrecognizedUnionMembers) {
        return {
          ok: true,
          value: __spreadValues({
            [transformedDiscriminant]: transformedDiscriminantValue.value
          }, additionalProperties)
        };
      } else {
        return {
          ok: false,
          errors: [
            {
              path: [...breadcrumbsPrefix, discriminant2],
              message: \\"Unexpected discriminant value\\"
            }
          ]
        };
      }
    }
    const transformedAdditionalProperties = yield transformAdditionalProperties(
      additionalProperties,
      additionalPropertiesSchema
    );
    if (!transformedAdditionalProperties.ok) {
      return transformedAdditionalProperties;
    }
    return {
      ok: true,
      value: __spreadValues({
        [transformedDiscriminant]: discriminantValue
      }, transformedAdditionalProperties.value)
    };
  });
}
var init_union = __esm({
  \\"src/core/schemas/builders/union/union.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_getErrorMessageForIncorrectType();
    init_isPlainObject();
    init_keys();
    init_maybeSkipValidation();
    init_enum2();
    init_object_like();
    init_schema_utils();
  }
});

// src/core/schemas/builders/union/index.ts
var init_union2 = __esm({
  \\"src/core/schemas/builders/union/index.ts\\"() {
    \\"use strict\\";
    init_discriminant();
    init_union();
  }
});

// src/core/schemas/builders/index.ts
var init_builders = __esm({
  \\"src/core/schemas/builders/index.ts\\"() {
    \\"use strict\\";
    init_date2();
    init_enum2();
    init_lazy2();
    init_list2();
    init_literals();
    init_object2();
    init_object_like();
    init_primitives();
    init_record2();
    init_schema_utils();
    init_set2();
    init_undiscriminated_union();
    init_union2();
  }
});

// src/core/schemas/index.ts
var schemas_exports = {};
__export(schemas_exports, {
  JsonError: () => JsonError,
  ParseError: () => ParseError,
  any: () => any,
  boolean: () => boolean,
  date: () => date,
  discriminant: () => discriminant,
  enum_: () => enum_,
  getObjectLikeUtils: () => getObjectLikeUtils,
  getObjectUtils: () => getObjectUtils,
  getSchemaUtils: () => getSchemaUtils,
  isProperty: () => isProperty,
  lazy: () => lazy,
  lazyObject: () => lazyObject,
  list: () => list,
  number: () => number,
  object: () => object,
  optional: () => optional,
  property: () => property,
  record: () => record,
  set: () => set,
  string: () => string,
  stringLiteral: () => stringLiteral,
  transform: () => transform,
  undiscriminatedUnion: () => undiscriminatedUnion,
  union: () => union,
  unknown: () => unknown,
  withParsedProperties: () => withParsedProperties
});
var init_schemas = __esm({
  \\"src/core/schemas/index.ts\\"() {
    \\"use strict\\";
    init_builders();
  }
});

// src/core/index.ts
var init_core = __esm({
  \\"src/core/index.ts\\"() {
    \\"use strict\\";
    init_fetcher();
    init_auth();
    init_schemas();
  }
});

// .yarn/cache/url-join-npm-4.0.1-e1f4415722-f74e868bf2.zip/node_modules/url-join/lib/url-join.js
var require_url_join = __commonJS({
  \\".yarn/cache/url-join-npm-4.0.1-e1f4415722-f74e868bf2.zip/node_modules/url-join/lib/url-join.js\\"(exports, module2) {
    (function(name, context, definition) {
      if (typeof module2 !== \\"undefined\\" && module2.exports)
        module2.exports = definition();
      else if (typeof define === \\"function\\" && define.amd)
        define(definition);
      else
        context[name] = definition();
    })(\\"urljoin\\", exports, function() {
      function normalize(strArray) {
        var resultArray = [];
        if (strArray.length === 0) {
          return \\"\\";
        }
        if (typeof strArray[0] !== \\"string\\") {
          throw new TypeError(\\"Url must be a string. Received \\" + strArray[0]);
        }
        if (strArray[0].match(/^[^/:]+:\\\\/*$/) && strArray.length > 1) {
          var first = strArray.shift();
          strArray[0] = first + strArray[0];
        }
        if (strArray[0].match(/^file:\\\\/\\\\/\\\\//)) {
          strArray[0] = strArray[0].replace(/^([^/:]+):\\\\/*/, \\"$1:///\\");
        } else {
          strArray[0] = strArray[0].replace(/^([^/:]+):\\\\/*/, \\"$1://\\");
        }
        for (var i = 0; i < strArray.length; i++) {
          var component = strArray[i];
          if (typeof component !== \\"string\\") {
            throw new TypeError(\\"Url must be a string. Received \\" + component);
          }
          if (component === \\"\\") {
            continue;
          }
          if (i > 0) {
            component = component.replace(/^[\\\\/]+/, \\"\\");
          }
          if (i < strArray.length - 1) {
            component = component.replace(/[\\\\/]+$/, \\"\\");
          } else {
            component = component.replace(/[\\\\/]+$/, \\"/\\");
          }
          resultArray.push(component);
        }
        var str = resultArray.join(\\"/\\");
        str = str.replace(/\\\\/(\\\\?|&|#[^!])/g, \\"$1\\");
        var parts = str.split(\\"?\\");
        str = parts.shift() + (parts.length > 0 ? \\"?\\" : \\"\\") + parts.join(\\"&\\");
        return str;
      }
      return function() {
        var input;
        if (typeof arguments[0] === \\"object\\") {
          input = arguments[0];
        } else {
          input = [].slice.call(arguments);
        }
        return normalize(input);
      };
    });
  }
});

// src/serialization/resources/remoteGen/types/RemoteGenJobId.ts
var RemoteGenJobId2;
var init_RemoteGenJobId2 = __esm({
  \\"src/serialization/resources/remoteGen/types/RemoteGenJobId.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    RemoteGenJobId2 = schemas_exports.string().transform({
      transform: RemoteGenJobId,
      untransform: (value) => value
    });
  }
});

// src/serialization/resources/remoteGen/types/RemoteGenTaskId.ts
var RemoteGenTaskId2;
var init_RemoteGenTaskId2 = __esm({
  \\"src/serialization/resources/remoteGen/types/RemoteGenTaskId.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    RemoteGenTaskId2 = schemas_exports.string().transform({
      transform: RemoteGenTaskId,
      untransform: (value) => value
    });
  }
});

// src/serialization/resources/remoteGen/types/GeneratorIdAndVersion.ts
var GeneratorIdAndVersion;
var init_GeneratorIdAndVersion2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GeneratorIdAndVersion.ts\\"() {
    \\"use strict\\";
    init_core();
    GeneratorIdAndVersion = schemas_exports.object({
      id: schemas_exports.string(),
      version: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/GeneratorConfig.ts
var GeneratorConfig;
var init_GeneratorConfig2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GeneratorConfig.ts\\"() {
    \\"use strict\\";
    init_core();
    GeneratorConfig = schemas_exports.object({
      id: schemas_exports.string(),
      version: schemas_exports.string(),
      customConfig: schemas_exports.unknown(),
      willDownloadFiles: schemas_exports.boolean(),
      outputs: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorOutputs;
      }))
    });
  }
});

// src/serialization/resources/remoteGen/types/GeneratorConfigV2.ts
var GeneratorConfigV2;
var init_GeneratorConfigV22 = __esm({
  \\"src/serialization/resources/remoteGen/types/GeneratorConfigV2.ts\\"() {
    \\"use strict\\";
    init_core();
    GeneratorConfigV2 = schemas_exports.object({
      id: schemas_exports.string(),
      version: schemas_exports.string(),
      customConfig: schemas_exports.unknown(),
      outputMode: schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).OutputMode;
      }))
    });
  }
});

// src/serialization/resources/remoteGen/types/OutputMode.ts
var OutputMode2;
var init_OutputMode2 = __esm({
  \\"src/serialization/resources/remoteGen/types/OutputMode.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    OutputMode2 = schemas_exports.union(\\"type\\", {
      publish: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).PublishOutputMode;
      })),
      publishV2: schemas_exports.object({
        publishV2: schemas_exports.lazy(() => __async(void 0, null, function* () {
          return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).PublishOutputModeV2;
        }))
      }),
      downloadFiles: schemas_exports.object({}),
      github: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GithubOutputMode;
      }))
    }).transform({
      transform: (value) => {
        switch (value.type) {
          case \\"publish\\":
            return OutputMode.publish(value);
          case \\"publishV2\\":
            return OutputMode.publishV2(value.publishV2);
          case \\"downloadFiles\\":
            return OutputMode.downloadFiles();
          case \\"github\\":
            return OutputMode.github(value);
          default:
            return OutputMode._unknown(value);
        }
      },
      untransform: (_a) => {
        var _b = _a, { _visit } = _b, value = __objRest(_b, [\\"_visit\\"]);
        return value;
      }
    });
  }
});

// src/serialization/resources/remoteGen/types/PublishOutputMode.ts
var PublishOutputMode;
var init_PublishOutputMode2 = __esm({
  \\"src/serialization/resources/remoteGen/types/PublishOutputMode.ts\\"() {
    \\"use strict\\";
    init_core();
    PublishOutputMode = schemas_exports.object({
      registryOverrides: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).RegistryOverrides;
      }))
    });
  }
});

// src/serialization/resources/remoteGen/types/PublishOutputModeV2.ts
var PublishOutputModeV22;
var init_PublishOutputModeV22 = __esm({
  \\"src/serialization/resources/remoteGen/types/PublishOutputModeV2.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    PublishOutputModeV22 = schemas_exports.union(\\"type\\", {
      npmOverride: schemas_exports.object({
        npmOverride: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
          return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).NpmOutput;
        })).optional()
      }),
      mavenOverride: schemas_exports.object({
        mavenOverride: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
          return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).MavenOutput;
        })).optional()
      }),
      postman: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).PostmanOutput;
      }))
    }).transform({
      transform: (value) => {
        switch (value.type) {
          case \\"npmOverride\\":
            return PublishOutputModeV2.npmOverride(value.npmOverride);
          case \\"mavenOverride\\":
            return PublishOutputModeV2.mavenOverride(value.mavenOverride);
          case \\"postman\\":
            return PublishOutputModeV2.postman(value);
          default:
            return PublishOutputModeV2._unknown(value);
        }
      },
      untransform: (_a) => {
        var _b = _a, { _visit } = _b, value = __objRest(_b, [\\"_visit\\"]);
        return value;
      }
    });
  }
});

// src/serialization/resources/remoteGen/types/RegistryOverrides.ts
var RegistryOverrides;
var init_RegistryOverrides2 = __esm({
  \\"src/serialization/resources/remoteGen/types/RegistryOverrides.ts\\"() {
    \\"use strict\\";
    init_core();
    RegistryOverrides = schemas_exports.object({
      npm: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).NpmOutput;
      })).optional(),
      maven: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).MavenOutput;
      })).optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/GeneratorOutputs.ts
var GeneratorOutputs;
var init_GeneratorOutputs2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GeneratorOutputs.ts\\"() {
    \\"use strict\\";
    init_core();
    GeneratorOutputs = schemas_exports.object({
      npm: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).NpmOutput;
      })).optional(),
      maven: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).MavenOutput;
      })).optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/NpmOutput.ts
var NpmOutput;
var init_NpmOutput2 = __esm({
  \\"src/serialization/resources/remoteGen/types/NpmOutput.ts\\"() {
    \\"use strict\\";
    init_core();
    NpmOutput = schemas_exports.object({
      registryUrl: schemas_exports.string(),
      packageName: schemas_exports.string(),
      token: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/MavenOutput.ts
var MavenOutput;
var init_MavenOutput2 = __esm({
  \\"src/serialization/resources/remoteGen/types/MavenOutput.ts\\"() {
    \\"use strict\\";
    init_core();
    MavenOutput = schemas_exports.object({
      registryUrl: schemas_exports.string(),
      username: schemas_exports.string(),
      password: schemas_exports.string(),
      coordinate: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/PostmanOutput.ts
var PostmanOutput;
var init_PostmanOutput2 = __esm({
  \\"src/serialization/resources/remoteGen/types/PostmanOutput.ts\\"() {
    \\"use strict\\";
    init_core();
    PostmanOutput = schemas_exports.object({
      apiKey: schemas_exports.string(),
      workspaceId: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/GithubOutputMode.ts
var GithubOutputMode;
var init_GithubOutputMode2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GithubOutputMode.ts\\"() {
    \\"use strict\\";
    init_core();
    GithubOutputMode = schemas_exports.object({
      owner: schemas_exports.string(),
      repo: schemas_exports.string(),
      publishInfo: schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GithubPublishInfo;
      })).optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/GithubPublishInfo.ts
var GithubPublishInfo2;
var init_GithubPublishInfo2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GithubPublishInfo.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    GithubPublishInfo2 = schemas_exports.union(\\"type\\", {
      npm: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).NpmOutputWithOptionalToken;
      })),
      maven: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).MavenOutputWithOptionalCreds;
      })),
      postman: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).PostmanOutput;
      }))
    }).transform({
      transform: (value) => {
        switch (value.type) {
          case \\"npm\\":
            return GithubPublishInfo.npm(value);
          case \\"maven\\":
            return GithubPublishInfo.maven(value);
          case \\"postman\\":
            return GithubPublishInfo.postman(value);
          default:
            return GithubPublishInfo._unknown(value);
        }
      },
      untransform: (_a) => {
        var _b = _a, { _visit } = _b, value = __objRest(_b, [\\"_visit\\"]);
        return value;
      }
    });
  }
});

// src/serialization/resources/remoteGen/types/NpmOutputWithOptionalToken.ts
var NpmOutputWithOptionalToken;
var init_NpmOutputWithOptionalToken2 = __esm({
  \\"src/serialization/resources/remoteGen/types/NpmOutputWithOptionalToken.ts\\"() {
    \\"use strict\\";
    init_core();
    NpmOutputWithOptionalToken = schemas_exports.object({
      registryUrl: schemas_exports.string(),
      packageName: schemas_exports.string(),
      token: schemas_exports.string().optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/MavenOutputWithOptionalCreds.ts
var MavenOutputWithOptionalCreds;
var init_MavenOutputWithOptionalCreds2 = __esm({
  \\"src/serialization/resources/remoteGen/types/MavenOutputWithOptionalCreds.ts\\"() {
    \\"use strict\\";
    init_core();
    MavenOutputWithOptionalCreds = schemas_exports.object({
      registryUrl: schemas_exports.string(),
      coordinate: schemas_exports.string(),
      credentials: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).UsernamePassword;
      })).optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/UsernamePassword.ts
var UsernamePassword;
var init_UsernamePassword2 = __esm({
  \\"src/serialization/resources/remoteGen/types/UsernamePassword.ts\\"() {
    \\"use strict\\";
    init_core();
    UsernamePassword = schemas_exports.object({
      username: schemas_exports.string(),
      password: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/Task.ts
var Task;
var init_Task2 = __esm({
  \\"src/serialization/resources/remoteGen/types/Task.ts\\"() {
    \\"use strict\\";
    init_core();
    Task = schemas_exports.object({
      status: schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).TaskStatus;
      })),
      packages: schemas_exports.list(schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).Package;
      }))),
      logs: schemas_exports.list(schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).TaskLog;
      })))
    });
  }
});

// src/serialization/resources/remoteGen/types/TaskStatus.ts
var TaskStatus2;
var init_TaskStatus2 = __esm({
  \\"src/serialization/resources/remoteGen/types/TaskStatus.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    TaskStatus2 = schemas_exports.union(schemas_exports.discriminant(\\"type\\", \\"_type\\"), {
      notStarted: schemas_exports.object({}),
      running: schemas_exports.object({}),
      failed: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).FailedTaskStatus;
      })),
      finished: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).FinishedTaskStatus;
      }))
    }).transform({
      transform: (value) => {
        switch (value.type) {
          case \\"notStarted\\":
            return TaskStatus.notStarted();
          case \\"running\\":
            return TaskStatus.running();
          case \\"failed\\":
            return TaskStatus.failed(value);
          case \\"finished\\":
            return TaskStatus.finished(value);
          default:
            return TaskStatus._unknown(value);
        }
      },
      untransform: (_a) => {
        var _b = _a, { _visit } = _b, value = __objRest(_b, [\\"_visit\\"]);
        return value;
      }
    });
  }
});

// src/serialization/resources/remoteGen/types/FailedTaskStatus.ts
var FailedTaskStatus;
var init_FailedTaskStatus2 = __esm({
  \\"src/serialization/resources/remoteGen/types/FailedTaskStatus.ts\\"() {
    \\"use strict\\";
    init_core();
    FailedTaskStatus = schemas_exports.object({
      message: schemas_exports.string(),
      s3PreSignedReadUrl: schemas_exports.string().optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/FinishedTaskStatus.ts
var FinishedTaskStatus;
var init_FinishedTaskStatus2 = __esm({
  \\"src/serialization/resources/remoteGen/types/FinishedTaskStatus.ts\\"() {
    \\"use strict\\";
    init_core();
    FinishedTaskStatus = schemas_exports.object({
      hasFilesToDownload: schemas_exports.boolean(),
      s3PreSignedReadUrl: schemas_exports.string(),
      s3PreSignedReadUrlV2: schemas_exports.string().optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/TaskLog.ts
var TaskLog;
var init_TaskLog2 = __esm({
  \\"src/serialization/resources/remoteGen/types/TaskLog.ts\\"() {
    \\"use strict\\";
    init_core();
    TaskLog = schemas_exports.object({
      level: schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).LogLevel;
      })),
      message: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/LogLevel.ts
var LogLevel2;
var init_LogLevel2 = __esm({
  \\"src/serialization/resources/remoteGen/types/LogLevel.ts\\"() {
    \\"use strict\\";
    init_core();
    LogLevel2 = schemas_exports.enum_([
      \\"DEBUG\\",
      \\"INFO\\",
      \\"WARN\\",
      \\"ERROR\\"
    ]);
  }
});

// src/serialization/resources/remoteGen/types/Package.ts
var Package;
var init_Package2 = __esm({
  \\"src/serialization/resources/remoteGen/types/Package.ts\\"() {
    \\"use strict\\";
    init_core();
    Package = schemas_exports.object({
      coordinate: schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).PackageCoordinate;
      })),
      status: schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).PackagePublishStatus;
      }))
    });
  }
});

// src/serialization/resources/remoteGen/types/PackagePublishStatus.ts
var PackagePublishStatus2;
var init_PackagePublishStatus2 = __esm({
  \\"src/serialization/resources/remoteGen/types/PackagePublishStatus.ts\\"() {
    \\"use strict\\";
    init_core();
    PackagePublishStatus2 = schemas_exports.enum_([\\"NOT_STARTED_PUBLISHING\\", \\"PUBLISHING\\", \\"PUBLISHED\\", \\"FAILED_TO_PUBLISH\\"]);
  }
});

// src/serialization/resources/remoteGen/types/PackageCoordinate.ts
var PackageCoordinate2;
var init_PackageCoordinate2 = __esm({
  \\"src/serialization/resources/remoteGen/types/PackageCoordinate.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    PackageCoordinate2 = schemas_exports.union(schemas_exports.discriminant(\\"type\\", \\"_type\\"), {
      npm: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).NpmCoordinate;
      })),
      maven: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).MavenCoordinate;
      })),
      pypi: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).PypiCoordinate;
      }))
    }).transform({
      transform: (value) => {
        switch (value.type) {
          case \\"npm\\":
            return PackageCoordinate.npm(value);
          case \\"maven\\":
            return PackageCoordinate.maven(value);
          case \\"pypi\\":
            return PackageCoordinate.pypi(value);
          default:
            return PackageCoordinate._unknown(value);
        }
      },
      untransform: (_a) => {
        var _b = _a, { _visit } = _b, value = __objRest(_b, [\\"_visit\\"]);
        return value;
      }
    });
  }
});

// src/serialization/resources/remoteGen/types/NpmCoordinate.ts
var NpmCoordinate;
var init_NpmCoordinate2 = __esm({
  \\"src/serialization/resources/remoteGen/types/NpmCoordinate.ts\\"() {
    \\"use strict\\";
    init_core();
    NpmCoordinate = schemas_exports.object({
      name: schemas_exports.string(),
      version: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/MavenCoordinate.ts
var MavenCoordinate;
var init_MavenCoordinate2 = __esm({
  \\"src/serialization/resources/remoteGen/types/MavenCoordinate.ts\\"() {
    \\"use strict\\";
    init_core();
    MavenCoordinate = schemas_exports.object({
      group: schemas_exports.string(),
      artifact: schemas_exports.string(),
      version: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/PypiCoordinate.ts
var PypiCoordinate;
var init_PypiCoordinate2 = __esm({
  \\"src/serialization/resources/remoteGen/types/PypiCoordinate.ts\\"() {
    \\"use strict\\";
    init_core();
    PypiCoordinate = schemas_exports.object({
      name: schemas_exports.string(),
      version: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/CreateJobResponse.ts
var CreateJobResponse;
var init_CreateJobResponse2 = __esm({
  \\"src/serialization/resources/remoteGen/types/CreateJobResponse.ts\\"() {
    \\"use strict\\";
    init_core();
    CreateJobResponse = schemas_exports.object({
      jobId: schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).RemoteGenJobId;
      })),
      taskIds: schemas_exports.list(schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).RemoteGenTaskId;
      })))
    });
  }
});

// src/serialization/resources/remoteGen/types/GeneratorsDoNotExistErrorBodyType.ts
var GeneratorsDoNotExistErrorBodyType;
var init_GeneratorsDoNotExistErrorBodyType2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GeneratorsDoNotExistErrorBodyType.ts\\"() {
    \\"use strict\\";
    init_core();
    GeneratorsDoNotExistErrorBodyType = schemas_exports.object({
      nonExistentGenerators: schemas_exports.list(
        schemas_exports.lazyObject(() => __async(void 0, null, function* () {
          return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorIdAndVersion;
        }))
      )
    });
  }
});

// src/serialization/resources/remoteGen/types/CannotPublishToNpmScopeDetails.ts
var CannotPublishToNpmScopeDetails;
var init_CannotPublishToNpmScopeDetails2 = __esm({
  \\"src/serialization/resources/remoteGen/types/CannotPublishToNpmScopeDetails.ts\\"() {
    \\"use strict\\";
    init_core();
    CannotPublishToNpmScopeDetails = schemas_exports.object({
      generatorId: schemas_exports.string(),
      invalidScope: schemas_exports.string(),
      validScope: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/CannotPublishToMavenGroupDetails.ts
var CannotPublishToMavenGroupDetails;
var init_CannotPublishToMavenGroupDetails2 = __esm({
  \\"src/serialization/resources/remoteGen/types/CannotPublishToMavenGroupDetails.ts\\"() {
    \\"use strict\\";
    init_core();
    CannotPublishToMavenGroupDetails = schemas_exports.object({
      generatorId: schemas_exports.string(),
      invalidGroup: schemas_exports.string(),
      validGroup: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/InsufficientPermissionsDetails.ts
var InsufficientPermissionsDetails;
var init_InsufficientPermissionsDetails2 = __esm({
  \\"src/serialization/resources/remoteGen/types/InsufficientPermissionsDetails.ts\\"() {
    \\"use strict\\";
    init_core();
    InsufficientPermissionsDetails = schemas_exports.object({
      dummy: schemas_exports.string().optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/index.ts
var init_types2 = __esm({
  \\"src/serialization/resources/remoteGen/types/index.ts\\"() {
    \\"use strict\\";
    init_RemoteGenJobId2();
    init_RemoteGenTaskId2();
    init_GeneratorIdAndVersion2();
    init_GeneratorConfig2();
    init_GeneratorConfigV22();
    init_OutputMode2();
    init_PublishOutputMode2();
    init_PublishOutputModeV22();
    init_RegistryOverrides2();
    init_GeneratorOutputs2();
    init_NpmOutput2();
    init_MavenOutput2();
    init_PostmanOutput2();
    init_GithubOutputMode2();
    init_GithubPublishInfo2();
    init_NpmOutputWithOptionalToken2();
    init_MavenOutputWithOptionalCreds2();
    init_UsernamePassword2();
    init_Task2();
    init_TaskStatus2();
    init_FailedTaskStatus2();
    init_FinishedTaskStatus2();
    init_TaskLog2();
    init_LogLevel2();
    init_Package2();
    init_PackagePublishStatus2();
    init_PackageCoordinate2();
    init_NpmCoordinate2();
    init_MavenCoordinate2();
    init_PypiCoordinate2();
    init_CreateJobResponse2();
    init_GeneratorsDoNotExistErrorBodyType2();
    init_CannotPublishToNpmScopeDetails2();
    init_CannotPublishToMavenGroupDetails2();
    init_InsufficientPermissionsDetails2();
  }
});

// src/serialization/resources/remoteGen/client/createJob.ts
var createJob_exports2 = {};
__export(createJob_exports2, {
  Error: () => Error7
});
var Error7;
var init_createJob2 = __esm({
  \\"src/serialization/resources/remoteGen/client/createJob.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    Error7 = schemas_exports.union(\\"error\\", {
      IllegalApiNameError: schemas_exports.object({}),
      GeneratorsDoNotExistError: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorsDoNotExistErrorBodyType;
          })
        )
      }),
      CannotPublishToNpmScope: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).CannotPublishToNpmScopeDetails;
          })
        )
      }),
      CannotPublishToMavenGroup: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).CannotPublishToMavenGroupDetails;
          })
        )
      }),
      InsufficientPermissions: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).InsufficientPermissionsDetails;
          })
        )
      })
    }).transform({
      transform: (value) => {
        switch (value.error) {
          case \\"IllegalApiNameError\\":
            return remoteGen_exports.createJob.Error.illegalApiNameError();
          case \\"GeneratorsDoNotExistError\\":
            return remoteGen_exports.createJob.Error.generatorsDoNotExistError(value.content);
          case \\"CannotPublishToNpmScope\\":
            return remoteGen_exports.createJob.Error.cannotPublishToNpmScope(value.content);
          case \\"CannotPublishToMavenGroup\\":
            return remoteGen_exports.createJob.Error.cannotPublishToMavenGroup(value.content);
          case \\"InsufficientPermissions\\":
            return remoteGen_exports.createJob.Error.insufficientPermissions(value.content);
        }
      },
      untransform: (_a) => {
        var _b = _a, { _visit } = _b, value = __objRest(_b, [\\"_visit\\"]);
        return value;
      }
    });
  }
});

// src/serialization/resources/remoteGen/client/createJobV2.ts
var createJobV2_exports2 = {};
__export(createJobV2_exports2, {
  Error: () => Error8
});
var Error8;
var init_createJobV22 = __esm({
  \\"src/serialization/resources/remoteGen/client/createJobV2.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    Error8 = schemas_exports.union(\\"error\\", {
      IllegalApiNameError: schemas_exports.object({}),
      GeneratorsDoNotExistError: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorsDoNotExistErrorBodyType;
          })
        )
      }),
      CannotPublishToNpmScope: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).CannotPublishToNpmScopeDetails;
          })
        )
      }),
      CannotPublishToMavenGroup: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).CannotPublishToMavenGroupDetails;
          })
        )
      }),
      InsufficientPermissions: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).InsufficientPermissionsDetails;
          })
        )
      })
    }).transform({
      transform: (value) => {
        switch (value.error) {
          case \\"IllegalApiNameError\\":
            return remoteGen_exports.createJobV2.Error.illegalApiNameError();
          case \\"GeneratorsDoNotExistError\\":
            return remoteGen_exports.createJobV2.Error.generatorsDoNotExistError(value.content);
          case \\"CannotPublishToNpmScope\\":
            return remoteGen_exports.createJobV2.Error.cannotPublishToNpmScope(value.content);
          case \\"CannotPublishToMavenGroup\\":
            return remoteGen_exports.createJobV2.Error.cannotPublishToMavenGroup(value.content);
          case \\"InsufficientPermissions\\":
            return remoteGen_exports.createJobV2.Error.insufficientPermissions(value.content);
        }
      },
      untransform: (_a) => {
        var _b = _a, { _visit } = _b, value = __objRest(_b, [\\"_visit\\"]);
        return value;
      }
    });
  }
});

// src/serialization/resources/remoteGen/client/getJobStatus.ts
var getJobStatus_exports2 = {};
__export(getJobStatus_exports2, {
  Response: () => Response
});
var Response;
var init_getJobStatus2 = __esm({
  \\"src/serialization/resources/remoteGen/client/getJobStatus.ts\\"() {
    \\"use strict\\";
    init_core();
    Response = schemas_exports.record(
      schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).RemoteGenTaskId;
      })),
      schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).Task;
      }))
    );
  }
});

// src/serialization/resources/remoteGen/client/requests/CreateJobRequest.ts
var CreateJobRequest;
var init_CreateJobRequest = __esm({
  \\"src/serialization/resources/remoteGen/client/requests/CreateJobRequest.ts\\"() {
    \\"use strict\\";
    init_core();
    CreateJobRequest = schemas_exports.object({
      apiName: schemas_exports.string(),
      organizationName: schemas_exports.string(),
      version: schemas_exports.string().optional(),
      generators: schemas_exports.list(
        schemas_exports.lazyObject(() => __async(void 0, null, function* () {
          return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorConfig;
        }))
      )
    });
  }
});

// src/serialization/resources/remoteGen/client/requests/CreateJobRequestV2.ts
var CreateJobRequestV2;
var init_CreateJobRequestV2 = __esm({
  \\"src/serialization/resources/remoteGen/client/requests/CreateJobRequestV2.ts\\"() {
    \\"use strict\\";
    init_core();
    CreateJobRequestV2 = schemas_exports.object({
      apiName: schemas_exports.string(),
      organizationName: schemas_exports.string(),
      version: schemas_exports.string().optional(),
      generators: schemas_exports.list(
        schemas_exports.lazyObject(() => __async(void 0, null, function* () {
          return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorConfigV2;
        }))
      ),
      uploadToS3: schemas_exports.boolean().optional()
    });
  }
});

// src/serialization/resources/remoteGen/client/requests/index.ts
var init_requests2 = __esm({
  \\"src/serialization/resources/remoteGen/client/requests/index.ts\\"() {
    \\"use strict\\";
    init_CreateJobRequest();
    init_CreateJobRequestV2();
  }
});

// src/serialization/resources/remoteGen/client/index.ts
var init_client4 = __esm({
  \\"src/serialization/resources/remoteGen/client/index.ts\\"() {
    \\"use strict\\";
    init_createJob2();
    init_createJobV22();
    init_getJobStatus2();
    init_requests2();
  }
});

// src/serialization/resources/remoteGen/index.ts
var remoteGen_exports2 = {};
__export(remoteGen_exports2, {
  CannotPublishToMavenGroupDetails: () => CannotPublishToMavenGroupDetails,
  CannotPublishToNpmScopeDetails: () => CannotPublishToNpmScopeDetails,
  CreateJobRequest: () => CreateJobRequest,
  CreateJobRequestV2: () => CreateJobRequestV2,
  CreateJobResponse: () => CreateJobResponse,
  FailedTaskStatus: () => FailedTaskStatus,
  FinishedTaskStatus: () => FinishedTaskStatus,
  GeneratorConfig: () => GeneratorConfig,
  GeneratorConfigV2: () => GeneratorConfigV2,
  GeneratorIdAndVersion: () => GeneratorIdAndVersion,
  GeneratorOutputs: () => GeneratorOutputs,
  GeneratorsDoNotExistErrorBodyType: () => GeneratorsDoNotExistErrorBodyType,
  GithubOutputMode: () => GithubOutputMode,
  GithubPublishInfo: () => GithubPublishInfo2,
  InsufficientPermissionsDetails: () => InsufficientPermissionsDetails,
  LogLevel: () => LogLevel2,
  MavenCoordinate: () => MavenCoordinate,
  MavenOutput: () => MavenOutput,
  MavenOutputWithOptionalCreds: () => MavenOutputWithOptionalCreds,
  NpmCoordinate: () => NpmCoordinate,
  NpmOutput: () => NpmOutput,
  NpmOutputWithOptionalToken: () => NpmOutputWithOptionalToken,
  OutputMode: () => OutputMode2,
  Package: () => Package,
  PackageCoordinate: () => PackageCoordinate2,
  PackagePublishStatus: () => PackagePublishStatus2,
  PostmanOutput: () => PostmanOutput,
  PublishOutputMode: () => PublishOutputMode,
  PublishOutputModeV2: () => PublishOutputModeV22,
  PypiCoordinate: () => PypiCoordinate,
  RegistryOverrides: () => RegistryOverrides,
  RemoteGenJobId: () => RemoteGenJobId2,
  RemoteGenTaskId: () => RemoteGenTaskId2,
  Task: () => Task,
  TaskLog: () => TaskLog,
  TaskStatus: () => TaskStatus2,
  UsernamePassword: () => UsernamePassword,
  createJob: () => createJob_exports2,
  createJobV2: () => createJobV2_exports2,
  getJobStatus: () => getJobStatus_exports2
});
var init_remoteGen2 = __esm({
  \\"src/serialization/resources/remoteGen/index.ts\\"() {
    \\"use strict\\";
    init_types2();
    init_client4();
  }
});

// src/serialization/resources/index.ts
var init_resources2 = __esm({
  \\"src/serialization/resources/index.ts\\"() {
    \\"use strict\\";
    init_remoteGen2();
    init_types2();
    init_requests2();
  }
});

// src/serialization/index.ts
var serialization_exports = {};
__export(serialization_exports, {
  CannotPublishToMavenGroupDetails: () => CannotPublishToMavenGroupDetails,
  CannotPublishToNpmScopeDetails: () => CannotPublishToNpmScopeDetails,
  CreateJobRequest: () => CreateJobRequest,
  CreateJobRequestV2: () => CreateJobRequestV2,
  CreateJobResponse: () => CreateJobResponse,
  FailedTaskStatus: () => FailedTaskStatus,
  FinishedTaskStatus: () => FinishedTaskStatus,
  GeneratorConfig: () => GeneratorConfig,
  GeneratorConfigV2: () => GeneratorConfigV2,
  GeneratorIdAndVersion: () => GeneratorIdAndVersion,
  GeneratorOutputs: () => GeneratorOutputs,
  GeneratorsDoNotExistErrorBodyType: () => GeneratorsDoNotExistErrorBodyType,
  GithubOutputMode: () => GithubOutputMode,
  GithubPublishInfo: () => GithubPublishInfo2,
  InsufficientPermissionsDetails: () => InsufficientPermissionsDetails,
  LogLevel: () => LogLevel2,
  MavenCoordinate: () => MavenCoordinate,
  MavenOutput: () => MavenOutput,
  MavenOutputWithOptionalCreds: () => MavenOutputWithOptionalCreds,
  NpmCoordinate: () => NpmCoordinate,
  NpmOutput: () => NpmOutput,
  NpmOutputWithOptionalToken: () => NpmOutputWithOptionalToken,
  OutputMode: () => OutputMode2,
  Package: () => Package,
  PackageCoordinate: () => PackageCoordinate2,
  PackagePublishStatus: () => PackagePublishStatus2,
  PostmanOutput: () => PostmanOutput,
  PublishOutputMode: () => PublishOutputMode,
  PublishOutputModeV2: () => PublishOutputModeV22,
  PypiCoordinate: () => PypiCoordinate,
  RegistryOverrides: () => RegistryOverrides,
  RemoteGenJobId: () => RemoteGenJobId2,
  RemoteGenTaskId: () => RemoteGenTaskId2,
  Task: () => Task,
  TaskLog: () => TaskLog,
  TaskStatus: () => TaskStatus2,
  UsernamePassword: () => UsernamePassword,
  remoteGen: () => remoteGen_exports2
});
var init_serialization = __esm({
  \\"src/serialization/index.ts\\"() {
    \\"use strict\\";
    init_resources2();
  }
});

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Fiddle: () => api_exports,
  FiddleClient: () => FiddleClient
});
module.exports = __toCommonJS(src_exports);
init_api();

// src/api/resources/fiddle/client/Client.ts
init_core();
init_api();
var FiddleService = class {
  constructor(_options) {
    this._options = _options;
  }
  test(_requestOptions) {
    return __async(this, null, function* () {
      const _response = yield fetcher({
        url: yield Supplier.get(this._options.environment),
        method: \\"GET\\",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          \\"X-Fern-Language\\": \\"JavaScript\\",
          \\"X-Fern-SDK-Name\\": \\"@fern-fern/fiddle-sdk\\",
          \\"X-Fern-SDK-Version\\": \\"0.0.0\\"
        },
        contentType: \\"application/json\\",
        timeoutMs: (_requestOptions == null ? void 0 : _requestOptions.timeoutInSeconds) !== void 0 ? _requestOptions.timeoutInSeconds * 1e3 : 6e4
      });
      if (_response.ok) {
        return {
          ok: true,
          body: void 0
        };
      }
      return {
        ok: false,
        error: fiddle_exports.test.Error._unknown(_response.error)
      };
    });
  }
  _getAuthorizationHeader() {
    return __async(this, null, function* () {
      return \`Bearer \${yield Supplier.get(this._options.token)}\`;
    });
  }
};

// src/api/resources/health/client/Client.ts
init_core();
init_api();
var import_url_join = __toESM(require_url_join());
var Health = class {
  constructor(_options) {
    this._options = _options;
  }
  status(_requestOptions) {
    return __async(this, null, function* () {
      const _response = yield fetcher({
        url: (0, import_url_join.default)(yield Supplier.get(this._options.environment), \\"/api/health\\"),
        method: \\"GET\\",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          \\"X-Fern-Language\\": \\"JavaScript\\",
          \\"X-Fern-SDK-Name\\": \\"@fern-fern/fiddle-sdk\\",
          \\"X-Fern-SDK-Version\\": \\"0.0.0\\"
        },
        contentType: \\"application/json\\",
        timeoutMs: (_requestOptions == null ? void 0 : _requestOptions.timeoutInSeconds) !== void 0 ? _requestOptions.timeoutInSeconds * 1e3 : 6e4
      });
      if (_response.ok) {
        return {
          ok: true,
          body: void 0
        };
      }
      return {
        ok: false,
        error: health_exports.status.Error._unknown(_response.error)
      };
    });
  }
  _getAuthorizationHeader() {
    return __async(this, null, function* () {
      return \`Bearer \${yield Supplier.get(this._options.token)}\`;
    });
  }
};

// src/api/resources/remoteGen/client/Client.ts
init_core();
init_api();
init_serialization();
var import_url_join2 = __toESM(require_url_join());
var RemoteGen = class {
  constructor(_options) {
    this._options = _options;
  }
  createJob(request, _requestOptions) {
    return __async(this, null, function* () {
      var _a;
      const _response = yield fetcher({
        url: (0, import_url_join2.default)(yield Supplier.get(this._options.environment), \\"/api/remote-gen/create-job\\"),
        method: \\"POST\\",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          \\"X-Fern-Language\\": \\"JavaScript\\",
          \\"X-Fern-SDK-Name\\": \\"@fern-fern/fiddle-sdk\\",
          \\"X-Fern-SDK-Version\\": \\"0.0.0\\"
        },
        contentType: \\"application/json\\",
        body: yield CreateJobRequest.jsonOrThrow(request, { unrecognizedObjectKeys: \\"strip\\" }),
        timeoutMs: (_requestOptions == null ? void 0 : _requestOptions.timeoutInSeconds) !== void 0 ? _requestOptions.timeoutInSeconds * 1e3 : 6e4
      });
      if (_response.ok) {
        return {
          ok: true,
          body: yield CreateJobResponse.parseOrThrow(_response.body, {
            unrecognizedObjectKeys: \\"passthrough\\",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: [\\"response\\"]
          })
        };
      }
      if (_response.error.reason === \\"status-code\\") {
        switch ((_a = _response.error.body) == null ? void 0 : _a.error) {
          case \\"IllegalApiNameError\\":
          case \\"GeneratorsDoNotExistError\\":
          case \\"CannotPublishToNpmScope\\":
          case \\"CannotPublishToMavenGroup\\":
          case \\"InsufficientPermissions\\":
            return {
              ok: false,
              error: yield remoteGen_exports2.createJob.Error.parseOrThrow(
                _response.error.body,
                {
                  unrecognizedObjectKeys: \\"passthrough\\",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  breadcrumbsPrefix: [\\"response\\"]
                }
              )
            };
        }
      }
      return {
        ok: false,
        error: remoteGen_exports.createJob.Error._unknown(_response.error)
      };
    });
  }
  createJobV2(request, _requestOptions) {
    return __async(this, null, function* () {
      var _a;
      const _response = yield fetcher({
        url: (0, import_url_join2.default)(yield Supplier.get(this._options.environment), \\"/api/remote-gen/create-job-v2\\"),
        method: \\"POST\\",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          \\"X-Fern-Language\\": \\"JavaScript\\",
          \\"X-Fern-SDK-Name\\": \\"@fern-fern/fiddle-sdk\\",
          \\"X-Fern-SDK-Version\\": \\"0.0.0\\"
        },
        contentType: \\"application/json\\",
        body: yield CreateJobRequestV2.jsonOrThrow(request, { unrecognizedObjectKeys: \\"strip\\" }),
        timeoutMs: (_requestOptions == null ? void 0 : _requestOptions.timeoutInSeconds) !== void 0 ? _requestOptions.timeoutInSeconds * 1e3 : 6e4
      });
      if (_response.ok) {
        return {
          ok: true,
          body: yield CreateJobResponse.parseOrThrow(_response.body, {
            unrecognizedObjectKeys: \\"passthrough\\",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: [\\"response\\"]
          })
        };
      }
      if (_response.error.reason === \\"status-code\\") {
        switch ((_a = _response.error.body) == null ? void 0 : _a.error) {
          case \\"IllegalApiNameError\\":
          case \\"GeneratorsDoNotExistError\\":
          case \\"CannotPublishToNpmScope\\":
          case \\"CannotPublishToMavenGroup\\":
          case \\"InsufficientPermissions\\":
            return {
              ok: false,
              error: yield remoteGen_exports2.createJobV2.Error.parseOrThrow(
                _response.error.body,
                {
                  unrecognizedObjectKeys: \\"passthrough\\",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  breadcrumbsPrefix: [\\"response\\"]
                }
              )
            };
        }
      }
      return {
        ok: false,
        error: remoteGen_exports.createJobV2.Error._unknown(_response.error)
      };
    });
  }
  getJobStatus(jobId, _requestOptions) {
    return __async(this, null, function* () {
      const _response = yield fetcher({
        url: (0, import_url_join2.default)(
          yield Supplier.get(this._options.environment),
          \`/api/remote-gen/jobs/\${yield RemoteGenJobId2.jsonOrThrow(jobId)}/status\`
        ),
        method: \\"POST\\",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          \\"X-Fern-Language\\": \\"JavaScript\\",
          \\"X-Fern-SDK-Name\\": \\"@fern-fern/fiddle-sdk\\",
          \\"X-Fern-SDK-Version\\": \\"0.0.0\\"
        },
        contentType: \\"application/json\\",
        timeoutMs: (_requestOptions == null ? void 0 : _requestOptions.timeoutInSeconds) !== void 0 ? _requestOptions.timeoutInSeconds * 1e3 : 6e4
      });
      if (_response.ok) {
        return {
          ok: true,
          body: yield remoteGen_exports2.getJobStatus.Response.parseOrThrow(_response.body, {
            unrecognizedObjectKeys: \\"passthrough\\",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: [\\"response\\"]
          })
        };
      }
      return {
        ok: false,
        error: remoteGen_exports.getJobStatus.Error._unknown(_response.error)
      };
    });
  }
  _getAuthorizationHeader() {
    return __async(this, null, function* () {
      return \`Bearer \${yield Supplier.get(this._options.token)}\`;
    });
  }
};

// src/Client.ts
var FiddleClient = class {
  constructor(_options) {
    this._options = _options;
  }
  get fiddle() {
    var _a;
    return (_a = this._fiddle) != null ? _a : this._fiddle = new FiddleService(this._options);
  }
  get health() {
    var _a;
    return (_a = this._health) != null ? _a : this._health = new Health(this._options);
  }
  get remoteGen() {
    var _a;
    return (_a = this._remoteGen) != null ? _a : this._remoteGen = new RemoteGen(this._options);
  }
};
",
                "name": "index.js",
                "type": "file",
              },
              Object {
                "contents": "\\"use strict\\";
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b ||= {})
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __restKey = (key) => typeof key === \\"symbol\\" ? key : key + \\"\\";
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === \\"object\\" || typeof from === \\"function\\") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, \\"__esModule\\", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/api/resources/remoteGen/types/RemoteGenJobId.ts
function RemoteGenJobId(value) {
  return value;
}
var init_RemoteGenJobId = __esm({
  \\"src/api/resources/remoteGen/types/RemoteGenJobId.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/RemoteGenTaskId.ts
function RemoteGenTaskId(value) {
  return value;
}
var init_RemoteGenTaskId = __esm({
  \\"src/api/resources/remoteGen/types/RemoteGenTaskId.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GeneratorIdAndVersion.ts
var init_GeneratorIdAndVersion = __esm({
  \\"src/api/resources/remoteGen/types/GeneratorIdAndVersion.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GeneratorConfig.ts
var init_GeneratorConfig = __esm({
  \\"src/api/resources/remoteGen/types/GeneratorConfig.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GeneratorConfigV2.ts
var init_GeneratorConfigV2 = __esm({
  \\"src/api/resources/remoteGen/types/GeneratorConfigV2.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/OutputMode.ts
var OutputMode;
var init_OutputMode = __esm({
  \\"src/api/resources/remoteGen/types/OutputMode.ts\\"() {
    \\"use strict\\";
    init_api();
    OutputMode = {
      publish: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"publish\\",
          _visit: function(visitor) {
            return OutputMode._visit(this, visitor);
          }
        });
      },
      publishV2: (value) => {
        return {
          publishV2: value,
          type: \\"publishV2\\",
          _visit: function(visitor) {
            return OutputMode._visit(this, visitor);
          }
        };
      },
      downloadFiles: () => {
        return {
          type: \\"downloadFiles\\",
          _visit: function(visitor) {
            return OutputMode._visit(this, visitor);
          }
        };
      },
      github: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"github\\",
          _visit: function(visitor) {
            return OutputMode._visit(this, visitor);
          }
        });
      },
      _unknown: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          _visit: function(visitor) {
            return OutputMode._visit(this, visitor);
          }
        });
      },
      _visit: (value, visitor) => {
        switch (value.type) {
          case \\"publish\\":
            return visitor.publish(value);
          case \\"publishV2\\":
            return visitor.publishV2(value.publishV2);
          case \\"downloadFiles\\":
            return visitor.downloadFiles();
          case \\"github\\":
            return visitor.github(value);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/types/PublishOutputMode.ts
var init_PublishOutputMode = __esm({
  \\"src/api/resources/remoteGen/types/PublishOutputMode.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/PublishOutputModeV2.ts
var PublishOutputModeV2;
var init_PublishOutputModeV2 = __esm({
  \\"src/api/resources/remoteGen/types/PublishOutputModeV2.ts\\"() {
    \\"use strict\\";
    init_api();
    PublishOutputModeV2 = {
      npmOverride: (value) => {
        return {
          npmOverride: value,
          type: \\"npmOverride\\",
          _visit: function(visitor) {
            return PublishOutputModeV2._visit(this, visitor);
          }
        };
      },
      mavenOverride: (value) => {
        return {
          mavenOverride: value,
          type: \\"mavenOverride\\",
          _visit: function(visitor) {
            return PublishOutputModeV2._visit(this, visitor);
          }
        };
      },
      postman: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"postman\\",
          _visit: function(visitor) {
            return PublishOutputModeV2._visit(this, visitor);
          }
        });
      },
      _unknown: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          _visit: function(visitor) {
            return PublishOutputModeV2._visit(this, visitor);
          }
        });
      },
      _visit: (value, visitor) => {
        switch (value.type) {
          case \\"npmOverride\\":
            return visitor.npmOverride(value.npmOverride);
          case \\"mavenOverride\\":
            return visitor.mavenOverride(value.mavenOverride);
          case \\"postman\\":
            return visitor.postman(value);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/types/RegistryOverrides.ts
var init_RegistryOverrides = __esm({
  \\"src/api/resources/remoteGen/types/RegistryOverrides.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GeneratorOutputs.ts
var init_GeneratorOutputs = __esm({
  \\"src/api/resources/remoteGen/types/GeneratorOutputs.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/NpmOutput.ts
var init_NpmOutput = __esm({
  \\"src/api/resources/remoteGen/types/NpmOutput.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/MavenOutput.ts
var init_MavenOutput = __esm({
  \\"src/api/resources/remoteGen/types/MavenOutput.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/PostmanOutput.ts
var init_PostmanOutput = __esm({
  \\"src/api/resources/remoteGen/types/PostmanOutput.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GithubOutputMode.ts
var init_GithubOutputMode = __esm({
  \\"src/api/resources/remoteGen/types/GithubOutputMode.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GithubPublishInfo.ts
var GithubPublishInfo;
var init_GithubPublishInfo = __esm({
  \\"src/api/resources/remoteGen/types/GithubPublishInfo.ts\\"() {
    \\"use strict\\";
    init_api();
    GithubPublishInfo = {
      npm: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"npm\\",
          _visit: function(visitor) {
            return GithubPublishInfo._visit(this, visitor);
          }
        });
      },
      maven: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"maven\\",
          _visit: function(visitor) {
            return GithubPublishInfo._visit(this, visitor);
          }
        });
      },
      postman: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"postman\\",
          _visit: function(visitor) {
            return GithubPublishInfo._visit(this, visitor);
          }
        });
      },
      _unknown: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          _visit: function(visitor) {
            return GithubPublishInfo._visit(this, visitor);
          }
        });
      },
      _visit: (value, visitor) => {
        switch (value.type) {
          case \\"npm\\":
            return visitor.npm(value);
          case \\"maven\\":
            return visitor.maven(value);
          case \\"postman\\":
            return visitor.postman(value);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/types/NpmOutputWithOptionalToken.ts
var init_NpmOutputWithOptionalToken = __esm({
  \\"src/api/resources/remoteGen/types/NpmOutputWithOptionalToken.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/MavenOutputWithOptionalCreds.ts
var init_MavenOutputWithOptionalCreds = __esm({
  \\"src/api/resources/remoteGen/types/MavenOutputWithOptionalCreds.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/UsernamePassword.ts
var init_UsernamePassword = __esm({
  \\"src/api/resources/remoteGen/types/UsernamePassword.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/Task.ts
var init_Task = __esm({
  \\"src/api/resources/remoteGen/types/Task.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/TaskStatus.ts
var TaskStatus;
var init_TaskStatus = __esm({
  \\"src/api/resources/remoteGen/types/TaskStatus.ts\\"() {
    \\"use strict\\";
    init_api();
    TaskStatus = {
      notStarted: () => {
        return {
          type: \\"notStarted\\",
          _visit: function(visitor) {
            return TaskStatus._visit(this, visitor);
          }
        };
      },
      running: () => {
        return {
          type: \\"running\\",
          _visit: function(visitor) {
            return TaskStatus._visit(this, visitor);
          }
        };
      },
      failed: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"failed\\",
          _visit: function(visitor) {
            return TaskStatus._visit(this, visitor);
          }
        });
      },
      finished: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"finished\\",
          _visit: function(visitor) {
            return TaskStatus._visit(this, visitor);
          }
        });
      },
      _unknown: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          _visit: function(visitor) {
            return TaskStatus._visit(this, visitor);
          }
        });
      },
      _visit: (value, visitor) => {
        switch (value.type) {
          case \\"notStarted\\":
            return visitor.notStarted();
          case \\"running\\":
            return visitor.running();
          case \\"failed\\":
            return visitor.failed(value);
          case \\"finished\\":
            return visitor.finished(value);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/types/FailedTaskStatus.ts
var init_FailedTaskStatus = __esm({
  \\"src/api/resources/remoteGen/types/FailedTaskStatus.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/FinishedTaskStatus.ts
var init_FinishedTaskStatus = __esm({
  \\"src/api/resources/remoteGen/types/FinishedTaskStatus.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/TaskLog.ts
var init_TaskLog = __esm({
  \\"src/api/resources/remoteGen/types/TaskLog.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/LogLevel.ts
var LogLevel;
var init_LogLevel = __esm({
  \\"src/api/resources/remoteGen/types/LogLevel.ts\\"() {
    \\"use strict\\";
    LogLevel = {
      Debug: \\"DEBUG\\",
      Info: \\"INFO\\",
      Warn: \\"WARN\\",
      Error: \\"ERROR\\"
    };
  }
});

// src/api/resources/remoteGen/types/Package.ts
var init_Package = __esm({
  \\"src/api/resources/remoteGen/types/Package.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/PackagePublishStatus.ts
var PackagePublishStatus;
var init_PackagePublishStatus = __esm({
  \\"src/api/resources/remoteGen/types/PackagePublishStatus.ts\\"() {
    \\"use strict\\";
    PackagePublishStatus = {
      NotStartedPublishing: \\"NOT_STARTED_PUBLISHING\\",
      Publishing: \\"PUBLISHING\\",
      Published: \\"PUBLISHED\\",
      FailedToPublish: \\"FAILED_TO_PUBLISH\\"
    };
  }
});

// src/api/resources/remoteGen/types/PackageCoordinate.ts
var PackageCoordinate;
var init_PackageCoordinate = __esm({
  \\"src/api/resources/remoteGen/types/PackageCoordinate.ts\\"() {
    \\"use strict\\";
    init_api();
    PackageCoordinate = {
      npm: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"npm\\",
          _visit: function(visitor) {
            return PackageCoordinate._visit(this, visitor);
          }
        });
      },
      maven: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"maven\\",
          _visit: function(visitor) {
            return PackageCoordinate._visit(this, visitor);
          }
        });
      },
      pypi: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"pypi\\",
          _visit: function(visitor) {
            return PackageCoordinate._visit(this, visitor);
          }
        });
      },
      _unknown: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          _visit: function(visitor) {
            return PackageCoordinate._visit(this, visitor);
          }
        });
      },
      _visit: (value, visitor) => {
        switch (value.type) {
          case \\"npm\\":
            return visitor.npm(value);
          case \\"maven\\":
            return visitor.maven(value);
          case \\"pypi\\":
            return visitor.pypi(value);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/types/NpmCoordinate.ts
var init_NpmCoordinate = __esm({
  \\"src/api/resources/remoteGen/types/NpmCoordinate.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/MavenCoordinate.ts
var init_MavenCoordinate = __esm({
  \\"src/api/resources/remoteGen/types/MavenCoordinate.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/PypiCoordinate.ts
var init_PypiCoordinate = __esm({
  \\"src/api/resources/remoteGen/types/PypiCoordinate.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/CreateJobResponse.ts
var init_CreateJobResponse = __esm({
  \\"src/api/resources/remoteGen/types/CreateJobResponse.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GeneratorsDoNotExistErrorBodyType.ts
var init_GeneratorsDoNotExistErrorBodyType = __esm({
  \\"src/api/resources/remoteGen/types/GeneratorsDoNotExistErrorBodyType.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/CannotPublishToNpmScopeDetails.ts
var init_CannotPublishToNpmScopeDetails = __esm({
  \\"src/api/resources/remoteGen/types/CannotPublishToNpmScopeDetails.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/CannotPublishToMavenGroupDetails.ts
var init_CannotPublishToMavenGroupDetails = __esm({
  \\"src/api/resources/remoteGen/types/CannotPublishToMavenGroupDetails.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/InsufficientPermissionsDetails.ts
var init_InsufficientPermissionsDetails = __esm({
  \\"src/api/resources/remoteGen/types/InsufficientPermissionsDetails.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/index.ts
var init_types = __esm({
  \\"src/api/resources/remoteGen/types/index.ts\\"() {
    \\"use strict\\";
    init_RemoteGenJobId();
    init_RemoteGenTaskId();
    init_GeneratorIdAndVersion();
    init_GeneratorConfig();
    init_GeneratorConfigV2();
    init_OutputMode();
    init_PublishOutputMode();
    init_PublishOutputModeV2();
    init_RegistryOverrides();
    init_GeneratorOutputs();
    init_NpmOutput();
    init_MavenOutput();
    init_PostmanOutput();
    init_GithubOutputMode();
    init_GithubPublishInfo();
    init_NpmOutputWithOptionalToken();
    init_MavenOutputWithOptionalCreds();
    init_UsernamePassword();
    init_Task();
    init_TaskStatus();
    init_FailedTaskStatus();
    init_FinishedTaskStatus();
    init_TaskLog();
    init_LogLevel();
    init_Package();
    init_PackagePublishStatus();
    init_PackageCoordinate();
    init_NpmCoordinate();
    init_MavenCoordinate();
    init_PypiCoordinate();
    init_CreateJobResponse();
    init_GeneratorsDoNotExistErrorBodyType();
    init_CannotPublishToNpmScopeDetails();
    init_CannotPublishToMavenGroupDetails();
    init_InsufficientPermissionsDetails();
  }
});

// src/api/resources/remoteGen/client/requests/index.ts
var init_requests = __esm({
  \\"src/api/resources/remoteGen/client/requests/index.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/client/createJob.ts
var createJob_exports = {};
__export(createJob_exports, {
  Error: () => Error2
});
var Error2;
var init_createJob = __esm({
  \\"src/api/resources/remoteGen/client/createJob.ts\\"() {
    \\"use strict\\";
    init_api();
    Error2 = {
      illegalApiNameError: () => {
        return {
          error: \\"IllegalApiNameError\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      generatorsDoNotExistError: (value) => {
        return {
          content: value,
          error: \\"GeneratorsDoNotExistError\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      cannotPublishToNpmScope: (value) => {
        return {
          content: value,
          error: \\"CannotPublishToNpmScope\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      cannotPublishToMavenGroup: (value) => {
        return {
          content: value,
          error: \\"CannotPublishToMavenGroup\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      insufficientPermissions: (value) => {
        return {
          content: value,
          error: \\"InsufficientPermissions\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      _unknown: (fetcherError) => {
        return {
          error: void 0,
          content: fetcherError,
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.error) {
          case \\"IllegalApiNameError\\":
            return visitor.illegalApiNameError();
          case \\"GeneratorsDoNotExistError\\":
            return visitor.generatorsDoNotExistError(value.content);
          case \\"CannotPublishToNpmScope\\":
            return visitor.cannotPublishToNpmScope(value.content);
          case \\"CannotPublishToMavenGroup\\":
            return visitor.cannotPublishToMavenGroup(value.content);
          case \\"InsufficientPermissions\\":
            return visitor.insufficientPermissions(value.content);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/client/createJobV2.ts
var createJobV2_exports = {};
__export(createJobV2_exports, {
  Error: () => Error3
});
var Error3;
var init_createJobV2 = __esm({
  \\"src/api/resources/remoteGen/client/createJobV2.ts\\"() {
    \\"use strict\\";
    init_api();
    Error3 = {
      illegalApiNameError: () => {
        return {
          error: \\"IllegalApiNameError\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      generatorsDoNotExistError: (value) => {
        return {
          content: value,
          error: \\"GeneratorsDoNotExistError\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      cannotPublishToNpmScope: (value) => {
        return {
          content: value,
          error: \\"CannotPublishToNpmScope\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      cannotPublishToMavenGroup: (value) => {
        return {
          content: value,
          error: \\"CannotPublishToMavenGroup\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      insufficientPermissions: (value) => {
        return {
          content: value,
          error: \\"InsufficientPermissions\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      _unknown: (fetcherError) => {
        return {
          error: void 0,
          content: fetcherError,
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.error) {
          case \\"IllegalApiNameError\\":
            return visitor.illegalApiNameError();
          case \\"GeneratorsDoNotExistError\\":
            return visitor.generatorsDoNotExistError(value.content);
          case \\"CannotPublishToNpmScope\\":
            return visitor.cannotPublishToNpmScope(value.content);
          case \\"CannotPublishToMavenGroup\\":
            return visitor.cannotPublishToMavenGroup(value.content);
          case \\"InsufficientPermissions\\":
            return visitor.insufficientPermissions(value.content);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/client/getJobStatus.ts
var getJobStatus_exports = {};
__export(getJobStatus_exports, {
  Error: () => Error4
});
var Error4;
var init_getJobStatus = __esm({
  \\"src/api/resources/remoteGen/client/getJobStatus.ts\\"() {
    \\"use strict\\";
    init_api();
    Error4 = {
      _unknown: (fetcherError) => {
        return {
          error: void 0,
          content: fetcherError,
          _visit: function(visitor) {
            return remoteGen_exports.getJobStatus.Error._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.error) {
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/client/index.ts
var init_client = __esm({
  \\"src/api/resources/remoteGen/client/index.ts\\"() {
    \\"use strict\\";
    init_requests();
    init_createJob();
    init_createJobV2();
    init_getJobStatus();
  }
});

// src/api/resources/remoteGen/index.ts
var remoteGen_exports = {};
__export(remoteGen_exports, {
  GithubPublishInfo: () => GithubPublishInfo,
  LogLevel: () => LogLevel,
  OutputMode: () => OutputMode,
  PackageCoordinate: () => PackageCoordinate,
  PackagePublishStatus: () => PackagePublishStatus,
  PublishOutputModeV2: () => PublishOutputModeV2,
  RemoteGenJobId: () => RemoteGenJobId,
  RemoteGenTaskId: () => RemoteGenTaskId,
  TaskStatus: () => TaskStatus,
  createJob: () => createJob_exports,
  createJobV2: () => createJobV2_exports,
  getJobStatus: () => getJobStatus_exports
});
var init_remoteGen = __esm({
  \\"src/api/resources/remoteGen/index.ts\\"() {
    \\"use strict\\";
    init_types();
    init_client();
  }
});

// src/api/resources/fiddle/client/test.ts
var test_exports = {};
__export(test_exports, {
  Error: () => Error5
});
var Error5;
var init_test = __esm({
  \\"src/api/resources/fiddle/client/test.ts\\"() {
    \\"use strict\\";
    init_api();
    Error5 = {
      _unknown: (fetcherError) => {
        return {
          error: void 0,
          content: fetcherError,
          _visit: function(visitor) {
            return fiddle_exports.test.Error._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.error) {
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/fiddle/client/index.ts
var init_client2 = __esm({
  \\"src/api/resources/fiddle/client/index.ts\\"() {
    \\"use strict\\";
    init_test();
  }
});

// src/api/resources/fiddle/index.ts
var fiddle_exports = {};
__export(fiddle_exports, {
  test: () => test_exports
});
var init_fiddle = __esm({
  \\"src/api/resources/fiddle/index.ts\\"() {
    \\"use strict\\";
    init_client2();
  }
});

// src/api/resources/health/client/status.ts
var status_exports = {};
__export(status_exports, {
  Error: () => Error6
});
var Error6;
var init_status = __esm({
  \\"src/api/resources/health/client/status.ts\\"() {
    \\"use strict\\";
    init_api();
    Error6 = {
      _unknown: (fetcherError) => {
        return {
          error: void 0,
          content: fetcherError,
          _visit: function(visitor) {
            return health_exports.status.Error._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.error) {
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/health/client/index.ts
var init_client3 = __esm({
  \\"src/api/resources/health/client/index.ts\\"() {
    \\"use strict\\";
    init_status();
  }
});

// src/api/resources/health/index.ts
var health_exports = {};
__export(health_exports, {
  status: () => status_exports
});
var init_health = __esm({
  \\"src/api/resources/health/index.ts\\"() {
    \\"use strict\\";
    init_client3();
  }
});

// src/api/resources/index.ts
var init_resources = __esm({
  \\"src/api/resources/index.ts\\"() {
    \\"use strict\\";
    init_remoteGen();
    init_types();
    init_fiddle();
    init_health();
    init_requests();
  }
});

// src/api/index.ts
var init_api = __esm({
  \\"src/api/index.ts\\"() {
    \\"use strict\\";
    init_resources();
  }
});

// src/core/fetcher/Fetcher.ts
var init_Fetcher = __esm({
  \\"src/core/fetcher/Fetcher.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/fetcher/Supplier.ts
var init_Supplier = __esm({
  \\"src/core/fetcher/Supplier.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/fetcher/index.ts
var init_fetcher = __esm({
  \\"src/core/fetcher/index.ts\\"() {
    \\"use strict\\";
    init_Fetcher();
    init_Supplier();
  }
});

// .yarn/cache/js-base64-npm-3.7.2-706fb77a0b-573f28e9a2.zip/node_modules/js-base64/base64.mjs
var _TD, _TE, b64ch, b64chs, b64tab, _fromCC, _U8Afrom;
var init_base64 = __esm({
  \\".yarn/cache/js-base64-npm-3.7.2-706fb77a0b-573f28e9a2.zip/node_modules/js-base64/base64.mjs\\"() {
    _TD = typeof TextDecoder === \\"function\\" ? new TextDecoder() : void 0;
    _TE = typeof TextEncoder === \\"function\\" ? new TextEncoder() : void 0;
    b64ch = \\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\";
    b64chs = Array.prototype.slice.call(b64ch);
    b64tab = ((a) => {
      let tab = {};
      a.forEach((c, i) => tab[c] = i);
      return tab;
    })(b64chs);
    _fromCC = String.fromCharCode.bind(String);
    _U8Afrom = typeof Uint8Array.from === \\"function\\" ? Uint8Array.from.bind(Uint8Array) : (it, fn = (x) => x) => new Uint8Array(Array.prototype.slice.call(it, 0).map(fn));
  }
});

// src/core/auth/BasicAuth.ts
var init_BasicAuth = __esm({
  \\"src/core/auth/BasicAuth.ts\\"() {
    \\"use strict\\";
    init_base64();
  }
});

// src/core/auth/BearerToken.ts
var init_BearerToken = __esm({
  \\"src/core/auth/BearerToken.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/auth/index.ts
var init_auth = __esm({
  \\"src/core/auth/index.ts\\"() {
    \\"use strict\\";
    init_BasicAuth();
    init_BearerToken();
  }
});

// src/core/schemas/Schema.ts
var SchemaType;
var init_Schema = __esm({
  \\"src/core/schemas/Schema.ts\\"() {
    \\"use strict\\";
    SchemaType = {
      DATE: \\"date\\",
      ENUM: \\"enum\\",
      LIST: \\"list\\",
      STRING_LITERAL: \\"stringLiteral\\",
      OBJECT: \\"object\\",
      ANY: \\"any\\",
      BOOLEAN: \\"boolean\\",
      NUMBER: \\"number\\",
      STRING: \\"string\\",
      UNKNOWN: \\"unknown\\",
      RECORD: \\"record\\",
      SET: \\"set\\",
      UNION: \\"union\\",
      UNDISCRIMINATED_UNION: \\"undiscriminatedUnion\\",
      OPTIONAL: \\"optional\\"
    };
  }
});

// src/core/schemas/utils/getErrorMessageForIncorrectType.ts
function getErrorMessageForIncorrectType(value, expectedType) {
  return \`Expected \${expectedType}. Received \${getTypeAsString(value)}.\`;
}
function getTypeAsString(value) {
  if (Array.isArray(value)) {
    return \\"list\\";
  }
  if (value === null) {
    return \\"null\\";
  }
  switch (typeof value) {
    case \\"string\\":
      return \`\\"\${value}\\"\`;
    case \\"number\\":
    case \\"boolean\\":
    case \\"undefined\\":
      return \`\${value}\`;
  }
  return typeof value;
}
var init_getErrorMessageForIncorrectType = __esm({
  \\"src/core/schemas/utils/getErrorMessageForIncorrectType.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/utils/maybeSkipValidation.ts
function maybeSkipValidation(schema) {
  return __spreadProps(__spreadValues({}, schema), {
    json: transformAndMaybeSkipValidation(schema.json),
    parse: transformAndMaybeSkipValidation(schema.parse)
  });
}
function transformAndMaybeSkipValidation(transform2) {
  return (value, opts) => __async(this, null, function* () {
    const transformed = yield transform2(value, opts);
    const { skipValidation = false } = opts != null ? opts : {};
    if (!transformed.ok && skipValidation) {
      console.warn(
        [
          \\"Failed to validate.\\",
          ...transformed.errors.map(
            (error) => \\"  - \\" + (error.path.length > 0 ? \`\${error.path.join(\\".\\")}: \${error.message}\` : error.message)
          )
        ].join(\\"\\\\n\\")
      );
      return {
        ok: true,
        value
      };
    } else {
      return transformed;
    }
  });
}
var init_maybeSkipValidation = __esm({
  \\"src/core/schemas/utils/maybeSkipValidation.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
function stringifyValidationError(error) {
  if (error.path.length === 0) {
    return error.message;
  }
  return \`\${error.path.join(\\" -> \\")}: \${error.message}\`;
}
var init_stringifyValidationErrors = __esm({
  \\"src/core/schemas/builders/schema-utils/stringifyValidationErrors.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/builders/schema-utils/JsonError.ts
var JsonError;
var init_JsonError = __esm({
  \\"src/core/schemas/builders/schema-utils/JsonError.ts\\"() {
    \\"use strict\\";
    init_stringifyValidationErrors();
    JsonError = class extends Error {
      constructor(errors) {
        super(errors.map(stringifyValidationError).join(\\"; \\"));
        this.errors = errors;
        Object.setPrototypeOf(this, JsonError.prototype);
      }
    };
  }
});

// src/core/schemas/builders/schema-utils/ParseError.ts
var ParseError;
var init_ParseError = __esm({
  \\"src/core/schemas/builders/schema-utils/ParseError.ts\\"() {
    \\"use strict\\";
    init_stringifyValidationErrors();
    ParseError = class extends Error {
      constructor(errors) {
        super(errors.map(stringifyValidationError).join(\\"; \\"));
        this.errors = errors;
        Object.setPrototypeOf(this, ParseError.prototype);
      }
    };
  }
});

// src/core/schemas/builders/schema-utils/getSchemaUtils.ts
function getSchemaUtils(schema) {
  return {
    optional: () => optional(schema),
    transform: (transformer) => transform(schema, transformer),
    parseOrThrow: (raw, opts) => __async(this, null, function* () {
      const parsed = yield schema.parse(raw, opts);
      if (parsed.ok) {
        return parsed.value;
      }
      throw new ParseError(parsed.errors);
    }),
    jsonOrThrow: (parsed, opts) => __async(this, null, function* () {
      const raw = yield schema.json(parsed, opts);
      if (raw.ok) {
        return raw.value;
      }
      throw new JsonError(raw.errors);
    })
  };
}
function optional(schema) {
  const baseSchema = {
    parse: (raw, opts) => {
      if (raw == null) {
        return {
          ok: true,
          value: void 0
        };
      }
      return schema.parse(raw, opts);
    },
    json: (parsed, opts) => {
      if (parsed == null) {
        return {
          ok: true,
          value: null
        };
      }
      return schema.json(parsed, opts);
    },
    getType: () => SchemaType.OPTIONAL
  };
  return __spreadValues(__spreadValues({}, baseSchema), getSchemaUtils(baseSchema));
}
function transform(schema, transformer) {
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      const parsed = yield schema.parse(raw, opts);
      if (!parsed.ok) {
        return parsed;
      }
      return {
        ok: true,
        value: transformer.transform(parsed.value)
      };
    }),
    json: (transformed, opts) => __async(this, null, function* () {
      const parsed = yield transformer.untransform(transformed);
      return schema.json(parsed, opts);
    }),
    getType: () => schema.getType()
  };
  return __spreadValues(__spreadValues({}, baseSchema), getSchemaUtils(baseSchema));
}
var init_getSchemaUtils = __esm({
  \\"src/core/schemas/builders/schema-utils/getSchemaUtils.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_JsonError();
    init_ParseError();
  }
});

// src/core/schemas/builders/schema-utils/index.ts
var init_schema_utils = __esm({
  \\"src/core/schemas/builders/schema-utils/index.ts\\"() {
    \\"use strict\\";
    init_getSchemaUtils();
    init_JsonError();
    init_ParseError();
  }
});

// src/core/schemas/builders/date/date.ts
function date() {
  const baseSchema = {
    parse: (raw, { breadcrumbsPrefix = [] } = {}) => {
      if (typeof raw !== \\"string\\") {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(raw, \\"string\\")
            }
          ]
        };
      }
      if (!ISO_8601_REGEX.test(raw)) {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(raw, \\"ISO 8601 date string\\")
            }
          ]
        };
      }
      return {
        ok: true,
        value: new Date(raw)
      };
    },
    json: (date2, { breadcrumbsPrefix = [] } = {}) => {
      if (date2 instanceof Date) {
        return {
          ok: true,
          value: date2.toISOString()
        };
      } else {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(date2, \\"Date object\\")
            }
          ]
        };
      }
    },
    getType: () => SchemaType.DATE
  };
  return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
}
var ISO_8601_REGEX;
var init_date = __esm({
  \\"src/core/schemas/builders/date/date.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_getErrorMessageForIncorrectType();
    init_maybeSkipValidation();
    init_schema_utils();
    ISO_8601_REGEX = /^([+-]?\\\\d{4}(?!\\\\d{2}\\\\b))((-?)((0[1-9]|1[0-2])(\\\\3([12]\\\\d|0[1-9]|3[01]))?|W([0-4]\\\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\\\d|[12]\\\\d{2}|3([0-5]\\\\d|6[1-6])))([T\\\\s]((([01]\\\\d|2[0-3])((:?)[0-5]\\\\d)?|24:?00)([.,]\\\\d+(?!:))?)?(\\\\17[0-5]\\\\d([.,]\\\\d+)?)?([zZ]|([+-])([01]\\\\d|2[0-3]):?([0-5]\\\\d)?)?)?)?$/;
  }
});

// src/core/schemas/builders/date/index.ts
var init_date2 = __esm({
  \\"src/core/schemas/builders/date/index.ts\\"() {
    \\"use strict\\";
    init_date();
  }
});

// src/core/schemas/utils/createIdentitySchemaCreator.ts
function createIdentitySchemaCreator(schemaType, validate) {
  return () => {
    const baseSchema = {
      parse: validate,
      json: validate,
      getType: () => schemaType
    };
    return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
  };
}
var init_createIdentitySchemaCreator = __esm({
  \\"src/core/schemas/utils/createIdentitySchemaCreator.ts\\"() {
    \\"use strict\\";
    init_schema_utils();
    init_maybeSkipValidation();
  }
});

// src/core/schemas/builders/enum/enum.ts
function enum_(values) {
  const validValues = new Set(values);
  const schemaCreator = createIdentitySchemaCreator(
    SchemaType.ENUM,
    (value, { allowUnrecognizedEnumValues, breadcrumbsPrefix = [] } = {}) => {
      if (typeof value !== \\"string\\") {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(value, \\"string\\")
            }
          ]
        };
      }
      if (!validValues.has(value) && !allowUnrecognizedEnumValues) {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(value, \\"enum\\")
            }
          ]
        };
      }
      return {
        ok: true,
        value
      };
    }
  );
  return schemaCreator();
}
var init_enum = __esm({
  \\"src/core/schemas/builders/enum/enum.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    init_getErrorMessageForIncorrectType();
  }
});

// src/core/schemas/builders/enum/index.ts
var init_enum2 = __esm({
  \\"src/core/schemas/builders/enum/index.ts\\"() {
    \\"use strict\\";
    init_enum();
  }
});

// src/core/schemas/builders/lazy/lazy.ts
function lazy(getter) {
  const baseSchema = constructLazyBaseSchema(getter);
  return __spreadValues(__spreadValues({}, baseSchema), getSchemaUtils(baseSchema));
}
function constructLazyBaseSchema(getter) {
  return {
    parse: (raw, opts) => __async(this, null, function* () {
      return (yield getMemoizedSchema(getter)).parse(raw, opts);
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      return (yield getMemoizedSchema(getter)).json(parsed, opts);
    }),
    getType: () => __async(this, null, function* () {
      return (yield getMemoizedSchema(getter)).getType();
    })
  };
}
function getMemoizedSchema(getter) {
  return __async(this, null, function* () {
    const castedGetter = getter;
    if (castedGetter.__zurg_memoized == null) {
      castedGetter.__zurg_memoized = yield getter();
    }
    return castedGetter.__zurg_memoized;
  });
}
var init_lazy = __esm({
  \\"src/core/schemas/builders/lazy/lazy.ts\\"() {
    \\"use strict\\";
    init_schema_utils();
  }
});

// src/core/schemas/utils/entries.ts
function entries(object2) {
  return Object.entries(object2);
}
var init_entries = __esm({
  \\"src/core/schemas/utils/entries.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/utils/filterObject.ts
function filterObject(obj, keysToInclude) {
  const keysToIncludeSet = new Set(keysToInclude);
  return Object.entries(obj).reduce((acc, [key, value]) => {
    if (keysToIncludeSet.has(key)) {
      acc[key] = value;
    }
    return acc;
  }, {});
}
var init_filterObject = __esm({
  \\"src/core/schemas/utils/filterObject.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/utils/isPlainObject.ts
function isPlainObject(value) {
  if (typeof value !== \\"object\\" || value === null) {
    return false;
  }
  if (Object.getPrototypeOf(value) === null) {
    return true;
  }
  let proto = value;
  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }
  return Object.getPrototypeOf(value) === proto;
}
var init_isPlainObject = __esm({
  \\"src/core/schemas/utils/isPlainObject.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/utils/keys.ts
function keys(object2) {
  return Object.keys(object2);
}
var init_keys = __esm({
  \\"src/core/schemas/utils/keys.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/utils/partition.ts
function partition(items, predicate) {
  const trueItems = [], falseItems = [];
  for (const item of items) {
    if (predicate(item)) {
      trueItems.push(item);
    } else {
      falseItems.push(item);
    }
  }
  return [trueItems, falseItems];
}
var init_partition = __esm({
  \\"src/core/schemas/utils/partition.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/builders/object-like/getObjectLikeUtils.ts
function getObjectLikeUtils(schema) {
  return {
    withParsedProperties: (properties) => withParsedProperties(schema, properties)
  };
}
function withParsedProperties(objectLike, properties) {
  const objectSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      const parsedObject = yield objectLike.parse(raw, opts);
      if (!parsedObject.ok) {
        return parsedObject;
      }
      const additionalProperties = Object.entries(properties).reduce(
        (processed, [key, value]) => {
          return __spreadProps(__spreadValues({}, processed), {
            [key]: typeof value === \\"function\\" ? value(parsedObject.value) : value
          });
        },
        {}
      );
      return {
        ok: true,
        value: __spreadValues(__spreadValues({}, parsedObject.value), additionalProperties)
      };
    }),
    json: (parsed, opts) => {
      var _a;
      if (!isPlainObject(parsed)) {
        return {
          ok: false,
          errors: [
            {
              path: (_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [],
              message: getErrorMessageForIncorrectType(parsed, \\"object\\")
            }
          ]
        };
      }
      const addedPropertyKeys = new Set(Object.keys(properties));
      const parsedWithoutAddedProperties = filterObject(
        parsed,
        Object.keys(parsed).filter((key) => !addedPropertyKeys.has(key))
      );
      return objectLike.json(parsedWithoutAddedProperties, opts);
    },
    getType: () => objectLike.getType()
  };
  return __spreadValues(__spreadValues(__spreadValues({}, objectSchema), getSchemaUtils(objectSchema)), getObjectLikeUtils(objectSchema));
}
var init_getObjectLikeUtils = __esm({
  \\"src/core/schemas/builders/object-like/getObjectLikeUtils.ts\\"() {
    \\"use strict\\";
    init_filterObject();
    init_getErrorMessageForIncorrectType();
    init_isPlainObject();
    init_schema_utils();
  }
});

// src/core/schemas/builders/object-like/index.ts
var init_object_like = __esm({
  \\"src/core/schemas/builders/object-like/index.ts\\"() {
    \\"use strict\\";
    init_getObjectLikeUtils();
  }
});

// src/core/schemas/builders/object/property.ts
function property(rawKey, valueSchema) {
  return {
    rawKey,
    valueSchema,
    isProperty: true
  };
}
function isProperty(maybeProperty) {
  return maybeProperty.isProperty;
}
var init_property = __esm({
  \\"src/core/schemas/builders/object/property.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/builders/object/object.ts
function object(schemas) {
  const baseSchema = {
    _getRawProperties: () => Promise.resolve(
      Object.entries(schemas).map(
        ([parsedKey, propertySchema]) => isProperty(propertySchema) ? propertySchema.rawKey : parsedKey
      )
    ),
    _getParsedProperties: () => Promise.resolve(keys(schemas)),
    parse: (raw, opts) => __async(this, null, function* () {
      const rawKeyToProperty = {};
      const requiredKeys = [];
      for (const [parsedKey, schemaOrObjectProperty] of entries(schemas)) {
        const rawKey = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.rawKey : parsedKey;
        const valueSchema = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.valueSchema : schemaOrObjectProperty;
        const property2 = {
          rawKey,
          parsedKey,
          valueSchema
        };
        rawKeyToProperty[rawKey] = property2;
        if (yield isSchemaRequired(valueSchema)) {
          requiredKeys.push(rawKey);
        }
      }
      return validateAndTransformObject({
        value: raw,
        requiredKeys,
        getProperty: (rawKey) => {
          const property2 = rawKeyToProperty[rawKey];
          if (property2 == null) {
            return void 0;
          }
          return {
            transformedKey: property2.parsedKey,
            transform: (propertyValue) => {
              var _a;
              return property2.valueSchema.parse(propertyValue, __spreadProps(__spreadValues({}, opts), {
                breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], rawKey]
              }));
            }
          };
        },
        unrecognizedObjectKeys: opts == null ? void 0 : opts.unrecognizedObjectKeys,
        skipValidation: opts == null ? void 0 : opts.skipValidation,
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      const requiredKeys = [];
      for (const [parsedKey, schemaOrObjectProperty] of entries(schemas)) {
        const valueSchema = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.valueSchema : schemaOrObjectProperty;
        if (yield isSchemaRequired(valueSchema)) {
          requiredKeys.push(parsedKey);
        }
      }
      return validateAndTransformObject({
        value: parsed,
        requiredKeys,
        getProperty: (parsedKey) => {
          const property2 = schemas[parsedKey];
          if (property2 == null) {
            return void 0;
          }
          if (isProperty(property2)) {
            return {
              transformedKey: property2.rawKey,
              transform: (propertyValue) => {
                var _a;
                return property2.valueSchema.json(propertyValue, __spreadProps(__spreadValues({}, opts), {
                  breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], parsedKey]
                }));
              }
            };
          } else {
            return {
              transformedKey: parsedKey,
              transform: (propertyValue) => {
                var _a;
                return property2.json(propertyValue, __spreadProps(__spreadValues({}, opts), {
                  breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], parsedKey]
                }));
              }
            };
          }
        },
        unrecognizedObjectKeys: opts == null ? void 0 : opts.unrecognizedObjectKeys,
        skipValidation: opts == null ? void 0 : opts.skipValidation,
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    getType: () => SchemaType.OBJECT
  };
  return __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema)), getObjectLikeUtils(baseSchema)), getObjectUtils(baseSchema));
}
function validateAndTransformObject(_0) {
  return __async(this, arguments, function* ({
    value,
    requiredKeys,
    getProperty,
    unrecognizedObjectKeys = \\"fail\\",
    skipValidation = false,
    breadcrumbsPrefix = []
  }) {
    if (!isPlainObject(value)) {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: getErrorMessageForIncorrectType(value, \\"object\\")
          }
        ]
      };
    }
    const missingRequiredKeys = new Set(requiredKeys);
    const errors = [];
    const transformed = {};
    for (const [preTransformedKey, preTransformedItemValue] of Object.entries(value)) {
      const property2 = getProperty(preTransformedKey);
      if (property2 != null) {
        missingRequiredKeys.delete(preTransformedKey);
        const value2 = yield property2.transform(preTransformedItemValue);
        if (value2.ok) {
          transformed[property2.transformedKey] = value2.value;
        } else {
          transformed[preTransformedKey] = preTransformedItemValue;
          errors.push(...value2.errors);
        }
      } else {
        switch (unrecognizedObjectKeys) {
          case \\"fail\\":
            errors.push({
              path: [...breadcrumbsPrefix, preTransformedKey],
              message: \`Unexpected key \\"\${preTransformedKey}\\"\`
            });
            break;
          case \\"strip\\":
            break;
          case \\"passthrough\\":
            transformed[preTransformedKey] = preTransformedItemValue;
            break;
        }
      }
    }
    errors.push(
      ...requiredKeys.filter((key) => missingRequiredKeys.has(key)).map((key) => ({
        path: breadcrumbsPrefix,
        message: \`Missing required key \\"\${key}\\"\`
      }))
    );
    if (errors.length === 0 || skipValidation) {
      return {
        ok: true,
        value: transformed
      };
    } else {
      return {
        ok: false,
        errors
      };
    }
  });
}
function getObjectUtils(schema) {
  return {
    extend: (extension) => {
      const baseSchema = {
        _getParsedProperties: () => __async(this, null, function* () {
          return [
            ...yield schema._getParsedProperties(),
            ...yield extension._getParsedProperties()
          ];
        }),
        _getRawProperties: () => __async(this, null, function* () {
          return [
            ...yield schema._getRawProperties(),
            ...yield extension._getRawProperties()
          ];
        }),
        parse: (raw, opts) => __async(this, null, function* () {
          return validateAndTransformExtendedObject({
            extensionKeys: yield extension._getRawProperties(),
            value: raw,
            transformBase: (rawBase) => schema.parse(rawBase, opts),
            transformExtension: (rawExtension) => extension.parse(rawExtension, opts)
          });
        }),
        json: (parsed, opts) => __async(this, null, function* () {
          return validateAndTransformExtendedObject({
            extensionKeys: yield extension._getParsedProperties(),
            value: parsed,
            transformBase: (parsedBase) => schema.json(parsedBase, opts),
            transformExtension: (parsedExtension) => extension.json(parsedExtension, opts)
          });
        }),
        getType: () => SchemaType.OBJECT
      };
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, baseSchema), getSchemaUtils(baseSchema)), getObjectLikeUtils(baseSchema)), getObjectUtils(baseSchema));
    }
  };
}
function validateAndTransformExtendedObject(_0) {
  return __async(this, arguments, function* ({
    extensionKeys,
    value,
    transformBase,
    transformExtension
  }) {
    const extensionPropertiesSet = new Set(extensionKeys);
    const [extensionProperties, baseProperties] = partition(
      keys(value),
      (key) => extensionPropertiesSet.has(key)
    );
    const transformedBase = yield transformBase(filterObject(value, baseProperties));
    const transformedExtension = yield transformExtension(filterObject(value, extensionProperties));
    if (transformedBase.ok && transformedExtension.ok) {
      return {
        ok: true,
        value: __spreadValues(__spreadValues({}, transformedBase.value), transformedExtension.value)
      };
    } else {
      return {
        ok: false,
        errors: [
          ...transformedBase.ok ? [] : transformedBase.errors,
          ...transformedExtension.ok ? [] : transformedExtension.errors
        ]
      };
    }
  });
}
function isSchemaRequired(schema) {
  return __async(this, null, function* () {
    return !(yield isSchemaOptional(schema));
  });
}
function isSchemaOptional(schema) {
  return __async(this, null, function* () {
    switch (yield schema.getType()) {
      case SchemaType.ANY:
      case SchemaType.UNKNOWN:
      case SchemaType.OPTIONAL:
        return true;
      default:
        return false;
    }
  });
}
var init_object = __esm({
  \\"src/core/schemas/builders/object/object.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_entries();
    init_filterObject();
    init_getErrorMessageForIncorrectType();
    init_isPlainObject();
    init_keys();
    init_maybeSkipValidation();
    init_partition();
    init_object_like();
    init_schema_utils();
    init_property();
  }
});

// src/core/schemas/builders/object/index.ts
var init_object2 = __esm({
  \\"src/core/schemas/builders/object/index.ts\\"() {
    \\"use strict\\";
    init_object();
    init_property();
  }
});

// src/core/schemas/builders/lazy/lazyObject.ts
function lazyObject(getter) {
  const baseSchema = __spreadProps(__spreadValues({}, constructLazyBaseSchema(getter)), {
    _getRawProperties: () => __async(this, null, function* () {
      return (yield getMemoizedSchema(getter))._getRawProperties();
    }),
    _getParsedProperties: () => __async(this, null, function* () {
      return (yield getMemoizedSchema(getter))._getParsedProperties();
    })
  });
  return __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, baseSchema), getSchemaUtils(baseSchema)), getObjectLikeUtils(baseSchema)), getObjectUtils(baseSchema));
}
var init_lazyObject = __esm({
  \\"src/core/schemas/builders/lazy/lazyObject.ts\\"() {
    \\"use strict\\";
    init_object2();
    init_object_like();
    init_schema_utils();
    init_lazy();
  }
});

// src/core/schemas/builders/lazy/index.ts
var init_lazy2 = __esm({
  \\"src/core/schemas/builders/lazy/index.ts\\"() {
    \\"use strict\\";
    init_lazy();
    init_lazyObject();
  }
});

// src/core/schemas/builders/list/list.ts
function list(schema) {
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      return validateAndTransformArray(
        raw,
        (item, index) => {
          var _a;
          return schema.parse(item, __spreadProps(__spreadValues({}, opts), {
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`[\${index}]\`]
          }));
        }
      );
    }),
    json: (parsed, opts) => validateAndTransformArray(
      parsed,
      (item, index) => {
        var _a;
        return schema.json(item, __spreadProps(__spreadValues({}, opts), {
          breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`[\${index}]\`]
        }));
      }
    ),
    getType: () => SchemaType.LIST
  };
  return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
}
function validateAndTransformArray(value, transformItem) {
  return __async(this, null, function* () {
    if (!Array.isArray(value)) {
      return {
        ok: false,
        errors: [
          {
            message: getErrorMessageForIncorrectType(value, \\"list\\"),
            path: []
          }
        ]
      };
    }
    const maybeValidItems = yield Promise.all(value.map((item, index) => transformItem(item, index)));
    return maybeValidItems.reduce(
      (acc, item) => {
        if (acc.ok && item.ok) {
          return {
            ok: true,
            value: [...acc.value, item.value]
          };
        }
        const errors = [];
        if (!acc.ok) {
          errors.push(...acc.errors);
        }
        if (!item.ok) {
          errors.push(...item.errors);
        }
        return {
          ok: false,
          errors
        };
      },
      { ok: true, value: [] }
    );
  });
}
var init_list = __esm({
  \\"src/core/schemas/builders/list/list.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_getErrorMessageForIncorrectType();
    init_maybeSkipValidation();
    init_schema_utils();
  }
});

// src/core/schemas/builders/list/index.ts
var init_list2 = __esm({
  \\"src/core/schemas/builders/list/index.ts\\"() {
    \\"use strict\\";
    init_list();
  }
});

// src/core/schemas/builders/literals/stringLiteral.ts
function stringLiteral(literal) {
  const schemaCreator = createIdentitySchemaCreator(
    SchemaType.STRING_LITERAL,
    (value, { breadcrumbsPrefix = [] } = {}) => {
      if (value === literal) {
        return {
          ok: true,
          value: literal
        };
      } else {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(value, \`\\"\${literal}\\"\`)
            }
          ]
        };
      }
    }
  );
  return schemaCreator();
}
var init_stringLiteral = __esm({
  \\"src/core/schemas/builders/literals/stringLiteral.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    init_getErrorMessageForIncorrectType();
  }
});

// src/core/schemas/builders/literals/index.ts
var init_literals = __esm({
  \\"src/core/schemas/builders/literals/index.ts\\"() {
    \\"use strict\\";
    init_stringLiteral();
  }
});

// src/core/schemas/builders/primitives/any.ts
var any;
var init_any = __esm({
  \\"src/core/schemas/builders/primitives/any.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    any = createIdentitySchemaCreator(SchemaType.ANY, (value) => ({ ok: true, value }));
  }
});

// src/core/schemas/builders/primitives/boolean.ts
var boolean;
var init_boolean = __esm({
  \\"src/core/schemas/builders/primitives/boolean.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    init_getErrorMessageForIncorrectType();
    boolean = createIdentitySchemaCreator(
      SchemaType.BOOLEAN,
      (value, { breadcrumbsPrefix = [] } = {}) => {
        if (typeof value === \\"boolean\\") {
          return {
            ok: true,
            value
          };
        } else {
          return {
            ok: false,
            errors: [
              {
                path: breadcrumbsPrefix,
                message: getErrorMessageForIncorrectType(value, \\"boolean\\")
              }
            ]
          };
        }
      }
    );
  }
});

// src/core/schemas/builders/primitives/number.ts
var number;
var init_number = __esm({
  \\"src/core/schemas/builders/primitives/number.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    init_getErrorMessageForIncorrectType();
    number = createIdentitySchemaCreator(
      SchemaType.NUMBER,
      (value, { breadcrumbsPrefix = [] } = {}) => {
        if (typeof value === \\"number\\") {
          return {
            ok: true,
            value
          };
        } else {
          return {
            ok: false,
            errors: [
              {
                path: breadcrumbsPrefix,
                message: getErrorMessageForIncorrectType(value, \\"number\\")
              }
            ]
          };
        }
      }
    );
  }
});

// src/core/schemas/builders/primitives/string.ts
var string;
var init_string = __esm({
  \\"src/core/schemas/builders/primitives/string.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    init_getErrorMessageForIncorrectType();
    string = createIdentitySchemaCreator(
      SchemaType.STRING,
      (value, { breadcrumbsPrefix = [] } = {}) => {
        if (typeof value === \\"string\\") {
          return {
            ok: true,
            value
          };
        } else {
          return {
            ok: false,
            errors: [
              {
                path: breadcrumbsPrefix,
                message: getErrorMessageForIncorrectType(value, \\"string\\")
              }
            ]
          };
        }
      }
    );
  }
});

// src/core/schemas/builders/primitives/unknown.ts
var unknown;
var init_unknown = __esm({
  \\"src/core/schemas/builders/primitives/unknown.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    unknown = createIdentitySchemaCreator(SchemaType.UNKNOWN, (value) => ({ ok: true, value }));
  }
});

// src/core/schemas/builders/primitives/index.ts
var init_primitives = __esm({
  \\"src/core/schemas/builders/primitives/index.ts\\"() {
    \\"use strict\\";
    init_any();
    init_boolean();
    init_number();
    init_string();
    init_unknown();
  }
});

// src/core/schemas/builders/record/record.ts
function record(keySchema, valueSchema) {
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      return validateAndTransformRecord({
        value: raw,
        isKeyNumeric: (yield keySchema.getType()) === SchemaType.NUMBER,
        transformKey: (key) => {
          var _a;
          return keySchema.parse(key, __spreadProps(__spreadValues({}, opts), {
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`\${key} (key)\`]
          }));
        },
        transformValue: (value, key) => {
          var _a;
          return valueSchema.parse(value, __spreadProps(__spreadValues({}, opts), {
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`\${key}\`]
          }));
        },
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      return validateAndTransformRecord({
        value: parsed,
        isKeyNumeric: (yield keySchema.getType()) === SchemaType.NUMBER,
        transformKey: (key) => {
          var _a;
          return keySchema.json(key, __spreadProps(__spreadValues({}, opts), {
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`\${key} (key)\`]
          }));
        },
        transformValue: (value, key) => {
          var _a;
          return valueSchema.json(value, __spreadProps(__spreadValues({}, opts), {
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`\${key}\`]
          }));
        },
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    getType: () => SchemaType.RECORD
  };
  return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
}
function validateAndTransformRecord(_0) {
  return __async(this, arguments, function* ({
    value,
    isKeyNumeric,
    transformKey,
    transformValue,
    breadcrumbsPrefix = []
  }) {
    if (!isPlainObject(value)) {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: getErrorMessageForIncorrectType(value, \\"object\\")
          }
        ]
      };
    }
    return entries(value).reduce(
      (_02, _1) => __async(this, [_02, _1], function* (accPromise, [stringKey, value2]) {
        if (value2 == null) {
          return accPromise;
        }
        const acc = yield accPromise;
        let key = stringKey;
        if (isKeyNumeric) {
          const numberKey = stringKey.length > 0 ? Number(stringKey) : NaN;
          if (!isNaN(numberKey)) {
            key = numberKey;
          }
        }
        const transformedKey = yield transformKey(key);
        const transformedValue = yield transformValue(value2, key);
        if (acc.ok && transformedKey.ok && transformedValue.ok) {
          return {
            ok: true,
            value: __spreadProps(__spreadValues({}, acc.value), {
              [transformedKey.value]: transformedValue.value
            })
          };
        }
        const errors = [];
        if (!acc.ok) {
          errors.push(...acc.errors);
        }
        if (!transformedKey.ok) {
          errors.push(...transformedKey.errors);
        }
        if (!transformedValue.ok) {
          errors.push(...transformedValue.errors);
        }
        return {
          ok: false,
          errors
        };
      }),
      Promise.resolve({ ok: true, value: {} })
    );
  });
}
var init_record = __esm({
  \\"src/core/schemas/builders/record/record.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_entries();
    init_getErrorMessageForIncorrectType();
    init_isPlainObject();
    init_maybeSkipValidation();
    init_schema_utils();
  }
});

// src/core/schemas/builders/record/index.ts
var init_record2 = __esm({
  \\"src/core/schemas/builders/record/index.ts\\"() {
    \\"use strict\\";
    init_record();
  }
});

// src/core/schemas/builders/set/set.ts
function set(schema) {
  const listSchema = list(schema);
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      const parsedList = yield listSchema.parse(raw, opts);
      if (parsedList.ok) {
        return {
          ok: true,
          value: new Set(parsedList.value)
        };
      } else {
        return parsedList;
      }
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      var _a;
      if (!(parsed instanceof Set)) {
        return {
          ok: false,
          errors: [
            {
              path: (_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [],
              message: getErrorMessageForIncorrectType(parsed, \\"Set\\")
            }
          ]
        };
      }
      const jsonList = yield listSchema.json([...parsed], opts);
      return jsonList;
    }),
    getType: () => SchemaType.SET
  };
  return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
}
var init_set = __esm({
  \\"src/core/schemas/builders/set/set.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_getErrorMessageForIncorrectType();
    init_maybeSkipValidation();
    init_list2();
    init_schema_utils();
  }
});

// src/core/schemas/builders/set/index.ts
var init_set2 = __esm({
  \\"src/core/schemas/builders/set/index.ts\\"() {
    \\"use strict\\";
    init_set();
  }
});

// src/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
function undiscriminatedUnion(schemas) {
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      return validateAndTransformUndiscriminatedUnion(
        (schema) => schema.parse(raw, opts),
        schemas
      );
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      return validateAndTransformUndiscriminatedUnion(
        (schema) => schema.json(parsed, opts),
        schemas
      );
    }),
    getType: () => SchemaType.UNDISCRIMINATED_UNION
  };
  return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
}
function validateAndTransformUndiscriminatedUnion(transform2, schemas) {
  return __async(this, null, function* () {
    const errors = [];
    for (const [index, schema] of schemas.entries()) {
      const transformed = yield transform2(schema);
      if (transformed.ok) {
        return transformed;
      } else {
        for (const error of errors) {
          errors.push({
            path: error.path,
            message: \`[Variant \${index}] \${error.message}\`
          });
        }
      }
    }
    return {
      ok: false,
      errors
    };
  });
}
var init_undiscriminatedUnion = __esm({
  \\"src/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_maybeSkipValidation();
    init_schema_utils();
  }
});

// src/core/schemas/builders/undiscriminated-union/index.ts
var init_undiscriminated_union = __esm({
  \\"src/core/schemas/builders/undiscriminated-union/index.ts\\"() {
    \\"use strict\\";
    init_undiscriminatedUnion();
  }
});

// src/core/schemas/builders/union/discriminant.ts
function discriminant(parsedDiscriminant, rawDiscriminant) {
  return {
    parsedDiscriminant,
    rawDiscriminant
  };
}
var init_discriminant = __esm({
  \\"src/core/schemas/builders/union/discriminant.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/builders/union/union.ts
function union(discriminant2, union2) {
  const rawDiscriminant = typeof discriminant2 === \\"string\\" ? discriminant2 : discriminant2.rawDiscriminant;
  const parsedDiscriminant = typeof discriminant2 === \\"string\\" ? discriminant2 : discriminant2.parsedDiscriminant;
  const discriminantValueSchema = enum_(keys(union2));
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      return transformAndValidateUnion({
        value: raw,
        discriminant: rawDiscriminant,
        transformedDiscriminant: parsedDiscriminant,
        transformDiscriminantValue: (discriminantValue) => {
          var _a;
          return discriminantValueSchema.parse(discriminantValue, {
            allowUnrecognizedEnumValues: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], rawDiscriminant]
          });
        },
        getAdditionalPropertiesSchema: (discriminantValue) => union2[discriminantValue],
        allowUnrecognizedUnionMembers: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
        transformAdditionalProperties: (additionalProperties, additionalPropertiesSchema) => additionalPropertiesSchema.parse(additionalProperties, opts),
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      return transformAndValidateUnion({
        value: parsed,
        discriminant: parsedDiscriminant,
        transformedDiscriminant: rawDiscriminant,
        transformDiscriminantValue: (discriminantValue) => {
          var _a;
          return discriminantValueSchema.json(discriminantValue, {
            allowUnrecognizedEnumValues: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], parsedDiscriminant]
          });
        },
        getAdditionalPropertiesSchema: (discriminantValue) => union2[discriminantValue],
        allowUnrecognizedUnionMembers: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
        transformAdditionalProperties: (additionalProperties, additionalPropertiesSchema) => additionalPropertiesSchema.json(additionalProperties, opts),
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    getType: () => SchemaType.UNION
  };
  return __spreadValues(__spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema)), getObjectLikeUtils(baseSchema));
}
function transformAndValidateUnion(_0) {
  return __async(this, arguments, function* ({
    value,
    discriminant: discriminant2,
    transformedDiscriminant,
    transformDiscriminantValue,
    getAdditionalPropertiesSchema,
    allowUnrecognizedUnionMembers = false,
    transformAdditionalProperties,
    breadcrumbsPrefix = []
  }) {
    if (!isPlainObject(value)) {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: getErrorMessageForIncorrectType(value, \\"object\\")
          }
        ]
      };
    }
    const _a = value, { [discriminant2]: discriminantValue } = _a, additionalProperties = __objRest(_a, [__restKey(discriminant2)]);
    if (discriminantValue == null) {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: \`Missing discriminant (\\"\${discriminant2}\\")\`
          }
        ]
      };
    }
    const transformedDiscriminantValue = yield transformDiscriminantValue(discriminantValue);
    if (!transformedDiscriminantValue.ok) {
      return {
        ok: false,
        errors: transformedDiscriminantValue.errors
      };
    }
    const additionalPropertiesSchema = getAdditionalPropertiesSchema(transformedDiscriminantValue.value);
    if (additionalPropertiesSchema == null) {
      if (allowUnrecognizedUnionMembers) {
        return {
          ok: true,
          value: __spreadValues({
            [transformedDiscriminant]: transformedDiscriminantValue.value
          }, additionalProperties)
        };
      } else {
        return {
          ok: false,
          errors: [
            {
              path: [...breadcrumbsPrefix, discriminant2],
              message: \\"Unexpected discriminant value\\"
            }
          ]
        };
      }
    }
    const transformedAdditionalProperties = yield transformAdditionalProperties(
      additionalProperties,
      additionalPropertiesSchema
    );
    if (!transformedAdditionalProperties.ok) {
      return transformedAdditionalProperties;
    }
    return {
      ok: true,
      value: __spreadValues({
        [transformedDiscriminant]: discriminantValue
      }, transformedAdditionalProperties.value)
    };
  });
}
var init_union = __esm({
  \\"src/core/schemas/builders/union/union.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_getErrorMessageForIncorrectType();
    init_isPlainObject();
    init_keys();
    init_maybeSkipValidation();
    init_enum2();
    init_object_like();
    init_schema_utils();
  }
});

// src/core/schemas/builders/union/index.ts
var init_union2 = __esm({
  \\"src/core/schemas/builders/union/index.ts\\"() {
    \\"use strict\\";
    init_discriminant();
    init_union();
  }
});

// src/core/schemas/builders/index.ts
var init_builders = __esm({
  \\"src/core/schemas/builders/index.ts\\"() {
    \\"use strict\\";
    init_date2();
    init_enum2();
    init_lazy2();
    init_list2();
    init_literals();
    init_object2();
    init_object_like();
    init_primitives();
    init_record2();
    init_schema_utils();
    init_set2();
    init_undiscriminated_union();
    init_union2();
  }
});

// src/core/schemas/index.ts
var schemas_exports = {};
__export(schemas_exports, {
  JsonError: () => JsonError,
  ParseError: () => ParseError,
  any: () => any,
  boolean: () => boolean,
  date: () => date,
  discriminant: () => discriminant,
  enum_: () => enum_,
  getObjectLikeUtils: () => getObjectLikeUtils,
  getObjectUtils: () => getObjectUtils,
  getSchemaUtils: () => getSchemaUtils,
  isProperty: () => isProperty,
  lazy: () => lazy,
  lazyObject: () => lazyObject,
  list: () => list,
  number: () => number,
  object: () => object,
  optional: () => optional,
  property: () => property,
  record: () => record,
  set: () => set,
  string: () => string,
  stringLiteral: () => stringLiteral,
  transform: () => transform,
  undiscriminatedUnion: () => undiscriminatedUnion,
  union: () => union,
  unknown: () => unknown,
  withParsedProperties: () => withParsedProperties
});
var init_schemas = __esm({
  \\"src/core/schemas/index.ts\\"() {
    \\"use strict\\";
    init_builders();
  }
});

// src/core/index.ts
var init_core = __esm({
  \\"src/core/index.ts\\"() {
    \\"use strict\\";
    init_fetcher();
    init_auth();
    init_schemas();
  }
});

// src/serialization/resources/remoteGen/types/RemoteGenJobId.ts
var RemoteGenJobId2;
var init_RemoteGenJobId2 = __esm({
  \\"src/serialization/resources/remoteGen/types/RemoteGenJobId.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    RemoteGenJobId2 = schemas_exports.string().transform({
      transform: RemoteGenJobId,
      untransform: (value) => value
    });
  }
});

// src/serialization/resources/remoteGen/types/RemoteGenTaskId.ts
var RemoteGenTaskId2;
var init_RemoteGenTaskId2 = __esm({
  \\"src/serialization/resources/remoteGen/types/RemoteGenTaskId.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    RemoteGenTaskId2 = schemas_exports.string().transform({
      transform: RemoteGenTaskId,
      untransform: (value) => value
    });
  }
});

// src/serialization/resources/remoteGen/types/GeneratorIdAndVersion.ts
var GeneratorIdAndVersion;
var init_GeneratorIdAndVersion2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GeneratorIdAndVersion.ts\\"() {
    \\"use strict\\";
    init_core();
    GeneratorIdAndVersion = schemas_exports.object({
      id: schemas_exports.string(),
      version: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/GeneratorConfig.ts
var GeneratorConfig;
var init_GeneratorConfig2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GeneratorConfig.ts\\"() {
    \\"use strict\\";
    init_core();
    GeneratorConfig = schemas_exports.object({
      id: schemas_exports.string(),
      version: schemas_exports.string(),
      customConfig: schemas_exports.unknown(),
      willDownloadFiles: schemas_exports.boolean(),
      outputs: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorOutputs;
      }))
    });
  }
});

// src/serialization/resources/remoteGen/types/GeneratorConfigV2.ts
var GeneratorConfigV2;
var init_GeneratorConfigV22 = __esm({
  \\"src/serialization/resources/remoteGen/types/GeneratorConfigV2.ts\\"() {
    \\"use strict\\";
    init_core();
    GeneratorConfigV2 = schemas_exports.object({
      id: schemas_exports.string(),
      version: schemas_exports.string(),
      customConfig: schemas_exports.unknown(),
      outputMode: schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).OutputMode;
      }))
    });
  }
});

// src/serialization/resources/remoteGen/types/OutputMode.ts
var OutputMode2;
var init_OutputMode2 = __esm({
  \\"src/serialization/resources/remoteGen/types/OutputMode.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    OutputMode2 = schemas_exports.union(\\"type\\", {
      publish: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).PublishOutputMode;
      })),
      publishV2: schemas_exports.object({
        publishV2: schemas_exports.lazy(() => __async(void 0, null, function* () {
          return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).PublishOutputModeV2;
        }))
      }),
      downloadFiles: schemas_exports.object({}),
      github: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GithubOutputMode;
      }))
    }).transform({
      transform: (value) => {
        switch (value.type) {
          case \\"publish\\":
            return OutputMode.publish(value);
          case \\"publishV2\\":
            return OutputMode.publishV2(value.publishV2);
          case \\"downloadFiles\\":
            return OutputMode.downloadFiles();
          case \\"github\\":
            return OutputMode.github(value);
          default:
            return OutputMode._unknown(value);
        }
      },
      untransform: (_a) => {
        var _b = _a, { _visit } = _b, value = __objRest(_b, [\\"_visit\\"]);
        return value;
      }
    });
  }
});

// src/serialization/resources/remoteGen/types/PublishOutputMode.ts
var PublishOutputMode;
var init_PublishOutputMode2 = __esm({
  \\"src/serialization/resources/remoteGen/types/PublishOutputMode.ts\\"() {
    \\"use strict\\";
    init_core();
    PublishOutputMode = schemas_exports.object({
      registryOverrides: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).RegistryOverrides;
      }))
    });
  }
});

// src/serialization/resources/remoteGen/types/PublishOutputModeV2.ts
var PublishOutputModeV22;
var init_PublishOutputModeV22 = __esm({
  \\"src/serialization/resources/remoteGen/types/PublishOutputModeV2.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    PublishOutputModeV22 = schemas_exports.union(\\"type\\", {
      npmOverride: schemas_exports.object({
        npmOverride: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
          return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).NpmOutput;
        })).optional()
      }),
      mavenOverride: schemas_exports.object({
        mavenOverride: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
          return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).MavenOutput;
        })).optional()
      }),
      postman: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).PostmanOutput;
      }))
    }).transform({
      transform: (value) => {
        switch (value.type) {
          case \\"npmOverride\\":
            return PublishOutputModeV2.npmOverride(value.npmOverride);
          case \\"mavenOverride\\":
            return PublishOutputModeV2.mavenOverride(value.mavenOverride);
          case \\"postman\\":
            return PublishOutputModeV2.postman(value);
          default:
            return PublishOutputModeV2._unknown(value);
        }
      },
      untransform: (_a) => {
        var _b = _a, { _visit } = _b, value = __objRest(_b, [\\"_visit\\"]);
        return value;
      }
    });
  }
});

// src/serialization/resources/remoteGen/types/RegistryOverrides.ts
var RegistryOverrides;
var init_RegistryOverrides2 = __esm({
  \\"src/serialization/resources/remoteGen/types/RegistryOverrides.ts\\"() {
    \\"use strict\\";
    init_core();
    RegistryOverrides = schemas_exports.object({
      npm: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).NpmOutput;
      })).optional(),
      maven: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).MavenOutput;
      })).optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/GeneratorOutputs.ts
var GeneratorOutputs;
var init_GeneratorOutputs2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GeneratorOutputs.ts\\"() {
    \\"use strict\\";
    init_core();
    GeneratorOutputs = schemas_exports.object({
      npm: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).NpmOutput;
      })).optional(),
      maven: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).MavenOutput;
      })).optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/NpmOutput.ts
var NpmOutput;
var init_NpmOutput2 = __esm({
  \\"src/serialization/resources/remoteGen/types/NpmOutput.ts\\"() {
    \\"use strict\\";
    init_core();
    NpmOutput = schemas_exports.object({
      registryUrl: schemas_exports.string(),
      packageName: schemas_exports.string(),
      token: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/MavenOutput.ts
var MavenOutput;
var init_MavenOutput2 = __esm({
  \\"src/serialization/resources/remoteGen/types/MavenOutput.ts\\"() {
    \\"use strict\\";
    init_core();
    MavenOutput = schemas_exports.object({
      registryUrl: schemas_exports.string(),
      username: schemas_exports.string(),
      password: schemas_exports.string(),
      coordinate: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/PostmanOutput.ts
var PostmanOutput;
var init_PostmanOutput2 = __esm({
  \\"src/serialization/resources/remoteGen/types/PostmanOutput.ts\\"() {
    \\"use strict\\";
    init_core();
    PostmanOutput = schemas_exports.object({
      apiKey: schemas_exports.string(),
      workspaceId: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/GithubOutputMode.ts
var GithubOutputMode;
var init_GithubOutputMode2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GithubOutputMode.ts\\"() {
    \\"use strict\\";
    init_core();
    GithubOutputMode = schemas_exports.object({
      owner: schemas_exports.string(),
      repo: schemas_exports.string(),
      publishInfo: schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GithubPublishInfo;
      })).optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/GithubPublishInfo.ts
var GithubPublishInfo2;
var init_GithubPublishInfo2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GithubPublishInfo.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    GithubPublishInfo2 = schemas_exports.union(\\"type\\", {
      npm: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).NpmOutputWithOptionalToken;
      })),
      maven: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).MavenOutputWithOptionalCreds;
      })),
      postman: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).PostmanOutput;
      }))
    }).transform({
      transform: (value) => {
        switch (value.type) {
          case \\"npm\\":
            return GithubPublishInfo.npm(value);
          case \\"maven\\":
            return GithubPublishInfo.maven(value);
          case \\"postman\\":
            return GithubPublishInfo.postman(value);
          default:
            return GithubPublishInfo._unknown(value);
        }
      },
      untransform: (_a) => {
        var _b = _a, { _visit } = _b, value = __objRest(_b, [\\"_visit\\"]);
        return value;
      }
    });
  }
});

// src/serialization/resources/remoteGen/types/NpmOutputWithOptionalToken.ts
var NpmOutputWithOptionalToken;
var init_NpmOutputWithOptionalToken2 = __esm({
  \\"src/serialization/resources/remoteGen/types/NpmOutputWithOptionalToken.ts\\"() {
    \\"use strict\\";
    init_core();
    NpmOutputWithOptionalToken = schemas_exports.object({
      registryUrl: schemas_exports.string(),
      packageName: schemas_exports.string(),
      token: schemas_exports.string().optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/MavenOutputWithOptionalCreds.ts
var MavenOutputWithOptionalCreds;
var init_MavenOutputWithOptionalCreds2 = __esm({
  \\"src/serialization/resources/remoteGen/types/MavenOutputWithOptionalCreds.ts\\"() {
    \\"use strict\\";
    init_core();
    MavenOutputWithOptionalCreds = schemas_exports.object({
      registryUrl: schemas_exports.string(),
      coordinate: schemas_exports.string(),
      credentials: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).UsernamePassword;
      })).optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/UsernamePassword.ts
var UsernamePassword;
var init_UsernamePassword2 = __esm({
  \\"src/serialization/resources/remoteGen/types/UsernamePassword.ts\\"() {
    \\"use strict\\";
    init_core();
    UsernamePassword = schemas_exports.object({
      username: schemas_exports.string(),
      password: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/Task.ts
var Task;
var init_Task2 = __esm({
  \\"src/serialization/resources/remoteGen/types/Task.ts\\"() {
    \\"use strict\\";
    init_core();
    Task = schemas_exports.object({
      status: schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).TaskStatus;
      })),
      packages: schemas_exports.list(schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).Package;
      }))),
      logs: schemas_exports.list(schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).TaskLog;
      })))
    });
  }
});

// src/serialization/resources/remoteGen/types/TaskStatus.ts
var TaskStatus2;
var init_TaskStatus2 = __esm({
  \\"src/serialization/resources/remoteGen/types/TaskStatus.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    TaskStatus2 = schemas_exports.union(schemas_exports.discriminant(\\"type\\", \\"_type\\"), {
      notStarted: schemas_exports.object({}),
      running: schemas_exports.object({}),
      failed: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).FailedTaskStatus;
      })),
      finished: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).FinishedTaskStatus;
      }))
    }).transform({
      transform: (value) => {
        switch (value.type) {
          case \\"notStarted\\":
            return TaskStatus.notStarted();
          case \\"running\\":
            return TaskStatus.running();
          case \\"failed\\":
            return TaskStatus.failed(value);
          case \\"finished\\":
            return TaskStatus.finished(value);
          default:
            return TaskStatus._unknown(value);
        }
      },
      untransform: (_a) => {
        var _b = _a, { _visit } = _b, value = __objRest(_b, [\\"_visit\\"]);
        return value;
      }
    });
  }
});

// src/serialization/resources/remoteGen/types/FailedTaskStatus.ts
var FailedTaskStatus;
var init_FailedTaskStatus2 = __esm({
  \\"src/serialization/resources/remoteGen/types/FailedTaskStatus.ts\\"() {
    \\"use strict\\";
    init_core();
    FailedTaskStatus = schemas_exports.object({
      message: schemas_exports.string(),
      s3PreSignedReadUrl: schemas_exports.string().optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/FinishedTaskStatus.ts
var FinishedTaskStatus;
var init_FinishedTaskStatus2 = __esm({
  \\"src/serialization/resources/remoteGen/types/FinishedTaskStatus.ts\\"() {
    \\"use strict\\";
    init_core();
    FinishedTaskStatus = schemas_exports.object({
      hasFilesToDownload: schemas_exports.boolean(),
      s3PreSignedReadUrl: schemas_exports.string(),
      s3PreSignedReadUrlV2: schemas_exports.string().optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/TaskLog.ts
var TaskLog;
var init_TaskLog2 = __esm({
  \\"src/serialization/resources/remoteGen/types/TaskLog.ts\\"() {
    \\"use strict\\";
    init_core();
    TaskLog = schemas_exports.object({
      level: schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).LogLevel;
      })),
      message: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/LogLevel.ts
var LogLevel2;
var init_LogLevel2 = __esm({
  \\"src/serialization/resources/remoteGen/types/LogLevel.ts\\"() {
    \\"use strict\\";
    init_core();
    LogLevel2 = schemas_exports.enum_([
      \\"DEBUG\\",
      \\"INFO\\",
      \\"WARN\\",
      \\"ERROR\\"
    ]);
  }
});

// src/serialization/resources/remoteGen/types/Package.ts
var Package;
var init_Package2 = __esm({
  \\"src/serialization/resources/remoteGen/types/Package.ts\\"() {
    \\"use strict\\";
    init_core();
    Package = schemas_exports.object({
      coordinate: schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).PackageCoordinate;
      })),
      status: schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).PackagePublishStatus;
      }))
    });
  }
});

// src/serialization/resources/remoteGen/types/PackagePublishStatus.ts
var PackagePublishStatus2;
var init_PackagePublishStatus2 = __esm({
  \\"src/serialization/resources/remoteGen/types/PackagePublishStatus.ts\\"() {
    \\"use strict\\";
    init_core();
    PackagePublishStatus2 = schemas_exports.enum_([\\"NOT_STARTED_PUBLISHING\\", \\"PUBLISHING\\", \\"PUBLISHED\\", \\"FAILED_TO_PUBLISH\\"]);
  }
});

// src/serialization/resources/remoteGen/types/PackageCoordinate.ts
var PackageCoordinate2;
var init_PackageCoordinate2 = __esm({
  \\"src/serialization/resources/remoteGen/types/PackageCoordinate.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    PackageCoordinate2 = schemas_exports.union(schemas_exports.discriminant(\\"type\\", \\"_type\\"), {
      npm: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).NpmCoordinate;
      })),
      maven: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).MavenCoordinate;
      })),
      pypi: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).PypiCoordinate;
      }))
    }).transform({
      transform: (value) => {
        switch (value.type) {
          case \\"npm\\":
            return PackageCoordinate.npm(value);
          case \\"maven\\":
            return PackageCoordinate.maven(value);
          case \\"pypi\\":
            return PackageCoordinate.pypi(value);
          default:
            return PackageCoordinate._unknown(value);
        }
      },
      untransform: (_a) => {
        var _b = _a, { _visit } = _b, value = __objRest(_b, [\\"_visit\\"]);
        return value;
      }
    });
  }
});

// src/serialization/resources/remoteGen/types/NpmCoordinate.ts
var NpmCoordinate;
var init_NpmCoordinate2 = __esm({
  \\"src/serialization/resources/remoteGen/types/NpmCoordinate.ts\\"() {
    \\"use strict\\";
    init_core();
    NpmCoordinate = schemas_exports.object({
      name: schemas_exports.string(),
      version: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/MavenCoordinate.ts
var MavenCoordinate;
var init_MavenCoordinate2 = __esm({
  \\"src/serialization/resources/remoteGen/types/MavenCoordinate.ts\\"() {
    \\"use strict\\";
    init_core();
    MavenCoordinate = schemas_exports.object({
      group: schemas_exports.string(),
      artifact: schemas_exports.string(),
      version: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/PypiCoordinate.ts
var PypiCoordinate;
var init_PypiCoordinate2 = __esm({
  \\"src/serialization/resources/remoteGen/types/PypiCoordinate.ts\\"() {
    \\"use strict\\";
    init_core();
    PypiCoordinate = schemas_exports.object({
      name: schemas_exports.string(),
      version: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/CreateJobResponse.ts
var CreateJobResponse;
var init_CreateJobResponse2 = __esm({
  \\"src/serialization/resources/remoteGen/types/CreateJobResponse.ts\\"() {
    \\"use strict\\";
    init_core();
    CreateJobResponse = schemas_exports.object({
      jobId: schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).RemoteGenJobId;
      })),
      taskIds: schemas_exports.list(schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).RemoteGenTaskId;
      })))
    });
  }
});

// src/serialization/resources/remoteGen/types/GeneratorsDoNotExistErrorBodyType.ts
var GeneratorsDoNotExistErrorBodyType;
var init_GeneratorsDoNotExistErrorBodyType2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GeneratorsDoNotExistErrorBodyType.ts\\"() {
    \\"use strict\\";
    init_core();
    GeneratorsDoNotExistErrorBodyType = schemas_exports.object({
      nonExistentGenerators: schemas_exports.list(
        schemas_exports.lazyObject(() => __async(void 0, null, function* () {
          return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorIdAndVersion;
        }))
      )
    });
  }
});

// src/serialization/resources/remoteGen/types/CannotPublishToNpmScopeDetails.ts
var CannotPublishToNpmScopeDetails;
var init_CannotPublishToNpmScopeDetails2 = __esm({
  \\"src/serialization/resources/remoteGen/types/CannotPublishToNpmScopeDetails.ts\\"() {
    \\"use strict\\";
    init_core();
    CannotPublishToNpmScopeDetails = schemas_exports.object({
      generatorId: schemas_exports.string(),
      invalidScope: schemas_exports.string(),
      validScope: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/CannotPublishToMavenGroupDetails.ts
var CannotPublishToMavenGroupDetails;
var init_CannotPublishToMavenGroupDetails2 = __esm({
  \\"src/serialization/resources/remoteGen/types/CannotPublishToMavenGroupDetails.ts\\"() {
    \\"use strict\\";
    init_core();
    CannotPublishToMavenGroupDetails = schemas_exports.object({
      generatorId: schemas_exports.string(),
      invalidGroup: schemas_exports.string(),
      validGroup: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/InsufficientPermissionsDetails.ts
var InsufficientPermissionsDetails;
var init_InsufficientPermissionsDetails2 = __esm({
  \\"src/serialization/resources/remoteGen/types/InsufficientPermissionsDetails.ts\\"() {
    \\"use strict\\";
    init_core();
    InsufficientPermissionsDetails = schemas_exports.object({
      dummy: schemas_exports.string().optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/index.ts
var init_types2 = __esm({
  \\"src/serialization/resources/remoteGen/types/index.ts\\"() {
    \\"use strict\\";
    init_RemoteGenJobId2();
    init_RemoteGenTaskId2();
    init_GeneratorIdAndVersion2();
    init_GeneratorConfig2();
    init_GeneratorConfigV22();
    init_OutputMode2();
    init_PublishOutputMode2();
    init_PublishOutputModeV22();
    init_RegistryOverrides2();
    init_GeneratorOutputs2();
    init_NpmOutput2();
    init_MavenOutput2();
    init_PostmanOutput2();
    init_GithubOutputMode2();
    init_GithubPublishInfo2();
    init_NpmOutputWithOptionalToken2();
    init_MavenOutputWithOptionalCreds2();
    init_UsernamePassword2();
    init_Task2();
    init_TaskStatus2();
    init_FailedTaskStatus2();
    init_FinishedTaskStatus2();
    init_TaskLog2();
    init_LogLevel2();
    init_Package2();
    init_PackagePublishStatus2();
    init_PackageCoordinate2();
    init_NpmCoordinate2();
    init_MavenCoordinate2();
    init_PypiCoordinate2();
    init_CreateJobResponse2();
    init_GeneratorsDoNotExistErrorBodyType2();
    init_CannotPublishToNpmScopeDetails2();
    init_CannotPublishToMavenGroupDetails2();
    init_InsufficientPermissionsDetails2();
  }
});

// src/serialization/resources/remoteGen/client/createJob.ts
var createJob_exports2 = {};
__export(createJob_exports2, {
  Error: () => Error7
});
var Error7;
var init_createJob2 = __esm({
  \\"src/serialization/resources/remoteGen/client/createJob.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    Error7 = schemas_exports.union(\\"error\\", {
      IllegalApiNameError: schemas_exports.object({}),
      GeneratorsDoNotExistError: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorsDoNotExistErrorBodyType;
          })
        )
      }),
      CannotPublishToNpmScope: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).CannotPublishToNpmScopeDetails;
          })
        )
      }),
      CannotPublishToMavenGroup: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).CannotPublishToMavenGroupDetails;
          })
        )
      }),
      InsufficientPermissions: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).InsufficientPermissionsDetails;
          })
        )
      })
    }).transform({
      transform: (value) => {
        switch (value.error) {
          case \\"IllegalApiNameError\\":
            return remoteGen_exports.createJob.Error.illegalApiNameError();
          case \\"GeneratorsDoNotExistError\\":
            return remoteGen_exports.createJob.Error.generatorsDoNotExistError(value.content);
          case \\"CannotPublishToNpmScope\\":
            return remoteGen_exports.createJob.Error.cannotPublishToNpmScope(value.content);
          case \\"CannotPublishToMavenGroup\\":
            return remoteGen_exports.createJob.Error.cannotPublishToMavenGroup(value.content);
          case \\"InsufficientPermissions\\":
            return remoteGen_exports.createJob.Error.insufficientPermissions(value.content);
        }
      },
      untransform: (_a) => {
        var _b = _a, { _visit } = _b, value = __objRest(_b, [\\"_visit\\"]);
        return value;
      }
    });
  }
});

// src/serialization/resources/remoteGen/client/createJobV2.ts
var createJobV2_exports2 = {};
__export(createJobV2_exports2, {
  Error: () => Error8
});
var Error8;
var init_createJobV22 = __esm({
  \\"src/serialization/resources/remoteGen/client/createJobV2.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    Error8 = schemas_exports.union(\\"error\\", {
      IllegalApiNameError: schemas_exports.object({}),
      GeneratorsDoNotExistError: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorsDoNotExistErrorBodyType;
          })
        )
      }),
      CannotPublishToNpmScope: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).CannotPublishToNpmScopeDetails;
          })
        )
      }),
      CannotPublishToMavenGroup: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).CannotPublishToMavenGroupDetails;
          })
        )
      }),
      InsufficientPermissions: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).InsufficientPermissionsDetails;
          })
        )
      })
    }).transform({
      transform: (value) => {
        switch (value.error) {
          case \\"IllegalApiNameError\\":
            return remoteGen_exports.createJobV2.Error.illegalApiNameError();
          case \\"GeneratorsDoNotExistError\\":
            return remoteGen_exports.createJobV2.Error.generatorsDoNotExistError(value.content);
          case \\"CannotPublishToNpmScope\\":
            return remoteGen_exports.createJobV2.Error.cannotPublishToNpmScope(value.content);
          case \\"CannotPublishToMavenGroup\\":
            return remoteGen_exports.createJobV2.Error.cannotPublishToMavenGroup(value.content);
          case \\"InsufficientPermissions\\":
            return remoteGen_exports.createJobV2.Error.insufficientPermissions(value.content);
        }
      },
      untransform: (_a) => {
        var _b = _a, { _visit } = _b, value = __objRest(_b, [\\"_visit\\"]);
        return value;
      }
    });
  }
});

// src/serialization/resources/remoteGen/client/getJobStatus.ts
var getJobStatus_exports2 = {};
__export(getJobStatus_exports2, {
  Response: () => Response
});
var Response;
var init_getJobStatus2 = __esm({
  \\"src/serialization/resources/remoteGen/client/getJobStatus.ts\\"() {
    \\"use strict\\";
    init_core();
    Response = schemas_exports.record(
      schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).RemoteGenTaskId;
      })),
      schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).Task;
      }))
    );
  }
});

// src/serialization/resources/remoteGen/client/requests/CreateJobRequest.ts
var CreateJobRequest;
var init_CreateJobRequest = __esm({
  \\"src/serialization/resources/remoteGen/client/requests/CreateJobRequest.ts\\"() {
    \\"use strict\\";
    init_core();
    CreateJobRequest = schemas_exports.object({
      apiName: schemas_exports.string(),
      organizationName: schemas_exports.string(),
      version: schemas_exports.string().optional(),
      generators: schemas_exports.list(
        schemas_exports.lazyObject(() => __async(void 0, null, function* () {
          return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorConfig;
        }))
      )
    });
  }
});

// src/serialization/resources/remoteGen/client/requests/CreateJobRequestV2.ts
var CreateJobRequestV2;
var init_CreateJobRequestV2 = __esm({
  \\"src/serialization/resources/remoteGen/client/requests/CreateJobRequestV2.ts\\"() {
    \\"use strict\\";
    init_core();
    CreateJobRequestV2 = schemas_exports.object({
      apiName: schemas_exports.string(),
      organizationName: schemas_exports.string(),
      version: schemas_exports.string().optional(),
      generators: schemas_exports.list(
        schemas_exports.lazyObject(() => __async(void 0, null, function* () {
          return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorConfigV2;
        }))
      ),
      uploadToS3: schemas_exports.boolean().optional()
    });
  }
});

// src/serialization/resources/remoteGen/client/requests/index.ts
var init_requests2 = __esm({
  \\"src/serialization/resources/remoteGen/client/requests/index.ts\\"() {
    \\"use strict\\";
    init_CreateJobRequest();
    init_CreateJobRequestV2();
  }
});

// src/serialization/resources/remoteGen/client/index.ts
var init_client4 = __esm({
  \\"src/serialization/resources/remoteGen/client/index.ts\\"() {
    \\"use strict\\";
    init_createJob2();
    init_createJobV22();
    init_getJobStatus2();
    init_requests2();
  }
});

// src/serialization/resources/remoteGen/index.ts
var remoteGen_exports2 = {};
__export(remoteGen_exports2, {
  CannotPublishToMavenGroupDetails: () => CannotPublishToMavenGroupDetails,
  CannotPublishToNpmScopeDetails: () => CannotPublishToNpmScopeDetails,
  CreateJobRequest: () => CreateJobRequest,
  CreateJobRequestV2: () => CreateJobRequestV2,
  CreateJobResponse: () => CreateJobResponse,
  FailedTaskStatus: () => FailedTaskStatus,
  FinishedTaskStatus: () => FinishedTaskStatus,
  GeneratorConfig: () => GeneratorConfig,
  GeneratorConfigV2: () => GeneratorConfigV2,
  GeneratorIdAndVersion: () => GeneratorIdAndVersion,
  GeneratorOutputs: () => GeneratorOutputs,
  GeneratorsDoNotExistErrorBodyType: () => GeneratorsDoNotExistErrorBodyType,
  GithubOutputMode: () => GithubOutputMode,
  GithubPublishInfo: () => GithubPublishInfo2,
  InsufficientPermissionsDetails: () => InsufficientPermissionsDetails,
  LogLevel: () => LogLevel2,
  MavenCoordinate: () => MavenCoordinate,
  MavenOutput: () => MavenOutput,
  MavenOutputWithOptionalCreds: () => MavenOutputWithOptionalCreds,
  NpmCoordinate: () => NpmCoordinate,
  NpmOutput: () => NpmOutput,
  NpmOutputWithOptionalToken: () => NpmOutputWithOptionalToken,
  OutputMode: () => OutputMode2,
  Package: () => Package,
  PackageCoordinate: () => PackageCoordinate2,
  PackagePublishStatus: () => PackagePublishStatus2,
  PostmanOutput: () => PostmanOutput,
  PublishOutputMode: () => PublishOutputMode,
  PublishOutputModeV2: () => PublishOutputModeV22,
  PypiCoordinate: () => PypiCoordinate,
  RegistryOverrides: () => RegistryOverrides,
  RemoteGenJobId: () => RemoteGenJobId2,
  RemoteGenTaskId: () => RemoteGenTaskId2,
  Task: () => Task,
  TaskLog: () => TaskLog,
  TaskStatus: () => TaskStatus2,
  UsernamePassword: () => UsernamePassword,
  createJob: () => createJob_exports2,
  createJobV2: () => createJobV2_exports2,
  getJobStatus: () => getJobStatus_exports2
});
var init_remoteGen2 = __esm({
  \\"src/serialization/resources/remoteGen/index.ts\\"() {
    \\"use strict\\";
    init_types2();
    init_client4();
  }
});

// src/serialization/resources/index.ts
var init_resources2 = __esm({
  \\"src/serialization/resources/index.ts\\"() {
    \\"use strict\\";
    init_remoteGen2();
    init_types2();
    init_requests2();
  }
});

// src/serialization/index.ts
var serialization_exports = {};
__export(serialization_exports, {
  CannotPublishToMavenGroupDetails: () => CannotPublishToMavenGroupDetails,
  CannotPublishToNpmScopeDetails: () => CannotPublishToNpmScopeDetails,
  CreateJobRequest: () => CreateJobRequest,
  CreateJobRequestV2: () => CreateJobRequestV2,
  CreateJobResponse: () => CreateJobResponse,
  FailedTaskStatus: () => FailedTaskStatus,
  FinishedTaskStatus: () => FinishedTaskStatus,
  GeneratorConfig: () => GeneratorConfig,
  GeneratorConfigV2: () => GeneratorConfigV2,
  GeneratorIdAndVersion: () => GeneratorIdAndVersion,
  GeneratorOutputs: () => GeneratorOutputs,
  GeneratorsDoNotExistErrorBodyType: () => GeneratorsDoNotExistErrorBodyType,
  GithubOutputMode: () => GithubOutputMode,
  GithubPublishInfo: () => GithubPublishInfo2,
  InsufficientPermissionsDetails: () => InsufficientPermissionsDetails,
  LogLevel: () => LogLevel2,
  MavenCoordinate: () => MavenCoordinate,
  MavenOutput: () => MavenOutput,
  MavenOutputWithOptionalCreds: () => MavenOutputWithOptionalCreds,
  NpmCoordinate: () => NpmCoordinate,
  NpmOutput: () => NpmOutput,
  NpmOutputWithOptionalToken: () => NpmOutputWithOptionalToken,
  OutputMode: () => OutputMode2,
  Package: () => Package,
  PackageCoordinate: () => PackageCoordinate2,
  PackagePublishStatus: () => PackagePublishStatus2,
  PostmanOutput: () => PostmanOutput,
  PublishOutputMode: () => PublishOutputMode,
  PublishOutputModeV2: () => PublishOutputModeV22,
  PypiCoordinate: () => PypiCoordinate,
  RegistryOverrides: () => RegistryOverrides,
  RemoteGenJobId: () => RemoteGenJobId2,
  RemoteGenTaskId: () => RemoteGenTaskId2,
  Task: () => Task,
  TaskLog: () => TaskLog,
  TaskStatus: () => TaskStatus2,
  UsernamePassword: () => UsernamePassword,
  remoteGen: () => remoteGen_exports2
});
module.exports = __toCommonJS(serialization_exports);
var init_serialization = __esm({
  \\"src/serialization/index.ts\\"() {
    init_resources2();
  }
});
init_serialization();
",
                "name": "serialization.js",
                "type": "file",
              },
            ],
            "name": "cjs",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b ||= {})
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __restKey = (key) => typeof key === \\"symbol\\" ? key : key + \\"\\";
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all3) => {
  for (var name in all3)
    __defProp(target, name, { get: all3[name], enumerable: true });
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/bind.js
function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/utils.js
var { toString } = Object.prototype;
var { getPrototypeOf } = Object;
var kindOf = ((cache) => (thing) => {
  const str = toString.call(thing);
  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(/* @__PURE__ */ Object.create(null));
var kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type;
};
var typeOfTest = (type) => (thing) => typeof thing === type;
var { isArray } = Array;
var isUndefined = typeOfTest(\\"undefined\\");
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}
var isArrayBuffer = kindOfTest(\\"ArrayBuffer\\");
function isArrayBufferView(val) {
  let result;
  if (typeof ArrayBuffer !== \\"undefined\\" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
var isString = typeOfTest(\\"string\\");
var isFunction = typeOfTest(\\"function\\");
var isNumber = typeOfTest(\\"number\\");
var isObject = (thing) => thing !== null && typeof thing === \\"object\\";
var isBoolean = (thing) => thing === true || thing === false;
var isPlainObject = (val) => {
  if (kindOf(val) !== \\"object\\") {
    return false;
  }
  const prototype3 = getPrototypeOf(val);
  return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
};
var isDate = kindOfTest(\\"Date\\");
var isFile = kindOfTest(\\"File\\");
var isBlob = kindOfTest(\\"Blob\\");
var isFileList = kindOfTest(\\"FileList\\");
var isStream = (val) => isObject(val) && isFunction(val.pipe);
var isFormData = (thing) => {
  let kind;
  return thing && (typeof FormData === \\"function\\" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === \\"formdata\\" || kind === \\"object\\" && isFunction(thing.toString) && thing.toString() === \\"[object FormData]\\"));
};
var isURLSearchParams = kindOfTest(\\"URLSearchParams\\");
var trim = (str) => str.trim ? str.trim() : str.replace(/^[\\\\s\\\\uFEFF\\\\xA0]+|[\\\\s\\\\uFEFF\\\\xA0]+$/g, \\"\\");
function forEach(obj, fn, { allOwnKeys = false } = {}) {
  if (obj === null || typeof obj === \\"undefined\\") {
    return;
  }
  let i;
  let l;
  if (typeof obj !== \\"object\\") {
    obj = [obj];
  }
  if (isArray(obj)) {
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    const keys2 = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys2.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys2[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}
function findKey(obj, key) {
  key = key.toLowerCase();
  const keys2 = Object.keys(obj);
  let i = keys2.length;
  let _key;
  while (i-- > 0) {
    _key = keys2[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
var _global = (() => {
  if (typeof globalThis !== \\"undefined\\")
    return globalThis;
  return typeof self !== \\"undefined\\" ? self : typeof window !== \\"undefined\\" ? window : global;
})();
var isContextDefined = (context) => !isUndefined(context) && context !== _global;
function merge() {
  const { caseless } = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };
  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}
var extend = (a, b, thisArg, { allOwnKeys } = {}) => {
  forEach(b, (val, key) => {
    if (thisArg && isFunction(val)) {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  }, { allOwnKeys });
  return a;
};
var stripBOM = (content) => {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
};
var inherits = (constructor, superConstructor, props, descriptors2) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, \\"super\\", {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
};
var toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};
  destObj = destObj || {};
  if (sourceObj == null)
    return destObj;
  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
  return destObj;
};
var endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === void 0 || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};
var toArray = (thing) => {
  if (!thing)
    return null;
  if (isArray(thing))
    return thing;
  let i = thing.length;
  if (!isNumber(i))
    return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
};
var isTypedArray = ((TypedArray) => {
  return (thing) => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== \\"undefined\\" && getPrototypeOf(Uint8Array));
var forEachEntry = (obj, fn) => {
  const generator = obj && obj[Symbol.iterator];
  const iterator = generator.call(obj);
  let result;
  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
};
var matchAll = (regExp, str) => {
  let matches;
  const arr = [];
  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }
  return arr;
};
var isHTMLForm = kindOfTest(\\"HTMLFormElement\\");
var toCamelCase = (str) => {
  return str.toLowerCase().replace(
    /[-_\\\\s]([a-z\\\\d])(\\\\w*)/g,
    function replacer(m, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};
var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
var isRegExp = kindOfTest(\\"RegExp\\");
var reduceDescriptors = (obj, reducer) => {
  const descriptors2 = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};
  forEach(descriptors2, (descriptor, name) => {
    if (reducer(descriptor, name, obj) !== false) {
      reducedDescriptors[name] = descriptor;
    }
  });
  Object.defineProperties(obj, reducedDescriptors);
};
var freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    if (isFunction(obj) && [\\"arguments\\", \\"caller\\", \\"callee\\"].indexOf(name) !== -1) {
      return false;
    }
    const value = obj[name];
    if (!isFunction(value))
      return;
    descriptor.enumerable = false;
    if (\\"writable\\" in descriptor) {
      descriptor.writable = false;
      return;
    }
    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error(\\"Can not rewrite read-only method '\\" + name + \\"'\\");
      };
    }
  });
};
var toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};
  const define = (arr) => {
    arr.forEach((value) => {
      obj[value] = true;
    });
  };
  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
  return obj;
};
var noop = () => {
};
var toFiniteNumber = (value, defaultValue) => {
  value = +value;
  return Number.isFinite(value) ? value : defaultValue;
};
var ALPHA = \\"abcdefghijklmnopqrstuvwxyz\\";
var DIGIT = \\"0123456789\\";
var ALPHABET = {
  DIGIT,
  ALPHA,
  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
};
var generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
  let str = \\"\\";
  const { length } = alphabet;
  while (size--) {
    str += alphabet[Math.random() * length | 0];
  }
  return str;
};
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === \\"FormData\\" && thing[Symbol.iterator]);
}
var toJSONObject = (obj) => {
  const stack = new Array(10);
  const visit = (source, i) => {
    if (isObject(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }
      if (!(\\"toJSON\\" in source)) {
        stack[i] = source;
        const target = isArray(source) ? [] : {};
        forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });
        stack[i] = void 0;
        return target;
      }
    }
    return source;
  };
  return visit(obj, 0);
};
var isAsyncFn = kindOfTest(\\"AsyncFunction\\");
var isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
var utils_default = {
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject,
  isPlainObject,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty,
  // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  ALPHABET,
  generateString,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable
};

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/AxiosError.js
function AxiosError(message, code, config, request, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message;
  this.name = \\"AxiosError\\";
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  response && (this.response = response);
}
utils_default.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: utils_default.toJSONObject(this.config),
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});
var prototype = AxiosError.prototype;
var descriptors = {};
[
  \\"ERR_BAD_OPTION_VALUE\\",
  \\"ERR_BAD_OPTION\\",
  \\"ECONNABORTED\\",
  \\"ETIMEDOUT\\",
  \\"ERR_NETWORK\\",
  \\"ERR_FR_TOO_MANY_REDIRECTS\\",
  \\"ERR_DEPRECATED\\",
  \\"ERR_BAD_RESPONSE\\",
  \\"ERR_BAD_REQUEST\\",
  \\"ERR_CANCELED\\",
  \\"ERR_NOT_SUPPORT\\",
  \\"ERR_INVALID_URL\\"
  // eslint-disable-next-line func-names
].forEach((code) => {
  descriptors[code] = { value: code };
});
Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, \\"isAxiosError\\", { value: true });
AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(prototype);
  utils_default.toFlatObject(error, axiosError, function filter2(obj) {
    return obj !== Error.prototype;
  }, (prop) => {
    return prop !== \\"isAxiosError\\";
  });
  AxiosError.call(axiosError, error.message, code, config, request, response);
  axiosError.cause = error;
  axiosError.name = error.name;
  customProps && Object.assign(axiosError, customProps);
  return axiosError;
};
var AxiosError_default = AxiosError;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/null.js
var null_default = null;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/toFormData.js
function isVisitable(thing) {
  return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
}
function removeBrackets(key) {
  return utils_default.endsWith(key, \\"[]\\") ? key.slice(0, -2) : key;
}
function renderKey(path, key, dots) {
  if (!path)
    return key;
  return path.concat(key).map(function each(token, i) {
    token = removeBrackets(token);
    return !dots && i ? \\"[\\" + token + \\"]\\" : token;
  }).join(dots ? \\".\\" : \\"\\");
}
function isFlatArray(arr) {
  return utils_default.isArray(arr) && !arr.some(isVisitable);
}
var predicates = utils_default.toFlatObject(utils_default, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});
function toFormData(obj, formData, options) {
  if (!utils_default.isObject(obj)) {
    throw new TypeError(\\"target must be an object\\");
  }
  formData = formData || new (null_default || FormData)();
  options = utils_default.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    return !utils_default.isUndefined(source[option]);
  });
  const metaTokens = options.metaTokens;
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== \\"undefined\\" && Blob;
  const useBlob = _Blob && utils_default.isSpecCompliantForm(formData);
  if (!utils_default.isFunction(visitor)) {
    throw new TypeError(\\"visitor must be a function\\");
  }
  function convertValue(value) {
    if (value === null)
      return \\"\\";
    if (utils_default.isDate(value)) {
      return value.toISOString();
    }
    if (!useBlob && utils_default.isBlob(value)) {
      throw new AxiosError_default(\\"Blob is not supported. Use a Buffer instead.\\");
    }
    if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {
      return useBlob && typeof Blob === \\"function\\" ? new Blob([value]) : Buffer.from(value);
    }
    return value;
  }
  function defaultVisitor(value, key, path) {
    let arr = value;
    if (value && !path && typeof value === \\"object\\") {
      if (utils_default.endsWith(key, \\"{}\\")) {
        key = metaTokens ? key : key.slice(0, -2);
        value = JSON.stringify(value);
      } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key, \\"[]\\")) && (arr = utils_default.toArray(value))) {
        key = removeBrackets(key);
        arr.forEach(function each(el, index) {
          !(utils_default.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + \\"[]\\",
            convertValue(el)
          );
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path, key, dots), convertValue(value));
    return false;
  }
  const stack = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });
  function build(value, path) {
    if (utils_default.isUndefined(value))
      return;
    if (stack.indexOf(value) !== -1) {
      throw Error(\\"Circular reference detected in \\" + path.join(\\".\\"));
    }
    stack.push(value);
    utils_default.forEach(value, function each(el, key) {
      const result = !(utils_default.isUndefined(el) || el === null) && visitor.call(
        formData,
        el,
        utils_default.isString(key) ? key.trim() : key,
        path,
        exposedHelpers
      );
      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });
    stack.pop();
  }
  if (!utils_default.isObject(obj)) {
    throw new TypeError(\\"data must be an object\\");
  }
  build(obj);
  return formData;
}
var toFormData_default = toFormData;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/AxiosURLSearchParams.js
function encode(str) {
  const charMap = {
    \\"!\\": \\"%21\\",
    \\"'\\": \\"%27\\",
    \\"(\\": \\"%28\\",
    \\")\\": \\"%29\\",
    \\"~\\": \\"%7E\\",
    \\"%20\\": \\"+\\",
    \\"%00\\": \\"\\\\0\\"
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && toFormData_default(params, this, options);
}
var prototype2 = AxiosURLSearchParams.prototype;
prototype2.append = function append(name, value) {
  this._pairs.push([name, value]);
};
prototype2.toString = function toString2(encoder) {
  const _encode2 = encoder ? function(value) {
    return encoder.call(this, value, encode);
  } : encode;
  return this._pairs.map(function each(pair) {
    return _encode2(pair[0]) + \\"=\\" + _encode2(pair[1]);
  }, \\"\\").join(\\"&\\");
};
var AxiosURLSearchParams_default = AxiosURLSearchParams;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/buildURL.js
function encode2(val) {
  return encodeURIComponent(val).replace(/%3A/gi, \\":\\").replace(/%24/g, \\"$\\").replace(/%2C/gi, \\",\\").replace(/%20/g, \\"+\\").replace(/%5B/gi, \\"[\\").replace(/%5D/gi, \\"]\\");
}
function buildURL(url, params, options) {
  if (!params) {
    return url;
  }
  const _encode2 = options && options.encode || encode2;
  const serializeFn = options && options.serialize;
  let serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode2);
  }
  if (serializedParams) {
    const hashmarkIndex = url.indexOf(\\"#\\");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf(\\"?\\") === -1 ? \\"?\\" : \\"&\\") + serializedParams;
  }
  return url;
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/InterceptorManager.js
var InterceptorManager = class {
  constructor() {
    this.handlers = [];
  }
  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle \`then\` for a \`Promise\`
   * @param {Function} rejected The function to handle \`reject\` for a \`Promise\`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }
  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by \`use\`
   *
   * @returns {Boolean} \`true\` if the interceptor was removed, \`false\` otherwise
   */
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }
  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }
  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become \`null\` calling \`eject\`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    utils_default.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
};
var InterceptorManager_default = InterceptorManager;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/defaults/transitional.js
var transitional_default = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/browser/classes/URLSearchParams.js
var URLSearchParams_default = typeof URLSearchParams !== \\"undefined\\" ? URLSearchParams : AxiosURLSearchParams_default;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/browser/classes/FormData.js
var FormData_default = typeof FormData !== \\"undefined\\" ? FormData : null;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/browser/classes/Blob.js
var Blob_default = typeof Blob !== \\"undefined\\" ? Blob : null;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/browser/index.js
var isStandardBrowserEnv = (() => {
  let product;
  if (typeof navigator !== \\"undefined\\" && ((product = navigator.product) === \\"ReactNative\\" || product === \\"NativeScript\\" || product === \\"NS\\")) {
    return false;
  }
  return typeof window !== \\"undefined\\" && typeof document !== \\"undefined\\";
})();
var isStandardBrowserWebWorkerEnv = (() => {
  return typeof WorkerGlobalScope !== \\"undefined\\" && // eslint-disable-next-line no-undef
  self instanceof WorkerGlobalScope && typeof self.importScripts === \\"function\\";
})();
var browser_default = {
  isBrowser: true,
  classes: {
    URLSearchParams: URLSearchParams_default,
    FormData: FormData_default,
    Blob: Blob_default
  },
  isStandardBrowserEnv,
  isStandardBrowserWebWorkerEnv,
  protocols: [\\"http\\", \\"https\\", \\"file\\", \\"blob\\", \\"url\\", \\"data\\"]
};

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/toURLEncodedForm.js
function toURLEncodedForm(data, options) {
  return toFormData_default(data, new browser_default.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (browser_default.isNode && utils_default.isBuffer(value)) {
        this.append(key, value.toString(\\"base64\\"));
        return false;
      }
      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/formDataToJSON.js
function parsePropPath(name) {
  return utils_default.matchAll(/\\\\w+|\\\\[(\\\\w*)]/g, name).map((match) => {
    return match[0] === \\"[]\\" ? \\"\\" : match[1] || match[0];
  });
}
function arrayToObject(arr) {
  const obj = {};
  const keys2 = Object.keys(arr);
  let i;
  const len = keys2.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys2[i];
    obj[key] = arr[key];
  }
  return obj;
}
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];
    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils_default.isArray(target) ? target.length : name;
    if (isLast) {
      if (utils_default.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !utils_default.isObject(target[name])) {
      target[name] = [];
    }
    const result = buildPath(path, value, target[name], index);
    if (result && utils_default.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
    const obj = {};
    utils_default.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}
var formDataToJSON_default = formDataToJSON;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/defaults/index.js
var DEFAULT_CONTENT_TYPE = {
  \\"Content-Type\\": void 0
};
function stringifySafely(rawValue, parser, encoder) {
  if (utils_default.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils_default.trim(rawValue);
    } catch (e) {
      if (e.name !== \\"SyntaxError\\") {
        throw e;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
var defaults = {
  transitional: transitional_default,
  adapter: [\\"xhr\\", \\"http\\"],
  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || \\"\\";
    const hasJSONContentType = contentType.indexOf(\\"application/json\\") > -1;
    const isObjectPayload = utils_default.isObject(data);
    if (isObjectPayload && utils_default.isHTMLForm(data)) {
      data = new FormData(data);
    }
    const isFormData2 = utils_default.isFormData(data);
    if (isFormData2) {
      if (!hasJSONContentType) {
        return data;
      }
      return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;
    }
    if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data)) {
      return data;
    }
    if (utils_default.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils_default.isURLSearchParams(data)) {
      headers.setContentType(\\"application/x-www-form-urlencoded;charset=utf-8\\", false);
      return data.toString();
    }
    let isFileList2;
    if (isObjectPayload) {
      if (contentType.indexOf(\\"application/x-www-form-urlencoded\\") > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }
      if ((isFileList2 = utils_default.isFileList(data)) || contentType.indexOf(\\"multipart/form-data\\") > -1) {
        const _FormData = this.env && this.env.FormData;
        return toFormData_default(
          isFileList2 ? { \\"files[]\\": data } : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }
    if (isObjectPayload || hasJSONContentType) {
      headers.setContentType(\\"application/json\\", false);
      return stringifySafely(data);
    }
    return data;
  }],
  transformResponse: [function transformResponse(data) {
    const transitional2 = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
    const JSONRequested = this.responseType === \\"json\\";
    if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
      const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === \\"SyntaxError\\") {
            throw AxiosError_default.from(e, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }
    return data;
  }],
  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: \\"XSRF-TOKEN\\",
  xsrfHeaderName: \\"X-XSRF-TOKEN\\",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: browser_default.classes.FormData,
    Blob: browser_default.classes.Blob
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      \\"Accept\\": \\"application/json, text/plain, */*\\"
    }
  }
};
utils_default.forEach([\\"delete\\", \\"get\\", \\"head\\"], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});
utils_default.forEach([\\"post\\", \\"put\\", \\"patch\\"], function forEachMethodWithData(method) {
  defaults.headers[method] = utils_default.merge(DEFAULT_CONTENT_TYPE);
});
var defaults_default = defaults;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/parseHeaders.js
var ignoreDuplicateOf = utils_default.toObjectSet([
  \\"age\\",
  \\"authorization\\",
  \\"content-length\\",
  \\"content-type\\",
  \\"etag\\",
  \\"expires\\",
  \\"from\\",
  \\"host\\",
  \\"if-modified-since\\",
  \\"if-unmodified-since\\",
  \\"last-modified\\",
  \\"location\\",
  \\"max-forwards\\",
  \\"proxy-authorization\\",
  \\"referer\\",
  \\"retry-after\\",
  \\"user-agent\\"
]);
var parseHeaders_default = (rawHeaders) => {
  const parsed = {};
  let key;
  let val;
  let i;
  rawHeaders && rawHeaders.split(\\"\\\\n\\").forEach(function parser(line) {
    i = line.indexOf(\\":\\");
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();
    if (!key || parsed[key] && ignoreDuplicateOf[key]) {
      return;
    }
    if (key === \\"set-cookie\\") {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + \\", \\" + val : val;
    }
  });
  return parsed;
};

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/AxiosHeaders.js
var $internals = Symbol(\\"internals\\");
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
  const tokens = /* @__PURE__ */ Object.create(null);
  const tokensRE = /([^\\\\s,;=]+)\\\\s*(?:=\\\\s*([^,;]+))?/g;
  let match;
  while (match = tokensRE.exec(str)) {
    tokens[match[1]] = match[2];
  }
  return tokens;
}
var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^\`|~,!#$%&'*+.]+$/.test(str.trim());
function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
  if (utils_default.isFunction(filter2)) {
    return filter2.call(this, value, header);
  }
  if (isHeaderNameFilter) {
    value = header;
  }
  if (!utils_default.isString(value))
    return;
  if (utils_default.isString(filter2)) {
    return value.indexOf(filter2) !== -1;
  }
  if (utils_default.isRegExp(filter2)) {
    return filter2.test(value);
  }
}
function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\\\\d])(\\\\w*)/g, (w, char, str) => {
    return char.toUpperCase() + str;
  });
}
function buildAccessors(obj, header) {
  const accessorName = utils_default.toCamelCase(\\" \\" + header);
  [\\"get\\", \\"set\\", \\"has\\"].forEach((methodName) => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}
var AxiosHeaders = class {
  constructor(headers) {
    headers && this.set(headers);
  }
  set(header, valueOrRewrite, rewrite) {
    const self2 = this;
    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);
      if (!lHeader) {
        throw new Error(\\"header name must be a non-empty string\\");
      }
      const key = utils_default.findKey(self2, lHeader);
      if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
        self2[key || _header] = normalizeValue(_value);
      }
    }
    const setHeaders = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
    if (utils_default.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite);
    } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(parseHeaders_default(header), valueOrRewrite);
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }
    return this;
  }
  get(header, parser) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      if (key) {
        const value = this[key];
        if (!parser) {
          return value;
        }
        if (parser === true) {
          return parseTokens(value);
        }
        if (utils_default.isFunction(parser)) {
          return parser.call(this, value, key);
        }
        if (utils_default.isRegExp(parser)) {
          return parser.exec(value);
        }
        throw new TypeError(\\"parser must be boolean|regexp|function\\");
      }
    }
  }
  has(header, matcher) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }
    return false;
  }
  delete(header, matcher) {
    const self2 = this;
    let deleted = false;
    function deleteHeader(_header) {
      _header = normalizeHeader(_header);
      if (_header) {
        const key = utils_default.findKey(self2, _header);
        if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
          delete self2[key];
          deleted = true;
        }
      }
    }
    if (utils_default.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }
    return deleted;
  }
  clear(matcher) {
    const keys2 = Object.keys(this);
    let i = keys2.length;
    let deleted = false;
    while (i--) {
      const key = keys2[i];
      if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }
    return deleted;
  }
  normalize(format) {
    const self2 = this;
    const headers = {};
    utils_default.forEach(this, (value, header) => {
      const key = utils_default.findKey(headers, header);
      if (key) {
        self2[key] = normalizeValue(value);
        delete self2[header];
        return;
      }
      const normalized = format ? formatHeader(header) : String(header).trim();
      if (normalized !== header) {
        delete self2[header];
      }
      self2[normalized] = normalizeValue(value);
      headers[normalized] = true;
    });
    return this;
  }
  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }
  toJSON(asStrings) {
    const obj = /* @__PURE__ */ Object.create(null);
    utils_default.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils_default.isArray(value) ? value.join(\\", \\") : value);
    });
    return obj;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + \\": \\" + value).join(\\"\\\\n\\");
  }
  get [Symbol.toStringTag]() {
    return \\"AxiosHeaders\\";
  }
  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }
  static concat(first, ...targets) {
    const computed = new this(first);
    targets.forEach((target) => computed.set(target));
    return computed;
  }
  static accessor(header) {
    const internals = this[$internals] = this[$internals] = {
      accessors: {}
    };
    const accessors = internals.accessors;
    const prototype3 = this.prototype;
    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);
      if (!accessors[lHeader]) {
        buildAccessors(prototype3, _header);
        accessors[lHeader] = true;
      }
    }
    utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
    return this;
  }
};
AxiosHeaders.accessor([\\"Content-Type\\", \\"Content-Length\\", \\"Accept\\", \\"Accept-Encoding\\", \\"User-Agent\\", \\"Authorization\\"]);
utils_default.freezeMethods(AxiosHeaders.prototype);
utils_default.freezeMethods(AxiosHeaders);
var AxiosHeaders_default = AxiosHeaders;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/transformData.js
function transformData(fns, response) {
  const config = this || defaults_default;
  const context = response || config;
  const headers = AxiosHeaders_default.from(context.headers);
  let data = context.data;
  utils_default.forEach(fns, function transform2(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
  });
  headers.normalize();
  return data;
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/cancel/isCancel.js
function isCancel(value) {
  return !!(value && value.__CANCEL__);
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/cancel/CanceledError.js
function CanceledError(message, config, request) {
  AxiosError_default.call(this, message == null ? \\"canceled\\" : message, AxiosError_default.ERR_CANCELED, config, request);
  this.name = \\"CanceledError\\";
}
utils_default.inherits(CanceledError, AxiosError_default, {
  __CANCEL__: true
});
var CanceledError_default = CanceledError;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/settle.js
function settle(resolve, reject, response) {
  const validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError_default(
      \\"Request failed with status code \\" + response.status,
      [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/cookies.js
var cookies_default = browser_default.isStandardBrowserEnv ? function standardBrowserEnv() {
  return {
    write: function write(name, value, expires, path, domain, secure) {
      const cookie = [];
      cookie.push(name + \\"=\\" + encodeURIComponent(value));
      if (utils_default.isNumber(expires)) {
        cookie.push(\\"expires=\\" + new Date(expires).toGMTString());
      }
      if (utils_default.isString(path)) {
        cookie.push(\\"path=\\" + path);
      }
      if (utils_default.isString(domain)) {
        cookie.push(\\"domain=\\" + domain);
      }
      if (secure === true) {
        cookie.push(\\"secure\\");
      }
      document.cookie = cookie.join(\\"; \\");
    },
    read: function read(name) {
      const match = document.cookie.match(new RegExp(\\"(^|;\\\\\\\\s*)(\\" + name + \\")=([^;]*)\\"));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove: function remove(name) {
      this.write(name, \\"\\", Date.now() - 864e5);
    }
  };
}() : function nonStandardBrowserEnv() {
  return {
    write: function write() {
    },
    read: function read() {
      return null;
    },
    remove: function remove() {
    }
  };
}();

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/isAbsoluteURL.js
function isAbsoluteURL(url) {
  return /^([a-z][a-z\\\\d+\\\\-.]*:)?\\\\/\\\\//i.test(url);
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/combineURLs.js
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\\\\/+$/, \\"\\") + \\"/\\" + relativeURL.replace(/^\\\\/+/, \\"\\") : baseURL;
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/buildFullPath.js
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/isURLSameOrigin.js
var isURLSameOrigin_default = browser_default.isStandardBrowserEnv ? function standardBrowserEnv2() {
  const msie = /(msie|trident)/i.test(navigator.userAgent);
  const urlParsingNode = document.createElement(\\"a\\");
  let originURL;
  function resolveURL(url) {
    let href = url;
    if (msie) {
      urlParsingNode.setAttribute(\\"href\\", href);
      href = urlParsingNode.href;
    }
    urlParsingNode.setAttribute(\\"href\\", href);
    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, \\"\\") : \\"\\",
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\\\?/, \\"\\") : \\"\\",
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, \\"\\") : \\"\\",
      hostname: urlParsingNode.hostname,
      port: urlParsingNode.port,
      pathname: urlParsingNode.pathname.charAt(0) === \\"/\\" ? urlParsingNode.pathname : \\"/\\" + urlParsingNode.pathname
    };
  }
  originURL = resolveURL(window.location.href);
  return function isURLSameOrigin(requestURL) {
    const parsed = utils_default.isString(requestURL) ? resolveURL(requestURL) : requestURL;
    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
  };
}() : function nonStandardBrowserEnv2() {
  return function isURLSameOrigin() {
    return true;
  };
}();

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/parseProtocol.js
function parseProtocol(url) {
  const match = /^([-+\\\\w]{1,25})(:?\\\\/\\\\/|:)/.exec(url);
  return match && match[1] || \\"\\";
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/speedometer.js
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;
  min = min !== void 0 ? min : 1e3;
  return function push(chunkLength) {
    const now = Date.now();
    const startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now;
    }
    bytes[head] = chunkLength;
    timestamps[head] = now;
    let i = tail;
    let bytesCount = 0;
    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now - firstSampleTS < min) {
      return;
    }
    const passed = startedAt && now - startedAt;
    return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
  };
}
var speedometer_default = speedometer;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/adapters/xhr.js
function progressEventReducer(listener, isDownloadStream) {
  let bytesNotified = 0;
  const _speedometer = speedometer_default(50, 250);
  return (e) => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : void 0;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;
    bytesNotified = loaded;
    const data = {
      loaded,
      total,
      progress: total ? loaded / total : void 0,
      bytes: progressBytes,
      rate: rate ? rate : void 0,
      estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
      event: e
    };
    data[isDownloadStream ? \\"download\\" : \\"upload\\"] = true;
    listener(data);
  };
}
var isXHRAdapterSupported = typeof XMLHttpRequest !== \\"undefined\\";
var xhr_default = isXHRAdapterSupported && function(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    let requestData = config.data;
    const requestHeaders = AxiosHeaders_default.from(config.headers).normalize();
    const responseType = config.responseType;
    let onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }
      if (config.signal) {
        config.signal.removeEventListener(\\"abort\\", onCanceled);
      }
    }
    if (utils_default.isFormData(requestData)) {
      if (browser_default.isStandardBrowserEnv || browser_default.isStandardBrowserWebWorkerEnv) {
        requestHeaders.setContentType(false);
      } else {
        requestHeaders.setContentType(\\"multipart/form-data;\\", false);
      }
    }
    let request = new XMLHttpRequest();
    if (config.auth) {
      const username = config.auth.username || \\"\\";
      const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : \\"\\";
      requestHeaders.set(\\"Authorization\\", \\"Basic \\" + btoa(username + \\":\\" + password));
    }
    const fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
    request.timeout = config.timeout;
    function onloadend() {
      if (!request) {
        return;
      }
      const responseHeaders = AxiosHeaders_default.from(
        \\"getAllResponseHeaders\\" in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === \\"text\\" || responseType === \\"json\\" ? request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };
      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);
      request = null;
    }
    if (\\"onloadend\\" in request) {
      request.onloadend = onloadend;
    } else {
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf(\\"file:\\") === 0)) {
          return;
        }
        setTimeout(onloadend);
      };
    }
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }
      reject(new AxiosError_default(\\"Request aborted\\", AxiosError_default.ECONNABORTED, config, request));
      request = null;
    };
    request.onerror = function handleError() {
      reject(new AxiosError_default(\\"Network Error\\", AxiosError_default.ERR_NETWORK, config, request));
      request = null;
    };
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = config.timeout ? \\"timeout of \\" + config.timeout + \\"ms exceeded\\" : \\"timeout exceeded\\";
      const transitional2 = config.transitional || transitional_default;
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(new AxiosError_default(
        timeoutErrorMessage,
        transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,
        config,
        request
      ));
      request = null;
    };
    if (browser_default.isStandardBrowserEnv) {
      const xsrfValue = (config.withCredentials || isURLSameOrigin_default(fullPath)) && config.xsrfCookieName && cookies_default.read(config.xsrfCookieName);
      if (xsrfValue) {
        requestHeaders.set(config.xsrfHeaderName, xsrfValue);
      }
    }
    requestData === void 0 && requestHeaders.setContentType(null);
    if (\\"setRequestHeader\\" in request) {
      utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }
    if (!utils_default.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }
    if (responseType && responseType !== \\"json\\") {
      request.responseType = config.responseType;
    }
    if (typeof config.onDownloadProgress === \\"function\\") {
      request.addEventListener(\\"progress\\", progressEventReducer(config.onDownloadProgress, true));
    }
    if (typeof config.onUploadProgress === \\"function\\" && request.upload) {
      request.upload.addEventListener(\\"progress\\", progressEventReducer(config.onUploadProgress));
    }
    if (config.cancelToken || config.signal) {
      onCanceled = (cancel) => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new CanceledError_default(null, config, request) : cancel);
        request.abort();
        request = null;
      };
      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener(\\"abort\\", onCanceled);
      }
    }
    const protocol = parseProtocol(fullPath);
    if (protocol && browser_default.protocols.indexOf(protocol) === -1) {
      reject(new AxiosError_default(\\"Unsupported protocol \\" + protocol + \\":\\", AxiosError_default.ERR_BAD_REQUEST, config));
      return;
    }
    request.send(requestData || null);
  });
};

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/adapters/adapters.js
var knownAdapters = {
  http: null_default,
  xhr: xhr_default
};
utils_default.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, \\"name\\", { value });
    } catch (e) {
    }
    Object.defineProperty(fn, \\"adapterName\\", { value });
  }
});
var adapters_default = {
  getAdapter: (adapters) => {
    adapters = utils_default.isArray(adapters) ? adapters : [adapters];
    const { length } = adapters;
    let nameOrAdapter;
    let adapter;
    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters[i];
      if (adapter = utils_default.isString(nameOrAdapter) ? knownAdapters[nameOrAdapter.toLowerCase()] : nameOrAdapter) {
        break;
      }
    }
    if (!adapter) {
      if (adapter === false) {
        throw new AxiosError_default(
          \`Adapter \${nameOrAdapter} is not supported by the environment\`,
          \\"ERR_NOT_SUPPORT\\"
        );
      }
      throw new Error(
        utils_default.hasOwnProp(knownAdapters, nameOrAdapter) ? \`Adapter '\${nameOrAdapter}' is not available in the build\` : \`Unknown adapter '\${nameOrAdapter}'\`
      );
    }
    if (!utils_default.isFunction(adapter)) {
      throw new TypeError(\\"adapter is not a function\\");
    }
    return adapter;
  },
  adapters: knownAdapters
};

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/dispatchRequest.js
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
  if (config.signal && config.signal.aborted) {
    throw new CanceledError_default(null, config);
  }
}
function dispatchRequest(config) {
  throwIfCancellationRequested(config);
  config.headers = AxiosHeaders_default.from(config.headers);
  config.data = transformData.call(
    config,
    config.transformRequest
  );
  if ([\\"post\\", \\"put\\", \\"patch\\"].indexOf(config.method) !== -1) {
    config.headers.setContentType(\\"application/x-www-form-urlencoded\\", false);
  }
  const adapter = adapters_default.getAdapter(config.adapter || defaults_default.adapter);
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);
    response.data = transformData.call(
      config,
      config.transformResponse,
      response
    );
    response.headers = AxiosHeaders_default.from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
      }
    }
    return Promise.reject(reason);
  });
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/mergeConfig.js
var headersToObject = (thing) => thing instanceof AxiosHeaders_default ? thing.toJSON() : thing;
function mergeConfig(config1, config2) {
  config2 = config2 || {};
  const config = {};
  function getMergedValue(target, source, caseless) {
    if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
      return utils_default.merge.call({ caseless }, target, source);
    } else if (utils_default.isPlainObject(source)) {
      return utils_default.merge({}, source);
    } else if (utils_default.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(a, b, caseless) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(a, b, caseless);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a, caseless);
    }
  }
  function valueFromConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    }
  }
  function defaultToConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a);
    }
  }
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(void 0, a);
    }
  }
  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
  };
  utils_default.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge2 = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge2(config1[prop], config2[prop], prop);
    utils_default.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/env/data.js
var VERSION = \\"1.4.0\\";

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/validator.js
var validators = {};
[\\"object\\", \\"boolean\\", \\"number\\", \\"function\\", \\"string\\", \\"symbol\\"].forEach((type, i) => {
  validators[type] = function validator(thing) {
    return typeof thing === type || \\"a\\" + (i < 1 ? \\"n \\" : \\" \\") + type;
  };
});
var deprecatedWarnings = {};
validators.transitional = function transitional(validator, version2, message) {
  function formatMessage(opt, desc) {
    return \\"[Axios v\\" + VERSION + \\"] Transitional option '\\" + opt + \\"'\\" + desc + (message ? \\". \\" + message : \\"\\");
  }
  return (value, opt, opts) => {
    if (validator === false) {
      throw new AxiosError_default(
        formatMessage(opt, \\" has been removed\\" + (version2 ? \\" in \\" + version2 : \\"\\")),
        AxiosError_default.ERR_DEPRECATED
      );
    }
    if (version2 && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(
        formatMessage(
          opt,
          \\" has been deprecated since v\\" + version2 + \\" and will be removed in the near future\\"
        )
      );
    }
    return validator ? validator(value, opt, opts) : true;
  };
};
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== \\"object\\") {
    throw new AxiosError_default(\\"options must be an object\\", AxiosError_default.ERR_BAD_OPTION_VALUE);
  }
  const keys2 = Object.keys(options);
  let i = keys2.length;
  while (i-- > 0) {
    const opt = keys2[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === void 0 || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError_default(\\"option \\" + opt + \\" must be \\" + result, AxiosError_default.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError_default(\\"Unknown option \\" + opt, AxiosError_default.ERR_BAD_OPTION);
    }
  }
}
var validator_default = {
  assertOptions,
  validators
};

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/Axios.js
var validators2 = validator_default.validators;
var Axios = class {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager_default(),
      response: new InterceptorManager_default()
    };
  }
  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  request(configOrUrl, config) {
    if (typeof configOrUrl === \\"string\\") {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }
    config = mergeConfig(this.defaults, config);
    const { transitional: transitional2, paramsSerializer, headers } = config;
    if (transitional2 !== void 0) {
      validator_default.assertOptions(transitional2, {
        silentJSONParsing: validators2.transitional(validators2.boolean),
        forcedJSONParsing: validators2.transitional(validators2.boolean),
        clarifyTimeoutError: validators2.transitional(validators2.boolean)
      }, false);
    }
    if (paramsSerializer != null) {
      if (utils_default.isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        };
      } else {
        validator_default.assertOptions(paramsSerializer, {
          encode: validators2.function,
          serialize: validators2.function
        }, true);
      }
    }
    config.method = (config.method || this.defaults.method || \\"get\\").toLowerCase();
    let contextHeaders;
    contextHeaders = headers && utils_default.merge(
      headers.common,
      headers[config.method]
    );
    contextHeaders && utils_default.forEach(
      [\\"delete\\", \\"get\\", \\"head\\", \\"post\\", \\"put\\", \\"patch\\", \\"common\\"],
      (method) => {
        delete headers[method];
      }
    );
    config.headers = AxiosHeaders_default.concat(contextHeaders, headers);
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === \\"function\\" && interceptor.runWhen(config) === false) {
        return;
      }
      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    let promise;
    let i = 0;
    let len;
    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), void 0];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;
      promise = Promise.resolve(config);
      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }
      return promise;
    }
    len = requestInterceptorChain.length;
    let newConfig = config;
    i = 0;
    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }
    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }
    i = 0;
    len = responseInterceptorChain.length;
    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }
    return promise;
  }
  getUri(config) {
    config = mergeConfig(this.defaults, config);
    const fullPath = buildFullPath(config.baseURL, config.url);
    return buildURL(fullPath, config.params, config.paramsSerializer);
  }
};
utils_default.forEach([\\"delete\\", \\"get\\", \\"head\\", \\"options\\"], function forEachMethodNoData2(method) {
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});
utils_default.forEach([\\"post\\", \\"put\\", \\"patch\\"], function forEachMethodWithData2(method) {
  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig(config || {}, {
        method,
        headers: isForm ? {
          \\"Content-Type\\": \\"multipart/form-data\\"
        } : {},
        url,
        data
      }));
    };
  }
  Axios.prototype[method] = generateHTTPMethod();
  Axios.prototype[method + \\"Form\\"] = generateHTTPMethod(true);
});
var Axios_default = Axios;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/cancel/CancelToken.js
var CancelToken = class {
  constructor(executor) {
    if (typeof executor !== \\"function\\") {
      throw new TypeError(\\"executor must be a function.\\");
    }
    let resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });
    const token = this;
    this.promise.then((cancel) => {
      if (!token._listeners)
        return;
      let i = token._listeners.length;
      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });
    this.promise.then = (onfulfilled) => {
      let _resolve;
      const promise = new Promise((resolve) => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);
      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };
      return promise;
    };
    executor(function cancel(message, config, request) {
      if (token.reason) {
        return;
      }
      token.reason = new CanceledError_default(message, config, request);
      resolvePromise(token.reason);
    });
  }
  /**
   * Throws a \`CanceledError\` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }
  /**
   * Subscribe to the cancel signal
   */
  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }
    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }
  /**
   * Unsubscribe from the cancel signal
   */
  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }
  /**
   * Returns an object that contains a new \`CancelToken\` and a function that, when called,
   * cancels the \`CancelToken\`.
   */
  static source() {
    let cancel;
    const token = new CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  }
};
var CancelToken_default = CancelToken;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/spread.js
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/isAxiosError.js
function isAxiosError(payload) {
  return utils_default.isObject(payload) && payload.isAxiosError === true;
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/HttpStatusCode.js
var HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511
};
Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});
var HttpStatusCode_default = HttpStatusCode;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/axios.js
function createInstance(defaultConfig) {
  const context = new Axios_default(defaultConfig);
  const instance = bind(Axios_default.prototype.request, context);
  utils_default.extend(instance, Axios_default.prototype, context, { allOwnKeys: true });
  utils_default.extend(instance, context, null, { allOwnKeys: true });
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };
  return instance;
}
var axios = createInstance(defaults_default);
axios.Axios = Axios_default;
axios.CanceledError = CanceledError_default;
axios.CancelToken = CancelToken_default;
axios.isCancel = isCancel;
axios.VERSION = VERSION;
axios.toFormData = toFormData_default;
axios.AxiosError = AxiosError_default;
axios.Cancel = axios.CanceledError;
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = spread;
axios.isAxiosError = isAxiosError;
axios.mergeConfig = mergeConfig;
axios.AxiosHeaders = AxiosHeaders_default;
axios.formToJSON = (thing) => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
axios.HttpStatusCode = HttpStatusCode_default;
axios.default = axios;
var axios_default = axios;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/index.js
var {
  Axios: Axios2,
  AxiosError: AxiosError2,
  CanceledError: CanceledError2,
  isCancel: isCancel2,
  CancelToken: CancelToken2,
  VERSION: VERSION2,
  all: all2,
  Cancel,
  isAxiosError: isAxiosError2,
  spread: spread2,
  toFormData: toFormData2,
  AxiosHeaders: AxiosHeaders2,
  HttpStatusCode: HttpStatusCode2,
  formToJSON,
  mergeConfig: mergeConfig2
} = axios_default;

// src/core/fetcher/Fetcher.ts
function fetcherImpl(args) {
  return __async(this, null, function* () {
    var _a, _b;
    const headers = {};
    if (args.body !== void 0 && args.contentType != null) {
      headers[\\"Content-Type\\"] = args.contentType;
    }
    if (args.headers != null) {
      for (const [key, value] of Object.entries(args.headers)) {
        if (value != null) {
          headers[key] = value;
        }
      }
    }
    try {
      const response = yield axios_default({
        url: args.url,
        params: args.queryParameters,
        method: args.method,
        headers,
        data: args.body,
        validateStatus: () => true,
        transformResponse: (response2) => response2,
        timeout: args.timeoutMs,
        transitional: {
          clarifyTimeoutError: true
        },
        withCredentials: args.withCredentials,
        adapter: args.adapter,
        onUploadProgress: args.onUploadProgress,
        maxBodyLength: Infinity,
        maxContentLength: Infinity,
        responseType: (_a = args.responseType) != null ? _a : \\"json\\"
      });
      let body;
      if (args.responseType === \\"blob\\") {
        body = response.data;
      } else if (response.data != null && response.data.length > 0) {
        try {
          body = (_b = JSON.parse(response.data)) != null ? _b : void 0;
        } catch (e) {
          return {
            ok: false,
            error: {
              reason: \\"non-json\\",
              statusCode: response.status,
              rawBody: response.data
            }
          };
        }
      }
      if (response.status >= 200 && response.status < 400) {
        return {
          ok: true,
          body
        };
      } else {
        return {
          ok: false,
          error: {
            reason: \\"status-code\\",
            statusCode: response.status,
            body
          }
        };
      }
    } catch (error) {
      if (error.code === \\"ETIMEDOUT\\") {
        return {
          ok: false,
          error: {
            reason: \\"timeout\\"
          }
        };
      }
      return {
        ok: false,
        error: {
          reason: \\"unknown\\",
          errorMessage: error.message
        }
      };
    }
  });
}
var fetcher = fetcherImpl;

// src/core/fetcher/Supplier.ts
var Supplier = {
  get: (supplier) => __async(void 0, null, function* () {
    if (typeof supplier === \\"function\\") {
      return supplier();
    } else {
      return supplier;
    }
  })
};

// .yarn/cache/js-base64-npm-3.7.2-706fb77a0b-573f28e9a2.zip/node_modules/js-base64/base64.mjs
var version = \\"3.7.2\\";
var VERSION3 = version;
var _hasatob = typeof atob === \\"function\\";
var _hasbtoa = typeof btoa === \\"function\\";
var _hasBuffer = typeof Buffer === \\"function\\";
var _TD = typeof TextDecoder === \\"function\\" ? new TextDecoder() : void 0;
var _TE = typeof TextEncoder === \\"function\\" ? new TextEncoder() : void 0;
var b64ch = \\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\";
var b64chs = Array.prototype.slice.call(b64ch);
var b64tab = ((a) => {
  let tab = {};
  a.forEach((c, i) => tab[c] = i);
  return tab;
})(b64chs);
var b64re = /^(?:[A-Za-z\\\\d+\\\\/]{4})*?(?:[A-Za-z\\\\d+\\\\/]{2}(?:==)?|[A-Za-z\\\\d+\\\\/]{3}=?)?$/;
var _fromCC = String.fromCharCode.bind(String);
var _U8Afrom = typeof Uint8Array.from === \\"function\\" ? Uint8Array.from.bind(Uint8Array) : (it, fn = (x) => x) => new Uint8Array(Array.prototype.slice.call(it, 0).map(fn));
var _mkUriSafe = (src) => src.replace(/=/g, \\"\\").replace(/[+\\\\/]/g, (m0) => m0 == \\"+\\" ? \\"-\\" : \\"_\\");
var _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\\\\+\\\\/]/g, \\"\\");
var btoaPolyfill = (bin) => {
  let u32, c0, c1, c2, asc = \\"\\";
  const pad = bin.length % 3;
  for (let i = 0; i < bin.length; ) {
    if ((c0 = bin.charCodeAt(i++)) > 255 || (c1 = bin.charCodeAt(i++)) > 255 || (c2 = bin.charCodeAt(i++)) > 255)
      throw new TypeError(\\"invalid character found\\");
    u32 = c0 << 16 | c1 << 8 | c2;
    asc += b64chs[u32 >> 18 & 63] + b64chs[u32 >> 12 & 63] + b64chs[u32 >> 6 & 63] + b64chs[u32 & 63];
  }
  return pad ? asc.slice(0, pad - 3) + \\"===\\".substring(pad) : asc;
};
var _btoa = _hasbtoa ? (bin) => btoa(bin) : _hasBuffer ? (bin) => Buffer.from(bin, \\"binary\\").toString(\\"base64\\") : btoaPolyfill;
var _fromUint8Array = _hasBuffer ? (u8a) => Buffer.from(u8a).toString(\\"base64\\") : (u8a) => {
  const maxargs = 4096;
  let strs = [];
  for (let i = 0, l = u8a.length; i < l; i += maxargs) {
    strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));
  }
  return _btoa(strs.join(\\"\\"));
};
var fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);
var cb_utob = (c) => {
  if (c.length < 2) {
    var cc = c.charCodeAt(0);
    return cc < 128 ? c : cc < 2048 ? _fromCC(192 | cc >>> 6) + _fromCC(128 | cc & 63) : _fromCC(224 | cc >>> 12 & 15) + _fromCC(128 | cc >>> 6 & 63) + _fromCC(128 | cc & 63);
  } else {
    var cc = 65536 + (c.charCodeAt(0) - 55296) * 1024 + (c.charCodeAt(1) - 56320);
    return _fromCC(240 | cc >>> 18 & 7) + _fromCC(128 | cc >>> 12 & 63) + _fromCC(128 | cc >>> 6 & 63) + _fromCC(128 | cc & 63);
  }
};
var re_utob = /[\\\\uD800-\\\\uDBFF][\\\\uDC00-\\\\uDFFFF]|[^\\\\x00-\\\\x7F]/g;
var utob = (u) => u.replace(re_utob, cb_utob);
var _encode = _hasBuffer ? (s) => Buffer.from(s, \\"utf8\\").toString(\\"base64\\") : _TE ? (s) => _fromUint8Array(_TE.encode(s)) : (s) => _btoa(utob(s));
var encode3 = (src, urlsafe = false) => urlsafe ? _mkUriSafe(_encode(src)) : _encode(src);
var encodeURI = (src) => encode3(src, true);
var re_btou = /[\\\\xC0-\\\\xDF][\\\\x80-\\\\xBF]|[\\\\xE0-\\\\xEF][\\\\x80-\\\\xBF]{2}|[\\\\xF0-\\\\xF7][\\\\x80-\\\\xBF]{3}/g;
var cb_btou = (cccc) => {
  switch (cccc.length) {
    case 4:
      var cp = (7 & cccc.charCodeAt(0)) << 18 | (63 & cccc.charCodeAt(1)) << 12 | (63 & cccc.charCodeAt(2)) << 6 | 63 & cccc.charCodeAt(3), offset = cp - 65536;
      return _fromCC((offset >>> 10) + 55296) + _fromCC((offset & 1023) + 56320);
    case 3:
      return _fromCC((15 & cccc.charCodeAt(0)) << 12 | (63 & cccc.charCodeAt(1)) << 6 | 63 & cccc.charCodeAt(2));
    default:
      return _fromCC((31 & cccc.charCodeAt(0)) << 6 | 63 & cccc.charCodeAt(1));
  }
};
var btou = (b) => b.replace(re_btou, cb_btou);
var atobPolyfill = (asc) => {
  asc = asc.replace(/\\\\s+/g, \\"\\");
  if (!b64re.test(asc))
    throw new TypeError(\\"malformed base64.\\");
  asc += \\"==\\".slice(2 - (asc.length & 3));
  let u24, bin = \\"\\", r1, r2;
  for (let i = 0; i < asc.length; ) {
    u24 = b64tab[asc.charAt(i++)] << 18 | b64tab[asc.charAt(i++)] << 12 | (r1 = b64tab[asc.charAt(i++)]) << 6 | (r2 = b64tab[asc.charAt(i++)]);
    bin += r1 === 64 ? _fromCC(u24 >> 16 & 255) : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255) : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);
  }
  return bin;
};
var _atob = _hasatob ? (asc) => atob(_tidyB64(asc)) : _hasBuffer ? (asc) => Buffer.from(asc, \\"base64\\").toString(\\"binary\\") : atobPolyfill;
var _toUint8Array = _hasBuffer ? (a) => _U8Afrom(Buffer.from(a, \\"base64\\")) : (a) => _U8Afrom(_atob(a), (c) => c.charCodeAt(0));
var toUint8Array = (a) => _toUint8Array(_unURI(a));
var _decode = _hasBuffer ? (a) => Buffer.from(a, \\"base64\\").toString(\\"utf8\\") : _TD ? (a) => _TD.decode(_toUint8Array(a)) : (a) => btou(_atob(a));
var _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == \\"-\\" ? \\"+\\" : \\"/\\"));
var decode = (src) => _decode(_unURI(src));
var isValid = (src) => {
  if (typeof src !== \\"string\\")
    return false;
  const s = src.replace(/\\\\s+/g, \\"\\").replace(/={0,2}$/, \\"\\");
  return !/[^\\\\s0-9a-zA-Z\\\\+/]/.test(s) || !/[^\\\\s0-9a-zA-Z\\\\-_]/.test(s);
};
var _noEnum = (v) => {
  return {
    value: v,
    enumerable: false,
    writable: true,
    configurable: true
  };
};
var extendString = function() {
  const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));
  _add(\\"fromBase64\\", function() {
    return decode(this);
  });
  _add(\\"toBase64\\", function(urlsafe) {
    return encode3(this, urlsafe);
  });
  _add(\\"toBase64URI\\", function() {
    return encode3(this, true);
  });
  _add(\\"toBase64URL\\", function() {
    return encode3(this, true);
  });
  _add(\\"toUint8Array\\", function() {
    return toUint8Array(this);
  });
};
var extendUint8Array = function() {
  const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));
  _add(\\"toBase64\\", function(urlsafe) {
    return fromUint8Array(this, urlsafe);
  });
  _add(\\"toBase64URI\\", function() {
    return fromUint8Array(this, true);
  });
  _add(\\"toBase64URL\\", function() {
    return fromUint8Array(this, true);
  });
};
var extendBuiltins = () => {
  extendString();
  extendUint8Array();
};
var gBase64 = {
  version,
  VERSION: VERSION3,
  atob: _atob,
  atobPolyfill,
  btoa: _btoa,
  btoaPolyfill,
  fromBase64: decode,
  toBase64: encode3,
  encode: encode3,
  encodeURI,
  encodeURL: encodeURI,
  utob,
  btou,
  decode,
  isValid,
  fromUint8Array,
  toUint8Array,
  extendString,
  extendUint8Array,
  extendBuiltins
};

// src/core/auth/BasicAuth.ts
var BASIC_AUTH_HEADER_PREFIX = /^Basic /i;
var BasicAuth = {
  toAuthorizationHeader: (basicAuth) => {
    if (basicAuth == null) {
      return void 0;
    }
    const token = gBase64.encode(\`\${basicAuth.username}:\${basicAuth.password}\`);
    return \`Basic \${token}\`;
  },
  fromAuthorizationHeader: (header) => {
    const credentials = header.replace(BASIC_AUTH_HEADER_PREFIX, \\"\\");
    const decoded = gBase64.decode(credentials);
    const [username, password] = decoded.split(\\":\\", 2);
    if (username == null || password == null) {
      throw new Error(\\"Invalid basic auth\\");
    }
    return {
      username,
      password
    };
  }
};

// src/core/auth/BearerToken.ts
var BEARER_AUTH_HEADER_PREFIX = /^Bearer /i;
var BearerToken = {
  toAuthorizationHeader: (token) => {
    if (token == null) {
      return void 0;
    }
    return \`Bearer \${token}\`;
  },
  fromAuthorizationHeader: (header) => {
    return header.replace(BEARER_AUTH_HEADER_PREFIX, \\"\\").trim();
  }
};

// src/core/schemas/index.ts
var schemas_exports = {};
__export(schemas_exports, {
  JsonError: () => JsonError,
  ParseError: () => ParseError,
  any: () => any,
  boolean: () => boolean,
  date: () => date,
  discriminant: () => discriminant,
  enum_: () => enum_,
  getObjectLikeUtils: () => getObjectLikeUtils,
  getObjectUtils: () => getObjectUtils,
  getSchemaUtils: () => getSchemaUtils,
  isProperty: () => isProperty,
  lazy: () => lazy,
  lazyObject: () => lazyObject,
  list: () => list,
  number: () => number,
  object: () => object,
  optional: () => optional,
  property: () => property,
  record: () => record,
  set: () => set,
  string: () => string,
  stringLiteral: () => stringLiteral,
  transform: () => transform,
  undiscriminatedUnion: () => undiscriminatedUnion,
  union: () => union,
  unknown: () => unknown,
  withParsedProperties: () => withParsedProperties
});

// src/core/schemas/Schema.ts
var SchemaType = {
  DATE: \\"date\\",
  ENUM: \\"enum\\",
  LIST: \\"list\\",
  STRING_LITERAL: \\"stringLiteral\\",
  OBJECT: \\"object\\",
  ANY: \\"any\\",
  BOOLEAN: \\"boolean\\",
  NUMBER: \\"number\\",
  STRING: \\"string\\",
  UNKNOWN: \\"unknown\\",
  RECORD: \\"record\\",
  SET: \\"set\\",
  UNION: \\"union\\",
  UNDISCRIMINATED_UNION: \\"undiscriminatedUnion\\",
  OPTIONAL: \\"optional\\"
};

// src/core/schemas/utils/getErrorMessageForIncorrectType.ts
function getErrorMessageForIncorrectType(value, expectedType) {
  return \`Expected \${expectedType}. Received \${getTypeAsString(value)}.\`;
}
function getTypeAsString(value) {
  if (Array.isArray(value)) {
    return \\"list\\";
  }
  if (value === null) {
    return \\"null\\";
  }
  switch (typeof value) {
    case \\"string\\":
      return \`\\"\${value}\\"\`;
    case \\"number\\":
    case \\"boolean\\":
    case \\"undefined\\":
      return \`\${value}\`;
  }
  return typeof value;
}

// src/core/schemas/utils/maybeSkipValidation.ts
function maybeSkipValidation(schema) {
  return __spreadProps(__spreadValues({}, schema), {
    json: transformAndMaybeSkipValidation(schema.json),
    parse: transformAndMaybeSkipValidation(schema.parse)
  });
}
function transformAndMaybeSkipValidation(transform2) {
  return (value, opts) => __async(this, null, function* () {
    const transformed = yield transform2(value, opts);
    const { skipValidation = false } = opts != null ? opts : {};
    if (!transformed.ok && skipValidation) {
      console.warn(
        [
          \\"Failed to validate.\\",
          ...transformed.errors.map(
            (error) => \\"  - \\" + (error.path.length > 0 ? \`\${error.path.join(\\".\\")}: \${error.message}\` : error.message)
          )
        ].join(\\"\\\\n\\")
      );
      return {
        ok: true,
        value
      };
    } else {
      return transformed;
    }
  });
}

// src/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
function stringifyValidationError(error) {
  if (error.path.length === 0) {
    return error.message;
  }
  return \`\${error.path.join(\\" -> \\")}: \${error.message}\`;
}

// src/core/schemas/builders/schema-utils/JsonError.ts
var JsonError = class extends Error {
  constructor(errors) {
    super(errors.map(stringifyValidationError).join(\\"; \\"));
    this.errors = errors;
    Object.setPrototypeOf(this, JsonError.prototype);
  }
};

// src/core/schemas/builders/schema-utils/ParseError.ts
var ParseError = class extends Error {
  constructor(errors) {
    super(errors.map(stringifyValidationError).join(\\"; \\"));
    this.errors = errors;
    Object.setPrototypeOf(this, ParseError.prototype);
  }
};

// src/core/schemas/builders/schema-utils/getSchemaUtils.ts
function getSchemaUtils(schema) {
  return {
    optional: () => optional(schema),
    transform: (transformer) => transform(schema, transformer),
    parseOrThrow: (raw, opts) => __async(this, null, function* () {
      const parsed = yield schema.parse(raw, opts);
      if (parsed.ok) {
        return parsed.value;
      }
      throw new ParseError(parsed.errors);
    }),
    jsonOrThrow: (parsed, opts) => __async(this, null, function* () {
      const raw = yield schema.json(parsed, opts);
      if (raw.ok) {
        return raw.value;
      }
      throw new JsonError(raw.errors);
    })
  };
}
function optional(schema) {
  const baseSchema = {
    parse: (raw, opts) => {
      if (raw == null) {
        return {
          ok: true,
          value: void 0
        };
      }
      return schema.parse(raw, opts);
    },
    json: (parsed, opts) => {
      if (parsed == null) {
        return {
          ok: true,
          value: null
        };
      }
      return schema.json(parsed, opts);
    },
    getType: () => SchemaType.OPTIONAL
  };
  return __spreadValues(__spreadValues({}, baseSchema), getSchemaUtils(baseSchema));
}
function transform(schema, transformer) {
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      const parsed = yield schema.parse(raw, opts);
      if (!parsed.ok) {
        return parsed;
      }
      return {
        ok: true,
        value: transformer.transform(parsed.value)
      };
    }),
    json: (transformed, opts) => __async(this, null, function* () {
      const parsed = yield transformer.untransform(transformed);
      return schema.json(parsed, opts);
    }),
    getType: () => schema.getType()
  };
  return __spreadValues(__spreadValues({}, baseSchema), getSchemaUtils(baseSchema));
}

// src/core/schemas/builders/date/date.ts
var ISO_8601_REGEX = /^([+-]?\\\\d{4}(?!\\\\d{2}\\\\b))((-?)((0[1-9]|1[0-2])(\\\\3([12]\\\\d|0[1-9]|3[01]))?|W([0-4]\\\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\\\d|[12]\\\\d{2}|3([0-5]\\\\d|6[1-6])))([T\\\\s]((([01]\\\\d|2[0-3])((:?)[0-5]\\\\d)?|24:?00)([.,]\\\\d+(?!:))?)?(\\\\17[0-5]\\\\d([.,]\\\\d+)?)?([zZ]|([+-])([01]\\\\d|2[0-3]):?([0-5]\\\\d)?)?)?)?$/;
function date() {
  const baseSchema = {
    parse: (raw, { breadcrumbsPrefix = [] } = {}) => {
      if (typeof raw !== \\"string\\") {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(raw, \\"string\\")
            }
          ]
        };
      }
      if (!ISO_8601_REGEX.test(raw)) {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(raw, \\"ISO 8601 date string\\")
            }
          ]
        };
      }
      return {
        ok: true,
        value: new Date(raw)
      };
    },
    json: (date2, { breadcrumbsPrefix = [] } = {}) => {
      if (date2 instanceof Date) {
        return {
          ok: true,
          value: date2.toISOString()
        };
      } else {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(date2, \\"Date object\\")
            }
          ]
        };
      }
    },
    getType: () => SchemaType.DATE
  };
  return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
}

// src/core/schemas/utils/createIdentitySchemaCreator.ts
function createIdentitySchemaCreator(schemaType, validate) {
  return () => {
    const baseSchema = {
      parse: validate,
      json: validate,
      getType: () => schemaType
    };
    return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
  };
}

// src/core/schemas/builders/enum/enum.ts
function enum_(values) {
  const validValues = new Set(values);
  const schemaCreator = createIdentitySchemaCreator(
    SchemaType.ENUM,
    (value, { allowUnrecognizedEnumValues, breadcrumbsPrefix = [] } = {}) => {
      if (typeof value !== \\"string\\") {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(value, \\"string\\")
            }
          ]
        };
      }
      if (!validValues.has(value) && !allowUnrecognizedEnumValues) {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(value, \\"enum\\")
            }
          ]
        };
      }
      return {
        ok: true,
        value
      };
    }
  );
  return schemaCreator();
}

// src/core/schemas/builders/lazy/lazy.ts
function lazy(getter) {
  const baseSchema = constructLazyBaseSchema(getter);
  return __spreadValues(__spreadValues({}, baseSchema), getSchemaUtils(baseSchema));
}
function constructLazyBaseSchema(getter) {
  return {
    parse: (raw, opts) => __async(this, null, function* () {
      return (yield getMemoizedSchema(getter)).parse(raw, opts);
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      return (yield getMemoizedSchema(getter)).json(parsed, opts);
    }),
    getType: () => __async(this, null, function* () {
      return (yield getMemoizedSchema(getter)).getType();
    })
  };
}
function getMemoizedSchema(getter) {
  return __async(this, null, function* () {
    const castedGetter = getter;
    if (castedGetter.__zurg_memoized == null) {
      castedGetter.__zurg_memoized = yield getter();
    }
    return castedGetter.__zurg_memoized;
  });
}

// src/core/schemas/utils/entries.ts
function entries(object2) {
  return Object.entries(object2);
}

// src/core/schemas/utils/filterObject.ts
function filterObject(obj, keysToInclude) {
  const keysToIncludeSet = new Set(keysToInclude);
  return Object.entries(obj).reduce((acc, [key, value]) => {
    if (keysToIncludeSet.has(key)) {
      acc[key] = value;
    }
    return acc;
  }, {});
}

// src/core/schemas/utils/isPlainObject.ts
function isPlainObject2(value) {
  if (typeof value !== \\"object\\" || value === null) {
    return false;
  }
  if (Object.getPrototypeOf(value) === null) {
    return true;
  }
  let proto = value;
  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }
  return Object.getPrototypeOf(value) === proto;
}

// src/core/schemas/utils/keys.ts
function keys(object2) {
  return Object.keys(object2);
}

// src/core/schemas/utils/partition.ts
function partition(items, predicate) {
  const trueItems = [], falseItems = [];
  for (const item of items) {
    if (predicate(item)) {
      trueItems.push(item);
    } else {
      falseItems.push(item);
    }
  }
  return [trueItems, falseItems];
}

// src/core/schemas/builders/object-like/getObjectLikeUtils.ts
function getObjectLikeUtils(schema) {
  return {
    withParsedProperties: (properties) => withParsedProperties(schema, properties)
  };
}
function withParsedProperties(objectLike, properties) {
  const objectSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      const parsedObject = yield objectLike.parse(raw, opts);
      if (!parsedObject.ok) {
        return parsedObject;
      }
      const additionalProperties = Object.entries(properties).reduce(
        (processed, [key, value]) => {
          return __spreadProps(__spreadValues({}, processed), {
            [key]: typeof value === \\"function\\" ? value(parsedObject.value) : value
          });
        },
        {}
      );
      return {
        ok: true,
        value: __spreadValues(__spreadValues({}, parsedObject.value), additionalProperties)
      };
    }),
    json: (parsed, opts) => {
      var _a;
      if (!isPlainObject2(parsed)) {
        return {
          ok: false,
          errors: [
            {
              path: (_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [],
              message: getErrorMessageForIncorrectType(parsed, \\"object\\")
            }
          ]
        };
      }
      const addedPropertyKeys = new Set(Object.keys(properties));
      const parsedWithoutAddedProperties = filterObject(
        parsed,
        Object.keys(parsed).filter((key) => !addedPropertyKeys.has(key))
      );
      return objectLike.json(parsedWithoutAddedProperties, opts);
    },
    getType: () => objectLike.getType()
  };
  return __spreadValues(__spreadValues(__spreadValues({}, objectSchema), getSchemaUtils(objectSchema)), getObjectLikeUtils(objectSchema));
}

// src/core/schemas/builders/object/property.ts
function property(rawKey, valueSchema) {
  return {
    rawKey,
    valueSchema,
    isProperty: true
  };
}
function isProperty(maybeProperty) {
  return maybeProperty.isProperty;
}

// src/core/schemas/builders/object/object.ts
function object(schemas) {
  const baseSchema = {
    _getRawProperties: () => Promise.resolve(
      Object.entries(schemas).map(
        ([parsedKey, propertySchema]) => isProperty(propertySchema) ? propertySchema.rawKey : parsedKey
      )
    ),
    _getParsedProperties: () => Promise.resolve(keys(schemas)),
    parse: (raw, opts) => __async(this, null, function* () {
      const rawKeyToProperty = {};
      const requiredKeys = [];
      for (const [parsedKey, schemaOrObjectProperty] of entries(schemas)) {
        const rawKey = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.rawKey : parsedKey;
        const valueSchema = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.valueSchema : schemaOrObjectProperty;
        const property2 = {
          rawKey,
          parsedKey,
          valueSchema
        };
        rawKeyToProperty[rawKey] = property2;
        if (yield isSchemaRequired(valueSchema)) {
          requiredKeys.push(rawKey);
        }
      }
      return validateAndTransformObject({
        value: raw,
        requiredKeys,
        getProperty: (rawKey) => {
          const property2 = rawKeyToProperty[rawKey];
          if (property2 == null) {
            return void 0;
          }
          return {
            transformedKey: property2.parsedKey,
            transform: (propertyValue) => {
              var _a;
              return property2.valueSchema.parse(propertyValue, __spreadProps(__spreadValues({}, opts), {
                breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], rawKey]
              }));
            }
          };
        },
        unrecognizedObjectKeys: opts == null ? void 0 : opts.unrecognizedObjectKeys,
        skipValidation: opts == null ? void 0 : opts.skipValidation,
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      const requiredKeys = [];
      for (const [parsedKey, schemaOrObjectProperty] of entries(schemas)) {
        const valueSchema = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.valueSchema : schemaOrObjectProperty;
        if (yield isSchemaRequired(valueSchema)) {
          requiredKeys.push(parsedKey);
        }
      }
      return validateAndTransformObject({
        value: parsed,
        requiredKeys,
        getProperty: (parsedKey) => {
          const property2 = schemas[parsedKey];
          if (property2 == null) {
            return void 0;
          }
          if (isProperty(property2)) {
            return {
              transformedKey: property2.rawKey,
              transform: (propertyValue) => {
                var _a;
                return property2.valueSchema.json(propertyValue, __spreadProps(__spreadValues({}, opts), {
                  breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], parsedKey]
                }));
              }
            };
          } else {
            return {
              transformedKey: parsedKey,
              transform: (propertyValue) => {
                var _a;
                return property2.json(propertyValue, __spreadProps(__spreadValues({}, opts), {
                  breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], parsedKey]
                }));
              }
            };
          }
        },
        unrecognizedObjectKeys: opts == null ? void 0 : opts.unrecognizedObjectKeys,
        skipValidation: opts == null ? void 0 : opts.skipValidation,
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    getType: () => SchemaType.OBJECT
  };
  return __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema)), getObjectLikeUtils(baseSchema)), getObjectUtils(baseSchema));
}
function validateAndTransformObject(_0) {
  return __async(this, arguments, function* ({
    value,
    requiredKeys,
    getProperty,
    unrecognizedObjectKeys = \\"fail\\",
    skipValidation = false,
    breadcrumbsPrefix = []
  }) {
    if (!isPlainObject2(value)) {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: getErrorMessageForIncorrectType(value, \\"object\\")
          }
        ]
      };
    }
    const missingRequiredKeys = new Set(requiredKeys);
    const errors = [];
    const transformed = {};
    for (const [preTransformedKey, preTransformedItemValue] of Object.entries(value)) {
      const property2 = getProperty(preTransformedKey);
      if (property2 != null) {
        missingRequiredKeys.delete(preTransformedKey);
        const value2 = yield property2.transform(preTransformedItemValue);
        if (value2.ok) {
          transformed[property2.transformedKey] = value2.value;
        } else {
          transformed[preTransformedKey] = preTransformedItemValue;
          errors.push(...value2.errors);
        }
      } else {
        switch (unrecognizedObjectKeys) {
          case \\"fail\\":
            errors.push({
              path: [...breadcrumbsPrefix, preTransformedKey],
              message: \`Unexpected key \\"\${preTransformedKey}\\"\`
            });
            break;
          case \\"strip\\":
            break;
          case \\"passthrough\\":
            transformed[preTransformedKey] = preTransformedItemValue;
            break;
        }
      }
    }
    errors.push(
      ...requiredKeys.filter((key) => missingRequiredKeys.has(key)).map((key) => ({
        path: breadcrumbsPrefix,
        message: \`Missing required key \\"\${key}\\"\`
      }))
    );
    if (errors.length === 0 || skipValidation) {
      return {
        ok: true,
        value: transformed
      };
    } else {
      return {
        ok: false,
        errors
      };
    }
  });
}
function getObjectUtils(schema) {
  return {
    extend: (extension) => {
      const baseSchema = {
        _getParsedProperties: () => __async(this, null, function* () {
          return [
            ...yield schema._getParsedProperties(),
            ...yield extension._getParsedProperties()
          ];
        }),
        _getRawProperties: () => __async(this, null, function* () {
          return [
            ...yield schema._getRawProperties(),
            ...yield extension._getRawProperties()
          ];
        }),
        parse: (raw, opts) => __async(this, null, function* () {
          return validateAndTransformExtendedObject({
            extensionKeys: yield extension._getRawProperties(),
            value: raw,
            transformBase: (rawBase) => schema.parse(rawBase, opts),
            transformExtension: (rawExtension) => extension.parse(rawExtension, opts)
          });
        }),
        json: (parsed, opts) => __async(this, null, function* () {
          return validateAndTransformExtendedObject({
            extensionKeys: yield extension._getParsedProperties(),
            value: parsed,
            transformBase: (parsedBase) => schema.json(parsedBase, opts),
            transformExtension: (parsedExtension) => extension.json(parsedExtension, opts)
          });
        }),
        getType: () => SchemaType.OBJECT
      };
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, baseSchema), getSchemaUtils(baseSchema)), getObjectLikeUtils(baseSchema)), getObjectUtils(baseSchema));
    }
  };
}
function validateAndTransformExtendedObject(_0) {
  return __async(this, arguments, function* ({
    extensionKeys,
    value,
    transformBase,
    transformExtension
  }) {
    const extensionPropertiesSet = new Set(extensionKeys);
    const [extensionProperties, baseProperties] = partition(
      keys(value),
      (key) => extensionPropertiesSet.has(key)
    );
    const transformedBase = yield transformBase(filterObject(value, baseProperties));
    const transformedExtension = yield transformExtension(filterObject(value, extensionProperties));
    if (transformedBase.ok && transformedExtension.ok) {
      return {
        ok: true,
        value: __spreadValues(__spreadValues({}, transformedBase.value), transformedExtension.value)
      };
    } else {
      return {
        ok: false,
        errors: [
          ...transformedBase.ok ? [] : transformedBase.errors,
          ...transformedExtension.ok ? [] : transformedExtension.errors
        ]
      };
    }
  });
}
function isSchemaRequired(schema) {
  return __async(this, null, function* () {
    return !(yield isSchemaOptional(schema));
  });
}
function isSchemaOptional(schema) {
  return __async(this, null, function* () {
    switch (yield schema.getType()) {
      case SchemaType.ANY:
      case SchemaType.UNKNOWN:
      case SchemaType.OPTIONAL:
        return true;
      default:
        return false;
    }
  });
}

// src/core/schemas/builders/lazy/lazyObject.ts
function lazyObject(getter) {
  const baseSchema = __spreadProps(__spreadValues({}, constructLazyBaseSchema(getter)), {
    _getRawProperties: () => __async(this, null, function* () {
      return (yield getMemoizedSchema(getter))._getRawProperties();
    }),
    _getParsedProperties: () => __async(this, null, function* () {
      return (yield getMemoizedSchema(getter))._getParsedProperties();
    })
  });
  return __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, baseSchema), getSchemaUtils(baseSchema)), getObjectLikeUtils(baseSchema)), getObjectUtils(baseSchema));
}

// src/core/schemas/builders/list/list.ts
function list(schema) {
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      return validateAndTransformArray(
        raw,
        (item, index) => {
          var _a;
          return schema.parse(item, __spreadProps(__spreadValues({}, opts), {
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`[\${index}]\`]
          }));
        }
      );
    }),
    json: (parsed, opts) => validateAndTransformArray(
      parsed,
      (item, index) => {
        var _a;
        return schema.json(item, __spreadProps(__spreadValues({}, opts), {
          breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`[\${index}]\`]
        }));
      }
    ),
    getType: () => SchemaType.LIST
  };
  return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
}
function validateAndTransformArray(value, transformItem) {
  return __async(this, null, function* () {
    if (!Array.isArray(value)) {
      return {
        ok: false,
        errors: [
          {
            message: getErrorMessageForIncorrectType(value, \\"list\\"),
            path: []
          }
        ]
      };
    }
    const maybeValidItems = yield Promise.all(value.map((item, index) => transformItem(item, index)));
    return maybeValidItems.reduce(
      (acc, item) => {
        if (acc.ok && item.ok) {
          return {
            ok: true,
            value: [...acc.value, item.value]
          };
        }
        const errors = [];
        if (!acc.ok) {
          errors.push(...acc.errors);
        }
        if (!item.ok) {
          errors.push(...item.errors);
        }
        return {
          ok: false,
          errors
        };
      },
      { ok: true, value: [] }
    );
  });
}

// src/core/schemas/builders/literals/stringLiteral.ts
function stringLiteral(literal) {
  const schemaCreator = createIdentitySchemaCreator(
    SchemaType.STRING_LITERAL,
    (value, { breadcrumbsPrefix = [] } = {}) => {
      if (value === literal) {
        return {
          ok: true,
          value: literal
        };
      } else {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(value, \`\\"\${literal}\\"\`)
            }
          ]
        };
      }
    }
  );
  return schemaCreator();
}

// src/core/schemas/builders/primitives/any.ts
var any = createIdentitySchemaCreator(SchemaType.ANY, (value) => ({ ok: true, value }));

// src/core/schemas/builders/primitives/boolean.ts
var boolean = createIdentitySchemaCreator(
  SchemaType.BOOLEAN,
  (value, { breadcrumbsPrefix = [] } = {}) => {
    if (typeof value === \\"boolean\\") {
      return {
        ok: true,
        value
      };
    } else {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: getErrorMessageForIncorrectType(value, \\"boolean\\")
          }
        ]
      };
    }
  }
);

// src/core/schemas/builders/primitives/number.ts
var number = createIdentitySchemaCreator(
  SchemaType.NUMBER,
  (value, { breadcrumbsPrefix = [] } = {}) => {
    if (typeof value === \\"number\\") {
      return {
        ok: true,
        value
      };
    } else {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: getErrorMessageForIncorrectType(value, \\"number\\")
          }
        ]
      };
    }
  }
);

// src/core/schemas/builders/primitives/string.ts
var string = createIdentitySchemaCreator(
  SchemaType.STRING,
  (value, { breadcrumbsPrefix = [] } = {}) => {
    if (typeof value === \\"string\\") {
      return {
        ok: true,
        value
      };
    } else {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: getErrorMessageForIncorrectType(value, \\"string\\")
          }
        ]
      };
    }
  }
);

// src/core/schemas/builders/primitives/unknown.ts
var unknown = createIdentitySchemaCreator(SchemaType.UNKNOWN, (value) => ({ ok: true, value }));

// src/core/schemas/builders/record/record.ts
function record(keySchema, valueSchema) {
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      return validateAndTransformRecord({
        value: raw,
        isKeyNumeric: (yield keySchema.getType()) === SchemaType.NUMBER,
        transformKey: (key) => {
          var _a;
          return keySchema.parse(key, __spreadProps(__spreadValues({}, opts), {
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`\${key} (key)\`]
          }));
        },
        transformValue: (value, key) => {
          var _a;
          return valueSchema.parse(value, __spreadProps(__spreadValues({}, opts), {
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`\${key}\`]
          }));
        },
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      return validateAndTransformRecord({
        value: parsed,
        isKeyNumeric: (yield keySchema.getType()) === SchemaType.NUMBER,
        transformKey: (key) => {
          var _a;
          return keySchema.json(key, __spreadProps(__spreadValues({}, opts), {
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`\${key} (key)\`]
          }));
        },
        transformValue: (value, key) => {
          var _a;
          return valueSchema.json(value, __spreadProps(__spreadValues({}, opts), {
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`\${key}\`]
          }));
        },
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    getType: () => SchemaType.RECORD
  };
  return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
}
function validateAndTransformRecord(_0) {
  return __async(this, arguments, function* ({
    value,
    isKeyNumeric,
    transformKey,
    transformValue,
    breadcrumbsPrefix = []
  }) {
    if (!isPlainObject2(value)) {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: getErrorMessageForIncorrectType(value, \\"object\\")
          }
        ]
      };
    }
    return entries(value).reduce(
      (_02, _1) => __async(this, [_02, _1], function* (accPromise, [stringKey, value2]) {
        if (value2 == null) {
          return accPromise;
        }
        const acc = yield accPromise;
        let key = stringKey;
        if (isKeyNumeric) {
          const numberKey = stringKey.length > 0 ? Number(stringKey) : NaN;
          if (!isNaN(numberKey)) {
            key = numberKey;
          }
        }
        const transformedKey = yield transformKey(key);
        const transformedValue = yield transformValue(value2, key);
        if (acc.ok && transformedKey.ok && transformedValue.ok) {
          return {
            ok: true,
            value: __spreadProps(__spreadValues({}, acc.value), {
              [transformedKey.value]: transformedValue.value
            })
          };
        }
        const errors = [];
        if (!acc.ok) {
          errors.push(...acc.errors);
        }
        if (!transformedKey.ok) {
          errors.push(...transformedKey.errors);
        }
        if (!transformedValue.ok) {
          errors.push(...transformedValue.errors);
        }
        return {
          ok: false,
          errors
        };
      }),
      Promise.resolve({ ok: true, value: {} })
    );
  });
}

// src/core/schemas/builders/set/set.ts
function set(schema) {
  const listSchema = list(schema);
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      const parsedList = yield listSchema.parse(raw, opts);
      if (parsedList.ok) {
        return {
          ok: true,
          value: new Set(parsedList.value)
        };
      } else {
        return parsedList;
      }
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      var _a;
      if (!(parsed instanceof Set)) {
        return {
          ok: false,
          errors: [
            {
              path: (_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [],
              message: getErrorMessageForIncorrectType(parsed, \\"Set\\")
            }
          ]
        };
      }
      const jsonList = yield listSchema.json([...parsed], opts);
      return jsonList;
    }),
    getType: () => SchemaType.SET
  };
  return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
}

// src/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
function undiscriminatedUnion(schemas) {
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      return validateAndTransformUndiscriminatedUnion(
        (schema) => schema.parse(raw, opts),
        schemas
      );
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      return validateAndTransformUndiscriminatedUnion(
        (schema) => schema.json(parsed, opts),
        schemas
      );
    }),
    getType: () => SchemaType.UNDISCRIMINATED_UNION
  };
  return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
}
function validateAndTransformUndiscriminatedUnion(transform2, schemas) {
  return __async(this, null, function* () {
    const errors = [];
    for (const [index, schema] of schemas.entries()) {
      const transformed = yield transform2(schema);
      if (transformed.ok) {
        return transformed;
      } else {
        for (const error of errors) {
          errors.push({
            path: error.path,
            message: \`[Variant \${index}] \${error.message}\`
          });
        }
      }
    }
    return {
      ok: false,
      errors
    };
  });
}

// src/core/schemas/builders/union/discriminant.ts
function discriminant(parsedDiscriminant, rawDiscriminant) {
  return {
    parsedDiscriminant,
    rawDiscriminant
  };
}

// src/core/schemas/builders/union/union.ts
function union(discriminant2, union2) {
  const rawDiscriminant = typeof discriminant2 === \\"string\\" ? discriminant2 : discriminant2.rawDiscriminant;
  const parsedDiscriminant = typeof discriminant2 === \\"string\\" ? discriminant2 : discriminant2.parsedDiscriminant;
  const discriminantValueSchema = enum_(keys(union2));
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      return transformAndValidateUnion({
        value: raw,
        discriminant: rawDiscriminant,
        transformedDiscriminant: parsedDiscriminant,
        transformDiscriminantValue: (discriminantValue) => {
          var _a;
          return discriminantValueSchema.parse(discriminantValue, {
            allowUnrecognizedEnumValues: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], rawDiscriminant]
          });
        },
        getAdditionalPropertiesSchema: (discriminantValue) => union2[discriminantValue],
        allowUnrecognizedUnionMembers: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
        transformAdditionalProperties: (additionalProperties, additionalPropertiesSchema) => additionalPropertiesSchema.parse(additionalProperties, opts),
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      return transformAndValidateUnion({
        value: parsed,
        discriminant: parsedDiscriminant,
        transformedDiscriminant: rawDiscriminant,
        transformDiscriminantValue: (discriminantValue) => {
          var _a;
          return discriminantValueSchema.json(discriminantValue, {
            allowUnrecognizedEnumValues: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], parsedDiscriminant]
          });
        },
        getAdditionalPropertiesSchema: (discriminantValue) => union2[discriminantValue],
        allowUnrecognizedUnionMembers: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
        transformAdditionalProperties: (additionalProperties, additionalPropertiesSchema) => additionalPropertiesSchema.json(additionalProperties, opts),
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    getType: () => SchemaType.UNION
  };
  return __spreadValues(__spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema)), getObjectLikeUtils(baseSchema));
}
function transformAndValidateUnion(_0) {
  return __async(this, arguments, function* ({
    value,
    discriminant: discriminant2,
    transformedDiscriminant,
    transformDiscriminantValue,
    getAdditionalPropertiesSchema,
    allowUnrecognizedUnionMembers = false,
    transformAdditionalProperties,
    breadcrumbsPrefix = []
  }) {
    if (!isPlainObject2(value)) {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: getErrorMessageForIncorrectType(value, \\"object\\")
          }
        ]
      };
    }
    const _a = value, { [discriminant2]: discriminantValue } = _a, additionalProperties = __objRest(_a, [__restKey(discriminant2)]);
    if (discriminantValue == null) {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: \`Missing discriminant (\\"\${discriminant2}\\")\`
          }
        ]
      };
    }
    const transformedDiscriminantValue = yield transformDiscriminantValue(discriminantValue);
    if (!transformedDiscriminantValue.ok) {
      return {
        ok: false,
        errors: transformedDiscriminantValue.errors
      };
    }
    const additionalPropertiesSchema = getAdditionalPropertiesSchema(transformedDiscriminantValue.value);
    if (additionalPropertiesSchema == null) {
      if (allowUnrecognizedUnionMembers) {
        return {
          ok: true,
          value: __spreadValues({
            [transformedDiscriminant]: transformedDiscriminantValue.value
          }, additionalProperties)
        };
      } else {
        return {
          ok: false,
          errors: [
            {
              path: [...breadcrumbsPrefix, discriminant2],
              message: \\"Unexpected discriminant value\\"
            }
          ]
        };
      }
    }
    const transformedAdditionalProperties = yield transformAdditionalProperties(
      additionalProperties,
      additionalPropertiesSchema
    );
    if (!transformedAdditionalProperties.ok) {
      return transformedAdditionalProperties;
    }
    return {
      ok: true,
      value: __spreadValues({
        [transformedDiscriminant]: discriminantValue
      }, transformedAdditionalProperties.value)
    };
  });
}
export {
  BasicAuth,
  BearerToken,
  Supplier,
  fetcher,
  schemas_exports as serialization
};
",
                "name": "core.js",
                "type": "file",
              },
              Object {
                "contents": "var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b ||= {})
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __restKey = (key) => typeof key === \\"symbol\\" ? key : key + \\"\\";
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all3) => {
  for (var name in all3)
    __defProp(target, name, { get: all3[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === \\"object\\" || typeof from === \\"function\\") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. \\"__esModule\\" has not been set), then set
  // \\"default\\" to the CommonJS \\"module.exports\\" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \\"default\\", { value: mod, enumerable: true }) : target,
  mod
));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/api/resources/remoteGen/types/RemoteGenJobId.ts
function RemoteGenJobId(value) {
  return value;
}
var init_RemoteGenJobId = __esm({
  \\"src/api/resources/remoteGen/types/RemoteGenJobId.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/RemoteGenTaskId.ts
function RemoteGenTaskId(value) {
  return value;
}
var init_RemoteGenTaskId = __esm({
  \\"src/api/resources/remoteGen/types/RemoteGenTaskId.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GeneratorIdAndVersion.ts
var init_GeneratorIdAndVersion = __esm({
  \\"src/api/resources/remoteGen/types/GeneratorIdAndVersion.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GeneratorConfig.ts
var init_GeneratorConfig = __esm({
  \\"src/api/resources/remoteGen/types/GeneratorConfig.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GeneratorConfigV2.ts
var init_GeneratorConfigV2 = __esm({
  \\"src/api/resources/remoteGen/types/GeneratorConfigV2.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/OutputMode.ts
var OutputMode;
var init_OutputMode = __esm({
  \\"src/api/resources/remoteGen/types/OutputMode.ts\\"() {
    \\"use strict\\";
    init_api();
    OutputMode = {
      publish: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"publish\\",
          _visit: function(visitor) {
            return OutputMode._visit(this, visitor);
          }
        });
      },
      publishV2: (value) => {
        return {
          publishV2: value,
          type: \\"publishV2\\",
          _visit: function(visitor) {
            return OutputMode._visit(this, visitor);
          }
        };
      },
      downloadFiles: () => {
        return {
          type: \\"downloadFiles\\",
          _visit: function(visitor) {
            return OutputMode._visit(this, visitor);
          }
        };
      },
      github: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"github\\",
          _visit: function(visitor) {
            return OutputMode._visit(this, visitor);
          }
        });
      },
      _unknown: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          _visit: function(visitor) {
            return OutputMode._visit(this, visitor);
          }
        });
      },
      _visit: (value, visitor) => {
        switch (value.type) {
          case \\"publish\\":
            return visitor.publish(value);
          case \\"publishV2\\":
            return visitor.publishV2(value.publishV2);
          case \\"downloadFiles\\":
            return visitor.downloadFiles();
          case \\"github\\":
            return visitor.github(value);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/types/PublishOutputMode.ts
var init_PublishOutputMode = __esm({
  \\"src/api/resources/remoteGen/types/PublishOutputMode.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/PublishOutputModeV2.ts
var PublishOutputModeV2;
var init_PublishOutputModeV2 = __esm({
  \\"src/api/resources/remoteGen/types/PublishOutputModeV2.ts\\"() {
    \\"use strict\\";
    init_api();
    PublishOutputModeV2 = {
      npmOverride: (value) => {
        return {
          npmOverride: value,
          type: \\"npmOverride\\",
          _visit: function(visitor) {
            return PublishOutputModeV2._visit(this, visitor);
          }
        };
      },
      mavenOverride: (value) => {
        return {
          mavenOverride: value,
          type: \\"mavenOverride\\",
          _visit: function(visitor) {
            return PublishOutputModeV2._visit(this, visitor);
          }
        };
      },
      postman: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"postman\\",
          _visit: function(visitor) {
            return PublishOutputModeV2._visit(this, visitor);
          }
        });
      },
      _unknown: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          _visit: function(visitor) {
            return PublishOutputModeV2._visit(this, visitor);
          }
        });
      },
      _visit: (value, visitor) => {
        switch (value.type) {
          case \\"npmOverride\\":
            return visitor.npmOverride(value.npmOverride);
          case \\"mavenOverride\\":
            return visitor.mavenOverride(value.mavenOverride);
          case \\"postman\\":
            return visitor.postman(value);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/types/RegistryOverrides.ts
var init_RegistryOverrides = __esm({
  \\"src/api/resources/remoteGen/types/RegistryOverrides.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GeneratorOutputs.ts
var init_GeneratorOutputs = __esm({
  \\"src/api/resources/remoteGen/types/GeneratorOutputs.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/NpmOutput.ts
var init_NpmOutput = __esm({
  \\"src/api/resources/remoteGen/types/NpmOutput.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/MavenOutput.ts
var init_MavenOutput = __esm({
  \\"src/api/resources/remoteGen/types/MavenOutput.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/PostmanOutput.ts
var init_PostmanOutput = __esm({
  \\"src/api/resources/remoteGen/types/PostmanOutput.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GithubOutputMode.ts
var init_GithubOutputMode = __esm({
  \\"src/api/resources/remoteGen/types/GithubOutputMode.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GithubPublishInfo.ts
var GithubPublishInfo;
var init_GithubPublishInfo = __esm({
  \\"src/api/resources/remoteGen/types/GithubPublishInfo.ts\\"() {
    \\"use strict\\";
    init_api();
    GithubPublishInfo = {
      npm: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"npm\\",
          _visit: function(visitor) {
            return GithubPublishInfo._visit(this, visitor);
          }
        });
      },
      maven: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"maven\\",
          _visit: function(visitor) {
            return GithubPublishInfo._visit(this, visitor);
          }
        });
      },
      postman: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"postman\\",
          _visit: function(visitor) {
            return GithubPublishInfo._visit(this, visitor);
          }
        });
      },
      _unknown: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          _visit: function(visitor) {
            return GithubPublishInfo._visit(this, visitor);
          }
        });
      },
      _visit: (value, visitor) => {
        switch (value.type) {
          case \\"npm\\":
            return visitor.npm(value);
          case \\"maven\\":
            return visitor.maven(value);
          case \\"postman\\":
            return visitor.postman(value);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/types/NpmOutputWithOptionalToken.ts
var init_NpmOutputWithOptionalToken = __esm({
  \\"src/api/resources/remoteGen/types/NpmOutputWithOptionalToken.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/MavenOutputWithOptionalCreds.ts
var init_MavenOutputWithOptionalCreds = __esm({
  \\"src/api/resources/remoteGen/types/MavenOutputWithOptionalCreds.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/UsernamePassword.ts
var init_UsernamePassword = __esm({
  \\"src/api/resources/remoteGen/types/UsernamePassword.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/Task.ts
var init_Task = __esm({
  \\"src/api/resources/remoteGen/types/Task.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/TaskStatus.ts
var TaskStatus;
var init_TaskStatus = __esm({
  \\"src/api/resources/remoteGen/types/TaskStatus.ts\\"() {
    \\"use strict\\";
    init_api();
    TaskStatus = {
      notStarted: () => {
        return {
          type: \\"notStarted\\",
          _visit: function(visitor) {
            return TaskStatus._visit(this, visitor);
          }
        };
      },
      running: () => {
        return {
          type: \\"running\\",
          _visit: function(visitor) {
            return TaskStatus._visit(this, visitor);
          }
        };
      },
      failed: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"failed\\",
          _visit: function(visitor) {
            return TaskStatus._visit(this, visitor);
          }
        });
      },
      finished: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"finished\\",
          _visit: function(visitor) {
            return TaskStatus._visit(this, visitor);
          }
        });
      },
      _unknown: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          _visit: function(visitor) {
            return TaskStatus._visit(this, visitor);
          }
        });
      },
      _visit: (value, visitor) => {
        switch (value.type) {
          case \\"notStarted\\":
            return visitor.notStarted();
          case \\"running\\":
            return visitor.running();
          case \\"failed\\":
            return visitor.failed(value);
          case \\"finished\\":
            return visitor.finished(value);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/types/FailedTaskStatus.ts
var init_FailedTaskStatus = __esm({
  \\"src/api/resources/remoteGen/types/FailedTaskStatus.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/FinishedTaskStatus.ts
var init_FinishedTaskStatus = __esm({
  \\"src/api/resources/remoteGen/types/FinishedTaskStatus.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/TaskLog.ts
var init_TaskLog = __esm({
  \\"src/api/resources/remoteGen/types/TaskLog.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/LogLevel.ts
var LogLevel;
var init_LogLevel = __esm({
  \\"src/api/resources/remoteGen/types/LogLevel.ts\\"() {
    \\"use strict\\";
    LogLevel = {
      Debug: \\"DEBUG\\",
      Info: \\"INFO\\",
      Warn: \\"WARN\\",
      Error: \\"ERROR\\"
    };
  }
});

// src/api/resources/remoteGen/types/Package.ts
var init_Package = __esm({
  \\"src/api/resources/remoteGen/types/Package.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/PackagePublishStatus.ts
var PackagePublishStatus;
var init_PackagePublishStatus = __esm({
  \\"src/api/resources/remoteGen/types/PackagePublishStatus.ts\\"() {
    \\"use strict\\";
    PackagePublishStatus = {
      NotStartedPublishing: \\"NOT_STARTED_PUBLISHING\\",
      Publishing: \\"PUBLISHING\\",
      Published: \\"PUBLISHED\\",
      FailedToPublish: \\"FAILED_TO_PUBLISH\\"
    };
  }
});

// src/api/resources/remoteGen/types/PackageCoordinate.ts
var PackageCoordinate;
var init_PackageCoordinate = __esm({
  \\"src/api/resources/remoteGen/types/PackageCoordinate.ts\\"() {
    \\"use strict\\";
    init_api();
    PackageCoordinate = {
      npm: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"npm\\",
          _visit: function(visitor) {
            return PackageCoordinate._visit(this, visitor);
          }
        });
      },
      maven: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"maven\\",
          _visit: function(visitor) {
            return PackageCoordinate._visit(this, visitor);
          }
        });
      },
      pypi: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"pypi\\",
          _visit: function(visitor) {
            return PackageCoordinate._visit(this, visitor);
          }
        });
      },
      _unknown: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          _visit: function(visitor) {
            return PackageCoordinate._visit(this, visitor);
          }
        });
      },
      _visit: (value, visitor) => {
        switch (value.type) {
          case \\"npm\\":
            return visitor.npm(value);
          case \\"maven\\":
            return visitor.maven(value);
          case \\"pypi\\":
            return visitor.pypi(value);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/types/NpmCoordinate.ts
var init_NpmCoordinate = __esm({
  \\"src/api/resources/remoteGen/types/NpmCoordinate.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/MavenCoordinate.ts
var init_MavenCoordinate = __esm({
  \\"src/api/resources/remoteGen/types/MavenCoordinate.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/PypiCoordinate.ts
var init_PypiCoordinate = __esm({
  \\"src/api/resources/remoteGen/types/PypiCoordinate.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/CreateJobResponse.ts
var init_CreateJobResponse = __esm({
  \\"src/api/resources/remoteGen/types/CreateJobResponse.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GeneratorsDoNotExistErrorBodyType.ts
var init_GeneratorsDoNotExistErrorBodyType = __esm({
  \\"src/api/resources/remoteGen/types/GeneratorsDoNotExistErrorBodyType.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/CannotPublishToNpmScopeDetails.ts
var init_CannotPublishToNpmScopeDetails = __esm({
  \\"src/api/resources/remoteGen/types/CannotPublishToNpmScopeDetails.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/CannotPublishToMavenGroupDetails.ts
var init_CannotPublishToMavenGroupDetails = __esm({
  \\"src/api/resources/remoteGen/types/CannotPublishToMavenGroupDetails.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/InsufficientPermissionsDetails.ts
var init_InsufficientPermissionsDetails = __esm({
  \\"src/api/resources/remoteGen/types/InsufficientPermissionsDetails.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/index.ts
var init_types = __esm({
  \\"src/api/resources/remoteGen/types/index.ts\\"() {
    \\"use strict\\";
    init_RemoteGenJobId();
    init_RemoteGenTaskId();
    init_GeneratorIdAndVersion();
    init_GeneratorConfig();
    init_GeneratorConfigV2();
    init_OutputMode();
    init_PublishOutputMode();
    init_PublishOutputModeV2();
    init_RegistryOverrides();
    init_GeneratorOutputs();
    init_NpmOutput();
    init_MavenOutput();
    init_PostmanOutput();
    init_GithubOutputMode();
    init_GithubPublishInfo();
    init_NpmOutputWithOptionalToken();
    init_MavenOutputWithOptionalCreds();
    init_UsernamePassword();
    init_Task();
    init_TaskStatus();
    init_FailedTaskStatus();
    init_FinishedTaskStatus();
    init_TaskLog();
    init_LogLevel();
    init_Package();
    init_PackagePublishStatus();
    init_PackageCoordinate();
    init_NpmCoordinate();
    init_MavenCoordinate();
    init_PypiCoordinate();
    init_CreateJobResponse();
    init_GeneratorsDoNotExistErrorBodyType();
    init_CannotPublishToNpmScopeDetails();
    init_CannotPublishToMavenGroupDetails();
    init_InsufficientPermissionsDetails();
  }
});

// src/api/resources/remoteGen/client/requests/index.ts
var init_requests = __esm({
  \\"src/api/resources/remoteGen/client/requests/index.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/client/createJob.ts
var createJob_exports = {};
__export(createJob_exports, {
  Error: () => Error2
});
var Error2;
var init_createJob = __esm({
  \\"src/api/resources/remoteGen/client/createJob.ts\\"() {
    \\"use strict\\";
    init_api();
    Error2 = {
      illegalApiNameError: () => {
        return {
          error: \\"IllegalApiNameError\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      generatorsDoNotExistError: (value) => {
        return {
          content: value,
          error: \\"GeneratorsDoNotExistError\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      cannotPublishToNpmScope: (value) => {
        return {
          content: value,
          error: \\"CannotPublishToNpmScope\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      cannotPublishToMavenGroup: (value) => {
        return {
          content: value,
          error: \\"CannotPublishToMavenGroup\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      insufficientPermissions: (value) => {
        return {
          content: value,
          error: \\"InsufficientPermissions\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      _unknown: (fetcherError) => {
        return {
          error: void 0,
          content: fetcherError,
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.error) {
          case \\"IllegalApiNameError\\":
            return visitor.illegalApiNameError();
          case \\"GeneratorsDoNotExistError\\":
            return visitor.generatorsDoNotExistError(value.content);
          case \\"CannotPublishToNpmScope\\":
            return visitor.cannotPublishToNpmScope(value.content);
          case \\"CannotPublishToMavenGroup\\":
            return visitor.cannotPublishToMavenGroup(value.content);
          case \\"InsufficientPermissions\\":
            return visitor.insufficientPermissions(value.content);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/client/createJobV2.ts
var createJobV2_exports = {};
__export(createJobV2_exports, {
  Error: () => Error3
});
var Error3;
var init_createJobV2 = __esm({
  \\"src/api/resources/remoteGen/client/createJobV2.ts\\"() {
    \\"use strict\\";
    init_api();
    Error3 = {
      illegalApiNameError: () => {
        return {
          error: \\"IllegalApiNameError\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      generatorsDoNotExistError: (value) => {
        return {
          content: value,
          error: \\"GeneratorsDoNotExistError\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      cannotPublishToNpmScope: (value) => {
        return {
          content: value,
          error: \\"CannotPublishToNpmScope\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      cannotPublishToMavenGroup: (value) => {
        return {
          content: value,
          error: \\"CannotPublishToMavenGroup\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      insufficientPermissions: (value) => {
        return {
          content: value,
          error: \\"InsufficientPermissions\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      _unknown: (fetcherError) => {
        return {
          error: void 0,
          content: fetcherError,
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.error) {
          case \\"IllegalApiNameError\\":
            return visitor.illegalApiNameError();
          case \\"GeneratorsDoNotExistError\\":
            return visitor.generatorsDoNotExistError(value.content);
          case \\"CannotPublishToNpmScope\\":
            return visitor.cannotPublishToNpmScope(value.content);
          case \\"CannotPublishToMavenGroup\\":
            return visitor.cannotPublishToMavenGroup(value.content);
          case \\"InsufficientPermissions\\":
            return visitor.insufficientPermissions(value.content);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/client/getJobStatus.ts
var getJobStatus_exports = {};
__export(getJobStatus_exports, {
  Error: () => Error4
});
var Error4;
var init_getJobStatus = __esm({
  \\"src/api/resources/remoteGen/client/getJobStatus.ts\\"() {
    \\"use strict\\";
    init_api();
    Error4 = {
      _unknown: (fetcherError) => {
        return {
          error: void 0,
          content: fetcherError,
          _visit: function(visitor) {
            return remoteGen_exports.getJobStatus.Error._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.error) {
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/client/index.ts
var init_client = __esm({
  \\"src/api/resources/remoteGen/client/index.ts\\"() {
    \\"use strict\\";
    init_requests();
    init_createJob();
    init_createJobV2();
    init_getJobStatus();
  }
});

// src/api/resources/remoteGen/index.ts
var remoteGen_exports = {};
__export(remoteGen_exports, {
  GithubPublishInfo: () => GithubPublishInfo,
  LogLevel: () => LogLevel,
  OutputMode: () => OutputMode,
  PackageCoordinate: () => PackageCoordinate,
  PackagePublishStatus: () => PackagePublishStatus,
  PublishOutputModeV2: () => PublishOutputModeV2,
  RemoteGenJobId: () => RemoteGenJobId,
  RemoteGenTaskId: () => RemoteGenTaskId,
  TaskStatus: () => TaskStatus,
  createJob: () => createJob_exports,
  createJobV2: () => createJobV2_exports,
  getJobStatus: () => getJobStatus_exports
});
var init_remoteGen = __esm({
  \\"src/api/resources/remoteGen/index.ts\\"() {
    \\"use strict\\";
    init_types();
    init_client();
  }
});

// src/api/resources/fiddle/client/test.ts
var test_exports = {};
__export(test_exports, {
  Error: () => Error5
});
var Error5;
var init_test = __esm({
  \\"src/api/resources/fiddle/client/test.ts\\"() {
    \\"use strict\\";
    init_api();
    Error5 = {
      _unknown: (fetcherError) => {
        return {
          error: void 0,
          content: fetcherError,
          _visit: function(visitor) {
            return fiddle_exports.test.Error._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.error) {
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/fiddle/client/index.ts
var init_client2 = __esm({
  \\"src/api/resources/fiddle/client/index.ts\\"() {
    \\"use strict\\";
    init_test();
  }
});

// src/api/resources/fiddle/index.ts
var fiddle_exports = {};
__export(fiddle_exports, {
  test: () => test_exports
});
var init_fiddle = __esm({
  \\"src/api/resources/fiddle/index.ts\\"() {
    \\"use strict\\";
    init_client2();
  }
});

// src/api/resources/health/client/status.ts
var status_exports = {};
__export(status_exports, {
  Error: () => Error6
});
var Error6;
var init_status = __esm({
  \\"src/api/resources/health/client/status.ts\\"() {
    \\"use strict\\";
    init_api();
    Error6 = {
      _unknown: (fetcherError) => {
        return {
          error: void 0,
          content: fetcherError,
          _visit: function(visitor) {
            return health_exports.status.Error._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.error) {
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/health/client/index.ts
var init_client3 = __esm({
  \\"src/api/resources/health/client/index.ts\\"() {
    \\"use strict\\";
    init_status();
  }
});

// src/api/resources/health/index.ts
var health_exports = {};
__export(health_exports, {
  status: () => status_exports
});
var init_health = __esm({
  \\"src/api/resources/health/index.ts\\"() {
    \\"use strict\\";
    init_client3();
  }
});

// src/api/resources/index.ts
var init_resources = __esm({
  \\"src/api/resources/index.ts\\"() {
    \\"use strict\\";
    init_remoteGen();
    init_types();
    init_fiddle();
    init_health();
    init_requests();
  }
});

// src/api/index.ts
var api_exports = {};
__export(api_exports, {
  GithubPublishInfo: () => GithubPublishInfo,
  LogLevel: () => LogLevel,
  OutputMode: () => OutputMode,
  PackageCoordinate: () => PackageCoordinate,
  PackagePublishStatus: () => PackagePublishStatus,
  PublishOutputModeV2: () => PublishOutputModeV2,
  RemoteGenJobId: () => RemoteGenJobId,
  RemoteGenTaskId: () => RemoteGenTaskId,
  TaskStatus: () => TaskStatus,
  fiddle: () => fiddle_exports,
  health: () => health_exports,
  remoteGen: () => remoteGen_exports
});
var init_api = __esm({
  \\"src/api/index.ts\\"() {
    \\"use strict\\";
    init_resources();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/bind.js
function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}
var init_bind = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/bind.js\\"() {
    \\"use strict\\";
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/utils.js
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}
function isArrayBufferView(val) {
  let result;
  if (typeof ArrayBuffer !== \\"undefined\\" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
function forEach(obj, fn, { allOwnKeys = false } = {}) {
  if (obj === null || typeof obj === \\"undefined\\") {
    return;
  }
  let i;
  let l;
  if (typeof obj !== \\"object\\") {
    obj = [obj];
  }
  if (isArray(obj)) {
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    const keys2 = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys2.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys2[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}
function findKey(obj, key) {
  key = key.toLowerCase();
  const keys2 = Object.keys(obj);
  let i = keys2.length;
  let _key;
  while (i-- > 0) {
    _key = keys2[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
function merge() {
  const { caseless } = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };
  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === \\"FormData\\" && thing[Symbol.iterator]);
}
var toString, getPrototypeOf, kindOf, kindOfTest, typeOfTest, isArray, isUndefined, isArrayBuffer, isString, isFunction, isNumber, isObject, isBoolean, isPlainObject, isDate, isFile, isBlob, isFileList, isStream, isFormData, isURLSearchParams, trim, _global, isContextDefined, extend, stripBOM, inherits, toFlatObject, endsWith, toArray, isTypedArray, forEachEntry, matchAll, isHTMLForm, toCamelCase, hasOwnProperty, isRegExp, reduceDescriptors, freezeMethods, toObjectSet, noop, toFiniteNumber, ALPHA, DIGIT, ALPHABET, generateString, toJSONObject, isAsyncFn, isThenable, utils_default;
var init_utils = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/utils.js\\"() {
    \\"use strict\\";
    init_bind();
    ({ toString } = Object.prototype);
    ({ getPrototypeOf } = Object);
    kindOf = ((cache) => (thing) => {
      const str = toString.call(thing);
      return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    })(/* @__PURE__ */ Object.create(null));
    kindOfTest = (type) => {
      type = type.toLowerCase();
      return (thing) => kindOf(thing) === type;
    };
    typeOfTest = (type) => (thing) => typeof thing === type;
    ({ isArray } = Array);
    isUndefined = typeOfTest(\\"undefined\\");
    isArrayBuffer = kindOfTest(\\"ArrayBuffer\\");
    isString = typeOfTest(\\"string\\");
    isFunction = typeOfTest(\\"function\\");
    isNumber = typeOfTest(\\"number\\");
    isObject = (thing) => thing !== null && typeof thing === \\"object\\";
    isBoolean = (thing) => thing === true || thing === false;
    isPlainObject = (val) => {
      if (kindOf(val) !== \\"object\\") {
        return false;
      }
      const prototype3 = getPrototypeOf(val);
      return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
    };
    isDate = kindOfTest(\\"Date\\");
    isFile = kindOfTest(\\"File\\");
    isBlob = kindOfTest(\\"Blob\\");
    isFileList = kindOfTest(\\"FileList\\");
    isStream = (val) => isObject(val) && isFunction(val.pipe);
    isFormData = (thing) => {
      let kind;
      return thing && (typeof FormData === \\"function\\" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === \\"formdata\\" || kind === \\"object\\" && isFunction(thing.toString) && thing.toString() === \\"[object FormData]\\"));
    };
    isURLSearchParams = kindOfTest(\\"URLSearchParams\\");
    trim = (str) => str.trim ? str.trim() : str.replace(/^[\\\\s\\\\uFEFF\\\\xA0]+|[\\\\s\\\\uFEFF\\\\xA0]+$/g, \\"\\");
    _global = (() => {
      if (typeof globalThis !== \\"undefined\\")
        return globalThis;
      return typeof self !== \\"undefined\\" ? self : typeof window !== \\"undefined\\" ? window : global;
    })();
    isContextDefined = (context) => !isUndefined(context) && context !== _global;
    extend = (a, b, thisArg, { allOwnKeys } = {}) => {
      forEach(b, (val, key) => {
        if (thisArg && isFunction(val)) {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      }, { allOwnKeys });
      return a;
    };
    stripBOM = (content) => {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    };
    inherits = (constructor, superConstructor, props, descriptors2) => {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
      constructor.prototype.constructor = constructor;
      Object.defineProperty(constructor, \\"super\\", {
        value: superConstructor.prototype
      });
      props && Object.assign(constructor.prototype, props);
    };
    toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
      let props;
      let i;
      let prop;
      const merged = {};
      destObj = destObj || {};
      if (sourceObj == null)
        return destObj;
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    };
    endsWith = (str, searchString, position) => {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      const lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };
    toArray = (thing) => {
      if (!thing)
        return null;
      if (isArray(thing))
        return thing;
      let i = thing.length;
      if (!isNumber(i))
        return null;
      const arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    };
    isTypedArray = ((TypedArray) => {
      return (thing) => {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== \\"undefined\\" && getPrototypeOf(Uint8Array));
    forEachEntry = (obj, fn) => {
      const generator = obj && obj[Symbol.iterator];
      const iterator = generator.call(obj);
      let result;
      while ((result = iterator.next()) && !result.done) {
        const pair = result.value;
        fn.call(obj, pair[0], pair[1]);
      }
    };
    matchAll = (regExp, str) => {
      let matches;
      const arr = [];
      while ((matches = regExp.exec(str)) !== null) {
        arr.push(matches);
      }
      return arr;
    };
    isHTMLForm = kindOfTest(\\"HTMLFormElement\\");
    toCamelCase = (str) => {
      return str.toLowerCase().replace(
        /[-_\\\\s]([a-z\\\\d])(\\\\w*)/g,
        function replacer(m, p1, p2) {
          return p1.toUpperCase() + p2;
        }
      );
    };
    hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
    isRegExp = kindOfTest(\\"RegExp\\");
    reduceDescriptors = (obj, reducer) => {
      const descriptors2 = Object.getOwnPropertyDescriptors(obj);
      const reducedDescriptors = {};
      forEach(descriptors2, (descriptor, name) => {
        if (reducer(descriptor, name, obj) !== false) {
          reducedDescriptors[name] = descriptor;
        }
      });
      Object.defineProperties(obj, reducedDescriptors);
    };
    freezeMethods = (obj) => {
      reduceDescriptors(obj, (descriptor, name) => {
        if (isFunction(obj) && [\\"arguments\\", \\"caller\\", \\"callee\\"].indexOf(name) !== -1) {
          return false;
        }
        const value = obj[name];
        if (!isFunction(value))
          return;
        descriptor.enumerable = false;
        if (\\"writable\\" in descriptor) {
          descriptor.writable = false;
          return;
        }
        if (!descriptor.set) {
          descriptor.set = () => {
            throw Error(\\"Can not rewrite read-only method '\\" + name + \\"'\\");
          };
        }
      });
    };
    toObjectSet = (arrayOrString, delimiter) => {
      const obj = {};
      const define2 = (arr) => {
        arr.forEach((value) => {
          obj[value] = true;
        });
      };
      isArray(arrayOrString) ? define2(arrayOrString) : define2(String(arrayOrString).split(delimiter));
      return obj;
    };
    noop = () => {
    };
    toFiniteNumber = (value, defaultValue) => {
      value = +value;
      return Number.isFinite(value) ? value : defaultValue;
    };
    ALPHA = \\"abcdefghijklmnopqrstuvwxyz\\";
    DIGIT = \\"0123456789\\";
    ALPHABET = {
      DIGIT,
      ALPHA,
      ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
    };
    generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
      let str = \\"\\";
      const { length } = alphabet;
      while (size--) {
        str += alphabet[Math.random() * length | 0];
      }
      return str;
    };
    toJSONObject = (obj) => {
      const stack = new Array(10);
      const visit = (source, i) => {
        if (isObject(source)) {
          if (stack.indexOf(source) >= 0) {
            return;
          }
          if (!(\\"toJSON\\" in source)) {
            stack[i] = source;
            const target = isArray(source) ? [] : {};
            forEach(source, (value, key) => {
              const reducedValue = visit(value, i + 1);
              !isUndefined(reducedValue) && (target[key] = reducedValue);
            });
            stack[i] = void 0;
            return target;
          }
        }
        return source;
      };
      return visit(obj, 0);
    };
    isAsyncFn = kindOfTest(\\"AsyncFunction\\");
    isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
    utils_default = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isBoolean,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isRegExp,
      isFunction,
      isStream,
      isURLSearchParams,
      isTypedArray,
      isFileList,
      forEach,
      merge,
      extend,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray,
      forEachEntry,
      matchAll,
      isHTMLForm,
      hasOwnProperty,
      hasOwnProp: hasOwnProperty,
      // an alias to avoid ESLint no-prototype-builtins detection
      reduceDescriptors,
      freezeMethods,
      toObjectSet,
      toCamelCase,
      noop,
      toFiniteNumber,
      findKey,
      global: _global,
      isContextDefined,
      ALPHABET,
      generateString,
      isSpecCompliantForm,
      toJSONObject,
      isAsyncFn,
      isThenable
    };
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/AxiosError.js
function AxiosError(message, code, config, request, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message;
  this.name = \\"AxiosError\\";
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  response && (this.response = response);
}
var prototype, descriptors, AxiosError_default;
var init_AxiosError = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/AxiosError.js\\"() {
    \\"use strict\\";
    init_utils();
    utils_default.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: utils_default.toJSONObject(this.config),
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      }
    });
    prototype = AxiosError.prototype;
    descriptors = {};
    [
      \\"ERR_BAD_OPTION_VALUE\\",
      \\"ERR_BAD_OPTION\\",
      \\"ECONNABORTED\\",
      \\"ETIMEDOUT\\",
      \\"ERR_NETWORK\\",
      \\"ERR_FR_TOO_MANY_REDIRECTS\\",
      \\"ERR_DEPRECATED\\",
      \\"ERR_BAD_RESPONSE\\",
      \\"ERR_BAD_REQUEST\\",
      \\"ERR_CANCELED\\",
      \\"ERR_NOT_SUPPORT\\",
      \\"ERR_INVALID_URL\\"
      // eslint-disable-next-line func-names
    ].forEach((code) => {
      descriptors[code] = { value: code };
    });
    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype, \\"isAxiosError\\", { value: true });
    AxiosError.from = (error, code, config, request, response, customProps) => {
      const axiosError = Object.create(prototype);
      utils_default.toFlatObject(error, axiosError, function filter2(obj) {
        return obj !== Error.prototype;
      }, (prop) => {
        return prop !== \\"isAxiosError\\";
      });
      AxiosError.call(axiosError, error.message, code, config, request, response);
      axiosError.cause = error;
      axiosError.name = error.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    AxiosError_default = AxiosError;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/null.js
var null_default;
var init_null = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/null.js\\"() {
    null_default = null;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/toFormData.js
function isVisitable(thing) {
  return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
}
function removeBrackets(key) {
  return utils_default.endsWith(key, \\"[]\\") ? key.slice(0, -2) : key;
}
function renderKey(path, key, dots) {
  if (!path)
    return key;
  return path.concat(key).map(function each(token, i) {
    token = removeBrackets(token);
    return !dots && i ? \\"[\\" + token + \\"]\\" : token;
  }).join(dots ? \\".\\" : \\"\\");
}
function isFlatArray(arr) {
  return utils_default.isArray(arr) && !arr.some(isVisitable);
}
function toFormData(obj, formData, options) {
  if (!utils_default.isObject(obj)) {
    throw new TypeError(\\"target must be an object\\");
  }
  formData = formData || new (null_default || FormData)();
  options = utils_default.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    return !utils_default.isUndefined(source[option]);
  });
  const metaTokens = options.metaTokens;
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== \\"undefined\\" && Blob;
  const useBlob = _Blob && utils_default.isSpecCompliantForm(formData);
  if (!utils_default.isFunction(visitor)) {
    throw new TypeError(\\"visitor must be a function\\");
  }
  function convertValue(value) {
    if (value === null)
      return \\"\\";
    if (utils_default.isDate(value)) {
      return value.toISOString();
    }
    if (!useBlob && utils_default.isBlob(value)) {
      throw new AxiosError_default(\\"Blob is not supported. Use a Buffer instead.\\");
    }
    if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {
      return useBlob && typeof Blob === \\"function\\" ? new Blob([value]) : Buffer.from(value);
    }
    return value;
  }
  function defaultVisitor(value, key, path) {
    let arr = value;
    if (value && !path && typeof value === \\"object\\") {
      if (utils_default.endsWith(key, \\"{}\\")) {
        key = metaTokens ? key : key.slice(0, -2);
        value = JSON.stringify(value);
      } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key, \\"[]\\")) && (arr = utils_default.toArray(value))) {
        key = removeBrackets(key);
        arr.forEach(function each(el, index) {
          !(utils_default.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + \\"[]\\",
            convertValue(el)
          );
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path, key, dots), convertValue(value));
    return false;
  }
  const stack = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });
  function build(value, path) {
    if (utils_default.isUndefined(value))
      return;
    if (stack.indexOf(value) !== -1) {
      throw Error(\\"Circular reference detected in \\" + path.join(\\".\\"));
    }
    stack.push(value);
    utils_default.forEach(value, function each(el, key) {
      const result = !(utils_default.isUndefined(el) || el === null) && visitor.call(
        formData,
        el,
        utils_default.isString(key) ? key.trim() : key,
        path,
        exposedHelpers
      );
      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });
    stack.pop();
  }
  if (!utils_default.isObject(obj)) {
    throw new TypeError(\\"data must be an object\\");
  }
  build(obj);
  return formData;
}
var predicates, toFormData_default;
var init_toFormData = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/toFormData.js\\"() {
    \\"use strict\\";
    init_utils();
    init_AxiosError();
    init_null();
    predicates = utils_default.toFlatObject(utils_default, {}, null, function filter(prop) {
      return /^is[A-Z]/.test(prop);
    });
    toFormData_default = toFormData;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/AxiosURLSearchParams.js
function encode(str) {
  const charMap = {
    \\"!\\": \\"%21\\",
    \\"'\\": \\"%27\\",
    \\"(\\": \\"%28\\",
    \\")\\": \\"%29\\",
    \\"~\\": \\"%7E\\",
    \\"%20\\": \\"+\\",
    \\"%00\\": \\"\\\\0\\"
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && toFormData_default(params, this, options);
}
var prototype2, AxiosURLSearchParams_default;
var init_AxiosURLSearchParams = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/AxiosURLSearchParams.js\\"() {
    \\"use strict\\";
    init_toFormData();
    prototype2 = AxiosURLSearchParams.prototype;
    prototype2.append = function append(name, value) {
      this._pairs.push([name, value]);
    };
    prototype2.toString = function toString2(encoder) {
      const _encode = encoder ? function(value) {
        return encoder.call(this, value, encode);
      } : encode;
      return this._pairs.map(function each(pair) {
        return _encode(pair[0]) + \\"=\\" + _encode(pair[1]);
      }, \\"\\").join(\\"&\\");
    };
    AxiosURLSearchParams_default = AxiosURLSearchParams;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/buildURL.js
function encode2(val) {
  return encodeURIComponent(val).replace(/%3A/gi, \\":\\").replace(/%24/g, \\"$\\").replace(/%2C/gi, \\",\\").replace(/%20/g, \\"+\\").replace(/%5B/gi, \\"[\\").replace(/%5D/gi, \\"]\\");
}
function buildURL(url, params, options) {
  if (!params) {
    return url;
  }
  const _encode = options && options.encode || encode2;
  const serializeFn = options && options.serialize;
  let serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode);
  }
  if (serializedParams) {
    const hashmarkIndex = url.indexOf(\\"#\\");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf(\\"?\\") === -1 ? \\"?\\" : \\"&\\") + serializedParams;
  }
  return url;
}
var init_buildURL = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/buildURL.js\\"() {
    \\"use strict\\";
    init_utils();
    init_AxiosURLSearchParams();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/InterceptorManager.js
var InterceptorManager, InterceptorManager_default;
var init_InterceptorManager = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/InterceptorManager.js\\"() {
    \\"use strict\\";
    init_utils();
    InterceptorManager = class {
      constructor() {
        this.handlers = [];
      }
      /**
       * Add a new interceptor to the stack
       *
       * @param {Function} fulfilled The function to handle \`then\` for a \`Promise\`
       * @param {Function} rejected The function to handle \`reject\` for a \`Promise\`
       *
       * @return {Number} An ID used to remove interceptor later
       */
      use(fulfilled, rejected, options) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options ? options.synchronous : false,
          runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
      }
      /**
       * Remove an interceptor from the stack
       *
       * @param {Number} id The ID that was returned by \`use\`
       *
       * @returns {Boolean} \`true\` if the interceptor was removed, \`false\` otherwise
       */
      eject(id) {
        if (this.handlers[id]) {
          this.handlers[id] = null;
        }
      }
      /**
       * Clear all interceptors from the stack
       *
       * @returns {void}
       */
      clear() {
        if (this.handlers) {
          this.handlers = [];
        }
      }
      /**
       * Iterate over all the registered interceptors
       *
       * This method is particularly useful for skipping over any
       * interceptors that may have become \`null\` calling \`eject\`.
       *
       * @param {Function} fn The function to call for each interceptor
       *
       * @returns {void}
       */
      forEach(fn) {
        utils_default.forEach(this.handlers, function forEachHandler(h) {
          if (h !== null) {
            fn(h);
          }
        });
      }
    };
    InterceptorManager_default = InterceptorManager;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/defaults/transitional.js
var transitional_default;
var init_transitional = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/defaults/transitional.js\\"() {
    \\"use strict\\";
    transitional_default = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/browser/classes/URLSearchParams.js
var URLSearchParams_default;
var init_URLSearchParams = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/browser/classes/URLSearchParams.js\\"() {
    \\"use strict\\";
    init_AxiosURLSearchParams();
    URLSearchParams_default = typeof URLSearchParams !== \\"undefined\\" ? URLSearchParams : AxiosURLSearchParams_default;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/browser/classes/FormData.js
var FormData_default;
var init_FormData = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/browser/classes/FormData.js\\"() {
    \\"use strict\\";
    FormData_default = typeof FormData !== \\"undefined\\" ? FormData : null;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/browser/classes/Blob.js
var Blob_default;
var init_Blob = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/browser/classes/Blob.js\\"() {
    \\"use strict\\";
    Blob_default = typeof Blob !== \\"undefined\\" ? Blob : null;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/browser/index.js
var isStandardBrowserEnv, isStandardBrowserWebWorkerEnv, browser_default;
var init_browser = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/browser/index.js\\"() {
    init_URLSearchParams();
    init_FormData();
    init_Blob();
    isStandardBrowserEnv = (() => {
      let product;
      if (typeof navigator !== \\"undefined\\" && ((product = navigator.product) === \\"ReactNative\\" || product === \\"NativeScript\\" || product === \\"NS\\")) {
        return false;
      }
      return typeof window !== \\"undefined\\" && typeof document !== \\"undefined\\";
    })();
    isStandardBrowserWebWorkerEnv = (() => {
      return typeof WorkerGlobalScope !== \\"undefined\\" && // eslint-disable-next-line no-undef
      self instanceof WorkerGlobalScope && typeof self.importScripts === \\"function\\";
    })();
    browser_default = {
      isBrowser: true,
      classes: {
        URLSearchParams: URLSearchParams_default,
        FormData: FormData_default,
        Blob: Blob_default
      },
      isStandardBrowserEnv,
      isStandardBrowserWebWorkerEnv,
      protocols: [\\"http\\", \\"https\\", \\"file\\", \\"blob\\", \\"url\\", \\"data\\"]
    };
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/index.js
var init_platform = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/index.js\\"() {
    init_browser();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/toURLEncodedForm.js
function toURLEncodedForm(data, options) {
  return toFormData_default(data, new browser_default.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (browser_default.isNode && utils_default.isBuffer(value)) {
        this.append(key, value.toString(\\"base64\\"));
        return false;
      }
      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}
var init_toURLEncodedForm = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/toURLEncodedForm.js\\"() {
    \\"use strict\\";
    init_utils();
    init_toFormData();
    init_platform();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/formDataToJSON.js
function parsePropPath(name) {
  return utils_default.matchAll(/\\\\w+|\\\\[(\\\\w*)]/g, name).map((match) => {
    return match[0] === \\"[]\\" ? \\"\\" : match[1] || match[0];
  });
}
function arrayToObject(arr) {
  const obj = {};
  const keys2 = Object.keys(arr);
  let i;
  const len = keys2.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys2[i];
    obj[key] = arr[key];
  }
  return obj;
}
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];
    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils_default.isArray(target) ? target.length : name;
    if (isLast) {
      if (utils_default.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !utils_default.isObject(target[name])) {
      target[name] = [];
    }
    const result = buildPath(path, value, target[name], index);
    if (result && utils_default.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
    const obj = {};
    utils_default.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}
var formDataToJSON_default;
var init_formDataToJSON = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/formDataToJSON.js\\"() {
    \\"use strict\\";
    init_utils();
    formDataToJSON_default = formDataToJSON;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/defaults/index.js
function stringifySafely(rawValue, parser, encoder) {
  if (utils_default.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils_default.trim(rawValue);
    } catch (e) {
      if (e.name !== \\"SyntaxError\\") {
        throw e;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
var DEFAULT_CONTENT_TYPE, defaults, defaults_default;
var init_defaults = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/defaults/index.js\\"() {
    \\"use strict\\";
    init_utils();
    init_AxiosError();
    init_transitional();
    init_toFormData();
    init_toURLEncodedForm();
    init_platform();
    init_formDataToJSON();
    DEFAULT_CONTENT_TYPE = {
      \\"Content-Type\\": void 0
    };
    defaults = {
      transitional: transitional_default,
      adapter: [\\"xhr\\", \\"http\\"],
      transformRequest: [function transformRequest(data, headers) {
        const contentType = headers.getContentType() || \\"\\";
        const hasJSONContentType = contentType.indexOf(\\"application/json\\") > -1;
        const isObjectPayload = utils_default.isObject(data);
        if (isObjectPayload && utils_default.isHTMLForm(data)) {
          data = new FormData(data);
        }
        const isFormData2 = utils_default.isFormData(data);
        if (isFormData2) {
          if (!hasJSONContentType) {
            return data;
          }
          return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;
        }
        if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data)) {
          return data;
        }
        if (utils_default.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils_default.isURLSearchParams(data)) {
          headers.setContentType(\\"application/x-www-form-urlencoded;charset=utf-8\\", false);
          return data.toString();
        }
        let isFileList2;
        if (isObjectPayload) {
          if (contentType.indexOf(\\"application/x-www-form-urlencoded\\") > -1) {
            return toURLEncodedForm(data, this.formSerializer).toString();
          }
          if ((isFileList2 = utils_default.isFileList(data)) || contentType.indexOf(\\"multipart/form-data\\") > -1) {
            const _FormData = this.env && this.env.FormData;
            return toFormData_default(
              isFileList2 ? { \\"files[]\\": data } : data,
              _FormData && new _FormData(),
              this.formSerializer
            );
          }
        }
        if (isObjectPayload || hasJSONContentType) {
          headers.setContentType(\\"application/json\\", false);
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        const transitional2 = this.transitional || defaults.transitional;
        const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
        const JSONRequested = this.responseType === \\"json\\";
        if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
          const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
          const strictJSONParsing = !silentJSONParsing && JSONRequested;
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === \\"SyntaxError\\") {
                throw AxiosError_default.from(e, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: \\"XSRF-TOKEN\\",
      xsrfHeaderName: \\"X-XSRF-TOKEN\\",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: browser_default.classes.FormData,
        Blob: browser_default.classes.Blob
      },
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          \\"Accept\\": \\"application/json, text/plain, */*\\"
        }
      }
    };
    utils_default.forEach([\\"delete\\", \\"get\\", \\"head\\"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils_default.forEach([\\"post\\", \\"put\\", \\"patch\\"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils_default.merge(DEFAULT_CONTENT_TYPE);
    });
    defaults_default = defaults;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/parseHeaders.js
var ignoreDuplicateOf, parseHeaders_default;
var init_parseHeaders = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/parseHeaders.js\\"() {
    \\"use strict\\";
    init_utils();
    ignoreDuplicateOf = utils_default.toObjectSet([
      \\"age\\",
      \\"authorization\\",
      \\"content-length\\",
      \\"content-type\\",
      \\"etag\\",
      \\"expires\\",
      \\"from\\",
      \\"host\\",
      \\"if-modified-since\\",
      \\"if-unmodified-since\\",
      \\"last-modified\\",
      \\"location\\",
      \\"max-forwards\\",
      \\"proxy-authorization\\",
      \\"referer\\",
      \\"retry-after\\",
      \\"user-agent\\"
    ]);
    parseHeaders_default = (rawHeaders) => {
      const parsed = {};
      let key;
      let val;
      let i;
      rawHeaders && rawHeaders.split(\\"\\\\n\\").forEach(function parser(line) {
        i = line.indexOf(\\":\\");
        key = line.substring(0, i).trim().toLowerCase();
        val = line.substring(i + 1).trim();
        if (!key || parsed[key] && ignoreDuplicateOf[key]) {
          return;
        }
        if (key === \\"set-cookie\\") {
          if (parsed[key]) {
            parsed[key].push(val);
          } else {
            parsed[key] = [val];
          }
        } else {
          parsed[key] = parsed[key] ? parsed[key] + \\", \\" + val : val;
        }
      });
      return parsed;
    };
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/AxiosHeaders.js
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
  const tokens = /* @__PURE__ */ Object.create(null);
  const tokensRE = /([^\\\\s,;=]+)\\\\s*(?:=\\\\s*([^,;]+))?/g;
  let match;
  while (match = tokensRE.exec(str)) {
    tokens[match[1]] = match[2];
  }
  return tokens;
}
function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
  if (utils_default.isFunction(filter2)) {
    return filter2.call(this, value, header);
  }
  if (isHeaderNameFilter) {
    value = header;
  }
  if (!utils_default.isString(value))
    return;
  if (utils_default.isString(filter2)) {
    return value.indexOf(filter2) !== -1;
  }
  if (utils_default.isRegExp(filter2)) {
    return filter2.test(value);
  }
}
function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\\\\d])(\\\\w*)/g, (w, char, str) => {
    return char.toUpperCase() + str;
  });
}
function buildAccessors(obj, header) {
  const accessorName = utils_default.toCamelCase(\\" \\" + header);
  [\\"get\\", \\"set\\", \\"has\\"].forEach((methodName) => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}
var $internals, isValidHeaderName, AxiosHeaders, AxiosHeaders_default;
var init_AxiosHeaders = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/AxiosHeaders.js\\"() {
    \\"use strict\\";
    init_utils();
    init_parseHeaders();
    $internals = Symbol(\\"internals\\");
    isValidHeaderName = (str) => /^[-_a-zA-Z0-9^\`|~,!#$%&'*+.]+$/.test(str.trim());
    AxiosHeaders = class {
      constructor(headers) {
        headers && this.set(headers);
      }
      set(header, valueOrRewrite, rewrite) {
        const self2 = this;
        function setHeader(_value, _header, _rewrite) {
          const lHeader = normalizeHeader(_header);
          if (!lHeader) {
            throw new Error(\\"header name must be a non-empty string\\");
          }
          const key = utils_default.findKey(self2, lHeader);
          if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
            self2[key || _header] = normalizeValue(_value);
          }
        }
        const setHeaders = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
        if (utils_default.isPlainObject(header) || header instanceof this.constructor) {
          setHeaders(header, valueOrRewrite);
        } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
          setHeaders(parseHeaders_default(header), valueOrRewrite);
        } else {
          header != null && setHeader(valueOrRewrite, header, rewrite);
        }
        return this;
      }
      get(header, parser) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils_default.findKey(this, header);
          if (key) {
            const value = this[key];
            if (!parser) {
              return value;
            }
            if (parser === true) {
              return parseTokens(value);
            }
            if (utils_default.isFunction(parser)) {
              return parser.call(this, value, key);
            }
            if (utils_default.isRegExp(parser)) {
              return parser.exec(value);
            }
            throw new TypeError(\\"parser must be boolean|regexp|function\\");
          }
        }
      }
      has(header, matcher) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils_default.findKey(this, header);
          return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
        }
        return false;
      }
      delete(header, matcher) {
        const self2 = this;
        let deleted = false;
        function deleteHeader(_header) {
          _header = normalizeHeader(_header);
          if (_header) {
            const key = utils_default.findKey(self2, _header);
            if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
              delete self2[key];
              deleted = true;
            }
          }
        }
        if (utils_default.isArray(header)) {
          header.forEach(deleteHeader);
        } else {
          deleteHeader(header);
        }
        return deleted;
      }
      clear(matcher) {
        const keys2 = Object.keys(this);
        let i = keys2.length;
        let deleted = false;
        while (i--) {
          const key = keys2[i];
          if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
            delete this[key];
            deleted = true;
          }
        }
        return deleted;
      }
      normalize(format) {
        const self2 = this;
        const headers = {};
        utils_default.forEach(this, (value, header) => {
          const key = utils_default.findKey(headers, header);
          if (key) {
            self2[key] = normalizeValue(value);
            delete self2[header];
            return;
          }
          const normalized = format ? formatHeader(header) : String(header).trim();
          if (normalized !== header) {
            delete self2[header];
          }
          self2[normalized] = normalizeValue(value);
          headers[normalized] = true;
        });
        return this;
      }
      concat(...targets) {
        return this.constructor.concat(this, ...targets);
      }
      toJSON(asStrings) {
        const obj = /* @__PURE__ */ Object.create(null);
        utils_default.forEach(this, (value, header) => {
          value != null && value !== false && (obj[header] = asStrings && utils_default.isArray(value) ? value.join(\\", \\") : value);
        });
        return obj;
      }
      [Symbol.iterator]() {
        return Object.entries(this.toJSON())[Symbol.iterator]();
      }
      toString() {
        return Object.entries(this.toJSON()).map(([header, value]) => header + \\": \\" + value).join(\\"\\\\n\\");
      }
      get [Symbol.toStringTag]() {
        return \\"AxiosHeaders\\";
      }
      static from(thing) {
        return thing instanceof this ? thing : new this(thing);
      }
      static concat(first, ...targets) {
        const computed = new this(first);
        targets.forEach((target) => computed.set(target));
        return computed;
      }
      static accessor(header) {
        const internals = this[$internals] = this[$internals] = {
          accessors: {}
        };
        const accessors = internals.accessors;
        const prototype3 = this.prototype;
        function defineAccessor(_header) {
          const lHeader = normalizeHeader(_header);
          if (!accessors[lHeader]) {
            buildAccessors(prototype3, _header);
            accessors[lHeader] = true;
          }
        }
        utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
        return this;
      }
    };
    AxiosHeaders.accessor([\\"Content-Type\\", \\"Content-Length\\", \\"Accept\\", \\"Accept-Encoding\\", \\"User-Agent\\", \\"Authorization\\"]);
    utils_default.freezeMethods(AxiosHeaders.prototype);
    utils_default.freezeMethods(AxiosHeaders);
    AxiosHeaders_default = AxiosHeaders;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/transformData.js
function transformData(fns, response) {
  const config = this || defaults_default;
  const context = response || config;
  const headers = AxiosHeaders_default.from(context.headers);
  let data = context.data;
  utils_default.forEach(fns, function transform2(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
  });
  headers.normalize();
  return data;
}
var init_transformData = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/transformData.js\\"() {
    \\"use strict\\";
    init_utils();
    init_defaults();
    init_AxiosHeaders();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/cancel/isCancel.js
function isCancel(value) {
  return !!(value && value.__CANCEL__);
}
var init_isCancel = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/cancel/isCancel.js\\"() {
    \\"use strict\\";
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/cancel/CanceledError.js
function CanceledError(message, config, request) {
  AxiosError_default.call(this, message == null ? \\"canceled\\" : message, AxiosError_default.ERR_CANCELED, config, request);
  this.name = \\"CanceledError\\";
}
var CanceledError_default;
var init_CanceledError = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/cancel/CanceledError.js\\"() {
    \\"use strict\\";
    init_AxiosError();
    init_utils();
    utils_default.inherits(CanceledError, AxiosError_default, {
      __CANCEL__: true
    });
    CanceledError_default = CanceledError;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/settle.js
function settle(resolve, reject, response) {
  const validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError_default(
      \\"Request failed with status code \\" + response.status,
      [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}
var init_settle = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/settle.js\\"() {
    \\"use strict\\";
    init_AxiosError();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/cookies.js
var cookies_default;
var init_cookies = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/cookies.js\\"() {
    \\"use strict\\";
    init_utils();
    init_platform();
    cookies_default = browser_default.isStandardBrowserEnv ? function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          const cookie = [];
          cookie.push(name + \\"=\\" + encodeURIComponent(value));
          if (utils_default.isNumber(expires)) {
            cookie.push(\\"expires=\\" + new Date(expires).toGMTString());
          }
          if (utils_default.isString(path)) {
            cookie.push(\\"path=\\" + path);
          }
          if (utils_default.isString(domain)) {
            cookie.push(\\"domain=\\" + domain);
          }
          if (secure === true) {
            cookie.push(\\"secure\\");
          }
          document.cookie = cookie.join(\\"; \\");
        },
        read: function read(name) {
          const match = document.cookie.match(new RegExp(\\"(^|;\\\\\\\\s*)(\\" + name + \\")=([^;]*)\\"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
          this.write(name, \\"\\", Date.now() - 864e5);
        }
      };
    }() : function nonStandardBrowserEnv() {
      return {
        write: function write() {
        },
        read: function read() {
          return null;
        },
        remove: function remove() {
        }
      };
    }();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/isAbsoluteURL.js
function isAbsoluteURL(url) {
  return /^([a-z][a-z\\\\d+\\\\-.]*:)?\\\\/\\\\//i.test(url);
}
var init_isAbsoluteURL = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/isAbsoluteURL.js\\"() {
    \\"use strict\\";
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/combineURLs.js
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\\\\/+$/, \\"\\") + \\"/\\" + relativeURL.replace(/^\\\\/+/, \\"\\") : baseURL;
}
var init_combineURLs = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/combineURLs.js\\"() {
    \\"use strict\\";
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/buildFullPath.js
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}
var init_buildFullPath = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/buildFullPath.js\\"() {
    \\"use strict\\";
    init_isAbsoluteURL();
    init_combineURLs();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/isURLSameOrigin.js
var isURLSameOrigin_default;
var init_isURLSameOrigin = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/isURLSameOrigin.js\\"() {
    \\"use strict\\";
    init_utils();
    init_platform();
    isURLSameOrigin_default = browser_default.isStandardBrowserEnv ? function standardBrowserEnv2() {
      const msie = /(msie|trident)/i.test(navigator.userAgent);
      const urlParsingNode = document.createElement(\\"a\\");
      let originURL;
      function resolveURL(url) {
        let href = url;
        if (msie) {
          urlParsingNode.setAttribute(\\"href\\", href);
          href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute(\\"href\\", href);
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, \\"\\") : \\"\\",
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\\\?/, \\"\\") : \\"\\",
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, \\"\\") : \\"\\",
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: urlParsingNode.pathname.charAt(0) === \\"/\\" ? urlParsingNode.pathname : \\"/\\" + urlParsingNode.pathname
        };
      }
      originURL = resolveURL(window.location.href);
      return function isURLSameOrigin(requestURL) {
        const parsed = utils_default.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
      };
    }() : function nonStandardBrowserEnv2() {
      return function isURLSameOrigin() {
        return true;
      };
    }();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/parseProtocol.js
function parseProtocol(url) {
  const match = /^([-+\\\\w]{1,25})(:?\\\\/\\\\/|:)/.exec(url);
  return match && match[1] || \\"\\";
}
var init_parseProtocol = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/parseProtocol.js\\"() {
    \\"use strict\\";
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/speedometer.js
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;
  min = min !== void 0 ? min : 1e3;
  return function push(chunkLength) {
    const now = Date.now();
    const startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now;
    }
    bytes[head] = chunkLength;
    timestamps[head] = now;
    let i = tail;
    let bytesCount = 0;
    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now - firstSampleTS < min) {
      return;
    }
    const passed = startedAt && now - startedAt;
    return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
  };
}
var speedometer_default;
var init_speedometer = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/speedometer.js\\"() {
    \\"use strict\\";
    speedometer_default = speedometer;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/adapters/xhr.js
function progressEventReducer(listener, isDownloadStream) {
  let bytesNotified = 0;
  const _speedometer = speedometer_default(50, 250);
  return (e) => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : void 0;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;
    bytesNotified = loaded;
    const data = {
      loaded,
      total,
      progress: total ? loaded / total : void 0,
      bytes: progressBytes,
      rate: rate ? rate : void 0,
      estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
      event: e
    };
    data[isDownloadStream ? \\"download\\" : \\"upload\\"] = true;
    listener(data);
  };
}
var isXHRAdapterSupported, xhr_default;
var init_xhr = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/adapters/xhr.js\\"() {
    \\"use strict\\";
    init_utils();
    init_settle();
    init_cookies();
    init_buildURL();
    init_buildFullPath();
    init_isURLSameOrigin();
    init_transitional();
    init_AxiosError();
    init_CanceledError();
    init_parseProtocol();
    init_platform();
    init_AxiosHeaders();
    init_speedometer();
    isXHRAdapterSupported = typeof XMLHttpRequest !== \\"undefined\\";
    xhr_default = isXHRAdapterSupported && function(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        let requestData = config.data;
        const requestHeaders = AxiosHeaders_default.from(config.headers).normalize();
        const responseType = config.responseType;
        let onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener(\\"abort\\", onCanceled);
          }
        }
        if (utils_default.isFormData(requestData)) {
          if (browser_default.isStandardBrowserEnv || browser_default.isStandardBrowserWebWorkerEnv) {
            requestHeaders.setContentType(false);
          } else {
            requestHeaders.setContentType(\\"multipart/form-data;\\", false);
          }
        }
        let request = new XMLHttpRequest();
        if (config.auth) {
          const username = config.auth.username || \\"\\";
          const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : \\"\\";
          requestHeaders.set(\\"Authorization\\", \\"Basic \\" + btoa(username + \\":\\" + password));
        }
        const fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          const responseHeaders = AxiosHeaders_default.from(
            \\"getAllResponseHeaders\\" in request && request.getAllResponseHeaders()
          );
          const responseData = !responseType || responseType === \\"text\\" || responseType === \\"json\\" ? request.responseText : request.response;
          const response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if (\\"onloadend\\" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf(\\"file:\\") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(new AxiosError_default(\\"Request aborted\\", AxiosError_default.ECONNABORTED, config, request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(new AxiosError_default(\\"Network Error\\", AxiosError_default.ERR_NETWORK, config, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          let timeoutErrorMessage = config.timeout ? \\"timeout of \\" + config.timeout + \\"ms exceeded\\" : \\"timeout exceeded\\";
          const transitional2 = config.transitional || transitional_default;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(new AxiosError_default(
            timeoutErrorMessage,
            transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,
            config,
            request
          ));
          request = null;
        };
        if (browser_default.isStandardBrowserEnv) {
          const xsrfValue = (config.withCredentials || isURLSameOrigin_default(fullPath)) && config.xsrfCookieName && cookies_default.read(config.xsrfCookieName);
          if (xsrfValue) {
            requestHeaders.set(config.xsrfHeaderName, xsrfValue);
          }
        }
        requestData === void 0 && requestHeaders.setContentType(null);
        if (\\"setRequestHeader\\" in request) {
          utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
            request.setRequestHeader(key, val);
          });
        }
        if (!utils_default.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== \\"json\\") {
          request.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === \\"function\\") {
          request.addEventListener(\\"progress\\", progressEventReducer(config.onDownloadProgress, true));
        }
        if (typeof config.onUploadProgress === \\"function\\" && request.upload) {
          request.upload.addEventListener(\\"progress\\", progressEventReducer(config.onUploadProgress));
        }
        if (config.cancelToken || config.signal) {
          onCanceled = (cancel) => {
            if (!request) {
              return;
            }
            reject(!cancel || cancel.type ? new CanceledError_default(null, config, request) : cancel);
            request.abort();
            request = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener(\\"abort\\", onCanceled);
          }
        }
        const protocol = parseProtocol(fullPath);
        if (protocol && browser_default.protocols.indexOf(protocol) === -1) {
          reject(new AxiosError_default(\\"Unsupported protocol \\" + protocol + \\":\\", AxiosError_default.ERR_BAD_REQUEST, config));
          return;
        }
        request.send(requestData || null);
      });
    };
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/adapters/adapters.js
var knownAdapters, adapters_default;
var init_adapters = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/adapters/adapters.js\\"() {
    init_utils();
    init_null();
    init_xhr();
    init_AxiosError();
    knownAdapters = {
      http: null_default,
      xhr: xhr_default
    };
    utils_default.forEach(knownAdapters, (fn, value) => {
      if (fn) {
        try {
          Object.defineProperty(fn, \\"name\\", { value });
        } catch (e) {
        }
        Object.defineProperty(fn, \\"adapterName\\", { value });
      }
    });
    adapters_default = {
      getAdapter: (adapters) => {
        adapters = utils_default.isArray(adapters) ? adapters : [adapters];
        const { length } = adapters;
        let nameOrAdapter;
        let adapter;
        for (let i = 0; i < length; i++) {
          nameOrAdapter = adapters[i];
          if (adapter = utils_default.isString(nameOrAdapter) ? knownAdapters[nameOrAdapter.toLowerCase()] : nameOrAdapter) {
            break;
          }
        }
        if (!adapter) {
          if (adapter === false) {
            throw new AxiosError_default(
              \`Adapter \${nameOrAdapter} is not supported by the environment\`,
              \\"ERR_NOT_SUPPORT\\"
            );
          }
          throw new Error(
            utils_default.hasOwnProp(knownAdapters, nameOrAdapter) ? \`Adapter '\${nameOrAdapter}' is not available in the build\` : \`Unknown adapter '\${nameOrAdapter}'\`
          );
        }
        if (!utils_default.isFunction(adapter)) {
          throw new TypeError(\\"adapter is not a function\\");
        }
        return adapter;
      },
      adapters: knownAdapters
    };
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/dispatchRequest.js
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
  if (config.signal && config.signal.aborted) {
    throw new CanceledError_default(null, config);
  }
}
function dispatchRequest(config) {
  throwIfCancellationRequested(config);
  config.headers = AxiosHeaders_default.from(config.headers);
  config.data = transformData.call(
    config,
    config.transformRequest
  );
  if ([\\"post\\", \\"put\\", \\"patch\\"].indexOf(config.method) !== -1) {
    config.headers.setContentType(\\"application/x-www-form-urlencoded\\", false);
  }
  const adapter = adapters_default.getAdapter(config.adapter || defaults_default.adapter);
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);
    response.data = transformData.call(
      config,
      config.transformResponse,
      response
    );
    response.headers = AxiosHeaders_default.from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
      }
    }
    return Promise.reject(reason);
  });
}
var init_dispatchRequest = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/dispatchRequest.js\\"() {
    \\"use strict\\";
    init_transformData();
    init_isCancel();
    init_defaults();
    init_CanceledError();
    init_AxiosHeaders();
    init_adapters();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/mergeConfig.js
function mergeConfig(config1, config2) {
  config2 = config2 || {};
  const config = {};
  function getMergedValue(target, source, caseless) {
    if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
      return utils_default.merge.call({ caseless }, target, source);
    } else if (utils_default.isPlainObject(source)) {
      return utils_default.merge({}, source);
    } else if (utils_default.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(a, b, caseless) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(a, b, caseless);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a, caseless);
    }
  }
  function valueFromConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    }
  }
  function defaultToConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a);
    }
  }
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(void 0, a);
    }
  }
  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
  };
  utils_default.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge2 = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge2(config1[prop], config2[prop], prop);
    utils_default.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
}
var headersToObject;
var init_mergeConfig = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/mergeConfig.js\\"() {
    \\"use strict\\";
    init_utils();
    init_AxiosHeaders();
    headersToObject = (thing) => thing instanceof AxiosHeaders_default ? thing.toJSON() : thing;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/env/data.js
var VERSION;
var init_data = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/env/data.js\\"() {
    VERSION = \\"1.4.0\\";
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/validator.js
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== \\"object\\") {
    throw new AxiosError_default(\\"options must be an object\\", AxiosError_default.ERR_BAD_OPTION_VALUE);
  }
  const keys2 = Object.keys(options);
  let i = keys2.length;
  while (i-- > 0) {
    const opt = keys2[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === void 0 || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError_default(\\"option \\" + opt + \\" must be \\" + result, AxiosError_default.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError_default(\\"Unknown option \\" + opt, AxiosError_default.ERR_BAD_OPTION);
    }
  }
}
var validators, deprecatedWarnings, validator_default;
var init_validator = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/validator.js\\"() {
    \\"use strict\\";
    init_data();
    init_AxiosError();
    validators = {};
    [\\"object\\", \\"boolean\\", \\"number\\", \\"function\\", \\"string\\", \\"symbol\\"].forEach((type, i) => {
      validators[type] = function validator(thing) {
        return typeof thing === type || \\"a\\" + (i < 1 ? \\"n \\" : \\" \\") + type;
      };
    });
    deprecatedWarnings = {};
    validators.transitional = function transitional(validator, version, message) {
      function formatMessage(opt, desc) {
        return \\"[Axios v\\" + VERSION + \\"] Transitional option '\\" + opt + \\"'\\" + desc + (message ? \\". \\" + message : \\"\\");
      }
      return (value, opt, opts) => {
        if (validator === false) {
          throw new AxiosError_default(
            formatMessage(opt, \\" has been removed\\" + (version ? \\" in \\" + version : \\"\\")),
            AxiosError_default.ERR_DEPRECATED
          );
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              \\" has been deprecated since v\\" + version + \\" and will be removed in the near future\\"
            )
          );
        }
        return validator ? validator(value, opt, opts) : true;
      };
    };
    validator_default = {
      assertOptions,
      validators
    };
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/Axios.js
var validators2, Axios, Axios_default;
var init_Axios = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/Axios.js\\"() {
    \\"use strict\\";
    init_utils();
    init_buildURL();
    init_InterceptorManager();
    init_dispatchRequest();
    init_mergeConfig();
    init_buildFullPath();
    init_validator();
    init_AxiosHeaders();
    validators2 = validator_default.validators;
    Axios = class {
      constructor(instanceConfig) {
        this.defaults = instanceConfig;
        this.interceptors = {
          request: new InterceptorManager_default(),
          response: new InterceptorManager_default()
        };
      }
      /**
       * Dispatch a request
       *
       * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
       * @param {?Object} config
       *
       * @returns {Promise} The Promise to be fulfilled
       */
      request(configOrUrl, config) {
        if (typeof configOrUrl === \\"string\\") {
          config = config || {};
          config.url = configOrUrl;
        } else {
          config = configOrUrl || {};
        }
        config = mergeConfig(this.defaults, config);
        const { transitional: transitional2, paramsSerializer, headers } = config;
        if (transitional2 !== void 0) {
          validator_default.assertOptions(transitional2, {
            silentJSONParsing: validators2.transitional(validators2.boolean),
            forcedJSONParsing: validators2.transitional(validators2.boolean),
            clarifyTimeoutError: validators2.transitional(validators2.boolean)
          }, false);
        }
        if (paramsSerializer != null) {
          if (utils_default.isFunction(paramsSerializer)) {
            config.paramsSerializer = {
              serialize: paramsSerializer
            };
          } else {
            validator_default.assertOptions(paramsSerializer, {
              encode: validators2.function,
              serialize: validators2.function
            }, true);
          }
        }
        config.method = (config.method || this.defaults.method || \\"get\\").toLowerCase();
        let contextHeaders;
        contextHeaders = headers && utils_default.merge(
          headers.common,
          headers[config.method]
        );
        contextHeaders && utils_default.forEach(
          [\\"delete\\", \\"get\\", \\"head\\", \\"post\\", \\"put\\", \\"patch\\", \\"common\\"],
          (method) => {
            delete headers[method];
          }
        );
        config.headers = AxiosHeaders_default.concat(contextHeaders, headers);
        const requestInterceptorChain = [];
        let synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === \\"function\\" && interceptor.runWhen(config) === false) {
            return;
          }
          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        const responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });
        let promise;
        let i = 0;
        let len;
        if (!synchronousRequestInterceptors) {
          const chain = [dispatchRequest.bind(this), void 0];
          chain.unshift.apply(chain, requestInterceptorChain);
          chain.push.apply(chain, responseInterceptorChain);
          len = chain.length;
          promise = Promise.resolve(config);
          while (i < len) {
            promise = promise.then(chain[i++], chain[i++]);
          }
          return promise;
        }
        len = requestInterceptorChain.length;
        let newConfig = config;
        i = 0;
        while (i < len) {
          const onFulfilled = requestInterceptorChain[i++];
          const onRejected = requestInterceptorChain[i++];
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error) {
            onRejected.call(this, error);
            break;
          }
        }
        try {
          promise = dispatchRequest.call(this, newConfig);
        } catch (error) {
          return Promise.reject(error);
        }
        i = 0;
        len = responseInterceptorChain.length;
        while (i < len) {
          promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
        }
        return promise;
      }
      getUri(config) {
        config = mergeConfig(this.defaults, config);
        const fullPath = buildFullPath(config.baseURL, config.url);
        return buildURL(fullPath, config.params, config.paramsSerializer);
      }
    };
    utils_default.forEach([\\"delete\\", \\"get\\", \\"head\\", \\"options\\"], function forEachMethodNoData2(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils_default.forEach([\\"post\\", \\"put\\", \\"patch\\"], function forEachMethodWithData2(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            headers: isForm ? {
              \\"Content-Type\\": \\"multipart/form-data\\"
            } : {},
            url,
            data
          }));
        };
      }
      Axios.prototype[method] = generateHTTPMethod();
      Axios.prototype[method + \\"Form\\"] = generateHTTPMethod(true);
    });
    Axios_default = Axios;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/cancel/CancelToken.js
var CancelToken, CancelToken_default;
var init_CancelToken = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/cancel/CancelToken.js\\"() {
    \\"use strict\\";
    init_CanceledError();
    CancelToken = class {
      constructor(executor) {
        if (typeof executor !== \\"function\\") {
          throw new TypeError(\\"executor must be a function.\\");
        }
        let resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve) {
          resolvePromise = resolve;
        });
        const token = this;
        this.promise.then((cancel) => {
          if (!token._listeners)
            return;
          let i = token._listeners.length;
          while (i-- > 0) {
            token._listeners[i](cancel);
          }
          token._listeners = null;
        });
        this.promise.then = (onfulfilled) => {
          let _resolve;
          const promise = new Promise((resolve) => {
            token.subscribe(resolve);
            _resolve = resolve;
          }).then(onfulfilled);
          promise.cancel = function reject() {
            token.unsubscribe(_resolve);
          };
          return promise;
        };
        executor(function cancel(message, config, request) {
          if (token.reason) {
            return;
          }
          token.reason = new CanceledError_default(message, config, request);
          resolvePromise(token.reason);
        });
      }
      /**
       * Throws a \`CanceledError\` if cancellation has been requested.
       */
      throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      }
      /**
       * Subscribe to the cancel signal
       */
      subscribe(listener) {
        if (this.reason) {
          listener(this.reason);
          return;
        }
        if (this._listeners) {
          this._listeners.push(listener);
        } else {
          this._listeners = [listener];
        }
      }
      /**
       * Unsubscribe from the cancel signal
       */
      unsubscribe(listener) {
        if (!this._listeners) {
          return;
        }
        const index = this._listeners.indexOf(listener);
        if (index !== -1) {
          this._listeners.splice(index, 1);
        }
      }
      /**
       * Returns an object that contains a new \`CancelToken\` and a function that, when called,
       * cancels the \`CancelToken\`.
       */
      static source() {
        let cancel;
        const token = new CancelToken(function executor(c) {
          cancel = c;
        });
        return {
          token,
          cancel
        };
      }
    };
    CancelToken_default = CancelToken;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/spread.js
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}
var init_spread = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/spread.js\\"() {
    \\"use strict\\";
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/isAxiosError.js
function isAxiosError(payload) {
  return utils_default.isObject(payload) && payload.isAxiosError === true;
}
var init_isAxiosError = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/isAxiosError.js\\"() {
    \\"use strict\\";
    init_utils();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/HttpStatusCode.js
var HttpStatusCode, HttpStatusCode_default;
var init_HttpStatusCode = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/HttpStatusCode.js\\"() {
    HttpStatusCode = {
      Continue: 100,
      SwitchingProtocols: 101,
      Processing: 102,
      EarlyHints: 103,
      Ok: 200,
      Created: 201,
      Accepted: 202,
      NonAuthoritativeInformation: 203,
      NoContent: 204,
      ResetContent: 205,
      PartialContent: 206,
      MultiStatus: 207,
      AlreadyReported: 208,
      ImUsed: 226,
      MultipleChoices: 300,
      MovedPermanently: 301,
      Found: 302,
      SeeOther: 303,
      NotModified: 304,
      UseProxy: 305,
      Unused: 306,
      TemporaryRedirect: 307,
      PermanentRedirect: 308,
      BadRequest: 400,
      Unauthorized: 401,
      PaymentRequired: 402,
      Forbidden: 403,
      NotFound: 404,
      MethodNotAllowed: 405,
      NotAcceptable: 406,
      ProxyAuthenticationRequired: 407,
      RequestTimeout: 408,
      Conflict: 409,
      Gone: 410,
      LengthRequired: 411,
      PreconditionFailed: 412,
      PayloadTooLarge: 413,
      UriTooLong: 414,
      UnsupportedMediaType: 415,
      RangeNotSatisfiable: 416,
      ExpectationFailed: 417,
      ImATeapot: 418,
      MisdirectedRequest: 421,
      UnprocessableEntity: 422,
      Locked: 423,
      FailedDependency: 424,
      TooEarly: 425,
      UpgradeRequired: 426,
      PreconditionRequired: 428,
      TooManyRequests: 429,
      RequestHeaderFieldsTooLarge: 431,
      UnavailableForLegalReasons: 451,
      InternalServerError: 500,
      NotImplemented: 501,
      BadGateway: 502,
      ServiceUnavailable: 503,
      GatewayTimeout: 504,
      HttpVersionNotSupported: 505,
      VariantAlsoNegotiates: 506,
      InsufficientStorage: 507,
      LoopDetected: 508,
      NotExtended: 510,
      NetworkAuthenticationRequired: 511
    };
    Object.entries(HttpStatusCode).forEach(([key, value]) => {
      HttpStatusCode[value] = key;
    });
    HttpStatusCode_default = HttpStatusCode;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/axios.js
function createInstance(defaultConfig) {
  const context = new Axios_default(defaultConfig);
  const instance = bind(Axios_default.prototype.request, context);
  utils_default.extend(instance, Axios_default.prototype, context, { allOwnKeys: true });
  utils_default.extend(instance, context, null, { allOwnKeys: true });
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };
  return instance;
}
var axios, axios_default;
var init_axios = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/axios.js\\"() {
    \\"use strict\\";
    init_utils();
    init_bind();
    init_Axios();
    init_mergeConfig();
    init_defaults();
    init_formDataToJSON();
    init_CanceledError();
    init_CancelToken();
    init_isCancel();
    init_data();
    init_toFormData();
    init_AxiosError();
    init_spread();
    init_isAxiosError();
    init_AxiosHeaders();
    init_HttpStatusCode();
    axios = createInstance(defaults_default);
    axios.Axios = Axios_default;
    axios.CanceledError = CanceledError_default;
    axios.CancelToken = CancelToken_default;
    axios.isCancel = isCancel;
    axios.VERSION = VERSION;
    axios.toFormData = toFormData_default;
    axios.AxiosError = AxiosError_default;
    axios.Cancel = axios.CanceledError;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = spread;
    axios.isAxiosError = isAxiosError;
    axios.mergeConfig = mergeConfig;
    axios.AxiosHeaders = AxiosHeaders_default;
    axios.formToJSON = (thing) => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
    axios.HttpStatusCode = HttpStatusCode_default;
    axios.default = axios;
    axios_default = axios;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/index.js
var Axios2, AxiosError2, CanceledError2, isCancel2, CancelToken2, VERSION2, all2, Cancel, isAxiosError2, spread2, toFormData2, AxiosHeaders2, HttpStatusCode2, formToJSON, mergeConfig2;
var init_axios2 = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/index.js\\"() {
    init_axios();
    ({
      Axios: Axios2,
      AxiosError: AxiosError2,
      CanceledError: CanceledError2,
      isCancel: isCancel2,
      CancelToken: CancelToken2,
      VERSION: VERSION2,
      all: all2,
      Cancel,
      isAxiosError: isAxiosError2,
      spread: spread2,
      toFormData: toFormData2,
      AxiosHeaders: AxiosHeaders2,
      HttpStatusCode: HttpStatusCode2,
      formToJSON,
      mergeConfig: mergeConfig2
    } = axios_default);
  }
});

// src/core/fetcher/Fetcher.ts
function fetcherImpl(args) {
  return __async(this, null, function* () {
    var _a, _b;
    const headers = {};
    if (args.body !== void 0 && args.contentType != null) {
      headers[\\"Content-Type\\"] = args.contentType;
    }
    if (args.headers != null) {
      for (const [key, value] of Object.entries(args.headers)) {
        if (value != null) {
          headers[key] = value;
        }
      }
    }
    try {
      const response = yield axios_default({
        url: args.url,
        params: args.queryParameters,
        method: args.method,
        headers,
        data: args.body,
        validateStatus: () => true,
        transformResponse: (response2) => response2,
        timeout: args.timeoutMs,
        transitional: {
          clarifyTimeoutError: true
        },
        withCredentials: args.withCredentials,
        adapter: args.adapter,
        onUploadProgress: args.onUploadProgress,
        maxBodyLength: Infinity,
        maxContentLength: Infinity,
        responseType: (_a = args.responseType) != null ? _a : \\"json\\"
      });
      let body;
      if (args.responseType === \\"blob\\") {
        body = response.data;
      } else if (response.data != null && response.data.length > 0) {
        try {
          body = (_b = JSON.parse(response.data)) != null ? _b : void 0;
        } catch (e) {
          return {
            ok: false,
            error: {
              reason: \\"non-json\\",
              statusCode: response.status,
              rawBody: response.data
            }
          };
        }
      }
      if (response.status >= 200 && response.status < 400) {
        return {
          ok: true,
          body
        };
      } else {
        return {
          ok: false,
          error: {
            reason: \\"status-code\\",
            statusCode: response.status,
            body
          }
        };
      }
    } catch (error) {
      if (error.code === \\"ETIMEDOUT\\") {
        return {
          ok: false,
          error: {
            reason: \\"timeout\\"
          }
        };
      }
      return {
        ok: false,
        error: {
          reason: \\"unknown\\",
          errorMessage: error.message
        }
      };
    }
  });
}
var fetcher;
var init_Fetcher = __esm({
  \\"src/core/fetcher/Fetcher.ts\\"() {
    \\"use strict\\";
    init_axios2();
    fetcher = fetcherImpl;
  }
});

// src/core/fetcher/Supplier.ts
var Supplier;
var init_Supplier = __esm({
  \\"src/core/fetcher/Supplier.ts\\"() {
    \\"use strict\\";
    Supplier = {
      get: (supplier) => __async(void 0, null, function* () {
        if (typeof supplier === \\"function\\") {
          return supplier();
        } else {
          return supplier;
        }
      })
    };
  }
});

// src/core/fetcher/index.ts
var init_fetcher = __esm({
  \\"src/core/fetcher/index.ts\\"() {
    \\"use strict\\";
    init_Fetcher();
    init_Supplier();
  }
});

// .yarn/cache/js-base64-npm-3.7.2-706fb77a0b-573f28e9a2.zip/node_modules/js-base64/base64.mjs
var _TD, _TE, b64ch, b64chs, b64tab, _fromCC, _U8Afrom;
var init_base64 = __esm({
  \\".yarn/cache/js-base64-npm-3.7.2-706fb77a0b-573f28e9a2.zip/node_modules/js-base64/base64.mjs\\"() {
    _TD = typeof TextDecoder === \\"function\\" ? new TextDecoder() : void 0;
    _TE = typeof TextEncoder === \\"function\\" ? new TextEncoder() : void 0;
    b64ch = \\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\";
    b64chs = Array.prototype.slice.call(b64ch);
    b64tab = ((a) => {
      let tab = {};
      a.forEach((c, i) => tab[c] = i);
      return tab;
    })(b64chs);
    _fromCC = String.fromCharCode.bind(String);
    _U8Afrom = typeof Uint8Array.from === \\"function\\" ? Uint8Array.from.bind(Uint8Array) : (it, fn = (x) => x) => new Uint8Array(Array.prototype.slice.call(it, 0).map(fn));
  }
});

// src/core/auth/BasicAuth.ts
var init_BasicAuth = __esm({
  \\"src/core/auth/BasicAuth.ts\\"() {
    \\"use strict\\";
    init_base64();
  }
});

// src/core/auth/BearerToken.ts
var init_BearerToken = __esm({
  \\"src/core/auth/BearerToken.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/auth/index.ts
var init_auth = __esm({
  \\"src/core/auth/index.ts\\"() {
    \\"use strict\\";
    init_BasicAuth();
    init_BearerToken();
  }
});

// src/core/schemas/Schema.ts
var SchemaType;
var init_Schema = __esm({
  \\"src/core/schemas/Schema.ts\\"() {
    \\"use strict\\";
    SchemaType = {
      DATE: \\"date\\",
      ENUM: \\"enum\\",
      LIST: \\"list\\",
      STRING_LITERAL: \\"stringLiteral\\",
      OBJECT: \\"object\\",
      ANY: \\"any\\",
      BOOLEAN: \\"boolean\\",
      NUMBER: \\"number\\",
      STRING: \\"string\\",
      UNKNOWN: \\"unknown\\",
      RECORD: \\"record\\",
      SET: \\"set\\",
      UNION: \\"union\\",
      UNDISCRIMINATED_UNION: \\"undiscriminatedUnion\\",
      OPTIONAL: \\"optional\\"
    };
  }
});

// src/core/schemas/utils/getErrorMessageForIncorrectType.ts
function getErrorMessageForIncorrectType(value, expectedType) {
  return \`Expected \${expectedType}. Received \${getTypeAsString(value)}.\`;
}
function getTypeAsString(value) {
  if (Array.isArray(value)) {
    return \\"list\\";
  }
  if (value === null) {
    return \\"null\\";
  }
  switch (typeof value) {
    case \\"string\\":
      return \`\\"\${value}\\"\`;
    case \\"number\\":
    case \\"boolean\\":
    case \\"undefined\\":
      return \`\${value}\`;
  }
  return typeof value;
}
var init_getErrorMessageForIncorrectType = __esm({
  \\"src/core/schemas/utils/getErrorMessageForIncorrectType.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/utils/maybeSkipValidation.ts
function maybeSkipValidation(schema) {
  return __spreadProps(__spreadValues({}, schema), {
    json: transformAndMaybeSkipValidation(schema.json),
    parse: transformAndMaybeSkipValidation(schema.parse)
  });
}
function transformAndMaybeSkipValidation(transform2) {
  return (value, opts) => __async(this, null, function* () {
    const transformed = yield transform2(value, opts);
    const { skipValidation = false } = opts != null ? opts : {};
    if (!transformed.ok && skipValidation) {
      console.warn(
        [
          \\"Failed to validate.\\",
          ...transformed.errors.map(
            (error) => \\"  - \\" + (error.path.length > 0 ? \`\${error.path.join(\\".\\")}: \${error.message}\` : error.message)
          )
        ].join(\\"\\\\n\\")
      );
      return {
        ok: true,
        value
      };
    } else {
      return transformed;
    }
  });
}
var init_maybeSkipValidation = __esm({
  \\"src/core/schemas/utils/maybeSkipValidation.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
function stringifyValidationError(error) {
  if (error.path.length === 0) {
    return error.message;
  }
  return \`\${error.path.join(\\" -> \\")}: \${error.message}\`;
}
var init_stringifyValidationErrors = __esm({
  \\"src/core/schemas/builders/schema-utils/stringifyValidationErrors.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/builders/schema-utils/JsonError.ts
var JsonError;
var init_JsonError = __esm({
  \\"src/core/schemas/builders/schema-utils/JsonError.ts\\"() {
    \\"use strict\\";
    init_stringifyValidationErrors();
    JsonError = class extends Error {
      constructor(errors) {
        super(errors.map(stringifyValidationError).join(\\"; \\"));
        this.errors = errors;
        Object.setPrototypeOf(this, JsonError.prototype);
      }
    };
  }
});

// src/core/schemas/builders/schema-utils/ParseError.ts
var ParseError;
var init_ParseError = __esm({
  \\"src/core/schemas/builders/schema-utils/ParseError.ts\\"() {
    \\"use strict\\";
    init_stringifyValidationErrors();
    ParseError = class extends Error {
      constructor(errors) {
        super(errors.map(stringifyValidationError).join(\\"; \\"));
        this.errors = errors;
        Object.setPrototypeOf(this, ParseError.prototype);
      }
    };
  }
});

// src/core/schemas/builders/schema-utils/getSchemaUtils.ts
function getSchemaUtils(schema) {
  return {
    optional: () => optional(schema),
    transform: (transformer) => transform(schema, transformer),
    parseOrThrow: (raw, opts) => __async(this, null, function* () {
      const parsed = yield schema.parse(raw, opts);
      if (parsed.ok) {
        return parsed.value;
      }
      throw new ParseError(parsed.errors);
    }),
    jsonOrThrow: (parsed, opts) => __async(this, null, function* () {
      const raw = yield schema.json(parsed, opts);
      if (raw.ok) {
        return raw.value;
      }
      throw new JsonError(raw.errors);
    })
  };
}
function optional(schema) {
  const baseSchema = {
    parse: (raw, opts) => {
      if (raw == null) {
        return {
          ok: true,
          value: void 0
        };
      }
      return schema.parse(raw, opts);
    },
    json: (parsed, opts) => {
      if (parsed == null) {
        return {
          ok: true,
          value: null
        };
      }
      return schema.json(parsed, opts);
    },
    getType: () => SchemaType.OPTIONAL
  };
  return __spreadValues(__spreadValues({}, baseSchema), getSchemaUtils(baseSchema));
}
function transform(schema, transformer) {
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      const parsed = yield schema.parse(raw, opts);
      if (!parsed.ok) {
        return parsed;
      }
      return {
        ok: true,
        value: transformer.transform(parsed.value)
      };
    }),
    json: (transformed, opts) => __async(this, null, function* () {
      const parsed = yield transformer.untransform(transformed);
      return schema.json(parsed, opts);
    }),
    getType: () => schema.getType()
  };
  return __spreadValues(__spreadValues({}, baseSchema), getSchemaUtils(baseSchema));
}
var init_getSchemaUtils = __esm({
  \\"src/core/schemas/builders/schema-utils/getSchemaUtils.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_JsonError();
    init_ParseError();
  }
});

// src/core/schemas/builders/schema-utils/index.ts
var init_schema_utils = __esm({
  \\"src/core/schemas/builders/schema-utils/index.ts\\"() {
    \\"use strict\\";
    init_getSchemaUtils();
    init_JsonError();
    init_ParseError();
  }
});

// src/core/schemas/builders/date/date.ts
function date() {
  const baseSchema = {
    parse: (raw, { breadcrumbsPrefix = [] } = {}) => {
      if (typeof raw !== \\"string\\") {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(raw, \\"string\\")
            }
          ]
        };
      }
      if (!ISO_8601_REGEX.test(raw)) {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(raw, \\"ISO 8601 date string\\")
            }
          ]
        };
      }
      return {
        ok: true,
        value: new Date(raw)
      };
    },
    json: (date2, { breadcrumbsPrefix = [] } = {}) => {
      if (date2 instanceof Date) {
        return {
          ok: true,
          value: date2.toISOString()
        };
      } else {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(date2, \\"Date object\\")
            }
          ]
        };
      }
    },
    getType: () => SchemaType.DATE
  };
  return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
}
var ISO_8601_REGEX;
var init_date = __esm({
  \\"src/core/schemas/builders/date/date.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_getErrorMessageForIncorrectType();
    init_maybeSkipValidation();
    init_schema_utils();
    ISO_8601_REGEX = /^([+-]?\\\\d{4}(?!\\\\d{2}\\\\b))((-?)((0[1-9]|1[0-2])(\\\\3([12]\\\\d|0[1-9]|3[01]))?|W([0-4]\\\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\\\d|[12]\\\\d{2}|3([0-5]\\\\d|6[1-6])))([T\\\\s]((([01]\\\\d|2[0-3])((:?)[0-5]\\\\d)?|24:?00)([.,]\\\\d+(?!:))?)?(\\\\17[0-5]\\\\d([.,]\\\\d+)?)?([zZ]|([+-])([01]\\\\d|2[0-3]):?([0-5]\\\\d)?)?)?)?$/;
  }
});

// src/core/schemas/builders/date/index.ts
var init_date2 = __esm({
  \\"src/core/schemas/builders/date/index.ts\\"() {
    \\"use strict\\";
    init_date();
  }
});

// src/core/schemas/utils/createIdentitySchemaCreator.ts
function createIdentitySchemaCreator(schemaType, validate) {
  return () => {
    const baseSchema = {
      parse: validate,
      json: validate,
      getType: () => schemaType
    };
    return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
  };
}
var init_createIdentitySchemaCreator = __esm({
  \\"src/core/schemas/utils/createIdentitySchemaCreator.ts\\"() {
    \\"use strict\\";
    init_schema_utils();
    init_maybeSkipValidation();
  }
});

// src/core/schemas/builders/enum/enum.ts
function enum_(values) {
  const validValues = new Set(values);
  const schemaCreator = createIdentitySchemaCreator(
    SchemaType.ENUM,
    (value, { allowUnrecognizedEnumValues, breadcrumbsPrefix = [] } = {}) => {
      if (typeof value !== \\"string\\") {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(value, \\"string\\")
            }
          ]
        };
      }
      if (!validValues.has(value) && !allowUnrecognizedEnumValues) {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(value, \\"enum\\")
            }
          ]
        };
      }
      return {
        ok: true,
        value
      };
    }
  );
  return schemaCreator();
}
var init_enum = __esm({
  \\"src/core/schemas/builders/enum/enum.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    init_getErrorMessageForIncorrectType();
  }
});

// src/core/schemas/builders/enum/index.ts
var init_enum2 = __esm({
  \\"src/core/schemas/builders/enum/index.ts\\"() {
    \\"use strict\\";
    init_enum();
  }
});

// src/core/schemas/builders/lazy/lazy.ts
function lazy(getter) {
  const baseSchema = constructLazyBaseSchema(getter);
  return __spreadValues(__spreadValues({}, baseSchema), getSchemaUtils(baseSchema));
}
function constructLazyBaseSchema(getter) {
  return {
    parse: (raw, opts) => __async(this, null, function* () {
      return (yield getMemoizedSchema(getter)).parse(raw, opts);
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      return (yield getMemoizedSchema(getter)).json(parsed, opts);
    }),
    getType: () => __async(this, null, function* () {
      return (yield getMemoizedSchema(getter)).getType();
    })
  };
}
function getMemoizedSchema(getter) {
  return __async(this, null, function* () {
    const castedGetter = getter;
    if (castedGetter.__zurg_memoized == null) {
      castedGetter.__zurg_memoized = yield getter();
    }
    return castedGetter.__zurg_memoized;
  });
}
var init_lazy = __esm({
  \\"src/core/schemas/builders/lazy/lazy.ts\\"() {
    \\"use strict\\";
    init_schema_utils();
  }
});

// src/core/schemas/utils/entries.ts
function entries(object2) {
  return Object.entries(object2);
}
var init_entries = __esm({
  \\"src/core/schemas/utils/entries.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/utils/filterObject.ts
function filterObject(obj, keysToInclude) {
  const keysToIncludeSet = new Set(keysToInclude);
  return Object.entries(obj).reduce((acc, [key, value]) => {
    if (keysToIncludeSet.has(key)) {
      acc[key] = value;
    }
    return acc;
  }, {});
}
var init_filterObject = __esm({
  \\"src/core/schemas/utils/filterObject.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/utils/isPlainObject.ts
function isPlainObject2(value) {
  if (typeof value !== \\"object\\" || value === null) {
    return false;
  }
  if (Object.getPrototypeOf(value) === null) {
    return true;
  }
  let proto = value;
  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }
  return Object.getPrototypeOf(value) === proto;
}
var init_isPlainObject = __esm({
  \\"src/core/schemas/utils/isPlainObject.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/utils/keys.ts
function keys(object2) {
  return Object.keys(object2);
}
var init_keys = __esm({
  \\"src/core/schemas/utils/keys.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/utils/partition.ts
function partition(items, predicate) {
  const trueItems = [], falseItems = [];
  for (const item of items) {
    if (predicate(item)) {
      trueItems.push(item);
    } else {
      falseItems.push(item);
    }
  }
  return [trueItems, falseItems];
}
var init_partition = __esm({
  \\"src/core/schemas/utils/partition.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/builders/object-like/getObjectLikeUtils.ts
function getObjectLikeUtils(schema) {
  return {
    withParsedProperties: (properties) => withParsedProperties(schema, properties)
  };
}
function withParsedProperties(objectLike, properties) {
  const objectSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      const parsedObject = yield objectLike.parse(raw, opts);
      if (!parsedObject.ok) {
        return parsedObject;
      }
      const additionalProperties = Object.entries(properties).reduce(
        (processed, [key, value]) => {
          return __spreadProps(__spreadValues({}, processed), {
            [key]: typeof value === \\"function\\" ? value(parsedObject.value) : value
          });
        },
        {}
      );
      return {
        ok: true,
        value: __spreadValues(__spreadValues({}, parsedObject.value), additionalProperties)
      };
    }),
    json: (parsed, opts) => {
      var _a;
      if (!isPlainObject2(parsed)) {
        return {
          ok: false,
          errors: [
            {
              path: (_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [],
              message: getErrorMessageForIncorrectType(parsed, \\"object\\")
            }
          ]
        };
      }
      const addedPropertyKeys = new Set(Object.keys(properties));
      const parsedWithoutAddedProperties = filterObject(
        parsed,
        Object.keys(parsed).filter((key) => !addedPropertyKeys.has(key))
      );
      return objectLike.json(parsedWithoutAddedProperties, opts);
    },
    getType: () => objectLike.getType()
  };
  return __spreadValues(__spreadValues(__spreadValues({}, objectSchema), getSchemaUtils(objectSchema)), getObjectLikeUtils(objectSchema));
}
var init_getObjectLikeUtils = __esm({
  \\"src/core/schemas/builders/object-like/getObjectLikeUtils.ts\\"() {
    \\"use strict\\";
    init_filterObject();
    init_getErrorMessageForIncorrectType();
    init_isPlainObject();
    init_schema_utils();
  }
});

// src/core/schemas/builders/object-like/index.ts
var init_object_like = __esm({
  \\"src/core/schemas/builders/object-like/index.ts\\"() {
    \\"use strict\\";
    init_getObjectLikeUtils();
  }
});

// src/core/schemas/builders/object/property.ts
function property(rawKey, valueSchema) {
  return {
    rawKey,
    valueSchema,
    isProperty: true
  };
}
function isProperty(maybeProperty) {
  return maybeProperty.isProperty;
}
var init_property = __esm({
  \\"src/core/schemas/builders/object/property.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/builders/object/object.ts
function object(schemas) {
  const baseSchema = {
    _getRawProperties: () => Promise.resolve(
      Object.entries(schemas).map(
        ([parsedKey, propertySchema]) => isProperty(propertySchema) ? propertySchema.rawKey : parsedKey
      )
    ),
    _getParsedProperties: () => Promise.resolve(keys(schemas)),
    parse: (raw, opts) => __async(this, null, function* () {
      const rawKeyToProperty = {};
      const requiredKeys = [];
      for (const [parsedKey, schemaOrObjectProperty] of entries(schemas)) {
        const rawKey = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.rawKey : parsedKey;
        const valueSchema = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.valueSchema : schemaOrObjectProperty;
        const property2 = {
          rawKey,
          parsedKey,
          valueSchema
        };
        rawKeyToProperty[rawKey] = property2;
        if (yield isSchemaRequired(valueSchema)) {
          requiredKeys.push(rawKey);
        }
      }
      return validateAndTransformObject({
        value: raw,
        requiredKeys,
        getProperty: (rawKey) => {
          const property2 = rawKeyToProperty[rawKey];
          if (property2 == null) {
            return void 0;
          }
          return {
            transformedKey: property2.parsedKey,
            transform: (propertyValue) => {
              var _a;
              return property2.valueSchema.parse(propertyValue, __spreadProps(__spreadValues({}, opts), {
                breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], rawKey]
              }));
            }
          };
        },
        unrecognizedObjectKeys: opts == null ? void 0 : opts.unrecognizedObjectKeys,
        skipValidation: opts == null ? void 0 : opts.skipValidation,
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      const requiredKeys = [];
      for (const [parsedKey, schemaOrObjectProperty] of entries(schemas)) {
        const valueSchema = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.valueSchema : schemaOrObjectProperty;
        if (yield isSchemaRequired(valueSchema)) {
          requiredKeys.push(parsedKey);
        }
      }
      return validateAndTransformObject({
        value: parsed,
        requiredKeys,
        getProperty: (parsedKey) => {
          const property2 = schemas[parsedKey];
          if (property2 == null) {
            return void 0;
          }
          if (isProperty(property2)) {
            return {
              transformedKey: property2.rawKey,
              transform: (propertyValue) => {
                var _a;
                return property2.valueSchema.json(propertyValue, __spreadProps(__spreadValues({}, opts), {
                  breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], parsedKey]
                }));
              }
            };
          } else {
            return {
              transformedKey: parsedKey,
              transform: (propertyValue) => {
                var _a;
                return property2.json(propertyValue, __spreadProps(__spreadValues({}, opts), {
                  breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], parsedKey]
                }));
              }
            };
          }
        },
        unrecognizedObjectKeys: opts == null ? void 0 : opts.unrecognizedObjectKeys,
        skipValidation: opts == null ? void 0 : opts.skipValidation,
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    getType: () => SchemaType.OBJECT
  };
  return __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema)), getObjectLikeUtils(baseSchema)), getObjectUtils(baseSchema));
}
function validateAndTransformObject(_0) {
  return __async(this, arguments, function* ({
    value,
    requiredKeys,
    getProperty,
    unrecognizedObjectKeys = \\"fail\\",
    skipValidation = false,
    breadcrumbsPrefix = []
  }) {
    if (!isPlainObject2(value)) {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: getErrorMessageForIncorrectType(value, \\"object\\")
          }
        ]
      };
    }
    const missingRequiredKeys = new Set(requiredKeys);
    const errors = [];
    const transformed = {};
    for (const [preTransformedKey, preTransformedItemValue] of Object.entries(value)) {
      const property2 = getProperty(preTransformedKey);
      if (property2 != null) {
        missingRequiredKeys.delete(preTransformedKey);
        const value2 = yield property2.transform(preTransformedItemValue);
        if (value2.ok) {
          transformed[property2.transformedKey] = value2.value;
        } else {
          transformed[preTransformedKey] = preTransformedItemValue;
          errors.push(...value2.errors);
        }
      } else {
        switch (unrecognizedObjectKeys) {
          case \\"fail\\":
            errors.push({
              path: [...breadcrumbsPrefix, preTransformedKey],
              message: \`Unexpected key \\"\${preTransformedKey}\\"\`
            });
            break;
          case \\"strip\\":
            break;
          case \\"passthrough\\":
            transformed[preTransformedKey] = preTransformedItemValue;
            break;
        }
      }
    }
    errors.push(
      ...requiredKeys.filter((key) => missingRequiredKeys.has(key)).map((key) => ({
        path: breadcrumbsPrefix,
        message: \`Missing required key \\"\${key}\\"\`
      }))
    );
    if (errors.length === 0 || skipValidation) {
      return {
        ok: true,
        value: transformed
      };
    } else {
      return {
        ok: false,
        errors
      };
    }
  });
}
function getObjectUtils(schema) {
  return {
    extend: (extension) => {
      const baseSchema = {
        _getParsedProperties: () => __async(this, null, function* () {
          return [
            ...yield schema._getParsedProperties(),
            ...yield extension._getParsedProperties()
          ];
        }),
        _getRawProperties: () => __async(this, null, function* () {
          return [
            ...yield schema._getRawProperties(),
            ...yield extension._getRawProperties()
          ];
        }),
        parse: (raw, opts) => __async(this, null, function* () {
          return validateAndTransformExtendedObject({
            extensionKeys: yield extension._getRawProperties(),
            value: raw,
            transformBase: (rawBase) => schema.parse(rawBase, opts),
            transformExtension: (rawExtension) => extension.parse(rawExtension, opts)
          });
        }),
        json: (parsed, opts) => __async(this, null, function* () {
          return validateAndTransformExtendedObject({
            extensionKeys: yield extension._getParsedProperties(),
            value: parsed,
            transformBase: (parsedBase) => schema.json(parsedBase, opts),
            transformExtension: (parsedExtension) => extension.json(parsedExtension, opts)
          });
        }),
        getType: () => SchemaType.OBJECT
      };
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, baseSchema), getSchemaUtils(baseSchema)), getObjectLikeUtils(baseSchema)), getObjectUtils(baseSchema));
    }
  };
}
function validateAndTransformExtendedObject(_0) {
  return __async(this, arguments, function* ({
    extensionKeys,
    value,
    transformBase,
    transformExtension
  }) {
    const extensionPropertiesSet = new Set(extensionKeys);
    const [extensionProperties, baseProperties] = partition(
      keys(value),
      (key) => extensionPropertiesSet.has(key)
    );
    const transformedBase = yield transformBase(filterObject(value, baseProperties));
    const transformedExtension = yield transformExtension(filterObject(value, extensionProperties));
    if (transformedBase.ok && transformedExtension.ok) {
      return {
        ok: true,
        value: __spreadValues(__spreadValues({}, transformedBase.value), transformedExtension.value)
      };
    } else {
      return {
        ok: false,
        errors: [
          ...transformedBase.ok ? [] : transformedBase.errors,
          ...transformedExtension.ok ? [] : transformedExtension.errors
        ]
      };
    }
  });
}
function isSchemaRequired(schema) {
  return __async(this, null, function* () {
    return !(yield isSchemaOptional(schema));
  });
}
function isSchemaOptional(schema) {
  return __async(this, null, function* () {
    switch (yield schema.getType()) {
      case SchemaType.ANY:
      case SchemaType.UNKNOWN:
      case SchemaType.OPTIONAL:
        return true;
      default:
        return false;
    }
  });
}
var init_object = __esm({
  \\"src/core/schemas/builders/object/object.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_entries();
    init_filterObject();
    init_getErrorMessageForIncorrectType();
    init_isPlainObject();
    init_keys();
    init_maybeSkipValidation();
    init_partition();
    init_object_like();
    init_schema_utils();
    init_property();
  }
});

// src/core/schemas/builders/object/index.ts
var init_object2 = __esm({
  \\"src/core/schemas/builders/object/index.ts\\"() {
    \\"use strict\\";
    init_object();
    init_property();
  }
});

// src/core/schemas/builders/lazy/lazyObject.ts
function lazyObject(getter) {
  const baseSchema = __spreadProps(__spreadValues({}, constructLazyBaseSchema(getter)), {
    _getRawProperties: () => __async(this, null, function* () {
      return (yield getMemoizedSchema(getter))._getRawProperties();
    }),
    _getParsedProperties: () => __async(this, null, function* () {
      return (yield getMemoizedSchema(getter))._getParsedProperties();
    })
  });
  return __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, baseSchema), getSchemaUtils(baseSchema)), getObjectLikeUtils(baseSchema)), getObjectUtils(baseSchema));
}
var init_lazyObject = __esm({
  \\"src/core/schemas/builders/lazy/lazyObject.ts\\"() {
    \\"use strict\\";
    init_object2();
    init_object_like();
    init_schema_utils();
    init_lazy();
  }
});

// src/core/schemas/builders/lazy/index.ts
var init_lazy2 = __esm({
  \\"src/core/schemas/builders/lazy/index.ts\\"() {
    \\"use strict\\";
    init_lazy();
    init_lazyObject();
  }
});

// src/core/schemas/builders/list/list.ts
function list(schema) {
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      return validateAndTransformArray(
        raw,
        (item, index) => {
          var _a;
          return schema.parse(item, __spreadProps(__spreadValues({}, opts), {
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`[\${index}]\`]
          }));
        }
      );
    }),
    json: (parsed, opts) => validateAndTransformArray(
      parsed,
      (item, index) => {
        var _a;
        return schema.json(item, __spreadProps(__spreadValues({}, opts), {
          breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`[\${index}]\`]
        }));
      }
    ),
    getType: () => SchemaType.LIST
  };
  return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
}
function validateAndTransformArray(value, transformItem) {
  return __async(this, null, function* () {
    if (!Array.isArray(value)) {
      return {
        ok: false,
        errors: [
          {
            message: getErrorMessageForIncorrectType(value, \\"list\\"),
            path: []
          }
        ]
      };
    }
    const maybeValidItems = yield Promise.all(value.map((item, index) => transformItem(item, index)));
    return maybeValidItems.reduce(
      (acc, item) => {
        if (acc.ok && item.ok) {
          return {
            ok: true,
            value: [...acc.value, item.value]
          };
        }
        const errors = [];
        if (!acc.ok) {
          errors.push(...acc.errors);
        }
        if (!item.ok) {
          errors.push(...item.errors);
        }
        return {
          ok: false,
          errors
        };
      },
      { ok: true, value: [] }
    );
  });
}
var init_list = __esm({
  \\"src/core/schemas/builders/list/list.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_getErrorMessageForIncorrectType();
    init_maybeSkipValidation();
    init_schema_utils();
  }
});

// src/core/schemas/builders/list/index.ts
var init_list2 = __esm({
  \\"src/core/schemas/builders/list/index.ts\\"() {
    \\"use strict\\";
    init_list();
  }
});

// src/core/schemas/builders/literals/stringLiteral.ts
function stringLiteral(literal) {
  const schemaCreator = createIdentitySchemaCreator(
    SchemaType.STRING_LITERAL,
    (value, { breadcrumbsPrefix = [] } = {}) => {
      if (value === literal) {
        return {
          ok: true,
          value: literal
        };
      } else {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(value, \`\\"\${literal}\\"\`)
            }
          ]
        };
      }
    }
  );
  return schemaCreator();
}
var init_stringLiteral = __esm({
  \\"src/core/schemas/builders/literals/stringLiteral.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    init_getErrorMessageForIncorrectType();
  }
});

// src/core/schemas/builders/literals/index.ts
var init_literals = __esm({
  \\"src/core/schemas/builders/literals/index.ts\\"() {
    \\"use strict\\";
    init_stringLiteral();
  }
});

// src/core/schemas/builders/primitives/any.ts
var any;
var init_any = __esm({
  \\"src/core/schemas/builders/primitives/any.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    any = createIdentitySchemaCreator(SchemaType.ANY, (value) => ({ ok: true, value }));
  }
});

// src/core/schemas/builders/primitives/boolean.ts
var boolean;
var init_boolean = __esm({
  \\"src/core/schemas/builders/primitives/boolean.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    init_getErrorMessageForIncorrectType();
    boolean = createIdentitySchemaCreator(
      SchemaType.BOOLEAN,
      (value, { breadcrumbsPrefix = [] } = {}) => {
        if (typeof value === \\"boolean\\") {
          return {
            ok: true,
            value
          };
        } else {
          return {
            ok: false,
            errors: [
              {
                path: breadcrumbsPrefix,
                message: getErrorMessageForIncorrectType(value, \\"boolean\\")
              }
            ]
          };
        }
      }
    );
  }
});

// src/core/schemas/builders/primitives/number.ts
var number;
var init_number = __esm({
  \\"src/core/schemas/builders/primitives/number.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    init_getErrorMessageForIncorrectType();
    number = createIdentitySchemaCreator(
      SchemaType.NUMBER,
      (value, { breadcrumbsPrefix = [] } = {}) => {
        if (typeof value === \\"number\\") {
          return {
            ok: true,
            value
          };
        } else {
          return {
            ok: false,
            errors: [
              {
                path: breadcrumbsPrefix,
                message: getErrorMessageForIncorrectType(value, \\"number\\")
              }
            ]
          };
        }
      }
    );
  }
});

// src/core/schemas/builders/primitives/string.ts
var string;
var init_string = __esm({
  \\"src/core/schemas/builders/primitives/string.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    init_getErrorMessageForIncorrectType();
    string = createIdentitySchemaCreator(
      SchemaType.STRING,
      (value, { breadcrumbsPrefix = [] } = {}) => {
        if (typeof value === \\"string\\") {
          return {
            ok: true,
            value
          };
        } else {
          return {
            ok: false,
            errors: [
              {
                path: breadcrumbsPrefix,
                message: getErrorMessageForIncorrectType(value, \\"string\\")
              }
            ]
          };
        }
      }
    );
  }
});

// src/core/schemas/builders/primitives/unknown.ts
var unknown;
var init_unknown = __esm({
  \\"src/core/schemas/builders/primitives/unknown.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    unknown = createIdentitySchemaCreator(SchemaType.UNKNOWN, (value) => ({ ok: true, value }));
  }
});

// src/core/schemas/builders/primitives/index.ts
var init_primitives = __esm({
  \\"src/core/schemas/builders/primitives/index.ts\\"() {
    \\"use strict\\";
    init_any();
    init_boolean();
    init_number();
    init_string();
    init_unknown();
  }
});

// src/core/schemas/builders/record/record.ts
function record(keySchema, valueSchema) {
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      return validateAndTransformRecord({
        value: raw,
        isKeyNumeric: (yield keySchema.getType()) === SchemaType.NUMBER,
        transformKey: (key) => {
          var _a;
          return keySchema.parse(key, __spreadProps(__spreadValues({}, opts), {
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`\${key} (key)\`]
          }));
        },
        transformValue: (value, key) => {
          var _a;
          return valueSchema.parse(value, __spreadProps(__spreadValues({}, opts), {
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`\${key}\`]
          }));
        },
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      return validateAndTransformRecord({
        value: parsed,
        isKeyNumeric: (yield keySchema.getType()) === SchemaType.NUMBER,
        transformKey: (key) => {
          var _a;
          return keySchema.json(key, __spreadProps(__spreadValues({}, opts), {
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`\${key} (key)\`]
          }));
        },
        transformValue: (value, key) => {
          var _a;
          return valueSchema.json(value, __spreadProps(__spreadValues({}, opts), {
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`\${key}\`]
          }));
        },
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    getType: () => SchemaType.RECORD
  };
  return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
}
function validateAndTransformRecord(_0) {
  return __async(this, arguments, function* ({
    value,
    isKeyNumeric,
    transformKey,
    transformValue,
    breadcrumbsPrefix = []
  }) {
    if (!isPlainObject2(value)) {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: getErrorMessageForIncorrectType(value, \\"object\\")
          }
        ]
      };
    }
    return entries(value).reduce(
      (_02, _1) => __async(this, [_02, _1], function* (accPromise, [stringKey, value2]) {
        if (value2 == null) {
          return accPromise;
        }
        const acc = yield accPromise;
        let key = stringKey;
        if (isKeyNumeric) {
          const numberKey = stringKey.length > 0 ? Number(stringKey) : NaN;
          if (!isNaN(numberKey)) {
            key = numberKey;
          }
        }
        const transformedKey = yield transformKey(key);
        const transformedValue = yield transformValue(value2, key);
        if (acc.ok && transformedKey.ok && transformedValue.ok) {
          return {
            ok: true,
            value: __spreadProps(__spreadValues({}, acc.value), {
              [transformedKey.value]: transformedValue.value
            })
          };
        }
        const errors = [];
        if (!acc.ok) {
          errors.push(...acc.errors);
        }
        if (!transformedKey.ok) {
          errors.push(...transformedKey.errors);
        }
        if (!transformedValue.ok) {
          errors.push(...transformedValue.errors);
        }
        return {
          ok: false,
          errors
        };
      }),
      Promise.resolve({ ok: true, value: {} })
    );
  });
}
var init_record = __esm({
  \\"src/core/schemas/builders/record/record.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_entries();
    init_getErrorMessageForIncorrectType();
    init_isPlainObject();
    init_maybeSkipValidation();
    init_schema_utils();
  }
});

// src/core/schemas/builders/record/index.ts
var init_record2 = __esm({
  \\"src/core/schemas/builders/record/index.ts\\"() {
    \\"use strict\\";
    init_record();
  }
});

// src/core/schemas/builders/set/set.ts
function set(schema) {
  const listSchema = list(schema);
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      const parsedList = yield listSchema.parse(raw, opts);
      if (parsedList.ok) {
        return {
          ok: true,
          value: new Set(parsedList.value)
        };
      } else {
        return parsedList;
      }
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      var _a;
      if (!(parsed instanceof Set)) {
        return {
          ok: false,
          errors: [
            {
              path: (_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [],
              message: getErrorMessageForIncorrectType(parsed, \\"Set\\")
            }
          ]
        };
      }
      const jsonList = yield listSchema.json([...parsed], opts);
      return jsonList;
    }),
    getType: () => SchemaType.SET
  };
  return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
}
var init_set = __esm({
  \\"src/core/schemas/builders/set/set.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_getErrorMessageForIncorrectType();
    init_maybeSkipValidation();
    init_list2();
    init_schema_utils();
  }
});

// src/core/schemas/builders/set/index.ts
var init_set2 = __esm({
  \\"src/core/schemas/builders/set/index.ts\\"() {
    \\"use strict\\";
    init_set();
  }
});

// src/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
function undiscriminatedUnion(schemas) {
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      return validateAndTransformUndiscriminatedUnion(
        (schema) => schema.parse(raw, opts),
        schemas
      );
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      return validateAndTransformUndiscriminatedUnion(
        (schema) => schema.json(parsed, opts),
        schemas
      );
    }),
    getType: () => SchemaType.UNDISCRIMINATED_UNION
  };
  return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
}
function validateAndTransformUndiscriminatedUnion(transform2, schemas) {
  return __async(this, null, function* () {
    const errors = [];
    for (const [index, schema] of schemas.entries()) {
      const transformed = yield transform2(schema);
      if (transformed.ok) {
        return transformed;
      } else {
        for (const error of errors) {
          errors.push({
            path: error.path,
            message: \`[Variant \${index}] \${error.message}\`
          });
        }
      }
    }
    return {
      ok: false,
      errors
    };
  });
}
var init_undiscriminatedUnion = __esm({
  \\"src/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_maybeSkipValidation();
    init_schema_utils();
  }
});

// src/core/schemas/builders/undiscriminated-union/index.ts
var init_undiscriminated_union = __esm({
  \\"src/core/schemas/builders/undiscriminated-union/index.ts\\"() {
    \\"use strict\\";
    init_undiscriminatedUnion();
  }
});

// src/core/schemas/builders/union/discriminant.ts
function discriminant(parsedDiscriminant, rawDiscriminant) {
  return {
    parsedDiscriminant,
    rawDiscriminant
  };
}
var init_discriminant = __esm({
  \\"src/core/schemas/builders/union/discriminant.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/builders/union/union.ts
function union(discriminant2, union2) {
  const rawDiscriminant = typeof discriminant2 === \\"string\\" ? discriminant2 : discriminant2.rawDiscriminant;
  const parsedDiscriminant = typeof discriminant2 === \\"string\\" ? discriminant2 : discriminant2.parsedDiscriminant;
  const discriminantValueSchema = enum_(keys(union2));
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      return transformAndValidateUnion({
        value: raw,
        discriminant: rawDiscriminant,
        transformedDiscriminant: parsedDiscriminant,
        transformDiscriminantValue: (discriminantValue) => {
          var _a;
          return discriminantValueSchema.parse(discriminantValue, {
            allowUnrecognizedEnumValues: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], rawDiscriminant]
          });
        },
        getAdditionalPropertiesSchema: (discriminantValue) => union2[discriminantValue],
        allowUnrecognizedUnionMembers: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
        transformAdditionalProperties: (additionalProperties, additionalPropertiesSchema) => additionalPropertiesSchema.parse(additionalProperties, opts),
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      return transformAndValidateUnion({
        value: parsed,
        discriminant: parsedDiscriminant,
        transformedDiscriminant: rawDiscriminant,
        transformDiscriminantValue: (discriminantValue) => {
          var _a;
          return discriminantValueSchema.json(discriminantValue, {
            allowUnrecognizedEnumValues: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], parsedDiscriminant]
          });
        },
        getAdditionalPropertiesSchema: (discriminantValue) => union2[discriminantValue],
        allowUnrecognizedUnionMembers: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
        transformAdditionalProperties: (additionalProperties, additionalPropertiesSchema) => additionalPropertiesSchema.json(additionalProperties, opts),
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    getType: () => SchemaType.UNION
  };
  return __spreadValues(__spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema)), getObjectLikeUtils(baseSchema));
}
function transformAndValidateUnion(_0) {
  return __async(this, arguments, function* ({
    value,
    discriminant: discriminant2,
    transformedDiscriminant,
    transformDiscriminantValue,
    getAdditionalPropertiesSchema,
    allowUnrecognizedUnionMembers = false,
    transformAdditionalProperties,
    breadcrumbsPrefix = []
  }) {
    if (!isPlainObject2(value)) {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: getErrorMessageForIncorrectType(value, \\"object\\")
          }
        ]
      };
    }
    const _a = value, { [discriminant2]: discriminantValue } = _a, additionalProperties = __objRest(_a, [__restKey(discriminant2)]);
    if (discriminantValue == null) {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: \`Missing discriminant (\\"\${discriminant2}\\")\`
          }
        ]
      };
    }
    const transformedDiscriminantValue = yield transformDiscriminantValue(discriminantValue);
    if (!transformedDiscriminantValue.ok) {
      return {
        ok: false,
        errors: transformedDiscriminantValue.errors
      };
    }
    const additionalPropertiesSchema = getAdditionalPropertiesSchema(transformedDiscriminantValue.value);
    if (additionalPropertiesSchema == null) {
      if (allowUnrecognizedUnionMembers) {
        return {
          ok: true,
          value: __spreadValues({
            [transformedDiscriminant]: transformedDiscriminantValue.value
          }, additionalProperties)
        };
      } else {
        return {
          ok: false,
          errors: [
            {
              path: [...breadcrumbsPrefix, discriminant2],
              message: \\"Unexpected discriminant value\\"
            }
          ]
        };
      }
    }
    const transformedAdditionalProperties = yield transformAdditionalProperties(
      additionalProperties,
      additionalPropertiesSchema
    );
    if (!transformedAdditionalProperties.ok) {
      return transformedAdditionalProperties;
    }
    return {
      ok: true,
      value: __spreadValues({
        [transformedDiscriminant]: discriminantValue
      }, transformedAdditionalProperties.value)
    };
  });
}
var init_union = __esm({
  \\"src/core/schemas/builders/union/union.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_getErrorMessageForIncorrectType();
    init_isPlainObject();
    init_keys();
    init_maybeSkipValidation();
    init_enum2();
    init_object_like();
    init_schema_utils();
  }
});

// src/core/schemas/builders/union/index.ts
var init_union2 = __esm({
  \\"src/core/schemas/builders/union/index.ts\\"() {
    \\"use strict\\";
    init_discriminant();
    init_union();
  }
});

// src/core/schemas/builders/index.ts
var init_builders = __esm({
  \\"src/core/schemas/builders/index.ts\\"() {
    \\"use strict\\";
    init_date2();
    init_enum2();
    init_lazy2();
    init_list2();
    init_literals();
    init_object2();
    init_object_like();
    init_primitives();
    init_record2();
    init_schema_utils();
    init_set2();
    init_undiscriminated_union();
    init_union2();
  }
});

// src/core/schemas/index.ts
var schemas_exports = {};
__export(schemas_exports, {
  JsonError: () => JsonError,
  ParseError: () => ParseError,
  any: () => any,
  boolean: () => boolean,
  date: () => date,
  discriminant: () => discriminant,
  enum_: () => enum_,
  getObjectLikeUtils: () => getObjectLikeUtils,
  getObjectUtils: () => getObjectUtils,
  getSchemaUtils: () => getSchemaUtils,
  isProperty: () => isProperty,
  lazy: () => lazy,
  lazyObject: () => lazyObject,
  list: () => list,
  number: () => number,
  object: () => object,
  optional: () => optional,
  property: () => property,
  record: () => record,
  set: () => set,
  string: () => string,
  stringLiteral: () => stringLiteral,
  transform: () => transform,
  undiscriminatedUnion: () => undiscriminatedUnion,
  union: () => union,
  unknown: () => unknown,
  withParsedProperties: () => withParsedProperties
});
var init_schemas = __esm({
  \\"src/core/schemas/index.ts\\"() {
    \\"use strict\\";
    init_builders();
  }
});

// src/core/index.ts
var init_core = __esm({
  \\"src/core/index.ts\\"() {
    \\"use strict\\";
    init_fetcher();
    init_auth();
    init_schemas();
  }
});

// .yarn/cache/url-join-npm-4.0.1-e1f4415722-f74e868bf2.zip/node_modules/url-join/lib/url-join.js
var require_url_join = __commonJS({
  \\".yarn/cache/url-join-npm-4.0.1-e1f4415722-f74e868bf2.zip/node_modules/url-join/lib/url-join.js\\"(exports, module) {
    (function(name, context, definition) {
      if (typeof module !== \\"undefined\\" && module.exports)
        module.exports = definition();
      else if (typeof define === \\"function\\" && define.amd)
        define(definition);
      else
        context[name] = definition();
    })(\\"urljoin\\", exports, function() {
      function normalize(strArray) {
        var resultArray = [];
        if (strArray.length === 0) {
          return \\"\\";
        }
        if (typeof strArray[0] !== \\"string\\") {
          throw new TypeError(\\"Url must be a string. Received \\" + strArray[0]);
        }
        if (strArray[0].match(/^[^/:]+:\\\\/*$/) && strArray.length > 1) {
          var first = strArray.shift();
          strArray[0] = first + strArray[0];
        }
        if (strArray[0].match(/^file:\\\\/\\\\/\\\\//)) {
          strArray[0] = strArray[0].replace(/^([^/:]+):\\\\/*/, \\"$1:///\\");
        } else {
          strArray[0] = strArray[0].replace(/^([^/:]+):\\\\/*/, \\"$1://\\");
        }
        for (var i = 0; i < strArray.length; i++) {
          var component = strArray[i];
          if (typeof component !== \\"string\\") {
            throw new TypeError(\\"Url must be a string. Received \\" + component);
          }
          if (component === \\"\\") {
            continue;
          }
          if (i > 0) {
            component = component.replace(/^[\\\\/]+/, \\"\\");
          }
          if (i < strArray.length - 1) {
            component = component.replace(/[\\\\/]+$/, \\"\\");
          } else {
            component = component.replace(/[\\\\/]+$/, \\"/\\");
          }
          resultArray.push(component);
        }
        var str = resultArray.join(\\"/\\");
        str = str.replace(/\\\\/(\\\\?|&|#[^!])/g, \\"$1\\");
        var parts = str.split(\\"?\\");
        str = parts.shift() + (parts.length > 0 ? \\"?\\" : \\"\\") + parts.join(\\"&\\");
        return str;
      }
      return function() {
        var input;
        if (typeof arguments[0] === \\"object\\") {
          input = arguments[0];
        } else {
          input = [].slice.call(arguments);
        }
        return normalize(input);
      };
    });
  }
});

// src/serialization/resources/remoteGen/types/RemoteGenJobId.ts
var RemoteGenJobId2;
var init_RemoteGenJobId2 = __esm({
  \\"src/serialization/resources/remoteGen/types/RemoteGenJobId.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    RemoteGenJobId2 = schemas_exports.string().transform({
      transform: RemoteGenJobId,
      untransform: (value) => value
    });
  }
});

// src/serialization/resources/remoteGen/types/RemoteGenTaskId.ts
var RemoteGenTaskId2;
var init_RemoteGenTaskId2 = __esm({
  \\"src/serialization/resources/remoteGen/types/RemoteGenTaskId.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    RemoteGenTaskId2 = schemas_exports.string().transform({
      transform: RemoteGenTaskId,
      untransform: (value) => value
    });
  }
});

// src/serialization/resources/remoteGen/types/GeneratorIdAndVersion.ts
var GeneratorIdAndVersion;
var init_GeneratorIdAndVersion2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GeneratorIdAndVersion.ts\\"() {
    \\"use strict\\";
    init_core();
    GeneratorIdAndVersion = schemas_exports.object({
      id: schemas_exports.string(),
      version: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/GeneratorConfig.ts
var GeneratorConfig;
var init_GeneratorConfig2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GeneratorConfig.ts\\"() {
    \\"use strict\\";
    init_core();
    GeneratorConfig = schemas_exports.object({
      id: schemas_exports.string(),
      version: schemas_exports.string(),
      customConfig: schemas_exports.unknown(),
      willDownloadFiles: schemas_exports.boolean(),
      outputs: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorOutputs;
      }))
    });
  }
});

// src/serialization/resources/remoteGen/types/GeneratorConfigV2.ts
var GeneratorConfigV2;
var init_GeneratorConfigV22 = __esm({
  \\"src/serialization/resources/remoteGen/types/GeneratorConfigV2.ts\\"() {
    \\"use strict\\";
    init_core();
    GeneratorConfigV2 = schemas_exports.object({
      id: schemas_exports.string(),
      version: schemas_exports.string(),
      customConfig: schemas_exports.unknown(),
      outputMode: schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).OutputMode;
      }))
    });
  }
});

// src/serialization/resources/remoteGen/types/OutputMode.ts
var OutputMode2;
var init_OutputMode2 = __esm({
  \\"src/serialization/resources/remoteGen/types/OutputMode.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    OutputMode2 = schemas_exports.union(\\"type\\", {
      publish: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).PublishOutputMode;
      })),
      publishV2: schemas_exports.object({
        publishV2: schemas_exports.lazy(() => __async(void 0, null, function* () {
          return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).PublishOutputModeV2;
        }))
      }),
      downloadFiles: schemas_exports.object({}),
      github: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GithubOutputMode;
      }))
    }).transform({
      transform: (value) => {
        switch (value.type) {
          case \\"publish\\":
            return OutputMode.publish(value);
          case \\"publishV2\\":
            return OutputMode.publishV2(value.publishV2);
          case \\"downloadFiles\\":
            return OutputMode.downloadFiles();
          case \\"github\\":
            return OutputMode.github(value);
          default:
            return OutputMode._unknown(value);
        }
      },
      untransform: (_a) => {
        var _b = _a, { _visit } = _b, value = __objRest(_b, [\\"_visit\\"]);
        return value;
      }
    });
  }
});

// src/serialization/resources/remoteGen/types/PublishOutputMode.ts
var PublishOutputMode;
var init_PublishOutputMode2 = __esm({
  \\"src/serialization/resources/remoteGen/types/PublishOutputMode.ts\\"() {
    \\"use strict\\";
    init_core();
    PublishOutputMode = schemas_exports.object({
      registryOverrides: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).RegistryOverrides;
      }))
    });
  }
});

// src/serialization/resources/remoteGen/types/PublishOutputModeV2.ts
var PublishOutputModeV22;
var init_PublishOutputModeV22 = __esm({
  \\"src/serialization/resources/remoteGen/types/PublishOutputModeV2.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    PublishOutputModeV22 = schemas_exports.union(\\"type\\", {
      npmOverride: schemas_exports.object({
        npmOverride: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
          return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).NpmOutput;
        })).optional()
      }),
      mavenOverride: schemas_exports.object({
        mavenOverride: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
          return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).MavenOutput;
        })).optional()
      }),
      postman: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).PostmanOutput;
      }))
    }).transform({
      transform: (value) => {
        switch (value.type) {
          case \\"npmOverride\\":
            return PublishOutputModeV2.npmOverride(value.npmOverride);
          case \\"mavenOverride\\":
            return PublishOutputModeV2.mavenOverride(value.mavenOverride);
          case \\"postman\\":
            return PublishOutputModeV2.postman(value);
          default:
            return PublishOutputModeV2._unknown(value);
        }
      },
      untransform: (_a) => {
        var _b = _a, { _visit } = _b, value = __objRest(_b, [\\"_visit\\"]);
        return value;
      }
    });
  }
});

// src/serialization/resources/remoteGen/types/RegistryOverrides.ts
var RegistryOverrides;
var init_RegistryOverrides2 = __esm({
  \\"src/serialization/resources/remoteGen/types/RegistryOverrides.ts\\"() {
    \\"use strict\\";
    init_core();
    RegistryOverrides = schemas_exports.object({
      npm: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).NpmOutput;
      })).optional(),
      maven: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).MavenOutput;
      })).optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/GeneratorOutputs.ts
var GeneratorOutputs;
var init_GeneratorOutputs2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GeneratorOutputs.ts\\"() {
    \\"use strict\\";
    init_core();
    GeneratorOutputs = schemas_exports.object({
      npm: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).NpmOutput;
      })).optional(),
      maven: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).MavenOutput;
      })).optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/NpmOutput.ts
var NpmOutput;
var init_NpmOutput2 = __esm({
  \\"src/serialization/resources/remoteGen/types/NpmOutput.ts\\"() {
    \\"use strict\\";
    init_core();
    NpmOutput = schemas_exports.object({
      registryUrl: schemas_exports.string(),
      packageName: schemas_exports.string(),
      token: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/MavenOutput.ts
var MavenOutput;
var init_MavenOutput2 = __esm({
  \\"src/serialization/resources/remoteGen/types/MavenOutput.ts\\"() {
    \\"use strict\\";
    init_core();
    MavenOutput = schemas_exports.object({
      registryUrl: schemas_exports.string(),
      username: schemas_exports.string(),
      password: schemas_exports.string(),
      coordinate: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/PostmanOutput.ts
var PostmanOutput;
var init_PostmanOutput2 = __esm({
  \\"src/serialization/resources/remoteGen/types/PostmanOutput.ts\\"() {
    \\"use strict\\";
    init_core();
    PostmanOutput = schemas_exports.object({
      apiKey: schemas_exports.string(),
      workspaceId: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/GithubOutputMode.ts
var GithubOutputMode;
var init_GithubOutputMode2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GithubOutputMode.ts\\"() {
    \\"use strict\\";
    init_core();
    GithubOutputMode = schemas_exports.object({
      owner: schemas_exports.string(),
      repo: schemas_exports.string(),
      publishInfo: schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GithubPublishInfo;
      })).optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/GithubPublishInfo.ts
var GithubPublishInfo2;
var init_GithubPublishInfo2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GithubPublishInfo.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    GithubPublishInfo2 = schemas_exports.union(\\"type\\", {
      npm: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).NpmOutputWithOptionalToken;
      })),
      maven: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).MavenOutputWithOptionalCreds;
      })),
      postman: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).PostmanOutput;
      }))
    }).transform({
      transform: (value) => {
        switch (value.type) {
          case \\"npm\\":
            return GithubPublishInfo.npm(value);
          case \\"maven\\":
            return GithubPublishInfo.maven(value);
          case \\"postman\\":
            return GithubPublishInfo.postman(value);
          default:
            return GithubPublishInfo._unknown(value);
        }
      },
      untransform: (_a) => {
        var _b = _a, { _visit } = _b, value = __objRest(_b, [\\"_visit\\"]);
        return value;
      }
    });
  }
});

// src/serialization/resources/remoteGen/types/NpmOutputWithOptionalToken.ts
var NpmOutputWithOptionalToken;
var init_NpmOutputWithOptionalToken2 = __esm({
  \\"src/serialization/resources/remoteGen/types/NpmOutputWithOptionalToken.ts\\"() {
    \\"use strict\\";
    init_core();
    NpmOutputWithOptionalToken = schemas_exports.object({
      registryUrl: schemas_exports.string(),
      packageName: schemas_exports.string(),
      token: schemas_exports.string().optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/MavenOutputWithOptionalCreds.ts
var MavenOutputWithOptionalCreds;
var init_MavenOutputWithOptionalCreds2 = __esm({
  \\"src/serialization/resources/remoteGen/types/MavenOutputWithOptionalCreds.ts\\"() {
    \\"use strict\\";
    init_core();
    MavenOutputWithOptionalCreds = schemas_exports.object({
      registryUrl: schemas_exports.string(),
      coordinate: schemas_exports.string(),
      credentials: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).UsernamePassword;
      })).optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/UsernamePassword.ts
var UsernamePassword;
var init_UsernamePassword2 = __esm({
  \\"src/serialization/resources/remoteGen/types/UsernamePassword.ts\\"() {
    \\"use strict\\";
    init_core();
    UsernamePassword = schemas_exports.object({
      username: schemas_exports.string(),
      password: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/Task.ts
var Task;
var init_Task2 = __esm({
  \\"src/serialization/resources/remoteGen/types/Task.ts\\"() {
    \\"use strict\\";
    init_core();
    Task = schemas_exports.object({
      status: schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).TaskStatus;
      })),
      packages: schemas_exports.list(schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).Package;
      }))),
      logs: schemas_exports.list(schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).TaskLog;
      })))
    });
  }
});

// src/serialization/resources/remoteGen/types/TaskStatus.ts
var TaskStatus2;
var init_TaskStatus2 = __esm({
  \\"src/serialization/resources/remoteGen/types/TaskStatus.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    TaskStatus2 = schemas_exports.union(schemas_exports.discriminant(\\"type\\", \\"_type\\"), {
      notStarted: schemas_exports.object({}),
      running: schemas_exports.object({}),
      failed: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).FailedTaskStatus;
      })),
      finished: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).FinishedTaskStatus;
      }))
    }).transform({
      transform: (value) => {
        switch (value.type) {
          case \\"notStarted\\":
            return TaskStatus.notStarted();
          case \\"running\\":
            return TaskStatus.running();
          case \\"failed\\":
            return TaskStatus.failed(value);
          case \\"finished\\":
            return TaskStatus.finished(value);
          default:
            return TaskStatus._unknown(value);
        }
      },
      untransform: (_a) => {
        var _b = _a, { _visit } = _b, value = __objRest(_b, [\\"_visit\\"]);
        return value;
      }
    });
  }
});

// src/serialization/resources/remoteGen/types/FailedTaskStatus.ts
var FailedTaskStatus;
var init_FailedTaskStatus2 = __esm({
  \\"src/serialization/resources/remoteGen/types/FailedTaskStatus.ts\\"() {
    \\"use strict\\";
    init_core();
    FailedTaskStatus = schemas_exports.object({
      message: schemas_exports.string(),
      s3PreSignedReadUrl: schemas_exports.string().optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/FinishedTaskStatus.ts
var FinishedTaskStatus;
var init_FinishedTaskStatus2 = __esm({
  \\"src/serialization/resources/remoteGen/types/FinishedTaskStatus.ts\\"() {
    \\"use strict\\";
    init_core();
    FinishedTaskStatus = schemas_exports.object({
      hasFilesToDownload: schemas_exports.boolean(),
      s3PreSignedReadUrl: schemas_exports.string(),
      s3PreSignedReadUrlV2: schemas_exports.string().optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/TaskLog.ts
var TaskLog;
var init_TaskLog2 = __esm({
  \\"src/serialization/resources/remoteGen/types/TaskLog.ts\\"() {
    \\"use strict\\";
    init_core();
    TaskLog = schemas_exports.object({
      level: schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).LogLevel;
      })),
      message: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/LogLevel.ts
var LogLevel2;
var init_LogLevel2 = __esm({
  \\"src/serialization/resources/remoteGen/types/LogLevel.ts\\"() {
    \\"use strict\\";
    init_core();
    LogLevel2 = schemas_exports.enum_([
      \\"DEBUG\\",
      \\"INFO\\",
      \\"WARN\\",
      \\"ERROR\\"
    ]);
  }
});

// src/serialization/resources/remoteGen/types/Package.ts
var Package;
var init_Package2 = __esm({
  \\"src/serialization/resources/remoteGen/types/Package.ts\\"() {
    \\"use strict\\";
    init_core();
    Package = schemas_exports.object({
      coordinate: schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).PackageCoordinate;
      })),
      status: schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).PackagePublishStatus;
      }))
    });
  }
});

// src/serialization/resources/remoteGen/types/PackagePublishStatus.ts
var PackagePublishStatus2;
var init_PackagePublishStatus2 = __esm({
  \\"src/serialization/resources/remoteGen/types/PackagePublishStatus.ts\\"() {
    \\"use strict\\";
    init_core();
    PackagePublishStatus2 = schemas_exports.enum_([\\"NOT_STARTED_PUBLISHING\\", \\"PUBLISHING\\", \\"PUBLISHED\\", \\"FAILED_TO_PUBLISH\\"]);
  }
});

// src/serialization/resources/remoteGen/types/PackageCoordinate.ts
var PackageCoordinate2;
var init_PackageCoordinate2 = __esm({
  \\"src/serialization/resources/remoteGen/types/PackageCoordinate.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    PackageCoordinate2 = schemas_exports.union(schemas_exports.discriminant(\\"type\\", \\"_type\\"), {
      npm: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).NpmCoordinate;
      })),
      maven: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).MavenCoordinate;
      })),
      pypi: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).PypiCoordinate;
      }))
    }).transform({
      transform: (value) => {
        switch (value.type) {
          case \\"npm\\":
            return PackageCoordinate.npm(value);
          case \\"maven\\":
            return PackageCoordinate.maven(value);
          case \\"pypi\\":
            return PackageCoordinate.pypi(value);
          default:
            return PackageCoordinate._unknown(value);
        }
      },
      untransform: (_a) => {
        var _b = _a, { _visit } = _b, value = __objRest(_b, [\\"_visit\\"]);
        return value;
      }
    });
  }
});

// src/serialization/resources/remoteGen/types/NpmCoordinate.ts
var NpmCoordinate;
var init_NpmCoordinate2 = __esm({
  \\"src/serialization/resources/remoteGen/types/NpmCoordinate.ts\\"() {
    \\"use strict\\";
    init_core();
    NpmCoordinate = schemas_exports.object({
      name: schemas_exports.string(),
      version: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/MavenCoordinate.ts
var MavenCoordinate;
var init_MavenCoordinate2 = __esm({
  \\"src/serialization/resources/remoteGen/types/MavenCoordinate.ts\\"() {
    \\"use strict\\";
    init_core();
    MavenCoordinate = schemas_exports.object({
      group: schemas_exports.string(),
      artifact: schemas_exports.string(),
      version: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/PypiCoordinate.ts
var PypiCoordinate;
var init_PypiCoordinate2 = __esm({
  \\"src/serialization/resources/remoteGen/types/PypiCoordinate.ts\\"() {
    \\"use strict\\";
    init_core();
    PypiCoordinate = schemas_exports.object({
      name: schemas_exports.string(),
      version: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/CreateJobResponse.ts
var CreateJobResponse;
var init_CreateJobResponse2 = __esm({
  \\"src/serialization/resources/remoteGen/types/CreateJobResponse.ts\\"() {
    \\"use strict\\";
    init_core();
    CreateJobResponse = schemas_exports.object({
      jobId: schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).RemoteGenJobId;
      })),
      taskIds: schemas_exports.list(schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).RemoteGenTaskId;
      })))
    });
  }
});

// src/serialization/resources/remoteGen/types/GeneratorsDoNotExistErrorBodyType.ts
var GeneratorsDoNotExistErrorBodyType;
var init_GeneratorsDoNotExistErrorBodyType2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GeneratorsDoNotExistErrorBodyType.ts\\"() {
    \\"use strict\\";
    init_core();
    GeneratorsDoNotExistErrorBodyType = schemas_exports.object({
      nonExistentGenerators: schemas_exports.list(
        schemas_exports.lazyObject(() => __async(void 0, null, function* () {
          return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorIdAndVersion;
        }))
      )
    });
  }
});

// src/serialization/resources/remoteGen/types/CannotPublishToNpmScopeDetails.ts
var CannotPublishToNpmScopeDetails;
var init_CannotPublishToNpmScopeDetails2 = __esm({
  \\"src/serialization/resources/remoteGen/types/CannotPublishToNpmScopeDetails.ts\\"() {
    \\"use strict\\";
    init_core();
    CannotPublishToNpmScopeDetails = schemas_exports.object({
      generatorId: schemas_exports.string(),
      invalidScope: schemas_exports.string(),
      validScope: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/CannotPublishToMavenGroupDetails.ts
var CannotPublishToMavenGroupDetails;
var init_CannotPublishToMavenGroupDetails2 = __esm({
  \\"src/serialization/resources/remoteGen/types/CannotPublishToMavenGroupDetails.ts\\"() {
    \\"use strict\\";
    init_core();
    CannotPublishToMavenGroupDetails = schemas_exports.object({
      generatorId: schemas_exports.string(),
      invalidGroup: schemas_exports.string(),
      validGroup: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/InsufficientPermissionsDetails.ts
var InsufficientPermissionsDetails;
var init_InsufficientPermissionsDetails2 = __esm({
  \\"src/serialization/resources/remoteGen/types/InsufficientPermissionsDetails.ts\\"() {
    \\"use strict\\";
    init_core();
    InsufficientPermissionsDetails = schemas_exports.object({
      dummy: schemas_exports.string().optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/index.ts
var init_types2 = __esm({
  \\"src/serialization/resources/remoteGen/types/index.ts\\"() {
    \\"use strict\\";
    init_RemoteGenJobId2();
    init_RemoteGenTaskId2();
    init_GeneratorIdAndVersion2();
    init_GeneratorConfig2();
    init_GeneratorConfigV22();
    init_OutputMode2();
    init_PublishOutputMode2();
    init_PublishOutputModeV22();
    init_RegistryOverrides2();
    init_GeneratorOutputs2();
    init_NpmOutput2();
    init_MavenOutput2();
    init_PostmanOutput2();
    init_GithubOutputMode2();
    init_GithubPublishInfo2();
    init_NpmOutputWithOptionalToken2();
    init_MavenOutputWithOptionalCreds2();
    init_UsernamePassword2();
    init_Task2();
    init_TaskStatus2();
    init_FailedTaskStatus2();
    init_FinishedTaskStatus2();
    init_TaskLog2();
    init_LogLevel2();
    init_Package2();
    init_PackagePublishStatus2();
    init_PackageCoordinate2();
    init_NpmCoordinate2();
    init_MavenCoordinate2();
    init_PypiCoordinate2();
    init_CreateJobResponse2();
    init_GeneratorsDoNotExistErrorBodyType2();
    init_CannotPublishToNpmScopeDetails2();
    init_CannotPublishToMavenGroupDetails2();
    init_InsufficientPermissionsDetails2();
  }
});

// src/serialization/resources/remoteGen/client/createJob.ts
var createJob_exports2 = {};
__export(createJob_exports2, {
  Error: () => Error7
});
var Error7;
var init_createJob2 = __esm({
  \\"src/serialization/resources/remoteGen/client/createJob.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    Error7 = schemas_exports.union(\\"error\\", {
      IllegalApiNameError: schemas_exports.object({}),
      GeneratorsDoNotExistError: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorsDoNotExistErrorBodyType;
          })
        )
      }),
      CannotPublishToNpmScope: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).CannotPublishToNpmScopeDetails;
          })
        )
      }),
      CannotPublishToMavenGroup: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).CannotPublishToMavenGroupDetails;
          })
        )
      }),
      InsufficientPermissions: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).InsufficientPermissionsDetails;
          })
        )
      })
    }).transform({
      transform: (value) => {
        switch (value.error) {
          case \\"IllegalApiNameError\\":
            return remoteGen_exports.createJob.Error.illegalApiNameError();
          case \\"GeneratorsDoNotExistError\\":
            return remoteGen_exports.createJob.Error.generatorsDoNotExistError(value.content);
          case \\"CannotPublishToNpmScope\\":
            return remoteGen_exports.createJob.Error.cannotPublishToNpmScope(value.content);
          case \\"CannotPublishToMavenGroup\\":
            return remoteGen_exports.createJob.Error.cannotPublishToMavenGroup(value.content);
          case \\"InsufficientPermissions\\":
            return remoteGen_exports.createJob.Error.insufficientPermissions(value.content);
        }
      },
      untransform: (_a) => {
        var _b = _a, { _visit } = _b, value = __objRest(_b, [\\"_visit\\"]);
        return value;
      }
    });
  }
});

// src/serialization/resources/remoteGen/client/createJobV2.ts
var createJobV2_exports2 = {};
__export(createJobV2_exports2, {
  Error: () => Error8
});
var Error8;
var init_createJobV22 = __esm({
  \\"src/serialization/resources/remoteGen/client/createJobV2.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    Error8 = schemas_exports.union(\\"error\\", {
      IllegalApiNameError: schemas_exports.object({}),
      GeneratorsDoNotExistError: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorsDoNotExistErrorBodyType;
          })
        )
      }),
      CannotPublishToNpmScope: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).CannotPublishToNpmScopeDetails;
          })
        )
      }),
      CannotPublishToMavenGroup: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).CannotPublishToMavenGroupDetails;
          })
        )
      }),
      InsufficientPermissions: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).InsufficientPermissionsDetails;
          })
        )
      })
    }).transform({
      transform: (value) => {
        switch (value.error) {
          case \\"IllegalApiNameError\\":
            return remoteGen_exports.createJobV2.Error.illegalApiNameError();
          case \\"GeneratorsDoNotExistError\\":
            return remoteGen_exports.createJobV2.Error.generatorsDoNotExistError(value.content);
          case \\"CannotPublishToNpmScope\\":
            return remoteGen_exports.createJobV2.Error.cannotPublishToNpmScope(value.content);
          case \\"CannotPublishToMavenGroup\\":
            return remoteGen_exports.createJobV2.Error.cannotPublishToMavenGroup(value.content);
          case \\"InsufficientPermissions\\":
            return remoteGen_exports.createJobV2.Error.insufficientPermissions(value.content);
        }
      },
      untransform: (_a) => {
        var _b = _a, { _visit } = _b, value = __objRest(_b, [\\"_visit\\"]);
        return value;
      }
    });
  }
});

// src/serialization/resources/remoteGen/client/getJobStatus.ts
var getJobStatus_exports2 = {};
__export(getJobStatus_exports2, {
  Response: () => Response
});
var Response;
var init_getJobStatus2 = __esm({
  \\"src/serialization/resources/remoteGen/client/getJobStatus.ts\\"() {
    \\"use strict\\";
    init_core();
    Response = schemas_exports.record(
      schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).RemoteGenTaskId;
      })),
      schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).Task;
      }))
    );
  }
});

// src/serialization/resources/remoteGen/client/requests/CreateJobRequest.ts
var CreateJobRequest;
var init_CreateJobRequest = __esm({
  \\"src/serialization/resources/remoteGen/client/requests/CreateJobRequest.ts\\"() {
    \\"use strict\\";
    init_core();
    CreateJobRequest = schemas_exports.object({
      apiName: schemas_exports.string(),
      organizationName: schemas_exports.string(),
      version: schemas_exports.string().optional(),
      generators: schemas_exports.list(
        schemas_exports.lazyObject(() => __async(void 0, null, function* () {
          return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorConfig;
        }))
      )
    });
  }
});

// src/serialization/resources/remoteGen/client/requests/CreateJobRequestV2.ts
var CreateJobRequestV2;
var init_CreateJobRequestV2 = __esm({
  \\"src/serialization/resources/remoteGen/client/requests/CreateJobRequestV2.ts\\"() {
    \\"use strict\\";
    init_core();
    CreateJobRequestV2 = schemas_exports.object({
      apiName: schemas_exports.string(),
      organizationName: schemas_exports.string(),
      version: schemas_exports.string().optional(),
      generators: schemas_exports.list(
        schemas_exports.lazyObject(() => __async(void 0, null, function* () {
          return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorConfigV2;
        }))
      ),
      uploadToS3: schemas_exports.boolean().optional()
    });
  }
});

// src/serialization/resources/remoteGen/client/requests/index.ts
var init_requests2 = __esm({
  \\"src/serialization/resources/remoteGen/client/requests/index.ts\\"() {
    \\"use strict\\";
    init_CreateJobRequest();
    init_CreateJobRequestV2();
  }
});

// src/serialization/resources/remoteGen/client/index.ts
var init_client4 = __esm({
  \\"src/serialization/resources/remoteGen/client/index.ts\\"() {
    \\"use strict\\";
    init_createJob2();
    init_createJobV22();
    init_getJobStatus2();
    init_requests2();
  }
});

// src/serialization/resources/remoteGen/index.ts
var remoteGen_exports2 = {};
__export(remoteGen_exports2, {
  CannotPublishToMavenGroupDetails: () => CannotPublishToMavenGroupDetails,
  CannotPublishToNpmScopeDetails: () => CannotPublishToNpmScopeDetails,
  CreateJobRequest: () => CreateJobRequest,
  CreateJobRequestV2: () => CreateJobRequestV2,
  CreateJobResponse: () => CreateJobResponse,
  FailedTaskStatus: () => FailedTaskStatus,
  FinishedTaskStatus: () => FinishedTaskStatus,
  GeneratorConfig: () => GeneratorConfig,
  GeneratorConfigV2: () => GeneratorConfigV2,
  GeneratorIdAndVersion: () => GeneratorIdAndVersion,
  GeneratorOutputs: () => GeneratorOutputs,
  GeneratorsDoNotExistErrorBodyType: () => GeneratorsDoNotExistErrorBodyType,
  GithubOutputMode: () => GithubOutputMode,
  GithubPublishInfo: () => GithubPublishInfo2,
  InsufficientPermissionsDetails: () => InsufficientPermissionsDetails,
  LogLevel: () => LogLevel2,
  MavenCoordinate: () => MavenCoordinate,
  MavenOutput: () => MavenOutput,
  MavenOutputWithOptionalCreds: () => MavenOutputWithOptionalCreds,
  NpmCoordinate: () => NpmCoordinate,
  NpmOutput: () => NpmOutput,
  NpmOutputWithOptionalToken: () => NpmOutputWithOptionalToken,
  OutputMode: () => OutputMode2,
  Package: () => Package,
  PackageCoordinate: () => PackageCoordinate2,
  PackagePublishStatus: () => PackagePublishStatus2,
  PostmanOutput: () => PostmanOutput,
  PublishOutputMode: () => PublishOutputMode,
  PublishOutputModeV2: () => PublishOutputModeV22,
  PypiCoordinate: () => PypiCoordinate,
  RegistryOverrides: () => RegistryOverrides,
  RemoteGenJobId: () => RemoteGenJobId2,
  RemoteGenTaskId: () => RemoteGenTaskId2,
  Task: () => Task,
  TaskLog: () => TaskLog,
  TaskStatus: () => TaskStatus2,
  UsernamePassword: () => UsernamePassword,
  createJob: () => createJob_exports2,
  createJobV2: () => createJobV2_exports2,
  getJobStatus: () => getJobStatus_exports2
});
var init_remoteGen2 = __esm({
  \\"src/serialization/resources/remoteGen/index.ts\\"() {
    \\"use strict\\";
    init_types2();
    init_client4();
  }
});

// src/serialization/resources/index.ts
var init_resources2 = __esm({
  \\"src/serialization/resources/index.ts\\"() {
    \\"use strict\\";
    init_remoteGen2();
    init_types2();
    init_requests2();
  }
});

// src/serialization/index.ts
var serialization_exports = {};
__export(serialization_exports, {
  CannotPublishToMavenGroupDetails: () => CannotPublishToMavenGroupDetails,
  CannotPublishToNpmScopeDetails: () => CannotPublishToNpmScopeDetails,
  CreateJobRequest: () => CreateJobRequest,
  CreateJobRequestV2: () => CreateJobRequestV2,
  CreateJobResponse: () => CreateJobResponse,
  FailedTaskStatus: () => FailedTaskStatus,
  FinishedTaskStatus: () => FinishedTaskStatus,
  GeneratorConfig: () => GeneratorConfig,
  GeneratorConfigV2: () => GeneratorConfigV2,
  GeneratorIdAndVersion: () => GeneratorIdAndVersion,
  GeneratorOutputs: () => GeneratorOutputs,
  GeneratorsDoNotExistErrorBodyType: () => GeneratorsDoNotExistErrorBodyType,
  GithubOutputMode: () => GithubOutputMode,
  GithubPublishInfo: () => GithubPublishInfo2,
  InsufficientPermissionsDetails: () => InsufficientPermissionsDetails,
  LogLevel: () => LogLevel2,
  MavenCoordinate: () => MavenCoordinate,
  MavenOutput: () => MavenOutput,
  MavenOutputWithOptionalCreds: () => MavenOutputWithOptionalCreds,
  NpmCoordinate: () => NpmCoordinate,
  NpmOutput: () => NpmOutput,
  NpmOutputWithOptionalToken: () => NpmOutputWithOptionalToken,
  OutputMode: () => OutputMode2,
  Package: () => Package,
  PackageCoordinate: () => PackageCoordinate2,
  PackagePublishStatus: () => PackagePublishStatus2,
  PostmanOutput: () => PostmanOutput,
  PublishOutputMode: () => PublishOutputMode,
  PublishOutputModeV2: () => PublishOutputModeV22,
  PypiCoordinate: () => PypiCoordinate,
  RegistryOverrides: () => RegistryOverrides,
  RemoteGenJobId: () => RemoteGenJobId2,
  RemoteGenTaskId: () => RemoteGenTaskId2,
  Task: () => Task,
  TaskLog: () => TaskLog,
  TaskStatus: () => TaskStatus2,
  UsernamePassword: () => UsernamePassword,
  remoteGen: () => remoteGen_exports2
});
var init_serialization = __esm({
  \\"src/serialization/index.ts\\"() {
    \\"use strict\\";
    init_resources2();
  }
});

// src/index.ts
init_api();

// src/api/resources/fiddle/client/Client.ts
init_core();
init_api();
var FiddleService = class {
  constructor(_options) {
    this._options = _options;
  }
  test(_requestOptions) {
    return __async(this, null, function* () {
      const _response = yield fetcher({
        url: yield Supplier.get(this._options.environment),
        method: \\"GET\\",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          \\"X-Fern-Language\\": \\"JavaScript\\",
          \\"X-Fern-SDK-Name\\": \\"@fern-fern/fiddle-sdk\\",
          \\"X-Fern-SDK-Version\\": \\"0.0.0\\"
        },
        contentType: \\"application/json\\",
        timeoutMs: (_requestOptions == null ? void 0 : _requestOptions.timeoutInSeconds) !== void 0 ? _requestOptions.timeoutInSeconds * 1e3 : 6e4
      });
      if (_response.ok) {
        return {
          ok: true,
          body: void 0
        };
      }
      return {
        ok: false,
        error: fiddle_exports.test.Error._unknown(_response.error)
      };
    });
  }
  _getAuthorizationHeader() {
    return __async(this, null, function* () {
      return \`Bearer \${yield Supplier.get(this._options.token)}\`;
    });
  }
};

// src/api/resources/health/client/Client.ts
init_core();
init_api();
var import_url_join = __toESM(require_url_join());
var Health = class {
  constructor(_options) {
    this._options = _options;
  }
  status(_requestOptions) {
    return __async(this, null, function* () {
      const _response = yield fetcher({
        url: (0, import_url_join.default)(yield Supplier.get(this._options.environment), \\"/api/health\\"),
        method: \\"GET\\",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          \\"X-Fern-Language\\": \\"JavaScript\\",
          \\"X-Fern-SDK-Name\\": \\"@fern-fern/fiddle-sdk\\",
          \\"X-Fern-SDK-Version\\": \\"0.0.0\\"
        },
        contentType: \\"application/json\\",
        timeoutMs: (_requestOptions == null ? void 0 : _requestOptions.timeoutInSeconds) !== void 0 ? _requestOptions.timeoutInSeconds * 1e3 : 6e4
      });
      if (_response.ok) {
        return {
          ok: true,
          body: void 0
        };
      }
      return {
        ok: false,
        error: health_exports.status.Error._unknown(_response.error)
      };
    });
  }
  _getAuthorizationHeader() {
    return __async(this, null, function* () {
      return \`Bearer \${yield Supplier.get(this._options.token)}\`;
    });
  }
};

// src/api/resources/remoteGen/client/Client.ts
init_core();
init_api();
init_serialization();
var import_url_join2 = __toESM(require_url_join());
var RemoteGen = class {
  constructor(_options) {
    this._options = _options;
  }
  createJob(request, _requestOptions) {
    return __async(this, null, function* () {
      var _a;
      const _response = yield fetcher({
        url: (0, import_url_join2.default)(yield Supplier.get(this._options.environment), \\"/api/remote-gen/create-job\\"),
        method: \\"POST\\",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          \\"X-Fern-Language\\": \\"JavaScript\\",
          \\"X-Fern-SDK-Name\\": \\"@fern-fern/fiddle-sdk\\",
          \\"X-Fern-SDK-Version\\": \\"0.0.0\\"
        },
        contentType: \\"application/json\\",
        body: yield CreateJobRequest.jsonOrThrow(request, { unrecognizedObjectKeys: \\"strip\\" }),
        timeoutMs: (_requestOptions == null ? void 0 : _requestOptions.timeoutInSeconds) !== void 0 ? _requestOptions.timeoutInSeconds * 1e3 : 6e4
      });
      if (_response.ok) {
        return {
          ok: true,
          body: yield CreateJobResponse.parseOrThrow(_response.body, {
            unrecognizedObjectKeys: \\"passthrough\\",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: [\\"response\\"]
          })
        };
      }
      if (_response.error.reason === \\"status-code\\") {
        switch ((_a = _response.error.body) == null ? void 0 : _a.error) {
          case \\"IllegalApiNameError\\":
          case \\"GeneratorsDoNotExistError\\":
          case \\"CannotPublishToNpmScope\\":
          case \\"CannotPublishToMavenGroup\\":
          case \\"InsufficientPermissions\\":
            return {
              ok: false,
              error: yield remoteGen_exports2.createJob.Error.parseOrThrow(
                _response.error.body,
                {
                  unrecognizedObjectKeys: \\"passthrough\\",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  breadcrumbsPrefix: [\\"response\\"]
                }
              )
            };
        }
      }
      return {
        ok: false,
        error: remoteGen_exports.createJob.Error._unknown(_response.error)
      };
    });
  }
  createJobV2(request, _requestOptions) {
    return __async(this, null, function* () {
      var _a;
      const _response = yield fetcher({
        url: (0, import_url_join2.default)(yield Supplier.get(this._options.environment), \\"/api/remote-gen/create-job-v2\\"),
        method: \\"POST\\",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          \\"X-Fern-Language\\": \\"JavaScript\\",
          \\"X-Fern-SDK-Name\\": \\"@fern-fern/fiddle-sdk\\",
          \\"X-Fern-SDK-Version\\": \\"0.0.0\\"
        },
        contentType: \\"application/json\\",
        body: yield CreateJobRequestV2.jsonOrThrow(request, { unrecognizedObjectKeys: \\"strip\\" }),
        timeoutMs: (_requestOptions == null ? void 0 : _requestOptions.timeoutInSeconds) !== void 0 ? _requestOptions.timeoutInSeconds * 1e3 : 6e4
      });
      if (_response.ok) {
        return {
          ok: true,
          body: yield CreateJobResponse.parseOrThrow(_response.body, {
            unrecognizedObjectKeys: \\"passthrough\\",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: [\\"response\\"]
          })
        };
      }
      if (_response.error.reason === \\"status-code\\") {
        switch ((_a = _response.error.body) == null ? void 0 : _a.error) {
          case \\"IllegalApiNameError\\":
          case \\"GeneratorsDoNotExistError\\":
          case \\"CannotPublishToNpmScope\\":
          case \\"CannotPublishToMavenGroup\\":
          case \\"InsufficientPermissions\\":
            return {
              ok: false,
              error: yield remoteGen_exports2.createJobV2.Error.parseOrThrow(
                _response.error.body,
                {
                  unrecognizedObjectKeys: \\"passthrough\\",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  breadcrumbsPrefix: [\\"response\\"]
                }
              )
            };
        }
      }
      return {
        ok: false,
        error: remoteGen_exports.createJobV2.Error._unknown(_response.error)
      };
    });
  }
  getJobStatus(jobId, _requestOptions) {
    return __async(this, null, function* () {
      const _response = yield fetcher({
        url: (0, import_url_join2.default)(
          yield Supplier.get(this._options.environment),
          \`/api/remote-gen/jobs/\${yield RemoteGenJobId2.jsonOrThrow(jobId)}/status\`
        ),
        method: \\"POST\\",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          \\"X-Fern-Language\\": \\"JavaScript\\",
          \\"X-Fern-SDK-Name\\": \\"@fern-fern/fiddle-sdk\\",
          \\"X-Fern-SDK-Version\\": \\"0.0.0\\"
        },
        contentType: \\"application/json\\",
        timeoutMs: (_requestOptions == null ? void 0 : _requestOptions.timeoutInSeconds) !== void 0 ? _requestOptions.timeoutInSeconds * 1e3 : 6e4
      });
      if (_response.ok) {
        return {
          ok: true,
          body: yield remoteGen_exports2.getJobStatus.Response.parseOrThrow(_response.body, {
            unrecognizedObjectKeys: \\"passthrough\\",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: [\\"response\\"]
          })
        };
      }
      return {
        ok: false,
        error: remoteGen_exports.getJobStatus.Error._unknown(_response.error)
      };
    });
  }
  _getAuthorizationHeader() {
    return __async(this, null, function* () {
      return \`Bearer \${yield Supplier.get(this._options.token)}\`;
    });
  }
};

// src/Client.ts
var FiddleClient = class {
  constructor(_options) {
    this._options = _options;
  }
  get fiddle() {
    var _a;
    return (_a = this._fiddle) != null ? _a : this._fiddle = new FiddleService(this._options);
  }
  get health() {
    var _a;
    return (_a = this._health) != null ? _a : this._health = new Health(this._options);
  }
  get remoteGen() {
    var _a;
    return (_a = this._remoteGen) != null ? _a : this._remoteGen = new RemoteGen(this._options);
  }
};
export {
  api_exports as Fiddle,
  FiddleClient
};
",
                "name": "index.js",
                "type": "file",
              },
              Object {
                "contents": "var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b ||= {})
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __restKey = (key) => typeof key === \\"symbol\\" ? key : key + \\"\\";
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/api/resources/remoteGen/types/RemoteGenJobId.ts
function RemoteGenJobId(value) {
  return value;
}
var init_RemoteGenJobId = __esm({
  \\"src/api/resources/remoteGen/types/RemoteGenJobId.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/RemoteGenTaskId.ts
function RemoteGenTaskId(value) {
  return value;
}
var init_RemoteGenTaskId = __esm({
  \\"src/api/resources/remoteGen/types/RemoteGenTaskId.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GeneratorIdAndVersion.ts
var init_GeneratorIdAndVersion = __esm({
  \\"src/api/resources/remoteGen/types/GeneratorIdAndVersion.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GeneratorConfig.ts
var init_GeneratorConfig = __esm({
  \\"src/api/resources/remoteGen/types/GeneratorConfig.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GeneratorConfigV2.ts
var init_GeneratorConfigV2 = __esm({
  \\"src/api/resources/remoteGen/types/GeneratorConfigV2.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/OutputMode.ts
var OutputMode;
var init_OutputMode = __esm({
  \\"src/api/resources/remoteGen/types/OutputMode.ts\\"() {
    \\"use strict\\";
    init_api();
    OutputMode = {
      publish: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"publish\\",
          _visit: function(visitor) {
            return OutputMode._visit(this, visitor);
          }
        });
      },
      publishV2: (value) => {
        return {
          publishV2: value,
          type: \\"publishV2\\",
          _visit: function(visitor) {
            return OutputMode._visit(this, visitor);
          }
        };
      },
      downloadFiles: () => {
        return {
          type: \\"downloadFiles\\",
          _visit: function(visitor) {
            return OutputMode._visit(this, visitor);
          }
        };
      },
      github: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"github\\",
          _visit: function(visitor) {
            return OutputMode._visit(this, visitor);
          }
        });
      },
      _unknown: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          _visit: function(visitor) {
            return OutputMode._visit(this, visitor);
          }
        });
      },
      _visit: (value, visitor) => {
        switch (value.type) {
          case \\"publish\\":
            return visitor.publish(value);
          case \\"publishV2\\":
            return visitor.publishV2(value.publishV2);
          case \\"downloadFiles\\":
            return visitor.downloadFiles();
          case \\"github\\":
            return visitor.github(value);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/types/PublishOutputMode.ts
var init_PublishOutputMode = __esm({
  \\"src/api/resources/remoteGen/types/PublishOutputMode.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/PublishOutputModeV2.ts
var PublishOutputModeV2;
var init_PublishOutputModeV2 = __esm({
  \\"src/api/resources/remoteGen/types/PublishOutputModeV2.ts\\"() {
    \\"use strict\\";
    init_api();
    PublishOutputModeV2 = {
      npmOverride: (value) => {
        return {
          npmOverride: value,
          type: \\"npmOverride\\",
          _visit: function(visitor) {
            return PublishOutputModeV2._visit(this, visitor);
          }
        };
      },
      mavenOverride: (value) => {
        return {
          mavenOverride: value,
          type: \\"mavenOverride\\",
          _visit: function(visitor) {
            return PublishOutputModeV2._visit(this, visitor);
          }
        };
      },
      postman: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"postman\\",
          _visit: function(visitor) {
            return PublishOutputModeV2._visit(this, visitor);
          }
        });
      },
      _unknown: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          _visit: function(visitor) {
            return PublishOutputModeV2._visit(this, visitor);
          }
        });
      },
      _visit: (value, visitor) => {
        switch (value.type) {
          case \\"npmOverride\\":
            return visitor.npmOverride(value.npmOverride);
          case \\"mavenOverride\\":
            return visitor.mavenOverride(value.mavenOverride);
          case \\"postman\\":
            return visitor.postman(value);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/types/RegistryOverrides.ts
var init_RegistryOverrides = __esm({
  \\"src/api/resources/remoteGen/types/RegistryOverrides.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GeneratorOutputs.ts
var init_GeneratorOutputs = __esm({
  \\"src/api/resources/remoteGen/types/GeneratorOutputs.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/NpmOutput.ts
var init_NpmOutput = __esm({
  \\"src/api/resources/remoteGen/types/NpmOutput.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/MavenOutput.ts
var init_MavenOutput = __esm({
  \\"src/api/resources/remoteGen/types/MavenOutput.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/PostmanOutput.ts
var init_PostmanOutput = __esm({
  \\"src/api/resources/remoteGen/types/PostmanOutput.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GithubOutputMode.ts
var init_GithubOutputMode = __esm({
  \\"src/api/resources/remoteGen/types/GithubOutputMode.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GithubPublishInfo.ts
var GithubPublishInfo;
var init_GithubPublishInfo = __esm({
  \\"src/api/resources/remoteGen/types/GithubPublishInfo.ts\\"() {
    \\"use strict\\";
    init_api();
    GithubPublishInfo = {
      npm: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"npm\\",
          _visit: function(visitor) {
            return GithubPublishInfo._visit(this, visitor);
          }
        });
      },
      maven: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"maven\\",
          _visit: function(visitor) {
            return GithubPublishInfo._visit(this, visitor);
          }
        });
      },
      postman: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"postman\\",
          _visit: function(visitor) {
            return GithubPublishInfo._visit(this, visitor);
          }
        });
      },
      _unknown: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          _visit: function(visitor) {
            return GithubPublishInfo._visit(this, visitor);
          }
        });
      },
      _visit: (value, visitor) => {
        switch (value.type) {
          case \\"npm\\":
            return visitor.npm(value);
          case \\"maven\\":
            return visitor.maven(value);
          case \\"postman\\":
            return visitor.postman(value);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/types/NpmOutputWithOptionalToken.ts
var init_NpmOutputWithOptionalToken = __esm({
  \\"src/api/resources/remoteGen/types/NpmOutputWithOptionalToken.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/MavenOutputWithOptionalCreds.ts
var init_MavenOutputWithOptionalCreds = __esm({
  \\"src/api/resources/remoteGen/types/MavenOutputWithOptionalCreds.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/UsernamePassword.ts
var init_UsernamePassword = __esm({
  \\"src/api/resources/remoteGen/types/UsernamePassword.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/Task.ts
var init_Task = __esm({
  \\"src/api/resources/remoteGen/types/Task.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/TaskStatus.ts
var TaskStatus;
var init_TaskStatus = __esm({
  \\"src/api/resources/remoteGen/types/TaskStatus.ts\\"() {
    \\"use strict\\";
    init_api();
    TaskStatus = {
      notStarted: () => {
        return {
          type: \\"notStarted\\",
          _visit: function(visitor) {
            return TaskStatus._visit(this, visitor);
          }
        };
      },
      running: () => {
        return {
          type: \\"running\\",
          _visit: function(visitor) {
            return TaskStatus._visit(this, visitor);
          }
        };
      },
      failed: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"failed\\",
          _visit: function(visitor) {
            return TaskStatus._visit(this, visitor);
          }
        });
      },
      finished: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"finished\\",
          _visit: function(visitor) {
            return TaskStatus._visit(this, visitor);
          }
        });
      },
      _unknown: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          _visit: function(visitor) {
            return TaskStatus._visit(this, visitor);
          }
        });
      },
      _visit: (value, visitor) => {
        switch (value.type) {
          case \\"notStarted\\":
            return visitor.notStarted();
          case \\"running\\":
            return visitor.running();
          case \\"failed\\":
            return visitor.failed(value);
          case \\"finished\\":
            return visitor.finished(value);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/types/FailedTaskStatus.ts
var init_FailedTaskStatus = __esm({
  \\"src/api/resources/remoteGen/types/FailedTaskStatus.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/FinishedTaskStatus.ts
var init_FinishedTaskStatus = __esm({
  \\"src/api/resources/remoteGen/types/FinishedTaskStatus.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/TaskLog.ts
var init_TaskLog = __esm({
  \\"src/api/resources/remoteGen/types/TaskLog.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/LogLevel.ts
var LogLevel;
var init_LogLevel = __esm({
  \\"src/api/resources/remoteGen/types/LogLevel.ts\\"() {
    \\"use strict\\";
    LogLevel = {
      Debug: \\"DEBUG\\",
      Info: \\"INFO\\",
      Warn: \\"WARN\\",
      Error: \\"ERROR\\"
    };
  }
});

// src/api/resources/remoteGen/types/Package.ts
var init_Package = __esm({
  \\"src/api/resources/remoteGen/types/Package.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/PackagePublishStatus.ts
var PackagePublishStatus;
var init_PackagePublishStatus = __esm({
  \\"src/api/resources/remoteGen/types/PackagePublishStatus.ts\\"() {
    \\"use strict\\";
    PackagePublishStatus = {
      NotStartedPublishing: \\"NOT_STARTED_PUBLISHING\\",
      Publishing: \\"PUBLISHING\\",
      Published: \\"PUBLISHED\\",
      FailedToPublish: \\"FAILED_TO_PUBLISH\\"
    };
  }
});

// src/api/resources/remoteGen/types/PackageCoordinate.ts
var PackageCoordinate;
var init_PackageCoordinate = __esm({
  \\"src/api/resources/remoteGen/types/PackageCoordinate.ts\\"() {
    \\"use strict\\";
    init_api();
    PackageCoordinate = {
      npm: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"npm\\",
          _visit: function(visitor) {
            return PackageCoordinate._visit(this, visitor);
          }
        });
      },
      maven: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"maven\\",
          _visit: function(visitor) {
            return PackageCoordinate._visit(this, visitor);
          }
        });
      },
      pypi: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          type: \\"pypi\\",
          _visit: function(visitor) {
            return PackageCoordinate._visit(this, visitor);
          }
        });
      },
      _unknown: (value) => {
        return __spreadProps(__spreadValues({}, value), {
          _visit: function(visitor) {
            return PackageCoordinate._visit(this, visitor);
          }
        });
      },
      _visit: (value, visitor) => {
        switch (value.type) {
          case \\"npm\\":
            return visitor.npm(value);
          case \\"maven\\":
            return visitor.maven(value);
          case \\"pypi\\":
            return visitor.pypi(value);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/types/NpmCoordinate.ts
var init_NpmCoordinate = __esm({
  \\"src/api/resources/remoteGen/types/NpmCoordinate.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/MavenCoordinate.ts
var init_MavenCoordinate = __esm({
  \\"src/api/resources/remoteGen/types/MavenCoordinate.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/PypiCoordinate.ts
var init_PypiCoordinate = __esm({
  \\"src/api/resources/remoteGen/types/PypiCoordinate.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/CreateJobResponse.ts
var init_CreateJobResponse = __esm({
  \\"src/api/resources/remoteGen/types/CreateJobResponse.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GeneratorsDoNotExistErrorBodyType.ts
var init_GeneratorsDoNotExistErrorBodyType = __esm({
  \\"src/api/resources/remoteGen/types/GeneratorsDoNotExistErrorBodyType.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/CannotPublishToNpmScopeDetails.ts
var init_CannotPublishToNpmScopeDetails = __esm({
  \\"src/api/resources/remoteGen/types/CannotPublishToNpmScopeDetails.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/CannotPublishToMavenGroupDetails.ts
var init_CannotPublishToMavenGroupDetails = __esm({
  \\"src/api/resources/remoteGen/types/CannotPublishToMavenGroupDetails.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/InsufficientPermissionsDetails.ts
var init_InsufficientPermissionsDetails = __esm({
  \\"src/api/resources/remoteGen/types/InsufficientPermissionsDetails.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/index.ts
var init_types = __esm({
  \\"src/api/resources/remoteGen/types/index.ts\\"() {
    \\"use strict\\";
    init_RemoteGenJobId();
    init_RemoteGenTaskId();
    init_GeneratorIdAndVersion();
    init_GeneratorConfig();
    init_GeneratorConfigV2();
    init_OutputMode();
    init_PublishOutputMode();
    init_PublishOutputModeV2();
    init_RegistryOverrides();
    init_GeneratorOutputs();
    init_NpmOutput();
    init_MavenOutput();
    init_PostmanOutput();
    init_GithubOutputMode();
    init_GithubPublishInfo();
    init_NpmOutputWithOptionalToken();
    init_MavenOutputWithOptionalCreds();
    init_UsernamePassword();
    init_Task();
    init_TaskStatus();
    init_FailedTaskStatus();
    init_FinishedTaskStatus();
    init_TaskLog();
    init_LogLevel();
    init_Package();
    init_PackagePublishStatus();
    init_PackageCoordinate();
    init_NpmCoordinate();
    init_MavenCoordinate();
    init_PypiCoordinate();
    init_CreateJobResponse();
    init_GeneratorsDoNotExistErrorBodyType();
    init_CannotPublishToNpmScopeDetails();
    init_CannotPublishToMavenGroupDetails();
    init_InsufficientPermissionsDetails();
  }
});

// src/api/resources/remoteGen/client/requests/index.ts
var init_requests = __esm({
  \\"src/api/resources/remoteGen/client/requests/index.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/client/createJob.ts
var createJob_exports = {};
__export(createJob_exports, {
  Error: () => Error2
});
var Error2;
var init_createJob = __esm({
  \\"src/api/resources/remoteGen/client/createJob.ts\\"() {
    \\"use strict\\";
    init_api();
    Error2 = {
      illegalApiNameError: () => {
        return {
          error: \\"IllegalApiNameError\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      generatorsDoNotExistError: (value) => {
        return {
          content: value,
          error: \\"GeneratorsDoNotExistError\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      cannotPublishToNpmScope: (value) => {
        return {
          content: value,
          error: \\"CannotPublishToNpmScope\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      cannotPublishToMavenGroup: (value) => {
        return {
          content: value,
          error: \\"CannotPublishToMavenGroup\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      insufficientPermissions: (value) => {
        return {
          content: value,
          error: \\"InsufficientPermissions\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      _unknown: (fetcherError) => {
        return {
          error: void 0,
          content: fetcherError,
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.error) {
          case \\"IllegalApiNameError\\":
            return visitor.illegalApiNameError();
          case \\"GeneratorsDoNotExistError\\":
            return visitor.generatorsDoNotExistError(value.content);
          case \\"CannotPublishToNpmScope\\":
            return visitor.cannotPublishToNpmScope(value.content);
          case \\"CannotPublishToMavenGroup\\":
            return visitor.cannotPublishToMavenGroup(value.content);
          case \\"InsufficientPermissions\\":
            return visitor.insufficientPermissions(value.content);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/client/createJobV2.ts
var createJobV2_exports = {};
__export(createJobV2_exports, {
  Error: () => Error3
});
var Error3;
var init_createJobV2 = __esm({
  \\"src/api/resources/remoteGen/client/createJobV2.ts\\"() {
    \\"use strict\\";
    init_api();
    Error3 = {
      illegalApiNameError: () => {
        return {
          error: \\"IllegalApiNameError\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      generatorsDoNotExistError: (value) => {
        return {
          content: value,
          error: \\"GeneratorsDoNotExistError\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      cannotPublishToNpmScope: (value) => {
        return {
          content: value,
          error: \\"CannotPublishToNpmScope\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      cannotPublishToMavenGroup: (value) => {
        return {
          content: value,
          error: \\"CannotPublishToMavenGroup\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      insufficientPermissions: (value) => {
        return {
          content: value,
          error: \\"InsufficientPermissions\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      _unknown: (fetcherError) => {
        return {
          error: void 0,
          content: fetcherError,
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.error) {
          case \\"IllegalApiNameError\\":
            return visitor.illegalApiNameError();
          case \\"GeneratorsDoNotExistError\\":
            return visitor.generatorsDoNotExistError(value.content);
          case \\"CannotPublishToNpmScope\\":
            return visitor.cannotPublishToNpmScope(value.content);
          case \\"CannotPublishToMavenGroup\\":
            return visitor.cannotPublishToMavenGroup(value.content);
          case \\"InsufficientPermissions\\":
            return visitor.insufficientPermissions(value.content);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/client/getJobStatus.ts
var getJobStatus_exports = {};
__export(getJobStatus_exports, {
  Error: () => Error4
});
var Error4;
var init_getJobStatus = __esm({
  \\"src/api/resources/remoteGen/client/getJobStatus.ts\\"() {
    \\"use strict\\";
    init_api();
    Error4 = {
      _unknown: (fetcherError) => {
        return {
          error: void 0,
          content: fetcherError,
          _visit: function(visitor) {
            return remoteGen_exports.getJobStatus.Error._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.error) {
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/client/index.ts
var init_client = __esm({
  \\"src/api/resources/remoteGen/client/index.ts\\"() {
    \\"use strict\\";
    init_requests();
    init_createJob();
    init_createJobV2();
    init_getJobStatus();
  }
});

// src/api/resources/remoteGen/index.ts
var remoteGen_exports = {};
__export(remoteGen_exports, {
  GithubPublishInfo: () => GithubPublishInfo,
  LogLevel: () => LogLevel,
  OutputMode: () => OutputMode,
  PackageCoordinate: () => PackageCoordinate,
  PackagePublishStatus: () => PackagePublishStatus,
  PublishOutputModeV2: () => PublishOutputModeV2,
  RemoteGenJobId: () => RemoteGenJobId,
  RemoteGenTaskId: () => RemoteGenTaskId,
  TaskStatus: () => TaskStatus,
  createJob: () => createJob_exports,
  createJobV2: () => createJobV2_exports,
  getJobStatus: () => getJobStatus_exports
});
var init_remoteGen = __esm({
  \\"src/api/resources/remoteGen/index.ts\\"() {
    \\"use strict\\";
    init_types();
    init_client();
  }
});

// src/api/resources/fiddle/client/test.ts
var test_exports = {};
__export(test_exports, {
  Error: () => Error5
});
var Error5;
var init_test = __esm({
  \\"src/api/resources/fiddle/client/test.ts\\"() {
    \\"use strict\\";
    init_api();
    Error5 = {
      _unknown: (fetcherError) => {
        return {
          error: void 0,
          content: fetcherError,
          _visit: function(visitor) {
            return fiddle_exports.test.Error._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.error) {
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/fiddle/client/index.ts
var init_client2 = __esm({
  \\"src/api/resources/fiddle/client/index.ts\\"() {
    \\"use strict\\";
    init_test();
  }
});

// src/api/resources/fiddle/index.ts
var fiddle_exports = {};
__export(fiddle_exports, {
  test: () => test_exports
});
var init_fiddle = __esm({
  \\"src/api/resources/fiddle/index.ts\\"() {
    \\"use strict\\";
    init_client2();
  }
});

// src/api/resources/health/client/status.ts
var status_exports = {};
__export(status_exports, {
  Error: () => Error6
});
var Error6;
var init_status = __esm({
  \\"src/api/resources/health/client/status.ts\\"() {
    \\"use strict\\";
    init_api();
    Error6 = {
      _unknown: (fetcherError) => {
        return {
          error: void 0,
          content: fetcherError,
          _visit: function(visitor) {
            return health_exports.status.Error._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.error) {
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/health/client/index.ts
var init_client3 = __esm({
  \\"src/api/resources/health/client/index.ts\\"() {
    \\"use strict\\";
    init_status();
  }
});

// src/api/resources/health/index.ts
var health_exports = {};
__export(health_exports, {
  status: () => status_exports
});
var init_health = __esm({
  \\"src/api/resources/health/index.ts\\"() {
    \\"use strict\\";
    init_client3();
  }
});

// src/api/resources/index.ts
var init_resources = __esm({
  \\"src/api/resources/index.ts\\"() {
    \\"use strict\\";
    init_remoteGen();
    init_types();
    init_fiddle();
    init_health();
    init_requests();
  }
});

// src/api/index.ts
var init_api = __esm({
  \\"src/api/index.ts\\"() {
    \\"use strict\\";
    init_resources();
  }
});

// src/core/fetcher/Fetcher.ts
var init_Fetcher = __esm({
  \\"src/core/fetcher/Fetcher.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/fetcher/Supplier.ts
var init_Supplier = __esm({
  \\"src/core/fetcher/Supplier.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/fetcher/index.ts
var init_fetcher = __esm({
  \\"src/core/fetcher/index.ts\\"() {
    \\"use strict\\";
    init_Fetcher();
    init_Supplier();
  }
});

// .yarn/cache/js-base64-npm-3.7.2-706fb77a0b-573f28e9a2.zip/node_modules/js-base64/base64.mjs
var _TD, _TE, b64ch, b64chs, b64tab, _fromCC, _U8Afrom;
var init_base64 = __esm({
  \\".yarn/cache/js-base64-npm-3.7.2-706fb77a0b-573f28e9a2.zip/node_modules/js-base64/base64.mjs\\"() {
    _TD = typeof TextDecoder === \\"function\\" ? new TextDecoder() : void 0;
    _TE = typeof TextEncoder === \\"function\\" ? new TextEncoder() : void 0;
    b64ch = \\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\";
    b64chs = Array.prototype.slice.call(b64ch);
    b64tab = ((a) => {
      let tab = {};
      a.forEach((c, i) => tab[c] = i);
      return tab;
    })(b64chs);
    _fromCC = String.fromCharCode.bind(String);
    _U8Afrom = typeof Uint8Array.from === \\"function\\" ? Uint8Array.from.bind(Uint8Array) : (it, fn = (x) => x) => new Uint8Array(Array.prototype.slice.call(it, 0).map(fn));
  }
});

// src/core/auth/BasicAuth.ts
var init_BasicAuth = __esm({
  \\"src/core/auth/BasicAuth.ts\\"() {
    \\"use strict\\";
    init_base64();
  }
});

// src/core/auth/BearerToken.ts
var init_BearerToken = __esm({
  \\"src/core/auth/BearerToken.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/auth/index.ts
var init_auth = __esm({
  \\"src/core/auth/index.ts\\"() {
    \\"use strict\\";
    init_BasicAuth();
    init_BearerToken();
  }
});

// src/core/schemas/Schema.ts
var SchemaType;
var init_Schema = __esm({
  \\"src/core/schemas/Schema.ts\\"() {
    \\"use strict\\";
    SchemaType = {
      DATE: \\"date\\",
      ENUM: \\"enum\\",
      LIST: \\"list\\",
      STRING_LITERAL: \\"stringLiteral\\",
      OBJECT: \\"object\\",
      ANY: \\"any\\",
      BOOLEAN: \\"boolean\\",
      NUMBER: \\"number\\",
      STRING: \\"string\\",
      UNKNOWN: \\"unknown\\",
      RECORD: \\"record\\",
      SET: \\"set\\",
      UNION: \\"union\\",
      UNDISCRIMINATED_UNION: \\"undiscriminatedUnion\\",
      OPTIONAL: \\"optional\\"
    };
  }
});

// src/core/schemas/utils/getErrorMessageForIncorrectType.ts
function getErrorMessageForIncorrectType(value, expectedType) {
  return \`Expected \${expectedType}. Received \${getTypeAsString(value)}.\`;
}
function getTypeAsString(value) {
  if (Array.isArray(value)) {
    return \\"list\\";
  }
  if (value === null) {
    return \\"null\\";
  }
  switch (typeof value) {
    case \\"string\\":
      return \`\\"\${value}\\"\`;
    case \\"number\\":
    case \\"boolean\\":
    case \\"undefined\\":
      return \`\${value}\`;
  }
  return typeof value;
}
var init_getErrorMessageForIncorrectType = __esm({
  \\"src/core/schemas/utils/getErrorMessageForIncorrectType.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/utils/maybeSkipValidation.ts
function maybeSkipValidation(schema) {
  return __spreadProps(__spreadValues({}, schema), {
    json: transformAndMaybeSkipValidation(schema.json),
    parse: transformAndMaybeSkipValidation(schema.parse)
  });
}
function transformAndMaybeSkipValidation(transform2) {
  return (value, opts) => __async(this, null, function* () {
    const transformed = yield transform2(value, opts);
    const { skipValidation = false } = opts != null ? opts : {};
    if (!transformed.ok && skipValidation) {
      console.warn(
        [
          \\"Failed to validate.\\",
          ...transformed.errors.map(
            (error) => \\"  - \\" + (error.path.length > 0 ? \`\${error.path.join(\\".\\")}: \${error.message}\` : error.message)
          )
        ].join(\\"\\\\n\\")
      );
      return {
        ok: true,
        value
      };
    } else {
      return transformed;
    }
  });
}
var init_maybeSkipValidation = __esm({
  \\"src/core/schemas/utils/maybeSkipValidation.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
function stringifyValidationError(error) {
  if (error.path.length === 0) {
    return error.message;
  }
  return \`\${error.path.join(\\" -> \\")}: \${error.message}\`;
}
var init_stringifyValidationErrors = __esm({
  \\"src/core/schemas/builders/schema-utils/stringifyValidationErrors.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/builders/schema-utils/JsonError.ts
var JsonError;
var init_JsonError = __esm({
  \\"src/core/schemas/builders/schema-utils/JsonError.ts\\"() {
    \\"use strict\\";
    init_stringifyValidationErrors();
    JsonError = class extends Error {
      constructor(errors) {
        super(errors.map(stringifyValidationError).join(\\"; \\"));
        this.errors = errors;
        Object.setPrototypeOf(this, JsonError.prototype);
      }
    };
  }
});

// src/core/schemas/builders/schema-utils/ParseError.ts
var ParseError;
var init_ParseError = __esm({
  \\"src/core/schemas/builders/schema-utils/ParseError.ts\\"() {
    \\"use strict\\";
    init_stringifyValidationErrors();
    ParseError = class extends Error {
      constructor(errors) {
        super(errors.map(stringifyValidationError).join(\\"; \\"));
        this.errors = errors;
        Object.setPrototypeOf(this, ParseError.prototype);
      }
    };
  }
});

// src/core/schemas/builders/schema-utils/getSchemaUtils.ts
function getSchemaUtils(schema) {
  return {
    optional: () => optional(schema),
    transform: (transformer) => transform(schema, transformer),
    parseOrThrow: (raw, opts) => __async(this, null, function* () {
      const parsed = yield schema.parse(raw, opts);
      if (parsed.ok) {
        return parsed.value;
      }
      throw new ParseError(parsed.errors);
    }),
    jsonOrThrow: (parsed, opts) => __async(this, null, function* () {
      const raw = yield schema.json(parsed, opts);
      if (raw.ok) {
        return raw.value;
      }
      throw new JsonError(raw.errors);
    })
  };
}
function optional(schema) {
  const baseSchema = {
    parse: (raw, opts) => {
      if (raw == null) {
        return {
          ok: true,
          value: void 0
        };
      }
      return schema.parse(raw, opts);
    },
    json: (parsed, opts) => {
      if (parsed == null) {
        return {
          ok: true,
          value: null
        };
      }
      return schema.json(parsed, opts);
    },
    getType: () => SchemaType.OPTIONAL
  };
  return __spreadValues(__spreadValues({}, baseSchema), getSchemaUtils(baseSchema));
}
function transform(schema, transformer) {
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      const parsed = yield schema.parse(raw, opts);
      if (!parsed.ok) {
        return parsed;
      }
      return {
        ok: true,
        value: transformer.transform(parsed.value)
      };
    }),
    json: (transformed, opts) => __async(this, null, function* () {
      const parsed = yield transformer.untransform(transformed);
      return schema.json(parsed, opts);
    }),
    getType: () => schema.getType()
  };
  return __spreadValues(__spreadValues({}, baseSchema), getSchemaUtils(baseSchema));
}
var init_getSchemaUtils = __esm({
  \\"src/core/schemas/builders/schema-utils/getSchemaUtils.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_JsonError();
    init_ParseError();
  }
});

// src/core/schemas/builders/schema-utils/index.ts
var init_schema_utils = __esm({
  \\"src/core/schemas/builders/schema-utils/index.ts\\"() {
    \\"use strict\\";
    init_getSchemaUtils();
    init_JsonError();
    init_ParseError();
  }
});

// src/core/schemas/builders/date/date.ts
function date() {
  const baseSchema = {
    parse: (raw, { breadcrumbsPrefix = [] } = {}) => {
      if (typeof raw !== \\"string\\") {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(raw, \\"string\\")
            }
          ]
        };
      }
      if (!ISO_8601_REGEX.test(raw)) {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(raw, \\"ISO 8601 date string\\")
            }
          ]
        };
      }
      return {
        ok: true,
        value: new Date(raw)
      };
    },
    json: (date2, { breadcrumbsPrefix = [] } = {}) => {
      if (date2 instanceof Date) {
        return {
          ok: true,
          value: date2.toISOString()
        };
      } else {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(date2, \\"Date object\\")
            }
          ]
        };
      }
    },
    getType: () => SchemaType.DATE
  };
  return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
}
var ISO_8601_REGEX;
var init_date = __esm({
  \\"src/core/schemas/builders/date/date.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_getErrorMessageForIncorrectType();
    init_maybeSkipValidation();
    init_schema_utils();
    ISO_8601_REGEX = /^([+-]?\\\\d{4}(?!\\\\d{2}\\\\b))((-?)((0[1-9]|1[0-2])(\\\\3([12]\\\\d|0[1-9]|3[01]))?|W([0-4]\\\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\\\d|[12]\\\\d{2}|3([0-5]\\\\d|6[1-6])))([T\\\\s]((([01]\\\\d|2[0-3])((:?)[0-5]\\\\d)?|24:?00)([.,]\\\\d+(?!:))?)?(\\\\17[0-5]\\\\d([.,]\\\\d+)?)?([zZ]|([+-])([01]\\\\d|2[0-3]):?([0-5]\\\\d)?)?)?)?$/;
  }
});

// src/core/schemas/builders/date/index.ts
var init_date2 = __esm({
  \\"src/core/schemas/builders/date/index.ts\\"() {
    \\"use strict\\";
    init_date();
  }
});

// src/core/schemas/utils/createIdentitySchemaCreator.ts
function createIdentitySchemaCreator(schemaType, validate) {
  return () => {
    const baseSchema = {
      parse: validate,
      json: validate,
      getType: () => schemaType
    };
    return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
  };
}
var init_createIdentitySchemaCreator = __esm({
  \\"src/core/schemas/utils/createIdentitySchemaCreator.ts\\"() {
    \\"use strict\\";
    init_schema_utils();
    init_maybeSkipValidation();
  }
});

// src/core/schemas/builders/enum/enum.ts
function enum_(values) {
  const validValues = new Set(values);
  const schemaCreator = createIdentitySchemaCreator(
    SchemaType.ENUM,
    (value, { allowUnrecognizedEnumValues, breadcrumbsPrefix = [] } = {}) => {
      if (typeof value !== \\"string\\") {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(value, \\"string\\")
            }
          ]
        };
      }
      if (!validValues.has(value) && !allowUnrecognizedEnumValues) {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(value, \\"enum\\")
            }
          ]
        };
      }
      return {
        ok: true,
        value
      };
    }
  );
  return schemaCreator();
}
var init_enum = __esm({
  \\"src/core/schemas/builders/enum/enum.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    init_getErrorMessageForIncorrectType();
  }
});

// src/core/schemas/builders/enum/index.ts
var init_enum2 = __esm({
  \\"src/core/schemas/builders/enum/index.ts\\"() {
    \\"use strict\\";
    init_enum();
  }
});

// src/core/schemas/builders/lazy/lazy.ts
function lazy(getter) {
  const baseSchema = constructLazyBaseSchema(getter);
  return __spreadValues(__spreadValues({}, baseSchema), getSchemaUtils(baseSchema));
}
function constructLazyBaseSchema(getter) {
  return {
    parse: (raw, opts) => __async(this, null, function* () {
      return (yield getMemoizedSchema(getter)).parse(raw, opts);
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      return (yield getMemoizedSchema(getter)).json(parsed, opts);
    }),
    getType: () => __async(this, null, function* () {
      return (yield getMemoizedSchema(getter)).getType();
    })
  };
}
function getMemoizedSchema(getter) {
  return __async(this, null, function* () {
    const castedGetter = getter;
    if (castedGetter.__zurg_memoized == null) {
      castedGetter.__zurg_memoized = yield getter();
    }
    return castedGetter.__zurg_memoized;
  });
}
var init_lazy = __esm({
  \\"src/core/schemas/builders/lazy/lazy.ts\\"() {
    \\"use strict\\";
    init_schema_utils();
  }
});

// src/core/schemas/utils/entries.ts
function entries(object2) {
  return Object.entries(object2);
}
var init_entries = __esm({
  \\"src/core/schemas/utils/entries.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/utils/filterObject.ts
function filterObject(obj, keysToInclude) {
  const keysToIncludeSet = new Set(keysToInclude);
  return Object.entries(obj).reduce((acc, [key, value]) => {
    if (keysToIncludeSet.has(key)) {
      acc[key] = value;
    }
    return acc;
  }, {});
}
var init_filterObject = __esm({
  \\"src/core/schemas/utils/filterObject.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/utils/isPlainObject.ts
function isPlainObject(value) {
  if (typeof value !== \\"object\\" || value === null) {
    return false;
  }
  if (Object.getPrototypeOf(value) === null) {
    return true;
  }
  let proto = value;
  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }
  return Object.getPrototypeOf(value) === proto;
}
var init_isPlainObject = __esm({
  \\"src/core/schemas/utils/isPlainObject.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/utils/keys.ts
function keys(object2) {
  return Object.keys(object2);
}
var init_keys = __esm({
  \\"src/core/schemas/utils/keys.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/utils/partition.ts
function partition(items, predicate) {
  const trueItems = [], falseItems = [];
  for (const item of items) {
    if (predicate(item)) {
      trueItems.push(item);
    } else {
      falseItems.push(item);
    }
  }
  return [trueItems, falseItems];
}
var init_partition = __esm({
  \\"src/core/schemas/utils/partition.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/builders/object-like/getObjectLikeUtils.ts
function getObjectLikeUtils(schema) {
  return {
    withParsedProperties: (properties) => withParsedProperties(schema, properties)
  };
}
function withParsedProperties(objectLike, properties) {
  const objectSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      const parsedObject = yield objectLike.parse(raw, opts);
      if (!parsedObject.ok) {
        return parsedObject;
      }
      const additionalProperties = Object.entries(properties).reduce(
        (processed, [key, value]) => {
          return __spreadProps(__spreadValues({}, processed), {
            [key]: typeof value === \\"function\\" ? value(parsedObject.value) : value
          });
        },
        {}
      );
      return {
        ok: true,
        value: __spreadValues(__spreadValues({}, parsedObject.value), additionalProperties)
      };
    }),
    json: (parsed, opts) => {
      var _a;
      if (!isPlainObject(parsed)) {
        return {
          ok: false,
          errors: [
            {
              path: (_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [],
              message: getErrorMessageForIncorrectType(parsed, \\"object\\")
            }
          ]
        };
      }
      const addedPropertyKeys = new Set(Object.keys(properties));
      const parsedWithoutAddedProperties = filterObject(
        parsed,
        Object.keys(parsed).filter((key) => !addedPropertyKeys.has(key))
      );
      return objectLike.json(parsedWithoutAddedProperties, opts);
    },
    getType: () => objectLike.getType()
  };
  return __spreadValues(__spreadValues(__spreadValues({}, objectSchema), getSchemaUtils(objectSchema)), getObjectLikeUtils(objectSchema));
}
var init_getObjectLikeUtils = __esm({
  \\"src/core/schemas/builders/object-like/getObjectLikeUtils.ts\\"() {
    \\"use strict\\";
    init_filterObject();
    init_getErrorMessageForIncorrectType();
    init_isPlainObject();
    init_schema_utils();
  }
});

// src/core/schemas/builders/object-like/index.ts
var init_object_like = __esm({
  \\"src/core/schemas/builders/object-like/index.ts\\"() {
    \\"use strict\\";
    init_getObjectLikeUtils();
  }
});

// src/core/schemas/builders/object/property.ts
function property(rawKey, valueSchema) {
  return {
    rawKey,
    valueSchema,
    isProperty: true
  };
}
function isProperty(maybeProperty) {
  return maybeProperty.isProperty;
}
var init_property = __esm({
  \\"src/core/schemas/builders/object/property.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/builders/object/object.ts
function object(schemas) {
  const baseSchema = {
    _getRawProperties: () => Promise.resolve(
      Object.entries(schemas).map(
        ([parsedKey, propertySchema]) => isProperty(propertySchema) ? propertySchema.rawKey : parsedKey
      )
    ),
    _getParsedProperties: () => Promise.resolve(keys(schemas)),
    parse: (raw, opts) => __async(this, null, function* () {
      const rawKeyToProperty = {};
      const requiredKeys = [];
      for (const [parsedKey, schemaOrObjectProperty] of entries(schemas)) {
        const rawKey = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.rawKey : parsedKey;
        const valueSchema = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.valueSchema : schemaOrObjectProperty;
        const property2 = {
          rawKey,
          parsedKey,
          valueSchema
        };
        rawKeyToProperty[rawKey] = property2;
        if (yield isSchemaRequired(valueSchema)) {
          requiredKeys.push(rawKey);
        }
      }
      return validateAndTransformObject({
        value: raw,
        requiredKeys,
        getProperty: (rawKey) => {
          const property2 = rawKeyToProperty[rawKey];
          if (property2 == null) {
            return void 0;
          }
          return {
            transformedKey: property2.parsedKey,
            transform: (propertyValue) => {
              var _a;
              return property2.valueSchema.parse(propertyValue, __spreadProps(__spreadValues({}, opts), {
                breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], rawKey]
              }));
            }
          };
        },
        unrecognizedObjectKeys: opts == null ? void 0 : opts.unrecognizedObjectKeys,
        skipValidation: opts == null ? void 0 : opts.skipValidation,
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      const requiredKeys = [];
      for (const [parsedKey, schemaOrObjectProperty] of entries(schemas)) {
        const valueSchema = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.valueSchema : schemaOrObjectProperty;
        if (yield isSchemaRequired(valueSchema)) {
          requiredKeys.push(parsedKey);
        }
      }
      return validateAndTransformObject({
        value: parsed,
        requiredKeys,
        getProperty: (parsedKey) => {
          const property2 = schemas[parsedKey];
          if (property2 == null) {
            return void 0;
          }
          if (isProperty(property2)) {
            return {
              transformedKey: property2.rawKey,
              transform: (propertyValue) => {
                var _a;
                return property2.valueSchema.json(propertyValue, __spreadProps(__spreadValues({}, opts), {
                  breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], parsedKey]
                }));
              }
            };
          } else {
            return {
              transformedKey: parsedKey,
              transform: (propertyValue) => {
                var _a;
                return property2.json(propertyValue, __spreadProps(__spreadValues({}, opts), {
                  breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], parsedKey]
                }));
              }
            };
          }
        },
        unrecognizedObjectKeys: opts == null ? void 0 : opts.unrecognizedObjectKeys,
        skipValidation: opts == null ? void 0 : opts.skipValidation,
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    getType: () => SchemaType.OBJECT
  };
  return __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema)), getObjectLikeUtils(baseSchema)), getObjectUtils(baseSchema));
}
function validateAndTransformObject(_0) {
  return __async(this, arguments, function* ({
    value,
    requiredKeys,
    getProperty,
    unrecognizedObjectKeys = \\"fail\\",
    skipValidation = false,
    breadcrumbsPrefix = []
  }) {
    if (!isPlainObject(value)) {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: getErrorMessageForIncorrectType(value, \\"object\\")
          }
        ]
      };
    }
    const missingRequiredKeys = new Set(requiredKeys);
    const errors = [];
    const transformed = {};
    for (const [preTransformedKey, preTransformedItemValue] of Object.entries(value)) {
      const property2 = getProperty(preTransformedKey);
      if (property2 != null) {
        missingRequiredKeys.delete(preTransformedKey);
        const value2 = yield property2.transform(preTransformedItemValue);
        if (value2.ok) {
          transformed[property2.transformedKey] = value2.value;
        } else {
          transformed[preTransformedKey] = preTransformedItemValue;
          errors.push(...value2.errors);
        }
      } else {
        switch (unrecognizedObjectKeys) {
          case \\"fail\\":
            errors.push({
              path: [...breadcrumbsPrefix, preTransformedKey],
              message: \`Unexpected key \\"\${preTransformedKey}\\"\`
            });
            break;
          case \\"strip\\":
            break;
          case \\"passthrough\\":
            transformed[preTransformedKey] = preTransformedItemValue;
            break;
        }
      }
    }
    errors.push(
      ...requiredKeys.filter((key) => missingRequiredKeys.has(key)).map((key) => ({
        path: breadcrumbsPrefix,
        message: \`Missing required key \\"\${key}\\"\`
      }))
    );
    if (errors.length === 0 || skipValidation) {
      return {
        ok: true,
        value: transformed
      };
    } else {
      return {
        ok: false,
        errors
      };
    }
  });
}
function getObjectUtils(schema) {
  return {
    extend: (extension) => {
      const baseSchema = {
        _getParsedProperties: () => __async(this, null, function* () {
          return [
            ...yield schema._getParsedProperties(),
            ...yield extension._getParsedProperties()
          ];
        }),
        _getRawProperties: () => __async(this, null, function* () {
          return [
            ...yield schema._getRawProperties(),
            ...yield extension._getRawProperties()
          ];
        }),
        parse: (raw, opts) => __async(this, null, function* () {
          return validateAndTransformExtendedObject({
            extensionKeys: yield extension._getRawProperties(),
            value: raw,
            transformBase: (rawBase) => schema.parse(rawBase, opts),
            transformExtension: (rawExtension) => extension.parse(rawExtension, opts)
          });
        }),
        json: (parsed, opts) => __async(this, null, function* () {
          return validateAndTransformExtendedObject({
            extensionKeys: yield extension._getParsedProperties(),
            value: parsed,
            transformBase: (parsedBase) => schema.json(parsedBase, opts),
            transformExtension: (parsedExtension) => extension.json(parsedExtension, opts)
          });
        }),
        getType: () => SchemaType.OBJECT
      };
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, baseSchema), getSchemaUtils(baseSchema)), getObjectLikeUtils(baseSchema)), getObjectUtils(baseSchema));
    }
  };
}
function validateAndTransformExtendedObject(_0) {
  return __async(this, arguments, function* ({
    extensionKeys,
    value,
    transformBase,
    transformExtension
  }) {
    const extensionPropertiesSet = new Set(extensionKeys);
    const [extensionProperties, baseProperties] = partition(
      keys(value),
      (key) => extensionPropertiesSet.has(key)
    );
    const transformedBase = yield transformBase(filterObject(value, baseProperties));
    const transformedExtension = yield transformExtension(filterObject(value, extensionProperties));
    if (transformedBase.ok && transformedExtension.ok) {
      return {
        ok: true,
        value: __spreadValues(__spreadValues({}, transformedBase.value), transformedExtension.value)
      };
    } else {
      return {
        ok: false,
        errors: [
          ...transformedBase.ok ? [] : transformedBase.errors,
          ...transformedExtension.ok ? [] : transformedExtension.errors
        ]
      };
    }
  });
}
function isSchemaRequired(schema) {
  return __async(this, null, function* () {
    return !(yield isSchemaOptional(schema));
  });
}
function isSchemaOptional(schema) {
  return __async(this, null, function* () {
    switch (yield schema.getType()) {
      case SchemaType.ANY:
      case SchemaType.UNKNOWN:
      case SchemaType.OPTIONAL:
        return true;
      default:
        return false;
    }
  });
}
var init_object = __esm({
  \\"src/core/schemas/builders/object/object.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_entries();
    init_filterObject();
    init_getErrorMessageForIncorrectType();
    init_isPlainObject();
    init_keys();
    init_maybeSkipValidation();
    init_partition();
    init_object_like();
    init_schema_utils();
    init_property();
  }
});

// src/core/schemas/builders/object/index.ts
var init_object2 = __esm({
  \\"src/core/schemas/builders/object/index.ts\\"() {
    \\"use strict\\";
    init_object();
    init_property();
  }
});

// src/core/schemas/builders/lazy/lazyObject.ts
function lazyObject(getter) {
  const baseSchema = __spreadProps(__spreadValues({}, constructLazyBaseSchema(getter)), {
    _getRawProperties: () => __async(this, null, function* () {
      return (yield getMemoizedSchema(getter))._getRawProperties();
    }),
    _getParsedProperties: () => __async(this, null, function* () {
      return (yield getMemoizedSchema(getter))._getParsedProperties();
    })
  });
  return __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, baseSchema), getSchemaUtils(baseSchema)), getObjectLikeUtils(baseSchema)), getObjectUtils(baseSchema));
}
var init_lazyObject = __esm({
  \\"src/core/schemas/builders/lazy/lazyObject.ts\\"() {
    \\"use strict\\";
    init_object2();
    init_object_like();
    init_schema_utils();
    init_lazy();
  }
});

// src/core/schemas/builders/lazy/index.ts
var init_lazy2 = __esm({
  \\"src/core/schemas/builders/lazy/index.ts\\"() {
    \\"use strict\\";
    init_lazy();
    init_lazyObject();
  }
});

// src/core/schemas/builders/list/list.ts
function list(schema) {
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      return validateAndTransformArray(
        raw,
        (item, index) => {
          var _a;
          return schema.parse(item, __spreadProps(__spreadValues({}, opts), {
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`[\${index}]\`]
          }));
        }
      );
    }),
    json: (parsed, opts) => validateAndTransformArray(
      parsed,
      (item, index) => {
        var _a;
        return schema.json(item, __spreadProps(__spreadValues({}, opts), {
          breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`[\${index}]\`]
        }));
      }
    ),
    getType: () => SchemaType.LIST
  };
  return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
}
function validateAndTransformArray(value, transformItem) {
  return __async(this, null, function* () {
    if (!Array.isArray(value)) {
      return {
        ok: false,
        errors: [
          {
            message: getErrorMessageForIncorrectType(value, \\"list\\"),
            path: []
          }
        ]
      };
    }
    const maybeValidItems = yield Promise.all(value.map((item, index) => transformItem(item, index)));
    return maybeValidItems.reduce(
      (acc, item) => {
        if (acc.ok && item.ok) {
          return {
            ok: true,
            value: [...acc.value, item.value]
          };
        }
        const errors = [];
        if (!acc.ok) {
          errors.push(...acc.errors);
        }
        if (!item.ok) {
          errors.push(...item.errors);
        }
        return {
          ok: false,
          errors
        };
      },
      { ok: true, value: [] }
    );
  });
}
var init_list = __esm({
  \\"src/core/schemas/builders/list/list.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_getErrorMessageForIncorrectType();
    init_maybeSkipValidation();
    init_schema_utils();
  }
});

// src/core/schemas/builders/list/index.ts
var init_list2 = __esm({
  \\"src/core/schemas/builders/list/index.ts\\"() {
    \\"use strict\\";
    init_list();
  }
});

// src/core/schemas/builders/literals/stringLiteral.ts
function stringLiteral(literal) {
  const schemaCreator = createIdentitySchemaCreator(
    SchemaType.STRING_LITERAL,
    (value, { breadcrumbsPrefix = [] } = {}) => {
      if (value === literal) {
        return {
          ok: true,
          value: literal
        };
      } else {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(value, \`\\"\${literal}\\"\`)
            }
          ]
        };
      }
    }
  );
  return schemaCreator();
}
var init_stringLiteral = __esm({
  \\"src/core/schemas/builders/literals/stringLiteral.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    init_getErrorMessageForIncorrectType();
  }
});

// src/core/schemas/builders/literals/index.ts
var init_literals = __esm({
  \\"src/core/schemas/builders/literals/index.ts\\"() {
    \\"use strict\\";
    init_stringLiteral();
  }
});

// src/core/schemas/builders/primitives/any.ts
var any;
var init_any = __esm({
  \\"src/core/schemas/builders/primitives/any.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    any = createIdentitySchemaCreator(SchemaType.ANY, (value) => ({ ok: true, value }));
  }
});

// src/core/schemas/builders/primitives/boolean.ts
var boolean;
var init_boolean = __esm({
  \\"src/core/schemas/builders/primitives/boolean.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    init_getErrorMessageForIncorrectType();
    boolean = createIdentitySchemaCreator(
      SchemaType.BOOLEAN,
      (value, { breadcrumbsPrefix = [] } = {}) => {
        if (typeof value === \\"boolean\\") {
          return {
            ok: true,
            value
          };
        } else {
          return {
            ok: false,
            errors: [
              {
                path: breadcrumbsPrefix,
                message: getErrorMessageForIncorrectType(value, \\"boolean\\")
              }
            ]
          };
        }
      }
    );
  }
});

// src/core/schemas/builders/primitives/number.ts
var number;
var init_number = __esm({
  \\"src/core/schemas/builders/primitives/number.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    init_getErrorMessageForIncorrectType();
    number = createIdentitySchemaCreator(
      SchemaType.NUMBER,
      (value, { breadcrumbsPrefix = [] } = {}) => {
        if (typeof value === \\"number\\") {
          return {
            ok: true,
            value
          };
        } else {
          return {
            ok: false,
            errors: [
              {
                path: breadcrumbsPrefix,
                message: getErrorMessageForIncorrectType(value, \\"number\\")
              }
            ]
          };
        }
      }
    );
  }
});

// src/core/schemas/builders/primitives/string.ts
var string;
var init_string = __esm({
  \\"src/core/schemas/builders/primitives/string.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    init_getErrorMessageForIncorrectType();
    string = createIdentitySchemaCreator(
      SchemaType.STRING,
      (value, { breadcrumbsPrefix = [] } = {}) => {
        if (typeof value === \\"string\\") {
          return {
            ok: true,
            value
          };
        } else {
          return {
            ok: false,
            errors: [
              {
                path: breadcrumbsPrefix,
                message: getErrorMessageForIncorrectType(value, \\"string\\")
              }
            ]
          };
        }
      }
    );
  }
});

// src/core/schemas/builders/primitives/unknown.ts
var unknown;
var init_unknown = __esm({
  \\"src/core/schemas/builders/primitives/unknown.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    unknown = createIdentitySchemaCreator(SchemaType.UNKNOWN, (value) => ({ ok: true, value }));
  }
});

// src/core/schemas/builders/primitives/index.ts
var init_primitives = __esm({
  \\"src/core/schemas/builders/primitives/index.ts\\"() {
    \\"use strict\\";
    init_any();
    init_boolean();
    init_number();
    init_string();
    init_unknown();
  }
});

// src/core/schemas/builders/record/record.ts
function record(keySchema, valueSchema) {
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      return validateAndTransformRecord({
        value: raw,
        isKeyNumeric: (yield keySchema.getType()) === SchemaType.NUMBER,
        transformKey: (key) => {
          var _a;
          return keySchema.parse(key, __spreadProps(__spreadValues({}, opts), {
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`\${key} (key)\`]
          }));
        },
        transformValue: (value, key) => {
          var _a;
          return valueSchema.parse(value, __spreadProps(__spreadValues({}, opts), {
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`\${key}\`]
          }));
        },
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      return validateAndTransformRecord({
        value: parsed,
        isKeyNumeric: (yield keySchema.getType()) === SchemaType.NUMBER,
        transformKey: (key) => {
          var _a;
          return keySchema.json(key, __spreadProps(__spreadValues({}, opts), {
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`\${key} (key)\`]
          }));
        },
        transformValue: (value, key) => {
          var _a;
          return valueSchema.json(value, __spreadProps(__spreadValues({}, opts), {
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], \`\${key}\`]
          }));
        },
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    getType: () => SchemaType.RECORD
  };
  return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
}
function validateAndTransformRecord(_0) {
  return __async(this, arguments, function* ({
    value,
    isKeyNumeric,
    transformKey,
    transformValue,
    breadcrumbsPrefix = []
  }) {
    if (!isPlainObject(value)) {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: getErrorMessageForIncorrectType(value, \\"object\\")
          }
        ]
      };
    }
    return entries(value).reduce(
      (_02, _1) => __async(this, [_02, _1], function* (accPromise, [stringKey, value2]) {
        if (value2 == null) {
          return accPromise;
        }
        const acc = yield accPromise;
        let key = stringKey;
        if (isKeyNumeric) {
          const numberKey = stringKey.length > 0 ? Number(stringKey) : NaN;
          if (!isNaN(numberKey)) {
            key = numberKey;
          }
        }
        const transformedKey = yield transformKey(key);
        const transformedValue = yield transformValue(value2, key);
        if (acc.ok && transformedKey.ok && transformedValue.ok) {
          return {
            ok: true,
            value: __spreadProps(__spreadValues({}, acc.value), {
              [transformedKey.value]: transformedValue.value
            })
          };
        }
        const errors = [];
        if (!acc.ok) {
          errors.push(...acc.errors);
        }
        if (!transformedKey.ok) {
          errors.push(...transformedKey.errors);
        }
        if (!transformedValue.ok) {
          errors.push(...transformedValue.errors);
        }
        return {
          ok: false,
          errors
        };
      }),
      Promise.resolve({ ok: true, value: {} })
    );
  });
}
var init_record = __esm({
  \\"src/core/schemas/builders/record/record.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_entries();
    init_getErrorMessageForIncorrectType();
    init_isPlainObject();
    init_maybeSkipValidation();
    init_schema_utils();
  }
});

// src/core/schemas/builders/record/index.ts
var init_record2 = __esm({
  \\"src/core/schemas/builders/record/index.ts\\"() {
    \\"use strict\\";
    init_record();
  }
});

// src/core/schemas/builders/set/set.ts
function set(schema) {
  const listSchema = list(schema);
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      const parsedList = yield listSchema.parse(raw, opts);
      if (parsedList.ok) {
        return {
          ok: true,
          value: new Set(parsedList.value)
        };
      } else {
        return parsedList;
      }
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      var _a;
      if (!(parsed instanceof Set)) {
        return {
          ok: false,
          errors: [
            {
              path: (_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [],
              message: getErrorMessageForIncorrectType(parsed, \\"Set\\")
            }
          ]
        };
      }
      const jsonList = yield listSchema.json([...parsed], opts);
      return jsonList;
    }),
    getType: () => SchemaType.SET
  };
  return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
}
var init_set = __esm({
  \\"src/core/schemas/builders/set/set.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_getErrorMessageForIncorrectType();
    init_maybeSkipValidation();
    init_list2();
    init_schema_utils();
  }
});

// src/core/schemas/builders/set/index.ts
var init_set2 = __esm({
  \\"src/core/schemas/builders/set/index.ts\\"() {
    \\"use strict\\";
    init_set();
  }
});

// src/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
function undiscriminatedUnion(schemas) {
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      return validateAndTransformUndiscriminatedUnion(
        (schema) => schema.parse(raw, opts),
        schemas
      );
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      return validateAndTransformUndiscriminatedUnion(
        (schema) => schema.json(parsed, opts),
        schemas
      );
    }),
    getType: () => SchemaType.UNDISCRIMINATED_UNION
  };
  return __spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema));
}
function validateAndTransformUndiscriminatedUnion(transform2, schemas) {
  return __async(this, null, function* () {
    const errors = [];
    for (const [index, schema] of schemas.entries()) {
      const transformed = yield transform2(schema);
      if (transformed.ok) {
        return transformed;
      } else {
        for (const error of errors) {
          errors.push({
            path: error.path,
            message: \`[Variant \${index}] \${error.message}\`
          });
        }
      }
    }
    return {
      ok: false,
      errors
    };
  });
}
var init_undiscriminatedUnion = __esm({
  \\"src/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_maybeSkipValidation();
    init_schema_utils();
  }
});

// src/core/schemas/builders/undiscriminated-union/index.ts
var init_undiscriminated_union = __esm({
  \\"src/core/schemas/builders/undiscriminated-union/index.ts\\"() {
    \\"use strict\\";
    init_undiscriminatedUnion();
  }
});

// src/core/schemas/builders/union/discriminant.ts
function discriminant(parsedDiscriminant, rawDiscriminant) {
  return {
    parsedDiscriminant,
    rawDiscriminant
  };
}
var init_discriminant = __esm({
  \\"src/core/schemas/builders/union/discriminant.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/builders/union/union.ts
function union(discriminant2, union2) {
  const rawDiscriminant = typeof discriminant2 === \\"string\\" ? discriminant2 : discriminant2.rawDiscriminant;
  const parsedDiscriminant = typeof discriminant2 === \\"string\\" ? discriminant2 : discriminant2.parsedDiscriminant;
  const discriminantValueSchema = enum_(keys(union2));
  const baseSchema = {
    parse: (raw, opts) => __async(this, null, function* () {
      return transformAndValidateUnion({
        value: raw,
        discriminant: rawDiscriminant,
        transformedDiscriminant: parsedDiscriminant,
        transformDiscriminantValue: (discriminantValue) => {
          var _a;
          return discriminantValueSchema.parse(discriminantValue, {
            allowUnrecognizedEnumValues: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], rawDiscriminant]
          });
        },
        getAdditionalPropertiesSchema: (discriminantValue) => union2[discriminantValue],
        allowUnrecognizedUnionMembers: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
        transformAdditionalProperties: (additionalProperties, additionalPropertiesSchema) => additionalPropertiesSchema.parse(additionalProperties, opts),
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    json: (parsed, opts) => __async(this, null, function* () {
      return transformAndValidateUnion({
        value: parsed,
        discriminant: parsedDiscriminant,
        transformedDiscriminant: rawDiscriminant,
        transformDiscriminantValue: (discriminantValue) => {
          var _a;
          return discriminantValueSchema.json(discriminantValue, {
            allowUnrecognizedEnumValues: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
            breadcrumbsPrefix: [...(_a = opts == null ? void 0 : opts.breadcrumbsPrefix) != null ? _a : [], parsedDiscriminant]
          });
        },
        getAdditionalPropertiesSchema: (discriminantValue) => union2[discriminantValue],
        allowUnrecognizedUnionMembers: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
        transformAdditionalProperties: (additionalProperties, additionalPropertiesSchema) => additionalPropertiesSchema.json(additionalProperties, opts),
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    }),
    getType: () => SchemaType.UNION
  };
  return __spreadValues(__spreadValues(__spreadValues({}, maybeSkipValidation(baseSchema)), getSchemaUtils(baseSchema)), getObjectLikeUtils(baseSchema));
}
function transformAndValidateUnion(_0) {
  return __async(this, arguments, function* ({
    value,
    discriminant: discriminant2,
    transformedDiscriminant,
    transformDiscriminantValue,
    getAdditionalPropertiesSchema,
    allowUnrecognizedUnionMembers = false,
    transformAdditionalProperties,
    breadcrumbsPrefix = []
  }) {
    if (!isPlainObject(value)) {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: getErrorMessageForIncorrectType(value, \\"object\\")
          }
        ]
      };
    }
    const _a = value, { [discriminant2]: discriminantValue } = _a, additionalProperties = __objRest(_a, [__restKey(discriminant2)]);
    if (discriminantValue == null) {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: \`Missing discriminant (\\"\${discriminant2}\\")\`
          }
        ]
      };
    }
    const transformedDiscriminantValue = yield transformDiscriminantValue(discriminantValue);
    if (!transformedDiscriminantValue.ok) {
      return {
        ok: false,
        errors: transformedDiscriminantValue.errors
      };
    }
    const additionalPropertiesSchema = getAdditionalPropertiesSchema(transformedDiscriminantValue.value);
    if (additionalPropertiesSchema == null) {
      if (allowUnrecognizedUnionMembers) {
        return {
          ok: true,
          value: __spreadValues({
            [transformedDiscriminant]: transformedDiscriminantValue.value
          }, additionalProperties)
        };
      } else {
        return {
          ok: false,
          errors: [
            {
              path: [...breadcrumbsPrefix, discriminant2],
              message: \\"Unexpected discriminant value\\"
            }
          ]
        };
      }
    }
    const transformedAdditionalProperties = yield transformAdditionalProperties(
      additionalProperties,
      additionalPropertiesSchema
    );
    if (!transformedAdditionalProperties.ok) {
      return transformedAdditionalProperties;
    }
    return {
      ok: true,
      value: __spreadValues({
        [transformedDiscriminant]: discriminantValue
      }, transformedAdditionalProperties.value)
    };
  });
}
var init_union = __esm({
  \\"src/core/schemas/builders/union/union.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_getErrorMessageForIncorrectType();
    init_isPlainObject();
    init_keys();
    init_maybeSkipValidation();
    init_enum2();
    init_object_like();
    init_schema_utils();
  }
});

// src/core/schemas/builders/union/index.ts
var init_union2 = __esm({
  \\"src/core/schemas/builders/union/index.ts\\"() {
    \\"use strict\\";
    init_discriminant();
    init_union();
  }
});

// src/core/schemas/builders/index.ts
var init_builders = __esm({
  \\"src/core/schemas/builders/index.ts\\"() {
    \\"use strict\\";
    init_date2();
    init_enum2();
    init_lazy2();
    init_list2();
    init_literals();
    init_object2();
    init_object_like();
    init_primitives();
    init_record2();
    init_schema_utils();
    init_set2();
    init_undiscriminated_union();
    init_union2();
  }
});

// src/core/schemas/index.ts
var schemas_exports = {};
__export(schemas_exports, {
  JsonError: () => JsonError,
  ParseError: () => ParseError,
  any: () => any,
  boolean: () => boolean,
  date: () => date,
  discriminant: () => discriminant,
  enum_: () => enum_,
  getObjectLikeUtils: () => getObjectLikeUtils,
  getObjectUtils: () => getObjectUtils,
  getSchemaUtils: () => getSchemaUtils,
  isProperty: () => isProperty,
  lazy: () => lazy,
  lazyObject: () => lazyObject,
  list: () => list,
  number: () => number,
  object: () => object,
  optional: () => optional,
  property: () => property,
  record: () => record,
  set: () => set,
  string: () => string,
  stringLiteral: () => stringLiteral,
  transform: () => transform,
  undiscriminatedUnion: () => undiscriminatedUnion,
  union: () => union,
  unknown: () => unknown,
  withParsedProperties: () => withParsedProperties
});
var init_schemas = __esm({
  \\"src/core/schemas/index.ts\\"() {
    \\"use strict\\";
    init_builders();
  }
});

// src/core/index.ts
var init_core = __esm({
  \\"src/core/index.ts\\"() {
    \\"use strict\\";
    init_fetcher();
    init_auth();
    init_schemas();
  }
});

// src/serialization/resources/remoteGen/types/RemoteGenJobId.ts
var RemoteGenJobId2;
var init_RemoteGenJobId2 = __esm({
  \\"src/serialization/resources/remoteGen/types/RemoteGenJobId.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    RemoteGenJobId2 = schemas_exports.string().transform({
      transform: RemoteGenJobId,
      untransform: (value) => value
    });
  }
});

// src/serialization/resources/remoteGen/types/RemoteGenTaskId.ts
var RemoteGenTaskId2;
var init_RemoteGenTaskId2 = __esm({
  \\"src/serialization/resources/remoteGen/types/RemoteGenTaskId.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    RemoteGenTaskId2 = schemas_exports.string().transform({
      transform: RemoteGenTaskId,
      untransform: (value) => value
    });
  }
});

// src/serialization/resources/remoteGen/types/GeneratorIdAndVersion.ts
var GeneratorIdAndVersion;
var init_GeneratorIdAndVersion2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GeneratorIdAndVersion.ts\\"() {
    \\"use strict\\";
    init_core();
    GeneratorIdAndVersion = schemas_exports.object({
      id: schemas_exports.string(),
      version: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/GeneratorConfig.ts
var GeneratorConfig;
var init_GeneratorConfig2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GeneratorConfig.ts\\"() {
    \\"use strict\\";
    init_core();
    GeneratorConfig = schemas_exports.object({
      id: schemas_exports.string(),
      version: schemas_exports.string(),
      customConfig: schemas_exports.unknown(),
      willDownloadFiles: schemas_exports.boolean(),
      outputs: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorOutputs;
      }))
    });
  }
});

// src/serialization/resources/remoteGen/types/GeneratorConfigV2.ts
var GeneratorConfigV2;
var init_GeneratorConfigV22 = __esm({
  \\"src/serialization/resources/remoteGen/types/GeneratorConfigV2.ts\\"() {
    \\"use strict\\";
    init_core();
    GeneratorConfigV2 = schemas_exports.object({
      id: schemas_exports.string(),
      version: schemas_exports.string(),
      customConfig: schemas_exports.unknown(),
      outputMode: schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).OutputMode;
      }))
    });
  }
});

// src/serialization/resources/remoteGen/types/OutputMode.ts
var OutputMode2;
var init_OutputMode2 = __esm({
  \\"src/serialization/resources/remoteGen/types/OutputMode.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    OutputMode2 = schemas_exports.union(\\"type\\", {
      publish: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).PublishOutputMode;
      })),
      publishV2: schemas_exports.object({
        publishV2: schemas_exports.lazy(() => __async(void 0, null, function* () {
          return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).PublishOutputModeV2;
        }))
      }),
      downloadFiles: schemas_exports.object({}),
      github: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GithubOutputMode;
      }))
    }).transform({
      transform: (value) => {
        switch (value.type) {
          case \\"publish\\":
            return OutputMode.publish(value);
          case \\"publishV2\\":
            return OutputMode.publishV2(value.publishV2);
          case \\"downloadFiles\\":
            return OutputMode.downloadFiles();
          case \\"github\\":
            return OutputMode.github(value);
          default:
            return OutputMode._unknown(value);
        }
      },
      untransform: (_a) => {
        var _b = _a, { _visit } = _b, value = __objRest(_b, [\\"_visit\\"]);
        return value;
      }
    });
  }
});

// src/serialization/resources/remoteGen/types/PublishOutputMode.ts
var PublishOutputMode;
var init_PublishOutputMode2 = __esm({
  \\"src/serialization/resources/remoteGen/types/PublishOutputMode.ts\\"() {
    \\"use strict\\";
    init_core();
    PublishOutputMode = schemas_exports.object({
      registryOverrides: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).RegistryOverrides;
      }))
    });
  }
});

// src/serialization/resources/remoteGen/types/PublishOutputModeV2.ts
var PublishOutputModeV22;
var init_PublishOutputModeV22 = __esm({
  \\"src/serialization/resources/remoteGen/types/PublishOutputModeV2.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    PublishOutputModeV22 = schemas_exports.union(\\"type\\", {
      npmOverride: schemas_exports.object({
        npmOverride: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
          return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).NpmOutput;
        })).optional()
      }),
      mavenOverride: schemas_exports.object({
        mavenOverride: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
          return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).MavenOutput;
        })).optional()
      }),
      postman: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).PostmanOutput;
      }))
    }).transform({
      transform: (value) => {
        switch (value.type) {
          case \\"npmOverride\\":
            return PublishOutputModeV2.npmOverride(value.npmOverride);
          case \\"mavenOverride\\":
            return PublishOutputModeV2.mavenOverride(value.mavenOverride);
          case \\"postman\\":
            return PublishOutputModeV2.postman(value);
          default:
            return PublishOutputModeV2._unknown(value);
        }
      },
      untransform: (_a) => {
        var _b = _a, { _visit } = _b, value = __objRest(_b, [\\"_visit\\"]);
        return value;
      }
    });
  }
});

// src/serialization/resources/remoteGen/types/RegistryOverrides.ts
var RegistryOverrides;
var init_RegistryOverrides2 = __esm({
  \\"src/serialization/resources/remoteGen/types/RegistryOverrides.ts\\"() {
    \\"use strict\\";
    init_core();
    RegistryOverrides = schemas_exports.object({
      npm: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).NpmOutput;
      })).optional(),
      maven: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).MavenOutput;
      })).optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/GeneratorOutputs.ts
var GeneratorOutputs;
var init_GeneratorOutputs2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GeneratorOutputs.ts\\"() {
    \\"use strict\\";
    init_core();
    GeneratorOutputs = schemas_exports.object({
      npm: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).NpmOutput;
      })).optional(),
      maven: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).MavenOutput;
      })).optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/NpmOutput.ts
var NpmOutput;
var init_NpmOutput2 = __esm({
  \\"src/serialization/resources/remoteGen/types/NpmOutput.ts\\"() {
    \\"use strict\\";
    init_core();
    NpmOutput = schemas_exports.object({
      registryUrl: schemas_exports.string(),
      packageName: schemas_exports.string(),
      token: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/MavenOutput.ts
var MavenOutput;
var init_MavenOutput2 = __esm({
  \\"src/serialization/resources/remoteGen/types/MavenOutput.ts\\"() {
    \\"use strict\\";
    init_core();
    MavenOutput = schemas_exports.object({
      registryUrl: schemas_exports.string(),
      username: schemas_exports.string(),
      password: schemas_exports.string(),
      coordinate: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/PostmanOutput.ts
var PostmanOutput;
var init_PostmanOutput2 = __esm({
  \\"src/serialization/resources/remoteGen/types/PostmanOutput.ts\\"() {
    \\"use strict\\";
    init_core();
    PostmanOutput = schemas_exports.object({
      apiKey: schemas_exports.string(),
      workspaceId: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/GithubOutputMode.ts
var GithubOutputMode;
var init_GithubOutputMode2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GithubOutputMode.ts\\"() {
    \\"use strict\\";
    init_core();
    GithubOutputMode = schemas_exports.object({
      owner: schemas_exports.string(),
      repo: schemas_exports.string(),
      publishInfo: schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GithubPublishInfo;
      })).optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/GithubPublishInfo.ts
var GithubPublishInfo2;
var init_GithubPublishInfo2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GithubPublishInfo.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    GithubPublishInfo2 = schemas_exports.union(\\"type\\", {
      npm: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).NpmOutputWithOptionalToken;
      })),
      maven: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).MavenOutputWithOptionalCreds;
      })),
      postman: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).PostmanOutput;
      }))
    }).transform({
      transform: (value) => {
        switch (value.type) {
          case \\"npm\\":
            return GithubPublishInfo.npm(value);
          case \\"maven\\":
            return GithubPublishInfo.maven(value);
          case \\"postman\\":
            return GithubPublishInfo.postman(value);
          default:
            return GithubPublishInfo._unknown(value);
        }
      },
      untransform: (_a) => {
        var _b = _a, { _visit } = _b, value = __objRest(_b, [\\"_visit\\"]);
        return value;
      }
    });
  }
});

// src/serialization/resources/remoteGen/types/NpmOutputWithOptionalToken.ts
var NpmOutputWithOptionalToken;
var init_NpmOutputWithOptionalToken2 = __esm({
  \\"src/serialization/resources/remoteGen/types/NpmOutputWithOptionalToken.ts\\"() {
    \\"use strict\\";
    init_core();
    NpmOutputWithOptionalToken = schemas_exports.object({
      registryUrl: schemas_exports.string(),
      packageName: schemas_exports.string(),
      token: schemas_exports.string().optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/MavenOutputWithOptionalCreds.ts
var MavenOutputWithOptionalCreds;
var init_MavenOutputWithOptionalCreds2 = __esm({
  \\"src/serialization/resources/remoteGen/types/MavenOutputWithOptionalCreds.ts\\"() {
    \\"use strict\\";
    init_core();
    MavenOutputWithOptionalCreds = schemas_exports.object({
      registryUrl: schemas_exports.string(),
      coordinate: schemas_exports.string(),
      credentials: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).UsernamePassword;
      })).optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/UsernamePassword.ts
var UsernamePassword;
var init_UsernamePassword2 = __esm({
  \\"src/serialization/resources/remoteGen/types/UsernamePassword.ts\\"() {
    \\"use strict\\";
    init_core();
    UsernamePassword = schemas_exports.object({
      username: schemas_exports.string(),
      password: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/Task.ts
var Task;
var init_Task2 = __esm({
  \\"src/serialization/resources/remoteGen/types/Task.ts\\"() {
    \\"use strict\\";
    init_core();
    Task = schemas_exports.object({
      status: schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).TaskStatus;
      })),
      packages: schemas_exports.list(schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).Package;
      }))),
      logs: schemas_exports.list(schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).TaskLog;
      })))
    });
  }
});

// src/serialization/resources/remoteGen/types/TaskStatus.ts
var TaskStatus2;
var init_TaskStatus2 = __esm({
  \\"src/serialization/resources/remoteGen/types/TaskStatus.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    TaskStatus2 = schemas_exports.union(schemas_exports.discriminant(\\"type\\", \\"_type\\"), {
      notStarted: schemas_exports.object({}),
      running: schemas_exports.object({}),
      failed: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).FailedTaskStatus;
      })),
      finished: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).FinishedTaskStatus;
      }))
    }).transform({
      transform: (value) => {
        switch (value.type) {
          case \\"notStarted\\":
            return TaskStatus.notStarted();
          case \\"running\\":
            return TaskStatus.running();
          case \\"failed\\":
            return TaskStatus.failed(value);
          case \\"finished\\":
            return TaskStatus.finished(value);
          default:
            return TaskStatus._unknown(value);
        }
      },
      untransform: (_a) => {
        var _b = _a, { _visit } = _b, value = __objRest(_b, [\\"_visit\\"]);
        return value;
      }
    });
  }
});

// src/serialization/resources/remoteGen/types/FailedTaskStatus.ts
var FailedTaskStatus;
var init_FailedTaskStatus2 = __esm({
  \\"src/serialization/resources/remoteGen/types/FailedTaskStatus.ts\\"() {
    \\"use strict\\";
    init_core();
    FailedTaskStatus = schemas_exports.object({
      message: schemas_exports.string(),
      s3PreSignedReadUrl: schemas_exports.string().optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/FinishedTaskStatus.ts
var FinishedTaskStatus;
var init_FinishedTaskStatus2 = __esm({
  \\"src/serialization/resources/remoteGen/types/FinishedTaskStatus.ts\\"() {
    \\"use strict\\";
    init_core();
    FinishedTaskStatus = schemas_exports.object({
      hasFilesToDownload: schemas_exports.boolean(),
      s3PreSignedReadUrl: schemas_exports.string(),
      s3PreSignedReadUrlV2: schemas_exports.string().optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/TaskLog.ts
var TaskLog;
var init_TaskLog2 = __esm({
  \\"src/serialization/resources/remoteGen/types/TaskLog.ts\\"() {
    \\"use strict\\";
    init_core();
    TaskLog = schemas_exports.object({
      level: schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).LogLevel;
      })),
      message: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/LogLevel.ts
var LogLevel2;
var init_LogLevel2 = __esm({
  \\"src/serialization/resources/remoteGen/types/LogLevel.ts\\"() {
    \\"use strict\\";
    init_core();
    LogLevel2 = schemas_exports.enum_([
      \\"DEBUG\\",
      \\"INFO\\",
      \\"WARN\\",
      \\"ERROR\\"
    ]);
  }
});

// src/serialization/resources/remoteGen/types/Package.ts
var Package;
var init_Package2 = __esm({
  \\"src/serialization/resources/remoteGen/types/Package.ts\\"() {
    \\"use strict\\";
    init_core();
    Package = schemas_exports.object({
      coordinate: schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).PackageCoordinate;
      })),
      status: schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).PackagePublishStatus;
      }))
    });
  }
});

// src/serialization/resources/remoteGen/types/PackagePublishStatus.ts
var PackagePublishStatus2;
var init_PackagePublishStatus2 = __esm({
  \\"src/serialization/resources/remoteGen/types/PackagePublishStatus.ts\\"() {
    \\"use strict\\";
    init_core();
    PackagePublishStatus2 = schemas_exports.enum_([\\"NOT_STARTED_PUBLISHING\\", \\"PUBLISHING\\", \\"PUBLISHED\\", \\"FAILED_TO_PUBLISH\\"]);
  }
});

// src/serialization/resources/remoteGen/types/PackageCoordinate.ts
var PackageCoordinate2;
var init_PackageCoordinate2 = __esm({
  \\"src/serialization/resources/remoteGen/types/PackageCoordinate.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    PackageCoordinate2 = schemas_exports.union(schemas_exports.discriminant(\\"type\\", \\"_type\\"), {
      npm: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).NpmCoordinate;
      })),
      maven: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).MavenCoordinate;
      })),
      pypi: schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).PypiCoordinate;
      }))
    }).transform({
      transform: (value) => {
        switch (value.type) {
          case \\"npm\\":
            return PackageCoordinate.npm(value);
          case \\"maven\\":
            return PackageCoordinate.maven(value);
          case \\"pypi\\":
            return PackageCoordinate.pypi(value);
          default:
            return PackageCoordinate._unknown(value);
        }
      },
      untransform: (_a) => {
        var _b = _a, { _visit } = _b, value = __objRest(_b, [\\"_visit\\"]);
        return value;
      }
    });
  }
});

// src/serialization/resources/remoteGen/types/NpmCoordinate.ts
var NpmCoordinate;
var init_NpmCoordinate2 = __esm({
  \\"src/serialization/resources/remoteGen/types/NpmCoordinate.ts\\"() {
    \\"use strict\\";
    init_core();
    NpmCoordinate = schemas_exports.object({
      name: schemas_exports.string(),
      version: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/MavenCoordinate.ts
var MavenCoordinate;
var init_MavenCoordinate2 = __esm({
  \\"src/serialization/resources/remoteGen/types/MavenCoordinate.ts\\"() {
    \\"use strict\\";
    init_core();
    MavenCoordinate = schemas_exports.object({
      group: schemas_exports.string(),
      artifact: schemas_exports.string(),
      version: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/PypiCoordinate.ts
var PypiCoordinate;
var init_PypiCoordinate2 = __esm({
  \\"src/serialization/resources/remoteGen/types/PypiCoordinate.ts\\"() {
    \\"use strict\\";
    init_core();
    PypiCoordinate = schemas_exports.object({
      name: schemas_exports.string(),
      version: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/CreateJobResponse.ts
var CreateJobResponse;
var init_CreateJobResponse2 = __esm({
  \\"src/serialization/resources/remoteGen/types/CreateJobResponse.ts\\"() {
    \\"use strict\\";
    init_core();
    CreateJobResponse = schemas_exports.object({
      jobId: schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).RemoteGenJobId;
      })),
      taskIds: schemas_exports.list(schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).RemoteGenTaskId;
      })))
    });
  }
});

// src/serialization/resources/remoteGen/types/GeneratorsDoNotExistErrorBodyType.ts
var GeneratorsDoNotExistErrorBodyType;
var init_GeneratorsDoNotExistErrorBodyType2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GeneratorsDoNotExistErrorBodyType.ts\\"() {
    \\"use strict\\";
    init_core();
    GeneratorsDoNotExistErrorBodyType = schemas_exports.object({
      nonExistentGenerators: schemas_exports.list(
        schemas_exports.lazyObject(() => __async(void 0, null, function* () {
          return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorIdAndVersion;
        }))
      )
    });
  }
});

// src/serialization/resources/remoteGen/types/CannotPublishToNpmScopeDetails.ts
var CannotPublishToNpmScopeDetails;
var init_CannotPublishToNpmScopeDetails2 = __esm({
  \\"src/serialization/resources/remoteGen/types/CannotPublishToNpmScopeDetails.ts\\"() {
    \\"use strict\\";
    init_core();
    CannotPublishToNpmScopeDetails = schemas_exports.object({
      generatorId: schemas_exports.string(),
      invalidScope: schemas_exports.string(),
      validScope: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/CannotPublishToMavenGroupDetails.ts
var CannotPublishToMavenGroupDetails;
var init_CannotPublishToMavenGroupDetails2 = __esm({
  \\"src/serialization/resources/remoteGen/types/CannotPublishToMavenGroupDetails.ts\\"() {
    \\"use strict\\";
    init_core();
    CannotPublishToMavenGroupDetails = schemas_exports.object({
      generatorId: schemas_exports.string(),
      invalidGroup: schemas_exports.string(),
      validGroup: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/InsufficientPermissionsDetails.ts
var InsufficientPermissionsDetails;
var init_InsufficientPermissionsDetails2 = __esm({
  \\"src/serialization/resources/remoteGen/types/InsufficientPermissionsDetails.ts\\"() {
    \\"use strict\\";
    init_core();
    InsufficientPermissionsDetails = schemas_exports.object({
      dummy: schemas_exports.string().optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/index.ts
var init_types2 = __esm({
  \\"src/serialization/resources/remoteGen/types/index.ts\\"() {
    \\"use strict\\";
    init_RemoteGenJobId2();
    init_RemoteGenTaskId2();
    init_GeneratorIdAndVersion2();
    init_GeneratorConfig2();
    init_GeneratorConfigV22();
    init_OutputMode2();
    init_PublishOutputMode2();
    init_PublishOutputModeV22();
    init_RegistryOverrides2();
    init_GeneratorOutputs2();
    init_NpmOutput2();
    init_MavenOutput2();
    init_PostmanOutput2();
    init_GithubOutputMode2();
    init_GithubPublishInfo2();
    init_NpmOutputWithOptionalToken2();
    init_MavenOutputWithOptionalCreds2();
    init_UsernamePassword2();
    init_Task2();
    init_TaskStatus2();
    init_FailedTaskStatus2();
    init_FinishedTaskStatus2();
    init_TaskLog2();
    init_LogLevel2();
    init_Package2();
    init_PackagePublishStatus2();
    init_PackageCoordinate2();
    init_NpmCoordinate2();
    init_MavenCoordinate2();
    init_PypiCoordinate2();
    init_CreateJobResponse2();
    init_GeneratorsDoNotExistErrorBodyType2();
    init_CannotPublishToNpmScopeDetails2();
    init_CannotPublishToMavenGroupDetails2();
    init_InsufficientPermissionsDetails2();
  }
});

// src/serialization/resources/remoteGen/client/createJob.ts
var createJob_exports2 = {};
__export(createJob_exports2, {
  Error: () => Error7
});
var Error7;
var init_createJob2 = __esm({
  \\"src/serialization/resources/remoteGen/client/createJob.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    Error7 = schemas_exports.union(\\"error\\", {
      IllegalApiNameError: schemas_exports.object({}),
      GeneratorsDoNotExistError: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorsDoNotExistErrorBodyType;
          })
        )
      }),
      CannotPublishToNpmScope: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).CannotPublishToNpmScopeDetails;
          })
        )
      }),
      CannotPublishToMavenGroup: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).CannotPublishToMavenGroupDetails;
          })
        )
      }),
      InsufficientPermissions: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).InsufficientPermissionsDetails;
          })
        )
      })
    }).transform({
      transform: (value) => {
        switch (value.error) {
          case \\"IllegalApiNameError\\":
            return remoteGen_exports.createJob.Error.illegalApiNameError();
          case \\"GeneratorsDoNotExistError\\":
            return remoteGen_exports.createJob.Error.generatorsDoNotExistError(value.content);
          case \\"CannotPublishToNpmScope\\":
            return remoteGen_exports.createJob.Error.cannotPublishToNpmScope(value.content);
          case \\"CannotPublishToMavenGroup\\":
            return remoteGen_exports.createJob.Error.cannotPublishToMavenGroup(value.content);
          case \\"InsufficientPermissions\\":
            return remoteGen_exports.createJob.Error.insufficientPermissions(value.content);
        }
      },
      untransform: (_a) => {
        var _b = _a, { _visit } = _b, value = __objRest(_b, [\\"_visit\\"]);
        return value;
      }
    });
  }
});

// src/serialization/resources/remoteGen/client/createJobV2.ts
var createJobV2_exports2 = {};
__export(createJobV2_exports2, {
  Error: () => Error8
});
var Error8;
var init_createJobV22 = __esm({
  \\"src/serialization/resources/remoteGen/client/createJobV2.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    Error8 = schemas_exports.union(\\"error\\", {
      IllegalApiNameError: schemas_exports.object({}),
      GeneratorsDoNotExistError: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorsDoNotExistErrorBodyType;
          })
        )
      }),
      CannotPublishToNpmScope: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).CannotPublishToNpmScopeDetails;
          })
        )
      }),
      CannotPublishToMavenGroup: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).CannotPublishToMavenGroupDetails;
          })
        )
      }),
      InsufficientPermissions: schemas_exports.object({
        content: schemas_exports.lazyObject(
          () => __async(void 0, null, function* () {
            return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).InsufficientPermissionsDetails;
          })
        )
      })
    }).transform({
      transform: (value) => {
        switch (value.error) {
          case \\"IllegalApiNameError\\":
            return remoteGen_exports.createJobV2.Error.illegalApiNameError();
          case \\"GeneratorsDoNotExistError\\":
            return remoteGen_exports.createJobV2.Error.generatorsDoNotExistError(value.content);
          case \\"CannotPublishToNpmScope\\":
            return remoteGen_exports.createJobV2.Error.cannotPublishToNpmScope(value.content);
          case \\"CannotPublishToMavenGroup\\":
            return remoteGen_exports.createJobV2.Error.cannotPublishToMavenGroup(value.content);
          case \\"InsufficientPermissions\\":
            return remoteGen_exports.createJobV2.Error.insufficientPermissions(value.content);
        }
      },
      untransform: (_a) => {
        var _b = _a, { _visit } = _b, value = __objRest(_b, [\\"_visit\\"]);
        return value;
      }
    });
  }
});

// src/serialization/resources/remoteGen/client/getJobStatus.ts
var getJobStatus_exports2 = {};
__export(getJobStatus_exports2, {
  Response: () => Response
});
var Response;
var init_getJobStatus2 = __esm({
  \\"src/serialization/resources/remoteGen/client/getJobStatus.ts\\"() {
    \\"use strict\\";
    init_core();
    Response = schemas_exports.record(
      schemas_exports.lazy(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).RemoteGenTaskId;
      })),
      schemas_exports.lazyObject(() => __async(void 0, null, function* () {
        return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).Task;
      }))
    );
  }
});

// src/serialization/resources/remoteGen/client/requests/CreateJobRequest.ts
var CreateJobRequest;
var init_CreateJobRequest = __esm({
  \\"src/serialization/resources/remoteGen/client/requests/CreateJobRequest.ts\\"() {
    \\"use strict\\";
    init_core();
    CreateJobRequest = schemas_exports.object({
      apiName: schemas_exports.string(),
      organizationName: schemas_exports.string(),
      version: schemas_exports.string().optional(),
      generators: schemas_exports.list(
        schemas_exports.lazyObject(() => __async(void 0, null, function* () {
          return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorConfig;
        }))
      )
    });
  }
});

// src/serialization/resources/remoteGen/client/requests/CreateJobRequestV2.ts
var CreateJobRequestV2;
var init_CreateJobRequestV2 = __esm({
  \\"src/serialization/resources/remoteGen/client/requests/CreateJobRequestV2.ts\\"() {
    \\"use strict\\";
    init_core();
    CreateJobRequestV2 = schemas_exports.object({
      apiName: schemas_exports.string(),
      organizationName: schemas_exports.string(),
      version: schemas_exports.string().optional(),
      generators: schemas_exports.list(
        schemas_exports.lazyObject(() => __async(void 0, null, function* () {
          return (yield Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorConfigV2;
        }))
      ),
      uploadToS3: schemas_exports.boolean().optional()
    });
  }
});

// src/serialization/resources/remoteGen/client/requests/index.ts
var init_requests2 = __esm({
  \\"src/serialization/resources/remoteGen/client/requests/index.ts\\"() {
    \\"use strict\\";
    init_CreateJobRequest();
    init_CreateJobRequestV2();
  }
});

// src/serialization/resources/remoteGen/client/index.ts
var init_client4 = __esm({
  \\"src/serialization/resources/remoteGen/client/index.ts\\"() {
    \\"use strict\\";
    init_createJob2();
    init_createJobV22();
    init_getJobStatus2();
    init_requests2();
  }
});

// src/serialization/resources/remoteGen/index.ts
var remoteGen_exports2 = {};
__export(remoteGen_exports2, {
  CannotPublishToMavenGroupDetails: () => CannotPublishToMavenGroupDetails,
  CannotPublishToNpmScopeDetails: () => CannotPublishToNpmScopeDetails,
  CreateJobRequest: () => CreateJobRequest,
  CreateJobRequestV2: () => CreateJobRequestV2,
  CreateJobResponse: () => CreateJobResponse,
  FailedTaskStatus: () => FailedTaskStatus,
  FinishedTaskStatus: () => FinishedTaskStatus,
  GeneratorConfig: () => GeneratorConfig,
  GeneratorConfigV2: () => GeneratorConfigV2,
  GeneratorIdAndVersion: () => GeneratorIdAndVersion,
  GeneratorOutputs: () => GeneratorOutputs,
  GeneratorsDoNotExistErrorBodyType: () => GeneratorsDoNotExistErrorBodyType,
  GithubOutputMode: () => GithubOutputMode,
  GithubPublishInfo: () => GithubPublishInfo2,
  InsufficientPermissionsDetails: () => InsufficientPermissionsDetails,
  LogLevel: () => LogLevel2,
  MavenCoordinate: () => MavenCoordinate,
  MavenOutput: () => MavenOutput,
  MavenOutputWithOptionalCreds: () => MavenOutputWithOptionalCreds,
  NpmCoordinate: () => NpmCoordinate,
  NpmOutput: () => NpmOutput,
  NpmOutputWithOptionalToken: () => NpmOutputWithOptionalToken,
  OutputMode: () => OutputMode2,
  Package: () => Package,
  PackageCoordinate: () => PackageCoordinate2,
  PackagePublishStatus: () => PackagePublishStatus2,
  PostmanOutput: () => PostmanOutput,
  PublishOutputMode: () => PublishOutputMode,
  PublishOutputModeV2: () => PublishOutputModeV22,
  PypiCoordinate: () => PypiCoordinate,
  RegistryOverrides: () => RegistryOverrides,
  RemoteGenJobId: () => RemoteGenJobId2,
  RemoteGenTaskId: () => RemoteGenTaskId2,
  Task: () => Task,
  TaskLog: () => TaskLog,
  TaskStatus: () => TaskStatus2,
  UsernamePassword: () => UsernamePassword,
  createJob: () => createJob_exports2,
  createJobV2: () => createJobV2_exports2,
  getJobStatus: () => getJobStatus_exports2
});
var init_remoteGen2 = __esm({
  \\"src/serialization/resources/remoteGen/index.ts\\"() {
    \\"use strict\\";
    init_types2();
    init_client4();
  }
});

// src/serialization/resources/index.ts
var init_resources2 = __esm({
  \\"src/serialization/resources/index.ts\\"() {
    \\"use strict\\";
    init_remoteGen2();
    init_types2();
    init_requests2();
  }
});

// src/serialization/index.ts
var serialization_exports = {};
__export(serialization_exports, {
  CannotPublishToMavenGroupDetails: () => CannotPublishToMavenGroupDetails,
  CannotPublishToNpmScopeDetails: () => CannotPublishToNpmScopeDetails,
  CreateJobRequest: () => CreateJobRequest,
  CreateJobRequestV2: () => CreateJobRequestV2,
  CreateJobResponse: () => CreateJobResponse,
  FailedTaskStatus: () => FailedTaskStatus,
  FinishedTaskStatus: () => FinishedTaskStatus,
  GeneratorConfig: () => GeneratorConfig,
  GeneratorConfigV2: () => GeneratorConfigV2,
  GeneratorIdAndVersion: () => GeneratorIdAndVersion,
  GeneratorOutputs: () => GeneratorOutputs,
  GeneratorsDoNotExistErrorBodyType: () => GeneratorsDoNotExistErrorBodyType,
  GithubOutputMode: () => GithubOutputMode,
  GithubPublishInfo: () => GithubPublishInfo2,
  InsufficientPermissionsDetails: () => InsufficientPermissionsDetails,
  LogLevel: () => LogLevel2,
  MavenCoordinate: () => MavenCoordinate,
  MavenOutput: () => MavenOutput,
  MavenOutputWithOptionalCreds: () => MavenOutputWithOptionalCreds,
  NpmCoordinate: () => NpmCoordinate,
  NpmOutput: () => NpmOutput,
  NpmOutputWithOptionalToken: () => NpmOutputWithOptionalToken,
  OutputMode: () => OutputMode2,
  Package: () => Package,
  PackageCoordinate: () => PackageCoordinate2,
  PackagePublishStatus: () => PackagePublishStatus2,
  PostmanOutput: () => PostmanOutput,
  PublishOutputMode: () => PublishOutputMode,
  PublishOutputModeV2: () => PublishOutputModeV22,
  PypiCoordinate: () => PypiCoordinate,
  RegistryOverrides: () => RegistryOverrides,
  RemoteGenJobId: () => RemoteGenJobId2,
  RemoteGenTaskId: () => RemoteGenTaskId2,
  Task: () => Task,
  TaskLog: () => TaskLog,
  TaskStatus: () => TaskStatus2,
  UsernamePassword: () => UsernamePassword,
  remoteGen: () => remoteGen_exports2
});
var init_serialization = __esm({
  \\"src/serialization/index.ts\\"() {
    init_resources2();
  }
});
init_serialization();
export {
  CannotPublishToMavenGroupDetails,
  CannotPublishToNpmScopeDetails,
  CreateJobRequest,
  CreateJobRequestV2,
  CreateJobResponse,
  FailedTaskStatus,
  FinishedTaskStatus,
  GeneratorConfig,
  GeneratorConfigV2,
  GeneratorIdAndVersion,
  GeneratorOutputs,
  GeneratorsDoNotExistErrorBodyType,
  GithubOutputMode,
  GithubPublishInfo2 as GithubPublishInfo,
  InsufficientPermissionsDetails,
  LogLevel2 as LogLevel,
  MavenCoordinate,
  MavenOutput,
  MavenOutputWithOptionalCreds,
  NpmCoordinate,
  NpmOutput,
  NpmOutputWithOptionalToken,
  OutputMode2 as OutputMode,
  Package,
  PackageCoordinate2 as PackageCoordinate,
  PackagePublishStatus2 as PackagePublishStatus,
  PostmanOutput,
  PublishOutputMode,
  PublishOutputModeV22 as PublishOutputModeV2,
  PypiCoordinate,
  RegistryOverrides,
  RemoteGenJobId2 as RemoteGenJobId,
  RemoteGenTaskId2 as RemoteGenTaskId,
  Task,
  TaskLog,
  TaskStatus2 as TaskStatus,
  UsernamePassword,
  remoteGen_exports2 as remoteGen
};
",
                "name": "serialization.js",
                "type": "file",
              },
            ],
            "name": "esm",
            "type": "directory",
          },
        ],
        "name": "browser",
        "type": "directory",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "\\"use strict\\";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all3) => {
  for (var name in all3)
    __defProp(target, name, { get: all3[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === \\"object\\" || typeof from === \\"function\\") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. \\"__esModule\\" has not been set), then set
  // \\"default\\" to the CommonJS \\"module.exports\\" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \\"default\\", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, \\"__esModule\\", { value: true }), mod);

// .yarn/cache/delayed-stream-npm-1.0.0-c5a4c4cc02-46fe6e83e2.zip/node_modules/delayed-stream/lib/delayed_stream.js
var require_delayed_stream = __commonJS({
  \\".yarn/cache/delayed-stream-npm-1.0.0-c5a4c4cc02-46fe6e83e2.zip/node_modules/delayed-stream/lib/delayed_stream.js\\"(exports, module2) {
    var Stream = require(\\"stream\\").Stream;
    var util2 = require(\\"util\\");
    module2.exports = DelayedStream;
    function DelayedStream() {
      this.source = null;
      this.dataSize = 0;
      this.maxDataSize = 1024 * 1024;
      this.pauseStream = true;
      this._maxDataSizeExceeded = false;
      this._released = false;
      this._bufferedEvents = [];
    }
    util2.inherits(DelayedStream, Stream);
    DelayedStream.create = function(source, options) {
      var delayedStream = new this();
      options = options || {};
      for (var option in options) {
        delayedStream[option] = options[option];
      }
      delayedStream.source = source;
      var realEmit = source.emit;
      source.emit = function() {
        delayedStream._handleEmit(arguments);
        return realEmit.apply(source, arguments);
      };
      source.on(\\"error\\", function() {
      });
      if (delayedStream.pauseStream) {
        source.pause();
      }
      return delayedStream;
    };
    Object.defineProperty(DelayedStream.prototype, \\"readable\\", {
      configurable: true,
      enumerable: true,
      get: function() {
        return this.source.readable;
      }
    });
    DelayedStream.prototype.setEncoding = function() {
      return this.source.setEncoding.apply(this.source, arguments);
    };
    DelayedStream.prototype.resume = function() {
      if (!this._released) {
        this.release();
      }
      this.source.resume();
    };
    DelayedStream.prototype.pause = function() {
      this.source.pause();
    };
    DelayedStream.prototype.release = function() {
      this._released = true;
      this._bufferedEvents.forEach(function(args) {
        this.emit.apply(this, args);
      }.bind(this));
      this._bufferedEvents = [];
    };
    DelayedStream.prototype.pipe = function() {
      var r = Stream.prototype.pipe.apply(this, arguments);
      this.resume();
      return r;
    };
    DelayedStream.prototype._handleEmit = function(args) {
      if (this._released) {
        this.emit.apply(this, args);
        return;
      }
      if (args[0] === \\"data\\") {
        this.dataSize += args[1].length;
        this._checkIfMaxDataSizeExceeded();
      }
      this._bufferedEvents.push(args);
    };
    DelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {
      if (this._maxDataSizeExceeded) {
        return;
      }
      if (this.dataSize <= this.maxDataSize) {
        return;
      }
      this._maxDataSizeExceeded = true;
      var message = \\"DelayedStream#maxDataSize of \\" + this.maxDataSize + \\" bytes exceeded.\\";
      this.emit(\\"error\\", new Error(message));
    };
  }
});

// .yarn/cache/combined-stream-npm-1.0.8-dc14d4a63a-49fa4aeb49.zip/node_modules/combined-stream/lib/combined_stream.js
var require_combined_stream = __commonJS({
  \\".yarn/cache/combined-stream-npm-1.0.8-dc14d4a63a-49fa4aeb49.zip/node_modules/combined-stream/lib/combined_stream.js\\"(exports, module2) {
    var util2 = require(\\"util\\");
    var Stream = require(\\"stream\\").Stream;
    var DelayedStream = require_delayed_stream();
    module2.exports = CombinedStream;
    function CombinedStream() {
      this.writable = false;
      this.readable = true;
      this.dataSize = 0;
      this.maxDataSize = 2 * 1024 * 1024;
      this.pauseStreams = true;
      this._released = false;
      this._streams = [];
      this._currentStream = null;
      this._insideLoop = false;
      this._pendingNext = false;
    }
    util2.inherits(CombinedStream, Stream);
    CombinedStream.create = function(options) {
      var combinedStream = new this();
      options = options || {};
      for (var option in options) {
        combinedStream[option] = options[option];
      }
      return combinedStream;
    };
    CombinedStream.isStreamLike = function(stream4) {
      return typeof stream4 !== \\"function\\" && typeof stream4 !== \\"string\\" && typeof stream4 !== \\"boolean\\" && typeof stream4 !== \\"number\\" && !Buffer.isBuffer(stream4);
    };
    CombinedStream.prototype.append = function(stream4) {
      var isStreamLike = CombinedStream.isStreamLike(stream4);
      if (isStreamLike) {
        if (!(stream4 instanceof DelayedStream)) {
          var newStream = DelayedStream.create(stream4, {
            maxDataSize: Infinity,
            pauseStream: this.pauseStreams
          });
          stream4.on(\\"data\\", this._checkDataSize.bind(this));
          stream4 = newStream;
        }
        this._handleErrors(stream4);
        if (this.pauseStreams) {
          stream4.pause();
        }
      }
      this._streams.push(stream4);
      return this;
    };
    CombinedStream.prototype.pipe = function(dest, options) {
      Stream.prototype.pipe.call(this, dest, options);
      this.resume();
      return dest;
    };
    CombinedStream.prototype._getNext = function() {
      this._currentStream = null;
      if (this._insideLoop) {
        this._pendingNext = true;
        return;
      }
      this._insideLoop = true;
      try {
        do {
          this._pendingNext = false;
          this._realGetNext();
        } while (this._pendingNext);
      } finally {
        this._insideLoop = false;
      }
    };
    CombinedStream.prototype._realGetNext = function() {
      var stream4 = this._streams.shift();
      if (typeof stream4 == \\"undefined\\") {
        this.end();
        return;
      }
      if (typeof stream4 !== \\"function\\") {
        this._pipeNext(stream4);
        return;
      }
      var getStream = stream4;
      getStream(function(stream5) {
        var isStreamLike = CombinedStream.isStreamLike(stream5);
        if (isStreamLike) {
          stream5.on(\\"data\\", this._checkDataSize.bind(this));
          this._handleErrors(stream5);
        }
        this._pipeNext(stream5);
      }.bind(this));
    };
    CombinedStream.prototype._pipeNext = function(stream4) {
      this._currentStream = stream4;
      var isStreamLike = CombinedStream.isStreamLike(stream4);
      if (isStreamLike) {
        stream4.on(\\"end\\", this._getNext.bind(this));
        stream4.pipe(this, { end: false });
        return;
      }
      var value = stream4;
      this.write(value);
      this._getNext();
    };
    CombinedStream.prototype._handleErrors = function(stream4) {
      var self2 = this;
      stream4.on(\\"error\\", function(err) {
        self2._emitError(err);
      });
    };
    CombinedStream.prototype.write = function(data) {
      this.emit(\\"data\\", data);
    };
    CombinedStream.prototype.pause = function() {
      if (!this.pauseStreams) {
        return;
      }
      if (this.pauseStreams && this._currentStream && typeof this._currentStream.pause == \\"function\\")
        this._currentStream.pause();
      this.emit(\\"pause\\");
    };
    CombinedStream.prototype.resume = function() {
      if (!this._released) {
        this._released = true;
        this.writable = true;
        this._getNext();
      }
      if (this.pauseStreams && this._currentStream && typeof this._currentStream.resume == \\"function\\")
        this._currentStream.resume();
      this.emit(\\"resume\\");
    };
    CombinedStream.prototype.end = function() {
      this._reset();
      this.emit(\\"end\\");
    };
    CombinedStream.prototype.destroy = function() {
      this._reset();
      this.emit(\\"close\\");
    };
    CombinedStream.prototype._reset = function() {
      this.writable = false;
      this._streams = [];
      this._currentStream = null;
    };
    CombinedStream.prototype._checkDataSize = function() {
      this._updateDataSize();
      if (this.dataSize <= this.maxDataSize) {
        return;
      }
      var message = \\"DelayedStream#maxDataSize of \\" + this.maxDataSize + \\" bytes exceeded.\\";
      this._emitError(new Error(message));
    };
    CombinedStream.prototype._updateDataSize = function() {
      this.dataSize = 0;
      var self2 = this;
      this._streams.forEach(function(stream4) {
        if (!stream4.dataSize) {
          return;
        }
        self2.dataSize += stream4.dataSize;
      });
      if (this._currentStream && this._currentStream.dataSize) {
        this.dataSize += this._currentStream.dataSize;
      }
    };
    CombinedStream.prototype._emitError = function(err) {
      this._reset();
      this.emit(\\"error\\", err);
    };
  }
});

// .yarn/cache/mime-db-npm-1.52.0-b5371d6fd2-0d99a03585.zip/node_modules/mime-db/db.json
var require_db = __commonJS({
  \\".yarn/cache/mime-db-npm-1.52.0-b5371d6fd2-0d99a03585.zip/node_modules/mime-db/db.json\\"(exports, module2) {
    module2.exports = {
      \\"application/1d-interleaved-parityfec\\": {
        source: \\"iana\\"
      },
      \\"application/3gpdash-qoe-report+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/3gpp-ims+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/3gpphal+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/3gpphalforms+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/a2l\\": {
        source: \\"iana\\"
      },
      \\"application/ace+cbor\\": {
        source: \\"iana\\"
      },
      \\"application/activemessage\\": {
        source: \\"iana\\"
      },
      \\"application/activity+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/alto-costmap+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/alto-costmapfilter+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/alto-directory+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/alto-endpointcost+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/alto-endpointcostparams+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/alto-endpointprop+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/alto-endpointpropparams+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/alto-error+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/alto-networkmap+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/alto-networkmapfilter+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/alto-updatestreamcontrol+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/alto-updatestreamparams+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/aml\\": {
        source: \\"iana\\"
      },
      \\"application/andrew-inset\\": {
        source: \\"iana\\",
        extensions: [\\"ez\\"]
      },
      \\"application/applefile\\": {
        source: \\"iana\\"
      },
      \\"application/applixware\\": {
        source: \\"apache\\",
        extensions: [\\"aw\\"]
      },
      \\"application/at+jwt\\": {
        source: \\"iana\\"
      },
      \\"application/atf\\": {
        source: \\"iana\\"
      },
      \\"application/atfx\\": {
        source: \\"iana\\"
      },
      \\"application/atom+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"atom\\"]
      },
      \\"application/atomcat+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"atomcat\\"]
      },
      \\"application/atomdeleted+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"atomdeleted\\"]
      },
      \\"application/atomicmail\\": {
        source: \\"iana\\"
      },
      \\"application/atomsvc+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"atomsvc\\"]
      },
      \\"application/atsc-dwd+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"dwd\\"]
      },
      \\"application/atsc-dynamic-event-message\\": {
        source: \\"iana\\"
      },
      \\"application/atsc-held+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"held\\"]
      },
      \\"application/atsc-rdt+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/atsc-rsat+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"rsat\\"]
      },
      \\"application/atxml\\": {
        source: \\"iana\\"
      },
      \\"application/auth-policy+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/bacnet-xdd+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/batch-smtp\\": {
        source: \\"iana\\"
      },
      \\"application/bdoc\\": {
        compressible: false,
        extensions: [\\"bdoc\\"]
      },
      \\"application/beep+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/calendar+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/calendar+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xcs\\"]
      },
      \\"application/call-completion\\": {
        source: \\"iana\\"
      },
      \\"application/cals-1840\\": {
        source: \\"iana\\"
      },
      \\"application/captive+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/cbor\\": {
        source: \\"iana\\"
      },
      \\"application/cbor-seq\\": {
        source: \\"iana\\"
      },
      \\"application/cccex\\": {
        source: \\"iana\\"
      },
      \\"application/ccmp+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/ccxml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"ccxml\\"]
      },
      \\"application/cdfx+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"cdfx\\"]
      },
      \\"application/cdmi-capability\\": {
        source: \\"iana\\",
        extensions: [\\"cdmia\\"]
      },
      \\"application/cdmi-container\\": {
        source: \\"iana\\",
        extensions: [\\"cdmic\\"]
      },
      \\"application/cdmi-domain\\": {
        source: \\"iana\\",
        extensions: [\\"cdmid\\"]
      },
      \\"application/cdmi-object\\": {
        source: \\"iana\\",
        extensions: [\\"cdmio\\"]
      },
      \\"application/cdmi-queue\\": {
        source: \\"iana\\",
        extensions: [\\"cdmiq\\"]
      },
      \\"application/cdni\\": {
        source: \\"iana\\"
      },
      \\"application/cea\\": {
        source: \\"iana\\"
      },
      \\"application/cea-2018+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/cellml+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/cfw\\": {
        source: \\"iana\\"
      },
      \\"application/city+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/clr\\": {
        source: \\"iana\\"
      },
      \\"application/clue+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/clue_info+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/cms\\": {
        source: \\"iana\\"
      },
      \\"application/cnrp+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/coap-group+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/coap-payload\\": {
        source: \\"iana\\"
      },
      \\"application/commonground\\": {
        source: \\"iana\\"
      },
      \\"application/conference-info+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/cose\\": {
        source: \\"iana\\"
      },
      \\"application/cose-key\\": {
        source: \\"iana\\"
      },
      \\"application/cose-key-set\\": {
        source: \\"iana\\"
      },
      \\"application/cpl+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"cpl\\"]
      },
      \\"application/csrattrs\\": {
        source: \\"iana\\"
      },
      \\"application/csta+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/cstadata+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/csvm+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/cu-seeme\\": {
        source: \\"apache\\",
        extensions: [\\"cu\\"]
      },
      \\"application/cwt\\": {
        source: \\"iana\\"
      },
      \\"application/cybercash\\": {
        source: \\"iana\\"
      },
      \\"application/dart\\": {
        compressible: true
      },
      \\"application/dash+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"mpd\\"]
      },
      \\"application/dash-patch+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"mpp\\"]
      },
      \\"application/dashdelta\\": {
        source: \\"iana\\"
      },
      \\"application/davmount+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"davmount\\"]
      },
      \\"application/dca-rft\\": {
        source: \\"iana\\"
      },
      \\"application/dcd\\": {
        source: \\"iana\\"
      },
      \\"application/dec-dx\\": {
        source: \\"iana\\"
      },
      \\"application/dialog-info+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/dicom\\": {
        source: \\"iana\\"
      },
      \\"application/dicom+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/dicom+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/dii\\": {
        source: \\"iana\\"
      },
      \\"application/dit\\": {
        source: \\"iana\\"
      },
      \\"application/dns\\": {
        source: \\"iana\\"
      },
      \\"application/dns+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/dns-message\\": {
        source: \\"iana\\"
      },
      \\"application/docbook+xml\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"dbk\\"]
      },
      \\"application/dots+cbor\\": {
        source: \\"iana\\"
      },
      \\"application/dskpp+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/dssc+der\\": {
        source: \\"iana\\",
        extensions: [\\"dssc\\"]
      },
      \\"application/dssc+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xdssc\\"]
      },
      \\"application/dvcs\\": {
        source: \\"iana\\"
      },
      \\"application/ecmascript\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"es\\", \\"ecma\\"]
      },
      \\"application/edi-consent\\": {
        source: \\"iana\\"
      },
      \\"application/edi-x12\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/edifact\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/efi\\": {
        source: \\"iana\\"
      },
      \\"application/elm+json\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/elm+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/emergencycalldata.cap+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/emergencycalldata.comment+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/emergencycalldata.control+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/emergencycalldata.deviceinfo+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/emergencycalldata.ecall.msd\\": {
        source: \\"iana\\"
      },
      \\"application/emergencycalldata.providerinfo+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/emergencycalldata.serviceinfo+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/emergencycalldata.subscriberinfo+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/emergencycalldata.veds+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/emma+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"emma\\"]
      },
      \\"application/emotionml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"emotionml\\"]
      },
      \\"application/encaprtp\\": {
        source: \\"iana\\"
      },
      \\"application/epp+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/epub+zip\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"epub\\"]
      },
      \\"application/eshop\\": {
        source: \\"iana\\"
      },
      \\"application/exi\\": {
        source: \\"iana\\",
        extensions: [\\"exi\\"]
      },
      \\"application/expect-ct-report+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/express\\": {
        source: \\"iana\\",
        extensions: [\\"exp\\"]
      },
      \\"application/fastinfoset\\": {
        source: \\"iana\\"
      },
      \\"application/fastsoap\\": {
        source: \\"iana\\"
      },
      \\"application/fdt+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"fdt\\"]
      },
      \\"application/fhir+json\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/fhir+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/fido.trusted-apps+json\\": {
        compressible: true
      },
      \\"application/fits\\": {
        source: \\"iana\\"
      },
      \\"application/flexfec\\": {
        source: \\"iana\\"
      },
      \\"application/font-sfnt\\": {
        source: \\"iana\\"
      },
      \\"application/font-tdpfr\\": {
        source: \\"iana\\",
        extensions: [\\"pfr\\"]
      },
      \\"application/font-woff\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/framework-attributes+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/geo+json\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"geojson\\"]
      },
      \\"application/geo+json-seq\\": {
        source: \\"iana\\"
      },
      \\"application/geopackage+sqlite3\\": {
        source: \\"iana\\"
      },
      \\"application/geoxacml+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/gltf-buffer\\": {
        source: \\"iana\\"
      },
      \\"application/gml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"gml\\"]
      },
      \\"application/gpx+xml\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"gpx\\"]
      },
      \\"application/gxf\\": {
        source: \\"apache\\",
        extensions: [\\"gxf\\"]
      },
      \\"application/gzip\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"gz\\"]
      },
      \\"application/h224\\": {
        source: \\"iana\\"
      },
      \\"application/held+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/hjson\\": {
        extensions: [\\"hjson\\"]
      },
      \\"application/http\\": {
        source: \\"iana\\"
      },
      \\"application/hyperstudio\\": {
        source: \\"iana\\",
        extensions: [\\"stk\\"]
      },
      \\"application/ibe-key-request+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/ibe-pkg-reply+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/ibe-pp-data\\": {
        source: \\"iana\\"
      },
      \\"application/iges\\": {
        source: \\"iana\\"
      },
      \\"application/im-iscomposing+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/index\\": {
        source: \\"iana\\"
      },
      \\"application/index.cmd\\": {
        source: \\"iana\\"
      },
      \\"application/index.obj\\": {
        source: \\"iana\\"
      },
      \\"application/index.response\\": {
        source: \\"iana\\"
      },
      \\"application/index.vnd\\": {
        source: \\"iana\\"
      },
      \\"application/inkml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"ink\\", \\"inkml\\"]
      },
      \\"application/iotp\\": {
        source: \\"iana\\"
      },
      \\"application/ipfix\\": {
        source: \\"iana\\",
        extensions: [\\"ipfix\\"]
      },
      \\"application/ipp\\": {
        source: \\"iana\\"
      },
      \\"application/isup\\": {
        source: \\"iana\\"
      },
      \\"application/its+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"its\\"]
      },
      \\"application/java-archive\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"jar\\", \\"war\\", \\"ear\\"]
      },
      \\"application/java-serialized-object\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"ser\\"]
      },
      \\"application/java-vm\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"class\\"]
      },
      \\"application/javascript\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true,
        extensions: [\\"js\\", \\"mjs\\"]
      },
      \\"application/jf2feed+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/jose\\": {
        source: \\"iana\\"
      },
      \\"application/jose+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/jrd+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/jscalendar+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/json\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true,
        extensions: [\\"json\\", \\"map\\"]
      },
      \\"application/json-patch+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/json-seq\\": {
        source: \\"iana\\"
      },
      \\"application/json5\\": {
        extensions: [\\"json5\\"]
      },
      \\"application/jsonml+json\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"jsonml\\"]
      },
      \\"application/jwk+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/jwk-set+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/jwt\\": {
        source: \\"iana\\"
      },
      \\"application/kpml-request+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/kpml-response+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/ld+json\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"jsonld\\"]
      },
      \\"application/lgr+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"lgr\\"]
      },
      \\"application/link-format\\": {
        source: \\"iana\\"
      },
      \\"application/load-control+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/lost+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"lostxml\\"]
      },
      \\"application/lostsync+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/lpf+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/lxf\\": {
        source: \\"iana\\"
      },
      \\"application/mac-binhex40\\": {
        source: \\"iana\\",
        extensions: [\\"hqx\\"]
      },
      \\"application/mac-compactpro\\": {
        source: \\"apache\\",
        extensions: [\\"cpt\\"]
      },
      \\"application/macwriteii\\": {
        source: \\"iana\\"
      },
      \\"application/mads+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"mads\\"]
      },
      \\"application/manifest+json\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true,
        extensions: [\\"webmanifest\\"]
      },
      \\"application/marc\\": {
        source: \\"iana\\",
        extensions: [\\"mrc\\"]
      },
      \\"application/marcxml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"mrcx\\"]
      },
      \\"application/mathematica\\": {
        source: \\"iana\\",
        extensions: [\\"ma\\", \\"nb\\", \\"mb\\"]
      },
      \\"application/mathml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"mathml\\"]
      },
      \\"application/mathml-content+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/mathml-presentation+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/mbms-associated-procedure-description+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/mbms-deregister+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/mbms-envelope+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/mbms-msk+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/mbms-msk-response+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/mbms-protection-description+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/mbms-reception-report+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/mbms-register+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/mbms-register-response+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/mbms-schedule+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/mbms-user-service-description+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/mbox\\": {
        source: \\"iana\\",
        extensions: [\\"mbox\\"]
      },
      \\"application/media-policy-dataset+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"mpf\\"]
      },
      \\"application/media_control+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/mediaservercontrol+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"mscml\\"]
      },
      \\"application/merge-patch+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/metalink+xml\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"metalink\\"]
      },
      \\"application/metalink4+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"meta4\\"]
      },
      \\"application/mets+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"mets\\"]
      },
      \\"application/mf4\\": {
        source: \\"iana\\"
      },
      \\"application/mikey\\": {
        source: \\"iana\\"
      },
      \\"application/mipc\\": {
        source: \\"iana\\"
      },
      \\"application/missing-blocks+cbor-seq\\": {
        source: \\"iana\\"
      },
      \\"application/mmt-aei+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"maei\\"]
      },
      \\"application/mmt-usd+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"musd\\"]
      },
      \\"application/mods+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"mods\\"]
      },
      \\"application/moss-keys\\": {
        source: \\"iana\\"
      },
      \\"application/moss-signature\\": {
        source: \\"iana\\"
      },
      \\"application/mosskey-data\\": {
        source: \\"iana\\"
      },
      \\"application/mosskey-request\\": {
        source: \\"iana\\"
      },
      \\"application/mp21\\": {
        source: \\"iana\\",
        extensions: [\\"m21\\", \\"mp21\\"]
      },
      \\"application/mp4\\": {
        source: \\"iana\\",
        extensions: [\\"mp4s\\", \\"m4p\\"]
      },
      \\"application/mpeg4-generic\\": {
        source: \\"iana\\"
      },
      \\"application/mpeg4-iod\\": {
        source: \\"iana\\"
      },
      \\"application/mpeg4-iod-xmt\\": {
        source: \\"iana\\"
      },
      \\"application/mrb-consumer+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/mrb-publish+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/msc-ivr+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/msc-mixer+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/msword\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"doc\\", \\"dot\\"]
      },
      \\"application/mud+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/multipart-core\\": {
        source: \\"iana\\"
      },
      \\"application/mxf\\": {
        source: \\"iana\\",
        extensions: [\\"mxf\\"]
      },
      \\"application/n-quads\\": {
        source: \\"iana\\",
        extensions: [\\"nq\\"]
      },
      \\"application/n-triples\\": {
        source: \\"iana\\",
        extensions: [\\"nt\\"]
      },
      \\"application/nasdata\\": {
        source: \\"iana\\"
      },
      \\"application/news-checkgroups\\": {
        source: \\"iana\\",
        charset: \\"US-ASCII\\"
      },
      \\"application/news-groupinfo\\": {
        source: \\"iana\\",
        charset: \\"US-ASCII\\"
      },
      \\"application/news-transmission\\": {
        source: \\"iana\\"
      },
      \\"application/nlsml+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/node\\": {
        source: \\"iana\\",
        extensions: [\\"cjs\\"]
      },
      \\"application/nss\\": {
        source: \\"iana\\"
      },
      \\"application/oauth-authz-req+jwt\\": {
        source: \\"iana\\"
      },
      \\"application/oblivious-dns-message\\": {
        source: \\"iana\\"
      },
      \\"application/ocsp-request\\": {
        source: \\"iana\\"
      },
      \\"application/ocsp-response\\": {
        source: \\"iana\\"
      },
      \\"application/octet-stream\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"bin\\", \\"dms\\", \\"lrf\\", \\"mar\\", \\"so\\", \\"dist\\", \\"distz\\", \\"pkg\\", \\"bpk\\", \\"dump\\", \\"elc\\", \\"deploy\\", \\"exe\\", \\"dll\\", \\"deb\\", \\"dmg\\", \\"iso\\", \\"img\\", \\"msi\\", \\"msp\\", \\"msm\\", \\"buffer\\"]
      },
      \\"application/oda\\": {
        source: \\"iana\\",
        extensions: [\\"oda\\"]
      },
      \\"application/odm+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/odx\\": {
        source: \\"iana\\"
      },
      \\"application/oebps-package+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"opf\\"]
      },
      \\"application/ogg\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"ogx\\"]
      },
      \\"application/omdoc+xml\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"omdoc\\"]
      },
      \\"application/onenote\\": {
        source: \\"apache\\",
        extensions: [\\"onetoc\\", \\"onetoc2\\", \\"onetmp\\", \\"onepkg\\"]
      },
      \\"application/opc-nodeset+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/oscore\\": {
        source: \\"iana\\"
      },
      \\"application/oxps\\": {
        source: \\"iana\\",
        extensions: [\\"oxps\\"]
      },
      \\"application/p21\\": {
        source: \\"iana\\"
      },
      \\"application/p21+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/p2p-overlay+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"relo\\"]
      },
      \\"application/parityfec\\": {
        source: \\"iana\\"
      },
      \\"application/passport\\": {
        source: \\"iana\\"
      },
      \\"application/patch-ops-error+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xer\\"]
      },
      \\"application/pdf\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"pdf\\"]
      },
      \\"application/pdx\\": {
        source: \\"iana\\"
      },
      \\"application/pem-certificate-chain\\": {
        source: \\"iana\\"
      },
      \\"application/pgp-encrypted\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"pgp\\"]
      },
      \\"application/pgp-keys\\": {
        source: \\"iana\\",
        extensions: [\\"asc\\"]
      },
      \\"application/pgp-signature\\": {
        source: \\"iana\\",
        extensions: [\\"asc\\", \\"sig\\"]
      },
      \\"application/pics-rules\\": {
        source: \\"apache\\",
        extensions: [\\"prf\\"]
      },
      \\"application/pidf+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/pidf-diff+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/pkcs10\\": {
        source: \\"iana\\",
        extensions: [\\"p10\\"]
      },
      \\"application/pkcs12\\": {
        source: \\"iana\\"
      },
      \\"application/pkcs7-mime\\": {
        source: \\"iana\\",
        extensions: [\\"p7m\\", \\"p7c\\"]
      },
      \\"application/pkcs7-signature\\": {
        source: \\"iana\\",
        extensions: [\\"p7s\\"]
      },
      \\"application/pkcs8\\": {
        source: \\"iana\\",
        extensions: [\\"p8\\"]
      },
      \\"application/pkcs8-encrypted\\": {
        source: \\"iana\\"
      },
      \\"application/pkix-attr-cert\\": {
        source: \\"iana\\",
        extensions: [\\"ac\\"]
      },
      \\"application/pkix-cert\\": {
        source: \\"iana\\",
        extensions: [\\"cer\\"]
      },
      \\"application/pkix-crl\\": {
        source: \\"iana\\",
        extensions: [\\"crl\\"]
      },
      \\"application/pkix-pkipath\\": {
        source: \\"iana\\",
        extensions: [\\"pkipath\\"]
      },
      \\"application/pkixcmp\\": {
        source: \\"iana\\",
        extensions: [\\"pki\\"]
      },
      \\"application/pls+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"pls\\"]
      },
      \\"application/poc-settings+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/postscript\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"ai\\", \\"eps\\", \\"ps\\"]
      },
      \\"application/ppsp-tracker+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/problem+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/problem+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/provenance+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"provx\\"]
      },
      \\"application/prs.alvestrand.titrax-sheet\\": {
        source: \\"iana\\"
      },
      \\"application/prs.cww\\": {
        source: \\"iana\\",
        extensions: [\\"cww\\"]
      },
      \\"application/prs.cyn\\": {
        source: \\"iana\\",
        charset: \\"7-BIT\\"
      },
      \\"application/prs.hpub+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/prs.nprend\\": {
        source: \\"iana\\"
      },
      \\"application/prs.plucker\\": {
        source: \\"iana\\"
      },
      \\"application/prs.rdf-xml-crypt\\": {
        source: \\"iana\\"
      },
      \\"application/prs.xsf+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/pskc+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"pskcxml\\"]
      },
      \\"application/pvd+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/qsig\\": {
        source: \\"iana\\"
      },
      \\"application/raml+yaml\\": {
        compressible: true,
        extensions: [\\"raml\\"]
      },
      \\"application/raptorfec\\": {
        source: \\"iana\\"
      },
      \\"application/rdap+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/rdf+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"rdf\\", \\"owl\\"]
      },
      \\"application/reginfo+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"rif\\"]
      },
      \\"application/relax-ng-compact-syntax\\": {
        source: \\"iana\\",
        extensions: [\\"rnc\\"]
      },
      \\"application/remote-printing\\": {
        source: \\"iana\\"
      },
      \\"application/reputon+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/resource-lists+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"rl\\"]
      },
      \\"application/resource-lists-diff+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"rld\\"]
      },
      \\"application/rfc+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/riscos\\": {
        source: \\"iana\\"
      },
      \\"application/rlmi+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/rls-services+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"rs\\"]
      },
      \\"application/route-apd+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"rapd\\"]
      },
      \\"application/route-s-tsid+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"sls\\"]
      },
      \\"application/route-usd+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"rusd\\"]
      },
      \\"application/rpki-ghostbusters\\": {
        source: \\"iana\\",
        extensions: [\\"gbr\\"]
      },
      \\"application/rpki-manifest\\": {
        source: \\"iana\\",
        extensions: [\\"mft\\"]
      },
      \\"application/rpki-publication\\": {
        source: \\"iana\\"
      },
      \\"application/rpki-roa\\": {
        source: \\"iana\\",
        extensions: [\\"roa\\"]
      },
      \\"application/rpki-updown\\": {
        source: \\"iana\\"
      },
      \\"application/rsd+xml\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"rsd\\"]
      },
      \\"application/rss+xml\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"rss\\"]
      },
      \\"application/rtf\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"rtf\\"]
      },
      \\"application/rtploopback\\": {
        source: \\"iana\\"
      },
      \\"application/rtx\\": {
        source: \\"iana\\"
      },
      \\"application/samlassertion+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/samlmetadata+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/sarif+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/sarif-external-properties+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/sbe\\": {
        source: \\"iana\\"
      },
      \\"application/sbml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"sbml\\"]
      },
      \\"application/scaip+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/scim+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/scvp-cv-request\\": {
        source: \\"iana\\",
        extensions: [\\"scq\\"]
      },
      \\"application/scvp-cv-response\\": {
        source: \\"iana\\",
        extensions: [\\"scs\\"]
      },
      \\"application/scvp-vp-request\\": {
        source: \\"iana\\",
        extensions: [\\"spq\\"]
      },
      \\"application/scvp-vp-response\\": {
        source: \\"iana\\",
        extensions: [\\"spp\\"]
      },
      \\"application/sdp\\": {
        source: \\"iana\\",
        extensions: [\\"sdp\\"]
      },
      \\"application/secevent+jwt\\": {
        source: \\"iana\\"
      },
      \\"application/senml+cbor\\": {
        source: \\"iana\\"
      },
      \\"application/senml+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/senml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"senmlx\\"]
      },
      \\"application/senml-etch+cbor\\": {
        source: \\"iana\\"
      },
      \\"application/senml-etch+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/senml-exi\\": {
        source: \\"iana\\"
      },
      \\"application/sensml+cbor\\": {
        source: \\"iana\\"
      },
      \\"application/sensml+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/sensml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"sensmlx\\"]
      },
      \\"application/sensml-exi\\": {
        source: \\"iana\\"
      },
      \\"application/sep+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/sep-exi\\": {
        source: \\"iana\\"
      },
      \\"application/session-info\\": {
        source: \\"iana\\"
      },
      \\"application/set-payment\\": {
        source: \\"iana\\"
      },
      \\"application/set-payment-initiation\\": {
        source: \\"iana\\",
        extensions: [\\"setpay\\"]
      },
      \\"application/set-registration\\": {
        source: \\"iana\\"
      },
      \\"application/set-registration-initiation\\": {
        source: \\"iana\\",
        extensions: [\\"setreg\\"]
      },
      \\"application/sgml\\": {
        source: \\"iana\\"
      },
      \\"application/sgml-open-catalog\\": {
        source: \\"iana\\"
      },
      \\"application/shf+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"shf\\"]
      },
      \\"application/sieve\\": {
        source: \\"iana\\",
        extensions: [\\"siv\\", \\"sieve\\"]
      },
      \\"application/simple-filter+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/simple-message-summary\\": {
        source: \\"iana\\"
      },
      \\"application/simplesymbolcontainer\\": {
        source: \\"iana\\"
      },
      \\"application/sipc\\": {
        source: \\"iana\\"
      },
      \\"application/slate\\": {
        source: \\"iana\\"
      },
      \\"application/smil\\": {
        source: \\"iana\\"
      },
      \\"application/smil+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"smi\\", \\"smil\\"]
      },
      \\"application/smpte336m\\": {
        source: \\"iana\\"
      },
      \\"application/soap+fastinfoset\\": {
        source: \\"iana\\"
      },
      \\"application/soap+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/sparql-query\\": {
        source: \\"iana\\",
        extensions: [\\"rq\\"]
      },
      \\"application/sparql-results+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"srx\\"]
      },
      \\"application/spdx+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/spirits-event+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/sql\\": {
        source: \\"iana\\"
      },
      \\"application/srgs\\": {
        source: \\"iana\\",
        extensions: [\\"gram\\"]
      },
      \\"application/srgs+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"grxml\\"]
      },
      \\"application/sru+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"sru\\"]
      },
      \\"application/ssdl+xml\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"ssdl\\"]
      },
      \\"application/ssml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"ssml\\"]
      },
      \\"application/stix+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/swid+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"swidtag\\"]
      },
      \\"application/tamp-apex-update\\": {
        source: \\"iana\\"
      },
      \\"application/tamp-apex-update-confirm\\": {
        source: \\"iana\\"
      },
      \\"application/tamp-community-update\\": {
        source: \\"iana\\"
      },
      \\"application/tamp-community-update-confirm\\": {
        source: \\"iana\\"
      },
      \\"application/tamp-error\\": {
        source: \\"iana\\"
      },
      \\"application/tamp-sequence-adjust\\": {
        source: \\"iana\\"
      },
      \\"application/tamp-sequence-adjust-confirm\\": {
        source: \\"iana\\"
      },
      \\"application/tamp-status-query\\": {
        source: \\"iana\\"
      },
      \\"application/tamp-status-response\\": {
        source: \\"iana\\"
      },
      \\"application/tamp-update\\": {
        source: \\"iana\\"
      },
      \\"application/tamp-update-confirm\\": {
        source: \\"iana\\"
      },
      \\"application/tar\\": {
        compressible: true
      },
      \\"application/taxii+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/td+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/tei+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"tei\\", \\"teicorpus\\"]
      },
      \\"application/tetra_isi\\": {
        source: \\"iana\\"
      },
      \\"application/thraud+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"tfi\\"]
      },
      \\"application/timestamp-query\\": {
        source: \\"iana\\"
      },
      \\"application/timestamp-reply\\": {
        source: \\"iana\\"
      },
      \\"application/timestamped-data\\": {
        source: \\"iana\\",
        extensions: [\\"tsd\\"]
      },
      \\"application/tlsrpt+gzip\\": {
        source: \\"iana\\"
      },
      \\"application/tlsrpt+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/tnauthlist\\": {
        source: \\"iana\\"
      },
      \\"application/token-introspection+jwt\\": {
        source: \\"iana\\"
      },
      \\"application/toml\\": {
        compressible: true,
        extensions: [\\"toml\\"]
      },
      \\"application/trickle-ice-sdpfrag\\": {
        source: \\"iana\\"
      },
      \\"application/trig\\": {
        source: \\"iana\\",
        extensions: [\\"trig\\"]
      },
      \\"application/ttml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"ttml\\"]
      },
      \\"application/tve-trigger\\": {
        source: \\"iana\\"
      },
      \\"application/tzif\\": {
        source: \\"iana\\"
      },
      \\"application/tzif-leap\\": {
        source: \\"iana\\"
      },
      \\"application/ubjson\\": {
        compressible: false,
        extensions: [\\"ubj\\"]
      },
      \\"application/ulpfec\\": {
        source: \\"iana\\"
      },
      \\"application/urc-grpsheet+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/urc-ressheet+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"rsheet\\"]
      },
      \\"application/urc-targetdesc+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"td\\"]
      },
      \\"application/urc-uisocketdesc+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vcard+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vcard+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vemmi\\": {
        source: \\"iana\\"
      },
      \\"application/vividence.scriptfile\\": {
        source: \\"apache\\"
      },
      \\"application/vnd.1000minds.decision-model+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"1km\\"]
      },
      \\"application/vnd.3gpp-prose+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp-prose-pc3ch+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp-v2x-local-service-information\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.3gpp.5gnas\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.3gpp.access-transfer-events+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.bsf+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.gmop+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.gtpc\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.3gpp.interworking-data\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.3gpp.lpp\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.3gpp.mc-signalling-ear\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.3gpp.mcdata-affiliation-command+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcdata-info+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcdata-payload\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.3gpp.mcdata-service-config+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcdata-signalling\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.3gpp.mcdata-ue-config+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcdata-user-profile+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcptt-affiliation-command+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcptt-floor-request+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcptt-info+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcptt-location-info+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcptt-mbms-usage-info+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcptt-service-config+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcptt-signed+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcptt-ue-config+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcptt-ue-init-config+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcptt-user-profile+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcvideo-affiliation-command+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcvideo-affiliation-info+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcvideo-info+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcvideo-location-info+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcvideo-mbms-usage-info+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcvideo-service-config+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcvideo-transmission-request+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcvideo-ue-config+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcvideo-user-profile+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mid-call+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.ngap\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.3gpp.pfcp\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.3gpp.pic-bw-large\\": {
        source: \\"iana\\",
        extensions: [\\"plb\\"]
      },
      \\"application/vnd.3gpp.pic-bw-small\\": {
        source: \\"iana\\",
        extensions: [\\"psb\\"]
      },
      \\"application/vnd.3gpp.pic-bw-var\\": {
        source: \\"iana\\",
        extensions: [\\"pvb\\"]
      },
      \\"application/vnd.3gpp.s1ap\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.3gpp.sms\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.3gpp.sms+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.srvcc-ext+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.srvcc-info+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.state-and-event-info+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.ussd+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp2.bcmcsinfo+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp2.sms\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.3gpp2.tcap\\": {
        source: \\"iana\\",
        extensions: [\\"tcap\\"]
      },
      \\"application/vnd.3lightssoftware.imagescal\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.3m.post-it-notes\\": {
        source: \\"iana\\",
        extensions: [\\"pwn\\"]
      },
      \\"application/vnd.accpac.simply.aso\\": {
        source: \\"iana\\",
        extensions: [\\"aso\\"]
      },
      \\"application/vnd.accpac.simply.imp\\": {
        source: \\"iana\\",
        extensions: [\\"imp\\"]
      },
      \\"application/vnd.acucobol\\": {
        source: \\"iana\\",
        extensions: [\\"acu\\"]
      },
      \\"application/vnd.acucorp\\": {
        source: \\"iana\\",
        extensions: [\\"atc\\", \\"acutc\\"]
      },
      \\"application/vnd.adobe.air-application-installer-package+zip\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"air\\"]
      },
      \\"application/vnd.adobe.flash.movie\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.adobe.formscentral.fcdt\\": {
        source: \\"iana\\",
        extensions: [\\"fcdt\\"]
      },
      \\"application/vnd.adobe.fxp\\": {
        source: \\"iana\\",
        extensions: [\\"fxp\\", \\"fxpl\\"]
      },
      \\"application/vnd.adobe.partial-upload\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.adobe.xdp+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xdp\\"]
      },
      \\"application/vnd.adobe.xfdf\\": {
        source: \\"iana\\",
        extensions: [\\"xfdf\\"]
      },
      \\"application/vnd.aether.imp\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.afpc.afplinedata\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.afpc.afplinedata-pagedef\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.afpc.cmoca-cmresource\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.afpc.foca-charset\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.afpc.foca-codedfont\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.afpc.foca-codepage\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.afpc.modca\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.afpc.modca-cmtable\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.afpc.modca-formdef\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.afpc.modca-mediummap\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.afpc.modca-objectcontainer\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.afpc.modca-overlay\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.afpc.modca-pagesegment\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.age\\": {
        source: \\"iana\\",
        extensions: [\\"age\\"]
      },
      \\"application/vnd.ah-barcode\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ahead.space\\": {
        source: \\"iana\\",
        extensions: [\\"ahead\\"]
      },
      \\"application/vnd.airzip.filesecure.azf\\": {
        source: \\"iana\\",
        extensions: [\\"azf\\"]
      },
      \\"application/vnd.airzip.filesecure.azs\\": {
        source: \\"iana\\",
        extensions: [\\"azs\\"]
      },
      \\"application/vnd.amadeus+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.amazon.ebook\\": {
        source: \\"apache\\",
        extensions: [\\"azw\\"]
      },
      \\"application/vnd.amazon.mobi8-ebook\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.americandynamics.acc\\": {
        source: \\"iana\\",
        extensions: [\\"acc\\"]
      },
      \\"application/vnd.amiga.ami\\": {
        source: \\"iana\\",
        extensions: [\\"ami\\"]
      },
      \\"application/vnd.amundsen.maze+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.android.ota\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.android.package-archive\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"apk\\"]
      },
      \\"application/vnd.anki\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.anser-web-certificate-issue-initiation\\": {
        source: \\"iana\\",
        extensions: [\\"cii\\"]
      },
      \\"application/vnd.anser-web-funds-transfer-initiation\\": {
        source: \\"apache\\",
        extensions: [\\"fti\\"]
      },
      \\"application/vnd.antix.game-component\\": {
        source: \\"iana\\",
        extensions: [\\"atx\\"]
      },
      \\"application/vnd.apache.arrow.file\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.apache.arrow.stream\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.apache.thrift.binary\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.apache.thrift.compact\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.apache.thrift.json\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.api+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.aplextor.warrp+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.apothekende.reservation+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.apple.installer+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"mpkg\\"]
      },
      \\"application/vnd.apple.keynote\\": {
        source: \\"iana\\",
        extensions: [\\"key\\"]
      },
      \\"application/vnd.apple.mpegurl\\": {
        source: \\"iana\\",
        extensions: [\\"m3u8\\"]
      },
      \\"application/vnd.apple.numbers\\": {
        source: \\"iana\\",
        extensions: [\\"numbers\\"]
      },
      \\"application/vnd.apple.pages\\": {
        source: \\"iana\\",
        extensions: [\\"pages\\"]
      },
      \\"application/vnd.apple.pkpass\\": {
        compressible: false,
        extensions: [\\"pkpass\\"]
      },
      \\"application/vnd.arastra.swi\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.aristanetworks.swi\\": {
        source: \\"iana\\",
        extensions: [\\"swi\\"]
      },
      \\"application/vnd.artisan+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.artsquare\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.astraea-software.iota\\": {
        source: \\"iana\\",
        extensions: [\\"iota\\"]
      },
      \\"application/vnd.audiograph\\": {
        source: \\"iana\\",
        extensions: [\\"aep\\"]
      },
      \\"application/vnd.autopackage\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.avalon+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.avistar+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.balsamiq.bmml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"bmml\\"]
      },
      \\"application/vnd.balsamiq.bmpr\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.banana-accounting\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.bbf.usp.error\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.bbf.usp.msg\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.bbf.usp.msg+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.bekitzur-stech+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.bint.med-content\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.biopax.rdf+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.blink-idb-value-wrapper\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.blueice.multipass\\": {
        source: \\"iana\\",
        extensions: [\\"mpm\\"]
      },
      \\"application/vnd.bluetooth.ep.oob\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.bluetooth.le.oob\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.bmi\\": {
        source: \\"iana\\",
        extensions: [\\"bmi\\"]
      },
      \\"application/vnd.bpf\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.bpf3\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.businessobjects\\": {
        source: \\"iana\\",
        extensions: [\\"rep\\"]
      },
      \\"application/vnd.byu.uapi+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.cab-jscript\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.canon-cpdl\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.canon-lips\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.capasystems-pg+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.cendio.thinlinc.clientconf\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.century-systems.tcp_stream\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.chemdraw+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"cdxml\\"]
      },
      \\"application/vnd.chess-pgn\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.chipnuts.karaoke-mmd\\": {
        source: \\"iana\\",
        extensions: [\\"mmd\\"]
      },
      \\"application/vnd.ciedi\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.cinderella\\": {
        source: \\"iana\\",
        extensions: [\\"cdy\\"]
      },
      \\"application/vnd.cirpack.isdn-ext\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.citationstyles.style+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"csl\\"]
      },
      \\"application/vnd.claymore\\": {
        source: \\"iana\\",
        extensions: [\\"cla\\"]
      },
      \\"application/vnd.cloanto.rp9\\": {
        source: \\"iana\\",
        extensions: [\\"rp9\\"]
      },
      \\"application/vnd.clonk.c4group\\": {
        source: \\"iana\\",
        extensions: [\\"c4g\\", \\"c4d\\", \\"c4f\\", \\"c4p\\", \\"c4u\\"]
      },
      \\"application/vnd.cluetrust.cartomobile-config\\": {
        source: \\"iana\\",
        extensions: [\\"c11amc\\"]
      },
      \\"application/vnd.cluetrust.cartomobile-config-pkg\\": {
        source: \\"iana\\",
        extensions: [\\"c11amz\\"]
      },
      \\"application/vnd.coffeescript\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.collabio.xodocuments.document\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.collabio.xodocuments.document-template\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.collabio.xodocuments.presentation\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.collabio.xodocuments.presentation-template\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.collabio.xodocuments.spreadsheet\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.collabio.xodocuments.spreadsheet-template\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.collection+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.collection.doc+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.collection.next+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.comicbook+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/vnd.comicbook-rar\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.commerce-battelle\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.commonspace\\": {
        source: \\"iana\\",
        extensions: [\\"csp\\"]
      },
      \\"application/vnd.contact.cmsg\\": {
        source: \\"iana\\",
        extensions: [\\"cdbcmsg\\"]
      },
      \\"application/vnd.coreos.ignition+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.cosmocaller\\": {
        source: \\"iana\\",
        extensions: [\\"cmc\\"]
      },
      \\"application/vnd.crick.clicker\\": {
        source: \\"iana\\",
        extensions: [\\"clkx\\"]
      },
      \\"application/vnd.crick.clicker.keyboard\\": {
        source: \\"iana\\",
        extensions: [\\"clkk\\"]
      },
      \\"application/vnd.crick.clicker.palette\\": {
        source: \\"iana\\",
        extensions: [\\"clkp\\"]
      },
      \\"application/vnd.crick.clicker.template\\": {
        source: \\"iana\\",
        extensions: [\\"clkt\\"]
      },
      \\"application/vnd.crick.clicker.wordbank\\": {
        source: \\"iana\\",
        extensions: [\\"clkw\\"]
      },
      \\"application/vnd.criticaltools.wbs+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"wbs\\"]
      },
      \\"application/vnd.cryptii.pipe+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.crypto-shade-file\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.cryptomator.encrypted\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.cryptomator.vault\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ctc-posml\\": {
        source: \\"iana\\",
        extensions: [\\"pml\\"]
      },
      \\"application/vnd.ctct.ws+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.cups-pdf\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.cups-postscript\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.cups-ppd\\": {
        source: \\"iana\\",
        extensions: [\\"ppd\\"]
      },
      \\"application/vnd.cups-raster\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.cups-raw\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.curl\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.curl.car\\": {
        source: \\"apache\\",
        extensions: [\\"car\\"]
      },
      \\"application/vnd.curl.pcurl\\": {
        source: \\"apache\\",
        extensions: [\\"pcurl\\"]
      },
      \\"application/vnd.cyan.dean.root+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.cybank\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.cyclonedx+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.cyclonedx+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.d2l.coursepackage1p0+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/vnd.d3m-dataset\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.d3m-problem\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dart\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"dart\\"]
      },
      \\"application/vnd.data-vision.rdz\\": {
        source: \\"iana\\",
        extensions: [\\"rdz\\"]
      },
      \\"application/vnd.datapackage+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.dataresource+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.dbf\\": {
        source: \\"iana\\",
        extensions: [\\"dbf\\"]
      },
      \\"application/vnd.debian.binary-package\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dece.data\\": {
        source: \\"iana\\",
        extensions: [\\"uvf\\", \\"uvvf\\", \\"uvd\\", \\"uvvd\\"]
      },
      \\"application/vnd.dece.ttml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"uvt\\", \\"uvvt\\"]
      },
      \\"application/vnd.dece.unspecified\\": {
        source: \\"iana\\",
        extensions: [\\"uvx\\", \\"uvvx\\"]
      },
      \\"application/vnd.dece.zip\\": {
        source: \\"iana\\",
        extensions: [\\"uvz\\", \\"uvvz\\"]
      },
      \\"application/vnd.denovo.fcselayout-link\\": {
        source: \\"iana\\",
        extensions: [\\"fe_launch\\"]
      },
      \\"application/vnd.desmume.movie\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dir-bi.plate-dl-nosuffix\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dm.delegation+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.dna\\": {
        source: \\"iana\\",
        extensions: [\\"dna\\"]
      },
      \\"application/vnd.document+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.dolby.mlp\\": {
        source: \\"apache\\",
        extensions: [\\"mlp\\"]
      },
      \\"application/vnd.dolby.mobile.1\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dolby.mobile.2\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.doremir.scorecloud-binary-document\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dpgraph\\": {
        source: \\"iana\\",
        extensions: [\\"dpg\\"]
      },
      \\"application/vnd.dreamfactory\\": {
        source: \\"iana\\",
        extensions: [\\"dfac\\"]
      },
      \\"application/vnd.drive+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.ds-keypoint\\": {
        source: \\"apache\\",
        extensions: [\\"kpxx\\"]
      },
      \\"application/vnd.dtg.local\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dtg.local.flash\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dtg.local.html\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dvb.ait\\": {
        source: \\"iana\\",
        extensions: [\\"ait\\"]
      },
      \\"application/vnd.dvb.dvbisl+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.dvb.dvbj\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dvb.esgcontainer\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dvb.ipdcdftnotifaccess\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dvb.ipdcesgaccess\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dvb.ipdcesgaccess2\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dvb.ipdcesgpdd\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dvb.ipdcroaming\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dvb.iptv.alfec-base\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dvb.iptv.alfec-enhancement\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dvb.notif-aggregate-root+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.dvb.notif-container+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.dvb.notif-generic+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.dvb.notif-ia-msglist+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.dvb.notif-ia-registration-request+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.dvb.notif-ia-registration-response+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.dvb.notif-init+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.dvb.pfr\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dvb.service\\": {
        source: \\"iana\\",
        extensions: [\\"svc\\"]
      },
      \\"application/vnd.dxr\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dynageo\\": {
        source: \\"iana\\",
        extensions: [\\"geo\\"]
      },
      \\"application/vnd.dzr\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.easykaraoke.cdgdownload\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ecdis-update\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ecip.rlp\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.eclipse.ditto+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.ecowin.chart\\": {
        source: \\"iana\\",
        extensions: [\\"mag\\"]
      },
      \\"application/vnd.ecowin.filerequest\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ecowin.fileupdate\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ecowin.series\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ecowin.seriesrequest\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ecowin.seriesupdate\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.efi.img\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.efi.iso\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.emclient.accessrequest+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.enliven\\": {
        source: \\"iana\\",
        extensions: [\\"nml\\"]
      },
      \\"application/vnd.enphase.envoy\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.eprints.data+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.epson.esf\\": {
        source: \\"iana\\",
        extensions: [\\"esf\\"]
      },
      \\"application/vnd.epson.msf\\": {
        source: \\"iana\\",
        extensions: [\\"msf\\"]
      },
      \\"application/vnd.epson.quickanime\\": {
        source: \\"iana\\",
        extensions: [\\"qam\\"]
      },
      \\"application/vnd.epson.salt\\": {
        source: \\"iana\\",
        extensions: [\\"slt\\"]
      },
      \\"application/vnd.epson.ssf\\": {
        source: \\"iana\\",
        extensions: [\\"ssf\\"]
      },
      \\"application/vnd.ericsson.quickcall\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.espass-espass+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/vnd.eszigno3+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"es3\\", \\"et3\\"]
      },
      \\"application/vnd.etsi.aoc+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.asic-e+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/vnd.etsi.asic-s+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/vnd.etsi.cug+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.iptvcommand+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.iptvdiscovery+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.iptvprofile+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.iptvsad-bc+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.iptvsad-cod+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.iptvsad-npvr+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.iptvservice+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.iptvsync+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.iptvueprofile+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.mcid+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.mheg5\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.etsi.overload-control-policy-dataset+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.pstn+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.sci+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.simservs+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.timestamp-token\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.etsi.tsl+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.tsl.der\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.eu.kasparian.car+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.eudora.data\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.evolv.ecig.profile\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.evolv.ecig.settings\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.evolv.ecig.theme\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.exstream-empower+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/vnd.exstream-package\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ezpix-album\\": {
        source: \\"iana\\",
        extensions: [\\"ez2\\"]
      },
      \\"application/vnd.ezpix-package\\": {
        source: \\"iana\\",
        extensions: [\\"ez3\\"]
      },
      \\"application/vnd.f-secure.mobile\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.familysearch.gedcom+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/vnd.fastcopy-disk-image\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.fdf\\": {
        source: \\"iana\\",
        extensions: [\\"fdf\\"]
      },
      \\"application/vnd.fdsn.mseed\\": {
        source: \\"iana\\",
        extensions: [\\"mseed\\"]
      },
      \\"application/vnd.fdsn.seed\\": {
        source: \\"iana\\",
        extensions: [\\"seed\\", \\"dataless\\"]
      },
      \\"application/vnd.ffsns\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ficlab.flb+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/vnd.filmit.zfc\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.fints\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.firemonkeys.cloudcell\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.flographit\\": {
        source: \\"iana\\",
        extensions: [\\"gph\\"]
      },
      \\"application/vnd.fluxtime.clip\\": {
        source: \\"iana\\",
        extensions: [\\"ftc\\"]
      },
      \\"application/vnd.font-fontforge-sfd\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.framemaker\\": {
        source: \\"iana\\",
        extensions: [\\"fm\\", \\"frame\\", \\"maker\\", \\"book\\"]
      },
      \\"application/vnd.frogans.fnc\\": {
        source: \\"iana\\",
        extensions: [\\"fnc\\"]
      },
      \\"application/vnd.frogans.ltf\\": {
        source: \\"iana\\",
        extensions: [\\"ltf\\"]
      },
      \\"application/vnd.fsc.weblaunch\\": {
        source: \\"iana\\",
        extensions: [\\"fsc\\"]
      },
      \\"application/vnd.fujifilm.fb.docuworks\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.fujifilm.fb.docuworks.binder\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.fujifilm.fb.docuworks.container\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.fujifilm.fb.jfi+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.fujitsu.oasys\\": {
        source: \\"iana\\",
        extensions: [\\"oas\\"]
      },
      \\"application/vnd.fujitsu.oasys2\\": {
        source: \\"iana\\",
        extensions: [\\"oa2\\"]
      },
      \\"application/vnd.fujitsu.oasys3\\": {
        source: \\"iana\\",
        extensions: [\\"oa3\\"]
      },
      \\"application/vnd.fujitsu.oasysgp\\": {
        source: \\"iana\\",
        extensions: [\\"fg5\\"]
      },
      \\"application/vnd.fujitsu.oasysprs\\": {
        source: \\"iana\\",
        extensions: [\\"bh2\\"]
      },
      \\"application/vnd.fujixerox.art-ex\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.fujixerox.art4\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.fujixerox.ddd\\": {
        source: \\"iana\\",
        extensions: [\\"ddd\\"]
      },
      \\"application/vnd.fujixerox.docuworks\\": {
        source: \\"iana\\",
        extensions: [\\"xdw\\"]
      },
      \\"application/vnd.fujixerox.docuworks.binder\\": {
        source: \\"iana\\",
        extensions: [\\"xbd\\"]
      },
      \\"application/vnd.fujixerox.docuworks.container\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.fujixerox.hbpl\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.fut-misnet\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.futoin+cbor\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.futoin+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.fuzzysheet\\": {
        source: \\"iana\\",
        extensions: [\\"fzs\\"]
      },
      \\"application/vnd.genomatix.tuxedo\\": {
        source: \\"iana\\",
        extensions: [\\"txd\\"]
      },
      \\"application/vnd.gentics.grd+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.geo+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.geocube+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.geogebra.file\\": {
        source: \\"iana\\",
        extensions: [\\"ggb\\"]
      },
      \\"application/vnd.geogebra.slides\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.geogebra.tool\\": {
        source: \\"iana\\",
        extensions: [\\"ggt\\"]
      },
      \\"application/vnd.geometry-explorer\\": {
        source: \\"iana\\",
        extensions: [\\"gex\\", \\"gre\\"]
      },
      \\"application/vnd.geonext\\": {
        source: \\"iana\\",
        extensions: [\\"gxt\\"]
      },
      \\"application/vnd.geoplan\\": {
        source: \\"iana\\",
        extensions: [\\"g2w\\"]
      },
      \\"application/vnd.geospace\\": {
        source: \\"iana\\",
        extensions: [\\"g3w\\"]
      },
      \\"application/vnd.gerber\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.globalplatform.card-content-mgt\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.globalplatform.card-content-mgt-response\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.gmx\\": {
        source: \\"iana\\",
        extensions: [\\"gmx\\"]
      },
      \\"application/vnd.google-apps.document\\": {
        compressible: false,
        extensions: [\\"gdoc\\"]
      },
      \\"application/vnd.google-apps.presentation\\": {
        compressible: false,
        extensions: [\\"gslides\\"]
      },
      \\"application/vnd.google-apps.spreadsheet\\": {
        compressible: false,
        extensions: [\\"gsheet\\"]
      },
      \\"application/vnd.google-earth.kml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"kml\\"]
      },
      \\"application/vnd.google-earth.kmz\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"kmz\\"]
      },
      \\"application/vnd.gov.sk.e-form+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.gov.sk.e-form+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/vnd.gov.sk.xmldatacontainer+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.grafeq\\": {
        source: \\"iana\\",
        extensions: [\\"gqf\\", \\"gqs\\"]
      },
      \\"application/vnd.gridmp\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.groove-account\\": {
        source: \\"iana\\",
        extensions: [\\"gac\\"]
      },
      \\"application/vnd.groove-help\\": {
        source: \\"iana\\",
        extensions: [\\"ghf\\"]
      },
      \\"application/vnd.groove-identity-message\\": {
        source: \\"iana\\",
        extensions: [\\"gim\\"]
      },
      \\"application/vnd.groove-injector\\": {
        source: \\"iana\\",
        extensions: [\\"grv\\"]
      },
      \\"application/vnd.groove-tool-message\\": {
        source: \\"iana\\",
        extensions: [\\"gtm\\"]
      },
      \\"application/vnd.groove-tool-template\\": {
        source: \\"iana\\",
        extensions: [\\"tpl\\"]
      },
      \\"application/vnd.groove-vcard\\": {
        source: \\"iana\\",
        extensions: [\\"vcg\\"]
      },
      \\"application/vnd.hal+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.hal+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"hal\\"]
      },
      \\"application/vnd.handheld-entertainment+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"zmm\\"]
      },
      \\"application/vnd.hbci\\": {
        source: \\"iana\\",
        extensions: [\\"hbci\\"]
      },
      \\"application/vnd.hc+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.hcl-bireports\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.hdt\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.heroku+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.hhe.lesson-player\\": {
        source: \\"iana\\",
        extensions: [\\"les\\"]
      },
      \\"application/vnd.hl7cda+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/vnd.hl7v2+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/vnd.hp-hpgl\\": {
        source: \\"iana\\",
        extensions: [\\"hpgl\\"]
      },
      \\"application/vnd.hp-hpid\\": {
        source: \\"iana\\",
        extensions: [\\"hpid\\"]
      },
      \\"application/vnd.hp-hps\\": {
        source: \\"iana\\",
        extensions: [\\"hps\\"]
      },
      \\"application/vnd.hp-jlyt\\": {
        source: \\"iana\\",
        extensions: [\\"jlt\\"]
      },
      \\"application/vnd.hp-pcl\\": {
        source: \\"iana\\",
        extensions: [\\"pcl\\"]
      },
      \\"application/vnd.hp-pclxl\\": {
        source: \\"iana\\",
        extensions: [\\"pclxl\\"]
      },
      \\"application/vnd.httphone\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.hydrostatix.sof-data\\": {
        source: \\"iana\\",
        extensions: [\\"sfd-hdstx\\"]
      },
      \\"application/vnd.hyper+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.hyper-item+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.hyperdrive+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.hzn-3d-crossword\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ibm.afplinedata\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ibm.electronic-media\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ibm.minipay\\": {
        source: \\"iana\\",
        extensions: [\\"mpy\\"]
      },
      \\"application/vnd.ibm.modcap\\": {
        source: \\"iana\\",
        extensions: [\\"afp\\", \\"listafp\\", \\"list3820\\"]
      },
      \\"application/vnd.ibm.rights-management\\": {
        source: \\"iana\\",
        extensions: [\\"irm\\"]
      },
      \\"application/vnd.ibm.secure-container\\": {
        source: \\"iana\\",
        extensions: [\\"sc\\"]
      },
      \\"application/vnd.iccprofile\\": {
        source: \\"iana\\",
        extensions: [\\"icc\\", \\"icm\\"]
      },
      \\"application/vnd.ieee.1905\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.igloader\\": {
        source: \\"iana\\",
        extensions: [\\"igl\\"]
      },
      \\"application/vnd.imagemeter.folder+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/vnd.imagemeter.image+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/vnd.immervision-ivp\\": {
        source: \\"iana\\",
        extensions: [\\"ivp\\"]
      },
      \\"application/vnd.immervision-ivu\\": {
        source: \\"iana\\",
        extensions: [\\"ivu\\"]
      },
      \\"application/vnd.ims.imsccv1p1\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ims.imsccv1p2\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ims.imsccv1p3\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ims.lis.v2.result+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.ims.lti.v2.toolconsumerprofile+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.ims.lti.v2.toolproxy+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.ims.lti.v2.toolproxy.id+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.ims.lti.v2.toolsettings+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.ims.lti.v2.toolsettings.simple+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.informedcontrol.rms+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.informix-visionary\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.infotech.project\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.infotech.project+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.innopath.wamp.notification\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.insors.igm\\": {
        source: \\"iana\\",
        extensions: [\\"igm\\"]
      },
      \\"application/vnd.intercon.formnet\\": {
        source: \\"iana\\",
        extensions: [\\"xpw\\", \\"xpx\\"]
      },
      \\"application/vnd.intergeo\\": {
        source: \\"iana\\",
        extensions: [\\"i2g\\"]
      },
      \\"application/vnd.intertrust.digibox\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.intertrust.nncp\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.intu.qbo\\": {
        source: \\"iana\\",
        extensions: [\\"qbo\\"]
      },
      \\"application/vnd.intu.qfx\\": {
        source: \\"iana\\",
        extensions: [\\"qfx\\"]
      },
      \\"application/vnd.iptc.g2.catalogitem+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.iptc.g2.conceptitem+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.iptc.g2.knowledgeitem+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.iptc.g2.newsitem+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.iptc.g2.newsmessage+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.iptc.g2.packageitem+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.iptc.g2.planningitem+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.ipunplugged.rcprofile\\": {
        source: \\"iana\\",
        extensions: [\\"rcprofile\\"]
      },
      \\"application/vnd.irepository.package+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"irp\\"]
      },
      \\"application/vnd.is-xpr\\": {
        source: \\"iana\\",
        extensions: [\\"xpr\\"]
      },
      \\"application/vnd.isac.fcs\\": {
        source: \\"iana\\",
        extensions: [\\"fcs\\"]
      },
      \\"application/vnd.iso11783-10+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/vnd.jam\\": {
        source: \\"iana\\",
        extensions: [\\"jam\\"]
      },
      \\"application/vnd.japannet-directory-service\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.japannet-jpnstore-wakeup\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.japannet-payment-wakeup\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.japannet-registration\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.japannet-registration-wakeup\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.japannet-setstore-wakeup\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.japannet-verification\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.japannet-verification-wakeup\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.jcp.javame.midlet-rms\\": {
        source: \\"iana\\",
        extensions: [\\"rms\\"]
      },
      \\"application/vnd.jisp\\": {
        source: \\"iana\\",
        extensions: [\\"jisp\\"]
      },
      \\"application/vnd.joost.joda-archive\\": {
        source: \\"iana\\",
        extensions: [\\"joda\\"]
      },
      \\"application/vnd.jsk.isdn-ngn\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.kahootz\\": {
        source: \\"iana\\",
        extensions: [\\"ktz\\", \\"ktr\\"]
      },
      \\"application/vnd.kde.karbon\\": {
        source: \\"iana\\",
        extensions: [\\"karbon\\"]
      },
      \\"application/vnd.kde.kchart\\": {
        source: \\"iana\\",
        extensions: [\\"chrt\\"]
      },
      \\"application/vnd.kde.kformula\\": {
        source: \\"iana\\",
        extensions: [\\"kfo\\"]
      },
      \\"application/vnd.kde.kivio\\": {
        source: \\"iana\\",
        extensions: [\\"flw\\"]
      },
      \\"application/vnd.kde.kontour\\": {
        source: \\"iana\\",
        extensions: [\\"kon\\"]
      },
      \\"application/vnd.kde.kpresenter\\": {
        source: \\"iana\\",
        extensions: [\\"kpr\\", \\"kpt\\"]
      },
      \\"application/vnd.kde.kspread\\": {
        source: \\"iana\\",
        extensions: [\\"ksp\\"]
      },
      \\"application/vnd.kde.kword\\": {
        source: \\"iana\\",
        extensions: [\\"kwd\\", \\"kwt\\"]
      },
      \\"application/vnd.kenameaapp\\": {
        source: \\"iana\\",
        extensions: [\\"htke\\"]
      },
      \\"application/vnd.kidspiration\\": {
        source: \\"iana\\",
        extensions: [\\"kia\\"]
      },
      \\"application/vnd.kinar\\": {
        source: \\"iana\\",
        extensions: [\\"kne\\", \\"knp\\"]
      },
      \\"application/vnd.koan\\": {
        source: \\"iana\\",
        extensions: [\\"skp\\", \\"skd\\", \\"skt\\", \\"skm\\"]
      },
      \\"application/vnd.kodak-descriptor\\": {
        source: \\"iana\\",
        extensions: [\\"sse\\"]
      },
      \\"application/vnd.las\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.las.las+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.las.las+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"lasxml\\"]
      },
      \\"application/vnd.laszip\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.leap+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.liberty-request+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.llamagraphics.life-balance.desktop\\": {
        source: \\"iana\\",
        extensions: [\\"lbd\\"]
      },
      \\"application/vnd.llamagraphics.life-balance.exchange+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"lbe\\"]
      },
      \\"application/vnd.logipipe.circuit+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/vnd.loom\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.lotus-1-2-3\\": {
        source: \\"iana\\",
        extensions: [\\"123\\"]
      },
      \\"application/vnd.lotus-approach\\": {
        source: \\"iana\\",
        extensions: [\\"apr\\"]
      },
      \\"application/vnd.lotus-freelance\\": {
        source: \\"iana\\",
        extensions: [\\"pre\\"]
      },
      \\"application/vnd.lotus-notes\\": {
        source: \\"iana\\",
        extensions: [\\"nsf\\"]
      },
      \\"application/vnd.lotus-organizer\\": {
        source: \\"iana\\",
        extensions: [\\"org\\"]
      },
      \\"application/vnd.lotus-screencam\\": {
        source: \\"iana\\",
        extensions: [\\"scm\\"]
      },
      \\"application/vnd.lotus-wordpro\\": {
        source: \\"iana\\",
        extensions: [\\"lwp\\"]
      },
      \\"application/vnd.macports.portpkg\\": {
        source: \\"iana\\",
        extensions: [\\"portpkg\\"]
      },
      \\"application/vnd.mapbox-vector-tile\\": {
        source: \\"iana\\",
        extensions: [\\"mvt\\"]
      },
      \\"application/vnd.marlin.drm.actiontoken+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.marlin.drm.conftoken+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.marlin.drm.license+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.marlin.drm.mdcf\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.mason+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.maxar.archive.3tz+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/vnd.maxmind.maxmind-db\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.mcd\\": {
        source: \\"iana\\",
        extensions: [\\"mcd\\"]
      },
      \\"application/vnd.medcalcdata\\": {
        source: \\"iana\\",
        extensions: [\\"mc1\\"]
      },
      \\"application/vnd.mediastation.cdkey\\": {
        source: \\"iana\\",
        extensions: [\\"cdkey\\"]
      },
      \\"application/vnd.meridian-slingshot\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.mfer\\": {
        source: \\"iana\\",
        extensions: [\\"mwf\\"]
      },
      \\"application/vnd.mfmp\\": {
        source: \\"iana\\",
        extensions: [\\"mfm\\"]
      },
      \\"application/vnd.micro+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.micrografx.flo\\": {
        source: \\"iana\\",
        extensions: [\\"flo\\"]
      },
      \\"application/vnd.micrografx.igx\\": {
        source: \\"iana\\",
        extensions: [\\"igx\\"]
      },
      \\"application/vnd.microsoft.portable-executable\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.microsoft.windows.thumbnail-cache\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.miele+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.mif\\": {
        source: \\"iana\\",
        extensions: [\\"mif\\"]
      },
      \\"application/vnd.minisoft-hp3000-save\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.mitsubishi.misty-guard.trustweb\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.mobius.daf\\": {
        source: \\"iana\\",
        extensions: [\\"daf\\"]
      },
      \\"application/vnd.mobius.dis\\": {
        source: \\"iana\\",
        extensions: [\\"dis\\"]
      },
      \\"application/vnd.mobius.mbk\\": {
        source: \\"iana\\",
        extensions: [\\"mbk\\"]
      },
      \\"application/vnd.mobius.mqy\\": {
        source: \\"iana\\",
        extensions: [\\"mqy\\"]
      },
      \\"application/vnd.mobius.msl\\": {
        source: \\"iana\\",
        extensions: [\\"msl\\"]
      },
      \\"application/vnd.mobius.plc\\": {
        source: \\"iana\\",
        extensions: [\\"plc\\"]
      },
      \\"application/vnd.mobius.txf\\": {
        source: \\"iana\\",
        extensions: [\\"txf\\"]
      },
      \\"application/vnd.mophun.application\\": {
        source: \\"iana\\",
        extensions: [\\"mpn\\"]
      },
      \\"application/vnd.mophun.certificate\\": {
        source: \\"iana\\",
        extensions: [\\"mpc\\"]
      },
      \\"application/vnd.motorola.flexsuite\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.motorola.flexsuite.adsi\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.motorola.flexsuite.fis\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.motorola.flexsuite.gotap\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.motorola.flexsuite.kmr\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.motorola.flexsuite.ttc\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.motorola.flexsuite.wem\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.motorola.iprm\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.mozilla.xul+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xul\\"]
      },
      \\"application/vnd.ms-3mfdocument\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ms-artgalry\\": {
        source: \\"iana\\",
        extensions: [\\"cil\\"]
      },
      \\"application/vnd.ms-asf\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ms-cab-compressed\\": {
        source: \\"iana\\",
        extensions: [\\"cab\\"]
      },
      \\"application/vnd.ms-color.iccprofile\\": {
        source: \\"apache\\"
      },
      \\"application/vnd.ms-excel\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"xls\\", \\"xlm\\", \\"xla\\", \\"xlc\\", \\"xlt\\", \\"xlw\\"]
      },
      \\"application/vnd.ms-excel.addin.macroenabled.12\\": {
        source: \\"iana\\",
        extensions: [\\"xlam\\"]
      },
      \\"application/vnd.ms-excel.sheet.binary.macroenabled.12\\": {
        source: \\"iana\\",
        extensions: [\\"xlsb\\"]
      },
      \\"application/vnd.ms-excel.sheet.macroenabled.12\\": {
        source: \\"iana\\",
        extensions: [\\"xlsm\\"]
      },
      \\"application/vnd.ms-excel.template.macroenabled.12\\": {
        source: \\"iana\\",
        extensions: [\\"xltm\\"]
      },
      \\"application/vnd.ms-fontobject\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"eot\\"]
      },
      \\"application/vnd.ms-htmlhelp\\": {
        source: \\"iana\\",
        extensions: [\\"chm\\"]
      },
      \\"application/vnd.ms-ims\\": {
        source: \\"iana\\",
        extensions: [\\"ims\\"]
      },
      \\"application/vnd.ms-lrm\\": {
        source: \\"iana\\",
        extensions: [\\"lrm\\"]
      },
      \\"application/vnd.ms-office.activex+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.ms-officetheme\\": {
        source: \\"iana\\",
        extensions: [\\"thmx\\"]
      },
      \\"application/vnd.ms-opentype\\": {
        source: \\"apache\\",
        compressible: true
      },
      \\"application/vnd.ms-outlook\\": {
        compressible: false,
        extensions: [\\"msg\\"]
      },
      \\"application/vnd.ms-package.obfuscated-opentype\\": {
        source: \\"apache\\"
      },
      \\"application/vnd.ms-pki.seccat\\": {
        source: \\"apache\\",
        extensions: [\\"cat\\"]
      },
      \\"application/vnd.ms-pki.stl\\": {
        source: \\"apache\\",
        extensions: [\\"stl\\"]
      },
      \\"application/vnd.ms-playready.initiator+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.ms-powerpoint\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"ppt\\", \\"pps\\", \\"pot\\"]
      },
      \\"application/vnd.ms-powerpoint.addin.macroenabled.12\\": {
        source: \\"iana\\",
        extensions: [\\"ppam\\"]
      },
      \\"application/vnd.ms-powerpoint.presentation.macroenabled.12\\": {
        source: \\"iana\\",
        extensions: [\\"pptm\\"]
      },
      \\"application/vnd.ms-powerpoint.slide.macroenabled.12\\": {
        source: \\"iana\\",
        extensions: [\\"sldm\\"]
      },
      \\"application/vnd.ms-powerpoint.slideshow.macroenabled.12\\": {
        source: \\"iana\\",
        extensions: [\\"ppsm\\"]
      },
      \\"application/vnd.ms-powerpoint.template.macroenabled.12\\": {
        source: \\"iana\\",
        extensions: [\\"potm\\"]
      },
      \\"application/vnd.ms-printdevicecapabilities+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.ms-printing.printticket+xml\\": {
        source: \\"apache\\",
        compressible: true
      },
      \\"application/vnd.ms-printschematicket+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.ms-project\\": {
        source: \\"iana\\",
        extensions: [\\"mpp\\", \\"mpt\\"]
      },
      \\"application/vnd.ms-tnef\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ms-windows.devicepairing\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ms-windows.nwprinting.oob\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ms-windows.printerpairing\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ms-windows.wsd.oob\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ms-wmdrm.lic-chlg-req\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ms-wmdrm.lic-resp\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ms-wmdrm.meter-chlg-req\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ms-wmdrm.meter-resp\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ms-word.document.macroenabled.12\\": {
        source: \\"iana\\",
        extensions: [\\"docm\\"]
      },
      \\"application/vnd.ms-word.template.macroenabled.12\\": {
        source: \\"iana\\",
        extensions: [\\"dotm\\"]
      },
      \\"application/vnd.ms-works\\": {
        source: \\"iana\\",
        extensions: [\\"wps\\", \\"wks\\", \\"wcm\\", \\"wdb\\"]
      },
      \\"application/vnd.ms-wpl\\": {
        source: \\"iana\\",
        extensions: [\\"wpl\\"]
      },
      \\"application/vnd.ms-xpsdocument\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"xps\\"]
      },
      \\"application/vnd.msa-disk-image\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.mseq\\": {
        source: \\"iana\\",
        extensions: [\\"mseq\\"]
      },
      \\"application/vnd.msign\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.multiad.creator\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.multiad.creator.cif\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.music-niff\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.musician\\": {
        source: \\"iana\\",
        extensions: [\\"mus\\"]
      },
      \\"application/vnd.muvee.style\\": {
        source: \\"iana\\",
        extensions: [\\"msty\\"]
      },
      \\"application/vnd.mynfc\\": {
        source: \\"iana\\",
        extensions: [\\"taglet\\"]
      },
      \\"application/vnd.nacamar.ybrid+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.ncd.control\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ncd.reference\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.nearst.inv+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.nebumind.line\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.nervana\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.netfpx\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.neurolanguage.nlu\\": {
        source: \\"iana\\",
        extensions: [\\"nlu\\"]
      },
      \\"application/vnd.nimn\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.nintendo.nitro.rom\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.nintendo.snes.rom\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.nitf\\": {
        source: \\"iana\\",
        extensions: [\\"ntf\\", \\"nitf\\"]
      },
      \\"application/vnd.noblenet-directory\\": {
        source: \\"iana\\",
        extensions: [\\"nnd\\"]
      },
      \\"application/vnd.noblenet-sealer\\": {
        source: \\"iana\\",
        extensions: [\\"nns\\"]
      },
      \\"application/vnd.noblenet-web\\": {
        source: \\"iana\\",
        extensions: [\\"nnw\\"]
      },
      \\"application/vnd.nokia.catalogs\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.nokia.conml+wbxml\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.nokia.conml+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.nokia.iptv.config+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.nokia.isds-radio-presets\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.nokia.landmark+wbxml\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.nokia.landmark+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.nokia.landmarkcollection+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.nokia.n-gage.ac+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"ac\\"]
      },
      \\"application/vnd.nokia.n-gage.data\\": {
        source: \\"iana\\",
        extensions: [\\"ngdat\\"]
      },
      \\"application/vnd.nokia.n-gage.symbian.install\\": {
        source: \\"iana\\",
        extensions: [\\"n-gage\\"]
      },
      \\"application/vnd.nokia.ncd\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.nokia.pcd+wbxml\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.nokia.pcd+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.nokia.radio-preset\\": {
        source: \\"iana\\",
        extensions: [\\"rpst\\"]
      },
      \\"application/vnd.nokia.radio-presets\\": {
        source: \\"iana\\",
        extensions: [\\"rpss\\"]
      },
      \\"application/vnd.novadigm.edm\\": {
        source: \\"iana\\",
        extensions: [\\"edm\\"]
      },
      \\"application/vnd.novadigm.edx\\": {
        source: \\"iana\\",
        extensions: [\\"edx\\"]
      },
      \\"application/vnd.novadigm.ext\\": {
        source: \\"iana\\",
        extensions: [\\"ext\\"]
      },
      \\"application/vnd.ntt-local.content-share\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ntt-local.file-transfer\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ntt-local.ogw_remote-access\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ntt-local.sip-ta_remote\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ntt-local.sip-ta_tcp_stream\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oasis.opendocument.chart\\": {
        source: \\"iana\\",
        extensions: [\\"odc\\"]
      },
      \\"application/vnd.oasis.opendocument.chart-template\\": {
        source: \\"iana\\",
        extensions: [\\"otc\\"]
      },
      \\"application/vnd.oasis.opendocument.database\\": {
        source: \\"iana\\",
        extensions: [\\"odb\\"]
      },
      \\"application/vnd.oasis.opendocument.formula\\": {
        source: \\"iana\\",
        extensions: [\\"odf\\"]
      },
      \\"application/vnd.oasis.opendocument.formula-template\\": {
        source: \\"iana\\",
        extensions: [\\"odft\\"]
      },
      \\"application/vnd.oasis.opendocument.graphics\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"odg\\"]
      },
      \\"application/vnd.oasis.opendocument.graphics-template\\": {
        source: \\"iana\\",
        extensions: [\\"otg\\"]
      },
      \\"application/vnd.oasis.opendocument.image\\": {
        source: \\"iana\\",
        extensions: [\\"odi\\"]
      },
      \\"application/vnd.oasis.opendocument.image-template\\": {
        source: \\"iana\\",
        extensions: [\\"oti\\"]
      },
      \\"application/vnd.oasis.opendocument.presentation\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"odp\\"]
      },
      \\"application/vnd.oasis.opendocument.presentation-template\\": {
        source: \\"iana\\",
        extensions: [\\"otp\\"]
      },
      \\"application/vnd.oasis.opendocument.spreadsheet\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"ods\\"]
      },
      \\"application/vnd.oasis.opendocument.spreadsheet-template\\": {
        source: \\"iana\\",
        extensions: [\\"ots\\"]
      },
      \\"application/vnd.oasis.opendocument.text\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"odt\\"]
      },
      \\"application/vnd.oasis.opendocument.text-master\\": {
        source: \\"iana\\",
        extensions: [\\"odm\\"]
      },
      \\"application/vnd.oasis.opendocument.text-template\\": {
        source: \\"iana\\",
        extensions: [\\"ott\\"]
      },
      \\"application/vnd.oasis.opendocument.text-web\\": {
        source: \\"iana\\",
        extensions: [\\"oth\\"]
      },
      \\"application/vnd.obn\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ocf+cbor\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oci.image.manifest.v1+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oftn.l10n+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oipf.contentaccessdownload+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oipf.contentaccessstreaming+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oipf.cspg-hexbinary\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oipf.dae.svg+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oipf.dae.xhtml+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oipf.mippvcontrolmessage+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oipf.pae.gem\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oipf.spdiscovery+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oipf.spdlist+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oipf.ueprofile+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oipf.userprofile+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.olpc-sugar\\": {
        source: \\"iana\\",
        extensions: [\\"xo\\"]
      },
      \\"application/vnd.oma-scws-config\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oma-scws-http-request\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oma-scws-http-response\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oma.bcast.associated-procedure-parameter+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.bcast.drm-trigger+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.bcast.imd+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.bcast.ltkm\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oma.bcast.notification+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.bcast.provisioningtrigger\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oma.bcast.sgboot\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oma.bcast.sgdd+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.bcast.sgdu\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oma.bcast.simple-symbol-container\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oma.bcast.smartcard-trigger+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.bcast.sprov+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.bcast.stkm\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oma.cab-address-book+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.cab-feature-handler+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.cab-pcc+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.cab-subs-invite+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.cab-user-prefs+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.dcd\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oma.dcdc\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oma.dd2+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"dd2\\"]
      },
      \\"application/vnd.oma.drm.risd+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.group-usage-list+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.lwm2m+cbor\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oma.lwm2m+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.lwm2m+tlv\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oma.pal+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.poc.detailed-progress-report+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.poc.final-report+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.poc.groups+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.poc.invocation-descriptor+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.poc.optimized-progress-report+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.push\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oma.scidm.messages+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.xcap-directory+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.omads-email+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/vnd.omads-file+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/vnd.omads-folder+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/vnd.omaloc-supl-init\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.onepager\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.onepagertamp\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.onepagertamx\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.onepagertat\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.onepagertatp\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.onepagertatx\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.openblox.game+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"obgx\\"]
      },
      \\"application/vnd.openblox.game-binary\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.openeye.oeb\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.openofficeorg.extension\\": {
        source: \\"apache\\",
        extensions: [\\"oxt\\"]
      },
      \\"application/vnd.openstreetmap.data+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"osm\\"]
      },
      \\"application/vnd.opentimestamps.ots\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.openxmlformats-officedocument.custom-properties+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.customxmlproperties+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.drawing+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.drawingml.chart+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.extended-properties+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.comments+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.presentation\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"pptx\\"]
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.slide\\": {
        source: \\"iana\\",
        extensions: [\\"sldx\\"]
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.slide+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.slideshow\\": {
        source: \\"iana\\",
        extensions: [\\"ppsx\\"]
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.tags+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.template\\": {
        source: \\"iana\\",
        extensions: [\\"potx\\"]
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"xlsx\\"]
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.template\\": {
        source: \\"iana\\",
        extensions: [\\"xltx\\"]
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.theme+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.themeoverride+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.vmldrawing\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"docx\\"]
      },
      \\"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.wordprocessingml.template\\": {
        source: \\"iana\\",
        extensions: [\\"dotx\\"]
      },
      \\"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-package.core-properties+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-package.relationships+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oracle.resource+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.orange.indata\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.osa.netdeploy\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.osgeo.mapguide.package\\": {
        source: \\"iana\\",
        extensions: [\\"mgp\\"]
      },
      \\"application/vnd.osgi.bundle\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.osgi.dp\\": {
        source: \\"iana\\",
        extensions: [\\"dp\\"]
      },
      \\"application/vnd.osgi.subsystem\\": {
        source: \\"iana\\",
        extensions: [\\"esa\\"]
      },
      \\"application/vnd.otps.ct-kip+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oxli.countgraph\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.pagerduty+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.palm\\": {
        source: \\"iana\\",
        extensions: [\\"pdb\\", \\"pqa\\", \\"oprc\\"]
      },
      \\"application/vnd.panoply\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.paos.xml\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.patentdive\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.patientecommsdoc\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.pawaafile\\": {
        source: \\"iana\\",
        extensions: [\\"paw\\"]
      },
      \\"application/vnd.pcos\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.pg.format\\": {
        source: \\"iana\\",
        extensions: [\\"str\\"]
      },
      \\"application/vnd.pg.osasli\\": {
        source: \\"iana\\",
        extensions: [\\"ei6\\"]
      },
      \\"application/vnd.piaccess.application-licence\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.picsel\\": {
        source: \\"iana\\",
        extensions: [\\"efif\\"]
      },
      \\"application/vnd.pmi.widget\\": {
        source: \\"iana\\",
        extensions: [\\"wg\\"]
      },
      \\"application/vnd.poc.group-advertisement+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.pocketlearn\\": {
        source: \\"iana\\",
        extensions: [\\"plf\\"]
      },
      \\"application/vnd.powerbuilder6\\": {
        source: \\"iana\\",
        extensions: [\\"pbd\\"]
      },
      \\"application/vnd.powerbuilder6-s\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.powerbuilder7\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.powerbuilder7-s\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.powerbuilder75\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.powerbuilder75-s\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.preminet\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.previewsystems.box\\": {
        source: \\"iana\\",
        extensions: [\\"box\\"]
      },
      \\"application/vnd.proteus.magazine\\": {
        source: \\"iana\\",
        extensions: [\\"mgz\\"]
      },
      \\"application/vnd.psfs\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.publishare-delta-tree\\": {
        source: \\"iana\\",
        extensions: [\\"qps\\"]
      },
      \\"application/vnd.pvi.ptid1\\": {
        source: \\"iana\\",
        extensions: [\\"ptid\\"]
      },
      \\"application/vnd.pwg-multiplexed\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.pwg-xhtml-print+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.qualcomm.brew-app-res\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.quarantainenet\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.quark.quarkxpress\\": {
        source: \\"iana\\",
        extensions: [\\"qxd\\", \\"qxt\\", \\"qwd\\", \\"qwt\\", \\"qxl\\", \\"qxb\\"]
      },
      \\"application/vnd.quobject-quoxdocument\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.radisys.moml+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.radisys.msml+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.radisys.msml-audit+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.radisys.msml-audit-conf+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.radisys.msml-audit-conn+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.radisys.msml-audit-dialog+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.radisys.msml-audit-stream+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.radisys.msml-conf+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.radisys.msml-dialog+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.radisys.msml-dialog-base+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.radisys.msml-dialog-fax-detect+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.radisys.msml-dialog-fax-sendrecv+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.radisys.msml-dialog-group+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.radisys.msml-dialog-speech+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.radisys.msml-dialog-transform+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.rainstor.data\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.rapid\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.rar\\": {
        source: \\"iana\\",
        extensions: [\\"rar\\"]
      },
      \\"application/vnd.realvnc.bed\\": {
        source: \\"iana\\",
        extensions: [\\"bed\\"]
      },
      \\"application/vnd.recordare.musicxml\\": {
        source: \\"iana\\",
        extensions: [\\"mxl\\"]
      },
      \\"application/vnd.recordare.musicxml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"musicxml\\"]
      },
      \\"application/vnd.renlearn.rlprint\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.resilient.logic\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.restful+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.rig.cryptonote\\": {
        source: \\"iana\\",
        extensions: [\\"cryptonote\\"]
      },
      \\"application/vnd.rim.cod\\": {
        source: \\"apache\\",
        extensions: [\\"cod\\"]
      },
      \\"application/vnd.rn-realmedia\\": {
        source: \\"apache\\",
        extensions: [\\"rm\\"]
      },
      \\"application/vnd.rn-realmedia-vbr\\": {
        source: \\"apache\\",
        extensions: [\\"rmvb\\"]
      },
      \\"application/vnd.route66.link66+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"link66\\"]
      },
      \\"application/vnd.rs-274x\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ruckus.download\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.s3sms\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sailingtracker.track\\": {
        source: \\"iana\\",
        extensions: [\\"st\\"]
      },
      \\"application/vnd.sar\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sbm.cid\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sbm.mid2\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.scribus\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sealed.3df\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sealed.csf\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sealed.doc\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sealed.eml\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sealed.mht\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sealed.net\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sealed.ppt\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sealed.tiff\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sealed.xls\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sealedmedia.softseal.html\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sealedmedia.softseal.pdf\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.seemail\\": {
        source: \\"iana\\",
        extensions: [\\"see\\"]
      },
      \\"application/vnd.seis+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.sema\\": {
        source: \\"iana\\",
        extensions: [\\"sema\\"]
      },
      \\"application/vnd.semd\\": {
        source: \\"iana\\",
        extensions: [\\"semd\\"]
      },
      \\"application/vnd.semf\\": {
        source: \\"iana\\",
        extensions: [\\"semf\\"]
      },
      \\"application/vnd.shade-save-file\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.shana.informed.formdata\\": {
        source: \\"iana\\",
        extensions: [\\"ifm\\"]
      },
      \\"application/vnd.shana.informed.formtemplate\\": {
        source: \\"iana\\",
        extensions: [\\"itp\\"]
      },
      \\"application/vnd.shana.informed.interchange\\": {
        source: \\"iana\\",
        extensions: [\\"iif\\"]
      },
      \\"application/vnd.shana.informed.package\\": {
        source: \\"iana\\",
        extensions: [\\"ipk\\"]
      },
      \\"application/vnd.shootproof+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.shopkick+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.shp\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.shx\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sigrok.session\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.simtech-mindmapper\\": {
        source: \\"iana\\",
        extensions: [\\"twd\\", \\"twds\\"]
      },
      \\"application/vnd.siren+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.smaf\\": {
        source: \\"iana\\",
        extensions: [\\"mmf\\"]
      },
      \\"application/vnd.smart.notebook\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.smart.teacher\\": {
        source: \\"iana\\",
        extensions: [\\"teacher\\"]
      },
      \\"application/vnd.snesdev-page-table\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.software602.filler.form+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"fo\\"]
      },
      \\"application/vnd.software602.filler.form-xml-zip\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.solent.sdkm+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"sdkm\\", \\"sdkd\\"]
      },
      \\"application/vnd.spotfire.dxp\\": {
        source: \\"iana\\",
        extensions: [\\"dxp\\"]
      },
      \\"application/vnd.spotfire.sfs\\": {
        source: \\"iana\\",
        extensions: [\\"sfs\\"]
      },
      \\"application/vnd.sqlite3\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sss-cod\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sss-dtf\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sss-ntf\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.stardivision.calc\\": {
        source: \\"apache\\",
        extensions: [\\"sdc\\"]
      },
      \\"application/vnd.stardivision.draw\\": {
        source: \\"apache\\",
        extensions: [\\"sda\\"]
      },
      \\"application/vnd.stardivision.impress\\": {
        source: \\"apache\\",
        extensions: [\\"sdd\\"]
      },
      \\"application/vnd.stardivision.math\\": {
        source: \\"apache\\",
        extensions: [\\"smf\\"]
      },
      \\"application/vnd.stardivision.writer\\": {
        source: \\"apache\\",
        extensions: [\\"sdw\\", \\"vor\\"]
      },
      \\"application/vnd.stardivision.writer-global\\": {
        source: \\"apache\\",
        extensions: [\\"sgl\\"]
      },
      \\"application/vnd.stepmania.package\\": {
        source: \\"iana\\",
        extensions: [\\"smzip\\"]
      },
      \\"application/vnd.stepmania.stepchart\\": {
        source: \\"iana\\",
        extensions: [\\"sm\\"]
      },
      \\"application/vnd.street-stream\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sun.wadl+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"wadl\\"]
      },
      \\"application/vnd.sun.xml.calc\\": {
        source: \\"apache\\",
        extensions: [\\"sxc\\"]
      },
      \\"application/vnd.sun.xml.calc.template\\": {
        source: \\"apache\\",
        extensions: [\\"stc\\"]
      },
      \\"application/vnd.sun.xml.draw\\": {
        source: \\"apache\\",
        extensions: [\\"sxd\\"]
      },
      \\"application/vnd.sun.xml.draw.template\\": {
        source: \\"apache\\",
        extensions: [\\"std\\"]
      },
      \\"application/vnd.sun.xml.impress\\": {
        source: \\"apache\\",
        extensions: [\\"sxi\\"]
      },
      \\"application/vnd.sun.xml.impress.template\\": {
        source: \\"apache\\",
        extensions: [\\"sti\\"]
      },
      \\"application/vnd.sun.xml.math\\": {
        source: \\"apache\\",
        extensions: [\\"sxm\\"]
      },
      \\"application/vnd.sun.xml.writer\\": {
        source: \\"apache\\",
        extensions: [\\"sxw\\"]
      },
      \\"application/vnd.sun.xml.writer.global\\": {
        source: \\"apache\\",
        extensions: [\\"sxg\\"]
      },
      \\"application/vnd.sun.xml.writer.template\\": {
        source: \\"apache\\",
        extensions: [\\"stw\\"]
      },
      \\"application/vnd.sus-calendar\\": {
        source: \\"iana\\",
        extensions: [\\"sus\\", \\"susp\\"]
      },
      \\"application/vnd.svd\\": {
        source: \\"iana\\",
        extensions: [\\"svd\\"]
      },
      \\"application/vnd.swiftview-ics\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sycle+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.syft+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.symbian.install\\": {
        source: \\"apache\\",
        extensions: [\\"sis\\", \\"sisx\\"]
      },
      \\"application/vnd.syncml+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true,
        extensions: [\\"xsm\\"]
      },
      \\"application/vnd.syncml.dm+wbxml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        extensions: [\\"bdm\\"]
      },
      \\"application/vnd.syncml.dm+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true,
        extensions: [\\"xdm\\"]
      },
      \\"application/vnd.syncml.dm.notification\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.syncml.dmddf+wbxml\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.syncml.dmddf+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true,
        extensions: [\\"ddf\\"]
      },
      \\"application/vnd.syncml.dmtnds+wbxml\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.syncml.dmtnds+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/vnd.syncml.ds.notification\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.tableschema+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.tao.intent-module-archive\\": {
        source: \\"iana\\",
        extensions: [\\"tao\\"]
      },
      \\"application/vnd.tcpdump.pcap\\": {
        source: \\"iana\\",
        extensions: [\\"pcap\\", \\"cap\\", \\"dmp\\"]
      },
      \\"application/vnd.think-cell.ppttc+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.tmd.mediaflex.api+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.tml\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.tmobile-livetv\\": {
        source: \\"iana\\",
        extensions: [\\"tmo\\"]
      },
      \\"application/vnd.tri.onesource\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.trid.tpt\\": {
        source: \\"iana\\",
        extensions: [\\"tpt\\"]
      },
      \\"application/vnd.triscape.mxs\\": {
        source: \\"iana\\",
        extensions: [\\"mxs\\"]
      },
      \\"application/vnd.trueapp\\": {
        source: \\"iana\\",
        extensions: [\\"tra\\"]
      },
      \\"application/vnd.truedoc\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ubisoft.webplayer\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ufdl\\": {
        source: \\"iana\\",
        extensions: [\\"ufd\\", \\"ufdl\\"]
      },
      \\"application/vnd.uiq.theme\\": {
        source: \\"iana\\",
        extensions: [\\"utz\\"]
      },
      \\"application/vnd.umajin\\": {
        source: \\"iana\\",
        extensions: [\\"umj\\"]
      },
      \\"application/vnd.unity\\": {
        source: \\"iana\\",
        extensions: [\\"unityweb\\"]
      },
      \\"application/vnd.uoml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"uoml\\"]
      },
      \\"application/vnd.uplanet.alert\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.uplanet.alert-wbxml\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.uplanet.bearer-choice\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.uplanet.bearer-choice-wbxml\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.uplanet.cacheop\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.uplanet.cacheop-wbxml\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.uplanet.channel\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.uplanet.channel-wbxml\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.uplanet.list\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.uplanet.list-wbxml\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.uplanet.listcmd\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.uplanet.listcmd-wbxml\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.uplanet.signal\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.uri-map\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.valve.source.material\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.vcx\\": {
        source: \\"iana\\",
        extensions: [\\"vcx\\"]
      },
      \\"application/vnd.vd-study\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.vectorworks\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.vel+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.verimatrix.vcas\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.veritone.aion+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.veryant.thin\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ves.encrypted\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.vidsoft.vidconference\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.visio\\": {
        source: \\"iana\\",
        extensions: [\\"vsd\\", \\"vst\\", \\"vss\\", \\"vsw\\"]
      },
      \\"application/vnd.visionary\\": {
        source: \\"iana\\",
        extensions: [\\"vis\\"]
      },
      \\"application/vnd.vividence.scriptfile\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.vsf\\": {
        source: \\"iana\\",
        extensions: [\\"vsf\\"]
      },
      \\"application/vnd.wap.sic\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.wap.slc\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.wap.wbxml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        extensions: [\\"wbxml\\"]
      },
      \\"application/vnd.wap.wmlc\\": {
        source: \\"iana\\",
        extensions: [\\"wmlc\\"]
      },
      \\"application/vnd.wap.wmlscriptc\\": {
        source: \\"iana\\",
        extensions: [\\"wmlsc\\"]
      },
      \\"application/vnd.webturbo\\": {
        source: \\"iana\\",
        extensions: [\\"wtb\\"]
      },
      \\"application/vnd.wfa.dpp\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.wfa.p2p\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.wfa.wsc\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.windows.devicepairing\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.wmc\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.wmf.bootstrap\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.wolfram.mathematica\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.wolfram.mathematica.package\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.wolfram.player\\": {
        source: \\"iana\\",
        extensions: [\\"nbp\\"]
      },
      \\"application/vnd.wordperfect\\": {
        source: \\"iana\\",
        extensions: [\\"wpd\\"]
      },
      \\"application/vnd.wqd\\": {
        source: \\"iana\\",
        extensions: [\\"wqd\\"]
      },
      \\"application/vnd.wrq-hp3000-labelled\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.wt.stf\\": {
        source: \\"iana\\",
        extensions: [\\"stf\\"]
      },
      \\"application/vnd.wv.csp+wbxml\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.wv.csp+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.wv.ssp+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.xacml+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.xara\\": {
        source: \\"iana\\",
        extensions: [\\"xar\\"]
      },
      \\"application/vnd.xfdl\\": {
        source: \\"iana\\",
        extensions: [\\"xfdl\\"]
      },
      \\"application/vnd.xfdl.webform\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.xmi+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.xmpie.cpkg\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.xmpie.dpkg\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.xmpie.plan\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.xmpie.ppkg\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.xmpie.xlim\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.yamaha.hv-dic\\": {
        source: \\"iana\\",
        extensions: [\\"hvd\\"]
      },
      \\"application/vnd.yamaha.hv-script\\": {
        source: \\"iana\\",
        extensions: [\\"hvs\\"]
      },
      \\"application/vnd.yamaha.hv-voice\\": {
        source: \\"iana\\",
        extensions: [\\"hvp\\"]
      },
      \\"application/vnd.yamaha.openscoreformat\\": {
        source: \\"iana\\",
        extensions: [\\"osf\\"]
      },
      \\"application/vnd.yamaha.openscoreformat.osfpvg+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"osfpvg\\"]
      },
      \\"application/vnd.yamaha.remote-setup\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.yamaha.smaf-audio\\": {
        source: \\"iana\\",
        extensions: [\\"saf\\"]
      },
      \\"application/vnd.yamaha.smaf-phrase\\": {
        source: \\"iana\\",
        extensions: [\\"spf\\"]
      },
      \\"application/vnd.yamaha.through-ngn\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.yamaha.tunnel-udpencap\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.yaoweme\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.yellowriver-custom-menu\\": {
        source: \\"iana\\",
        extensions: [\\"cmp\\"]
      },
      \\"application/vnd.youtube.yt\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.zul\\": {
        source: \\"iana\\",
        extensions: [\\"zir\\", \\"zirz\\"]
      },
      \\"application/vnd.zzazz.deck+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"zaz\\"]
      },
      \\"application/voicexml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"vxml\\"]
      },
      \\"application/voucher-cms+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vq-rtcpxr\\": {
        source: \\"iana\\"
      },
      \\"application/wasm\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"wasm\\"]
      },
      \\"application/watcherinfo+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"wif\\"]
      },
      \\"application/webpush-options+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/whoispp-query\\": {
        source: \\"iana\\"
      },
      \\"application/whoispp-response\\": {
        source: \\"iana\\"
      },
      \\"application/widget\\": {
        source: \\"iana\\",
        extensions: [\\"wgt\\"]
      },
      \\"application/winhlp\\": {
        source: \\"apache\\",
        extensions: [\\"hlp\\"]
      },
      \\"application/wita\\": {
        source: \\"iana\\"
      },
      \\"application/wordperfect5.1\\": {
        source: \\"iana\\"
      },
      \\"application/wsdl+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"wsdl\\"]
      },
      \\"application/wspolicy+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"wspolicy\\"]
      },
      \\"application/x-7z-compressed\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"7z\\"]
      },
      \\"application/x-abiword\\": {
        source: \\"apache\\",
        extensions: [\\"abw\\"]
      },
      \\"application/x-ace-compressed\\": {
        source: \\"apache\\",
        extensions: [\\"ace\\"]
      },
      \\"application/x-amf\\": {
        source: \\"apache\\"
      },
      \\"application/x-apple-diskimage\\": {
        source: \\"apache\\",
        extensions: [\\"dmg\\"]
      },
      \\"application/x-arj\\": {
        compressible: false,
        extensions: [\\"arj\\"]
      },
      \\"application/x-authorware-bin\\": {
        source: \\"apache\\",
        extensions: [\\"aab\\", \\"x32\\", \\"u32\\", \\"vox\\"]
      },
      \\"application/x-authorware-map\\": {
        source: \\"apache\\",
        extensions: [\\"aam\\"]
      },
      \\"application/x-authorware-seg\\": {
        source: \\"apache\\",
        extensions: [\\"aas\\"]
      },
      \\"application/x-bcpio\\": {
        source: \\"apache\\",
        extensions: [\\"bcpio\\"]
      },
      \\"application/x-bdoc\\": {
        compressible: false,
        extensions: [\\"bdoc\\"]
      },
      \\"application/x-bittorrent\\": {
        source: \\"apache\\",
        extensions: [\\"torrent\\"]
      },
      \\"application/x-blorb\\": {
        source: \\"apache\\",
        extensions: [\\"blb\\", \\"blorb\\"]
      },
      \\"application/x-bzip\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"bz\\"]
      },
      \\"application/x-bzip2\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"bz2\\", \\"boz\\"]
      },
      \\"application/x-cbr\\": {
        source: \\"apache\\",
        extensions: [\\"cbr\\", \\"cba\\", \\"cbt\\", \\"cbz\\", \\"cb7\\"]
      },
      \\"application/x-cdlink\\": {
        source: \\"apache\\",
        extensions: [\\"vcd\\"]
      },
      \\"application/x-cfs-compressed\\": {
        source: \\"apache\\",
        extensions: [\\"cfs\\"]
      },
      \\"application/x-chat\\": {
        source: \\"apache\\",
        extensions: [\\"chat\\"]
      },
      \\"application/x-chess-pgn\\": {
        source: \\"apache\\",
        extensions: [\\"pgn\\"]
      },
      \\"application/x-chrome-extension\\": {
        extensions: [\\"crx\\"]
      },
      \\"application/x-cocoa\\": {
        source: \\"nginx\\",
        extensions: [\\"cco\\"]
      },
      \\"application/x-compress\\": {
        source: \\"apache\\"
      },
      \\"application/x-conference\\": {
        source: \\"apache\\",
        extensions: [\\"nsc\\"]
      },
      \\"application/x-cpio\\": {
        source: \\"apache\\",
        extensions: [\\"cpio\\"]
      },
      \\"application/x-csh\\": {
        source: \\"apache\\",
        extensions: [\\"csh\\"]
      },
      \\"application/x-deb\\": {
        compressible: false
      },
      \\"application/x-debian-package\\": {
        source: \\"apache\\",
        extensions: [\\"deb\\", \\"udeb\\"]
      },
      \\"application/x-dgc-compressed\\": {
        source: \\"apache\\",
        extensions: [\\"dgc\\"]
      },
      \\"application/x-director\\": {
        source: \\"apache\\",
        extensions: [\\"dir\\", \\"dcr\\", \\"dxr\\", \\"cst\\", \\"cct\\", \\"cxt\\", \\"w3d\\", \\"fgd\\", \\"swa\\"]
      },
      \\"application/x-doom\\": {
        source: \\"apache\\",
        extensions: [\\"wad\\"]
      },
      \\"application/x-dtbncx+xml\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"ncx\\"]
      },
      \\"application/x-dtbook+xml\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"dtb\\"]
      },
      \\"application/x-dtbresource+xml\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"res\\"]
      },
      \\"application/x-dvi\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"dvi\\"]
      },
      \\"application/x-envoy\\": {
        source: \\"apache\\",
        extensions: [\\"evy\\"]
      },
      \\"application/x-eva\\": {
        source: \\"apache\\",
        extensions: [\\"eva\\"]
      },
      \\"application/x-font-bdf\\": {
        source: \\"apache\\",
        extensions: [\\"bdf\\"]
      },
      \\"application/x-font-dos\\": {
        source: \\"apache\\"
      },
      \\"application/x-font-framemaker\\": {
        source: \\"apache\\"
      },
      \\"application/x-font-ghostscript\\": {
        source: \\"apache\\",
        extensions: [\\"gsf\\"]
      },
      \\"application/x-font-libgrx\\": {
        source: \\"apache\\"
      },
      \\"application/x-font-linux-psf\\": {
        source: \\"apache\\",
        extensions: [\\"psf\\"]
      },
      \\"application/x-font-pcf\\": {
        source: \\"apache\\",
        extensions: [\\"pcf\\"]
      },
      \\"application/x-font-snf\\": {
        source: \\"apache\\",
        extensions: [\\"snf\\"]
      },
      \\"application/x-font-speedo\\": {
        source: \\"apache\\"
      },
      \\"application/x-font-sunos-news\\": {
        source: \\"apache\\"
      },
      \\"application/x-font-type1\\": {
        source: \\"apache\\",
        extensions: [\\"pfa\\", \\"pfb\\", \\"pfm\\", \\"afm\\"]
      },
      \\"application/x-font-vfont\\": {
        source: \\"apache\\"
      },
      \\"application/x-freearc\\": {
        source: \\"apache\\",
        extensions: [\\"arc\\"]
      },
      \\"application/x-futuresplash\\": {
        source: \\"apache\\",
        extensions: [\\"spl\\"]
      },
      \\"application/x-gca-compressed\\": {
        source: \\"apache\\",
        extensions: [\\"gca\\"]
      },
      \\"application/x-glulx\\": {
        source: \\"apache\\",
        extensions: [\\"ulx\\"]
      },
      \\"application/x-gnumeric\\": {
        source: \\"apache\\",
        extensions: [\\"gnumeric\\"]
      },
      \\"application/x-gramps-xml\\": {
        source: \\"apache\\",
        extensions: [\\"gramps\\"]
      },
      \\"application/x-gtar\\": {
        source: \\"apache\\",
        extensions: [\\"gtar\\"]
      },
      \\"application/x-gzip\\": {
        source: \\"apache\\"
      },
      \\"application/x-hdf\\": {
        source: \\"apache\\",
        extensions: [\\"hdf\\"]
      },
      \\"application/x-httpd-php\\": {
        compressible: true,
        extensions: [\\"php\\"]
      },
      \\"application/x-install-instructions\\": {
        source: \\"apache\\",
        extensions: [\\"install\\"]
      },
      \\"application/x-iso9660-image\\": {
        source: \\"apache\\",
        extensions: [\\"iso\\"]
      },
      \\"application/x-iwork-keynote-sffkey\\": {
        extensions: [\\"key\\"]
      },
      \\"application/x-iwork-numbers-sffnumbers\\": {
        extensions: [\\"numbers\\"]
      },
      \\"application/x-iwork-pages-sffpages\\": {
        extensions: [\\"pages\\"]
      },
      \\"application/x-java-archive-diff\\": {
        source: \\"nginx\\",
        extensions: [\\"jardiff\\"]
      },
      \\"application/x-java-jnlp-file\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"jnlp\\"]
      },
      \\"application/x-javascript\\": {
        compressible: true
      },
      \\"application/x-keepass2\\": {
        extensions: [\\"kdbx\\"]
      },
      \\"application/x-latex\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"latex\\"]
      },
      \\"application/x-lua-bytecode\\": {
        extensions: [\\"luac\\"]
      },
      \\"application/x-lzh-compressed\\": {
        source: \\"apache\\",
        extensions: [\\"lzh\\", \\"lha\\"]
      },
      \\"application/x-makeself\\": {
        source: \\"nginx\\",
        extensions: [\\"run\\"]
      },
      \\"application/x-mie\\": {
        source: \\"apache\\",
        extensions: [\\"mie\\"]
      },
      \\"application/x-mobipocket-ebook\\": {
        source: \\"apache\\",
        extensions: [\\"prc\\", \\"mobi\\"]
      },
      \\"application/x-mpegurl\\": {
        compressible: false
      },
      \\"application/x-ms-application\\": {
        source: \\"apache\\",
        extensions: [\\"application\\"]
      },
      \\"application/x-ms-shortcut\\": {
        source: \\"apache\\",
        extensions: [\\"lnk\\"]
      },
      \\"application/x-ms-wmd\\": {
        source: \\"apache\\",
        extensions: [\\"wmd\\"]
      },
      \\"application/x-ms-wmz\\": {
        source: \\"apache\\",
        extensions: [\\"wmz\\"]
      },
      \\"application/x-ms-xbap\\": {
        source: \\"apache\\",
        extensions: [\\"xbap\\"]
      },
      \\"application/x-msaccess\\": {
        source: \\"apache\\",
        extensions: [\\"mdb\\"]
      },
      \\"application/x-msbinder\\": {
        source: \\"apache\\",
        extensions: [\\"obd\\"]
      },
      \\"application/x-mscardfile\\": {
        source: \\"apache\\",
        extensions: [\\"crd\\"]
      },
      \\"application/x-msclip\\": {
        source: \\"apache\\",
        extensions: [\\"clp\\"]
      },
      \\"application/x-msdos-program\\": {
        extensions: [\\"exe\\"]
      },
      \\"application/x-msdownload\\": {
        source: \\"apache\\",
        extensions: [\\"exe\\", \\"dll\\", \\"com\\", \\"bat\\", \\"msi\\"]
      },
      \\"application/x-msmediaview\\": {
        source: \\"apache\\",
        extensions: [\\"mvb\\", \\"m13\\", \\"m14\\"]
      },
      \\"application/x-msmetafile\\": {
        source: \\"apache\\",
        extensions: [\\"wmf\\", \\"wmz\\", \\"emf\\", \\"emz\\"]
      },
      \\"application/x-msmoney\\": {
        source: \\"apache\\",
        extensions: [\\"mny\\"]
      },
      \\"application/x-mspublisher\\": {
        source: \\"apache\\",
        extensions: [\\"pub\\"]
      },
      \\"application/x-msschedule\\": {
        source: \\"apache\\",
        extensions: [\\"scd\\"]
      },
      \\"application/x-msterminal\\": {
        source: \\"apache\\",
        extensions: [\\"trm\\"]
      },
      \\"application/x-mswrite\\": {
        source: \\"apache\\",
        extensions: [\\"wri\\"]
      },
      \\"application/x-netcdf\\": {
        source: \\"apache\\",
        extensions: [\\"nc\\", \\"cdf\\"]
      },
      \\"application/x-ns-proxy-autoconfig\\": {
        compressible: true,
        extensions: [\\"pac\\"]
      },
      \\"application/x-nzb\\": {
        source: \\"apache\\",
        extensions: [\\"nzb\\"]
      },
      \\"application/x-perl\\": {
        source: \\"nginx\\",
        extensions: [\\"pl\\", \\"pm\\"]
      },
      \\"application/x-pilot\\": {
        source: \\"nginx\\",
        extensions: [\\"prc\\", \\"pdb\\"]
      },
      \\"application/x-pkcs12\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"p12\\", \\"pfx\\"]
      },
      \\"application/x-pkcs7-certificates\\": {
        source: \\"apache\\",
        extensions: [\\"p7b\\", \\"spc\\"]
      },
      \\"application/x-pkcs7-certreqresp\\": {
        source: \\"apache\\",
        extensions: [\\"p7r\\"]
      },
      \\"application/x-pki-message\\": {
        source: \\"iana\\"
      },
      \\"application/x-rar-compressed\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"rar\\"]
      },
      \\"application/x-redhat-package-manager\\": {
        source: \\"nginx\\",
        extensions: [\\"rpm\\"]
      },
      \\"application/x-research-info-systems\\": {
        source: \\"apache\\",
        extensions: [\\"ris\\"]
      },
      \\"application/x-sea\\": {
        source: \\"nginx\\",
        extensions: [\\"sea\\"]
      },
      \\"application/x-sh\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"sh\\"]
      },
      \\"application/x-shar\\": {
        source: \\"apache\\",
        extensions: [\\"shar\\"]
      },
      \\"application/x-shockwave-flash\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"swf\\"]
      },
      \\"application/x-silverlight-app\\": {
        source: \\"apache\\",
        extensions: [\\"xap\\"]
      },
      \\"application/x-sql\\": {
        source: \\"apache\\",
        extensions: [\\"sql\\"]
      },
      \\"application/x-stuffit\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"sit\\"]
      },
      \\"application/x-stuffitx\\": {
        source: \\"apache\\",
        extensions: [\\"sitx\\"]
      },
      \\"application/x-subrip\\": {
        source: \\"apache\\",
        extensions: [\\"srt\\"]
      },
      \\"application/x-sv4cpio\\": {
        source: \\"apache\\",
        extensions: [\\"sv4cpio\\"]
      },
      \\"application/x-sv4crc\\": {
        source: \\"apache\\",
        extensions: [\\"sv4crc\\"]
      },
      \\"application/x-t3vm-image\\": {
        source: \\"apache\\",
        extensions: [\\"t3\\"]
      },
      \\"application/x-tads\\": {
        source: \\"apache\\",
        extensions: [\\"gam\\"]
      },
      \\"application/x-tar\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"tar\\"]
      },
      \\"application/x-tcl\\": {
        source: \\"apache\\",
        extensions: [\\"tcl\\", \\"tk\\"]
      },
      \\"application/x-tex\\": {
        source: \\"apache\\",
        extensions: [\\"tex\\"]
      },
      \\"application/x-tex-tfm\\": {
        source: \\"apache\\",
        extensions: [\\"tfm\\"]
      },
      \\"application/x-texinfo\\": {
        source: \\"apache\\",
        extensions: [\\"texinfo\\", \\"texi\\"]
      },
      \\"application/x-tgif\\": {
        source: \\"apache\\",
        extensions: [\\"obj\\"]
      },
      \\"application/x-ustar\\": {
        source: \\"apache\\",
        extensions: [\\"ustar\\"]
      },
      \\"application/x-virtualbox-hdd\\": {
        compressible: true,
        extensions: [\\"hdd\\"]
      },
      \\"application/x-virtualbox-ova\\": {
        compressible: true,
        extensions: [\\"ova\\"]
      },
      \\"application/x-virtualbox-ovf\\": {
        compressible: true,
        extensions: [\\"ovf\\"]
      },
      \\"application/x-virtualbox-vbox\\": {
        compressible: true,
        extensions: [\\"vbox\\"]
      },
      \\"application/x-virtualbox-vbox-extpack\\": {
        compressible: false,
        extensions: [\\"vbox-extpack\\"]
      },
      \\"application/x-virtualbox-vdi\\": {
        compressible: true,
        extensions: [\\"vdi\\"]
      },
      \\"application/x-virtualbox-vhd\\": {
        compressible: true,
        extensions: [\\"vhd\\"]
      },
      \\"application/x-virtualbox-vmdk\\": {
        compressible: true,
        extensions: [\\"vmdk\\"]
      },
      \\"application/x-wais-source\\": {
        source: \\"apache\\",
        extensions: [\\"src\\"]
      },
      \\"application/x-web-app-manifest+json\\": {
        compressible: true,
        extensions: [\\"webapp\\"]
      },
      \\"application/x-www-form-urlencoded\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/x-x509-ca-cert\\": {
        source: \\"iana\\",
        extensions: [\\"der\\", \\"crt\\", \\"pem\\"]
      },
      \\"application/x-x509-ca-ra-cert\\": {
        source: \\"iana\\"
      },
      \\"application/x-x509-next-ca-cert\\": {
        source: \\"iana\\"
      },
      \\"application/x-xfig\\": {
        source: \\"apache\\",
        extensions: [\\"fig\\"]
      },
      \\"application/x-xliff+xml\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"xlf\\"]
      },
      \\"application/x-xpinstall\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"xpi\\"]
      },
      \\"application/x-xz\\": {
        source: \\"apache\\",
        extensions: [\\"xz\\"]
      },
      \\"application/x-zmachine\\": {
        source: \\"apache\\",
        extensions: [\\"z1\\", \\"z2\\", \\"z3\\", \\"z4\\", \\"z5\\", \\"z6\\", \\"z7\\", \\"z8\\"]
      },
      \\"application/x400-bp\\": {
        source: \\"iana\\"
      },
      \\"application/xacml+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/xaml+xml\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"xaml\\"]
      },
      \\"application/xcap-att+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xav\\"]
      },
      \\"application/xcap-caps+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xca\\"]
      },
      \\"application/xcap-diff+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xdf\\"]
      },
      \\"application/xcap-el+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xel\\"]
      },
      \\"application/xcap-error+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/xcap-ns+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xns\\"]
      },
      \\"application/xcon-conference-info+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/xcon-conference-info-diff+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/xenc+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xenc\\"]
      },
      \\"application/xhtml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xhtml\\", \\"xht\\"]
      },
      \\"application/xhtml-voice+xml\\": {
        source: \\"apache\\",
        compressible: true
      },
      \\"application/xliff+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xlf\\"]
      },
      \\"application/xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xml\\", \\"xsl\\", \\"xsd\\", \\"rng\\"]
      },
      \\"application/xml-dtd\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"dtd\\"]
      },
      \\"application/xml-external-parsed-entity\\": {
        source: \\"iana\\"
      },
      \\"application/xml-patch+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/xmpp+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/xop+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xop\\"]
      },
      \\"application/xproc+xml\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"xpl\\"]
      },
      \\"application/xslt+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xsl\\", \\"xslt\\"]
      },
      \\"application/xspf+xml\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"xspf\\"]
      },
      \\"application/xv+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"mxml\\", \\"xhvml\\", \\"xvml\\", \\"xvm\\"]
      },
      \\"application/yang\\": {
        source: \\"iana\\",
        extensions: [\\"yang\\"]
      },
      \\"application/yang-data+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/yang-data+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/yang-patch+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/yang-patch+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/yin+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"yin\\"]
      },
      \\"application/zip\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"zip\\"]
      },
      \\"application/zlib\\": {
        source: \\"iana\\"
      },
      \\"application/zstd\\": {
        source: \\"iana\\"
      },
      \\"audio/1d-interleaved-parityfec\\": {
        source: \\"iana\\"
      },
      \\"audio/32kadpcm\\": {
        source: \\"iana\\"
      },
      \\"audio/3gpp\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"3gpp\\"]
      },
      \\"audio/3gpp2\\": {
        source: \\"iana\\"
      },
      \\"audio/aac\\": {
        source: \\"iana\\"
      },
      \\"audio/ac3\\": {
        source: \\"iana\\"
      },
      \\"audio/adpcm\\": {
        source: \\"apache\\",
        extensions: [\\"adp\\"]
      },
      \\"audio/amr\\": {
        source: \\"iana\\",
        extensions: [\\"amr\\"]
      },
      \\"audio/amr-wb\\": {
        source: \\"iana\\"
      },
      \\"audio/amr-wb+\\": {
        source: \\"iana\\"
      },
      \\"audio/aptx\\": {
        source: \\"iana\\"
      },
      \\"audio/asc\\": {
        source: \\"iana\\"
      },
      \\"audio/atrac-advanced-lossless\\": {
        source: \\"iana\\"
      },
      \\"audio/atrac-x\\": {
        source: \\"iana\\"
      },
      \\"audio/atrac3\\": {
        source: \\"iana\\"
      },
      \\"audio/basic\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"au\\", \\"snd\\"]
      },
      \\"audio/bv16\\": {
        source: \\"iana\\"
      },
      \\"audio/bv32\\": {
        source: \\"iana\\"
      },
      \\"audio/clearmode\\": {
        source: \\"iana\\"
      },
      \\"audio/cn\\": {
        source: \\"iana\\"
      },
      \\"audio/dat12\\": {
        source: \\"iana\\"
      },
      \\"audio/dls\\": {
        source: \\"iana\\"
      },
      \\"audio/dsr-es201108\\": {
        source: \\"iana\\"
      },
      \\"audio/dsr-es202050\\": {
        source: \\"iana\\"
      },
      \\"audio/dsr-es202211\\": {
        source: \\"iana\\"
      },
      \\"audio/dsr-es202212\\": {
        source: \\"iana\\"
      },
      \\"audio/dv\\": {
        source: \\"iana\\"
      },
      \\"audio/dvi4\\": {
        source: \\"iana\\"
      },
      \\"audio/eac3\\": {
        source: \\"iana\\"
      },
      \\"audio/encaprtp\\": {
        source: \\"iana\\"
      },
      \\"audio/evrc\\": {
        source: \\"iana\\"
      },
      \\"audio/evrc-qcp\\": {
        source: \\"iana\\"
      },
      \\"audio/evrc0\\": {
        source: \\"iana\\"
      },
      \\"audio/evrc1\\": {
        source: \\"iana\\"
      },
      \\"audio/evrcb\\": {
        source: \\"iana\\"
      },
      \\"audio/evrcb0\\": {
        source: \\"iana\\"
      },
      \\"audio/evrcb1\\": {
        source: \\"iana\\"
      },
      \\"audio/evrcnw\\": {
        source: \\"iana\\"
      },
      \\"audio/evrcnw0\\": {
        source: \\"iana\\"
      },
      \\"audio/evrcnw1\\": {
        source: \\"iana\\"
      },
      \\"audio/evrcwb\\": {
        source: \\"iana\\"
      },
      \\"audio/evrcwb0\\": {
        source: \\"iana\\"
      },
      \\"audio/evrcwb1\\": {
        source: \\"iana\\"
      },
      \\"audio/evs\\": {
        source: \\"iana\\"
      },
      \\"audio/flexfec\\": {
        source: \\"iana\\"
      },
      \\"audio/fwdred\\": {
        source: \\"iana\\"
      },
      \\"audio/g711-0\\": {
        source: \\"iana\\"
      },
      \\"audio/g719\\": {
        source: \\"iana\\"
      },
      \\"audio/g722\\": {
        source: \\"iana\\"
      },
      \\"audio/g7221\\": {
        source: \\"iana\\"
      },
      \\"audio/g723\\": {
        source: \\"iana\\"
      },
      \\"audio/g726-16\\": {
        source: \\"iana\\"
      },
      \\"audio/g726-24\\": {
        source: \\"iana\\"
      },
      \\"audio/g726-32\\": {
        source: \\"iana\\"
      },
      \\"audio/g726-40\\": {
        source: \\"iana\\"
      },
      \\"audio/g728\\": {
        source: \\"iana\\"
      },
      \\"audio/g729\\": {
        source: \\"iana\\"
      },
      \\"audio/g7291\\": {
        source: \\"iana\\"
      },
      \\"audio/g729d\\": {
        source: \\"iana\\"
      },
      \\"audio/g729e\\": {
        source: \\"iana\\"
      },
      \\"audio/gsm\\": {
        source: \\"iana\\"
      },
      \\"audio/gsm-efr\\": {
        source: \\"iana\\"
      },
      \\"audio/gsm-hr-08\\": {
        source: \\"iana\\"
      },
      \\"audio/ilbc\\": {
        source: \\"iana\\"
      },
      \\"audio/ip-mr_v2.5\\": {
        source: \\"iana\\"
      },
      \\"audio/isac\\": {
        source: \\"apache\\"
      },
      \\"audio/l16\\": {
        source: \\"iana\\"
      },
      \\"audio/l20\\": {
        source: \\"iana\\"
      },
      \\"audio/l24\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"audio/l8\\": {
        source: \\"iana\\"
      },
      \\"audio/lpc\\": {
        source: \\"iana\\"
      },
      \\"audio/melp\\": {
        source: \\"iana\\"
      },
      \\"audio/melp1200\\": {
        source: \\"iana\\"
      },
      \\"audio/melp2400\\": {
        source: \\"iana\\"
      },
      \\"audio/melp600\\": {
        source: \\"iana\\"
      },
      \\"audio/mhas\\": {
        source: \\"iana\\"
      },
      \\"audio/midi\\": {
        source: \\"apache\\",
        extensions: [\\"mid\\", \\"midi\\", \\"kar\\", \\"rmi\\"]
      },
      \\"audio/mobile-xmf\\": {
        source: \\"iana\\",
        extensions: [\\"mxmf\\"]
      },
      \\"audio/mp3\\": {
        compressible: false,
        extensions: [\\"mp3\\"]
      },
      \\"audio/mp4\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"m4a\\", \\"mp4a\\"]
      },
      \\"audio/mp4a-latm\\": {
        source: \\"iana\\"
      },
      \\"audio/mpa\\": {
        source: \\"iana\\"
      },
      \\"audio/mpa-robust\\": {
        source: \\"iana\\"
      },
      \\"audio/mpeg\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"mpga\\", \\"mp2\\", \\"mp2a\\", \\"mp3\\", \\"m2a\\", \\"m3a\\"]
      },
      \\"audio/mpeg4-generic\\": {
        source: \\"iana\\"
      },
      \\"audio/musepack\\": {
        source: \\"apache\\"
      },
      \\"audio/ogg\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"oga\\", \\"ogg\\", \\"spx\\", \\"opus\\"]
      },
      \\"audio/opus\\": {
        source: \\"iana\\"
      },
      \\"audio/parityfec\\": {
        source: \\"iana\\"
      },
      \\"audio/pcma\\": {
        source: \\"iana\\"
      },
      \\"audio/pcma-wb\\": {
        source: \\"iana\\"
      },
      \\"audio/pcmu\\": {
        source: \\"iana\\"
      },
      \\"audio/pcmu-wb\\": {
        source: \\"iana\\"
      },
      \\"audio/prs.sid\\": {
        source: \\"iana\\"
      },
      \\"audio/qcelp\\": {
        source: \\"iana\\"
      },
      \\"audio/raptorfec\\": {
        source: \\"iana\\"
      },
      \\"audio/red\\": {
        source: \\"iana\\"
      },
      \\"audio/rtp-enc-aescm128\\": {
        source: \\"iana\\"
      },
      \\"audio/rtp-midi\\": {
        source: \\"iana\\"
      },
      \\"audio/rtploopback\\": {
        source: \\"iana\\"
      },
      \\"audio/rtx\\": {
        source: \\"iana\\"
      },
      \\"audio/s3m\\": {
        source: \\"apache\\",
        extensions: [\\"s3m\\"]
      },
      \\"audio/scip\\": {
        source: \\"iana\\"
      },
      \\"audio/silk\\": {
        source: \\"apache\\",
        extensions: [\\"sil\\"]
      },
      \\"audio/smv\\": {
        source: \\"iana\\"
      },
      \\"audio/smv-qcp\\": {
        source: \\"iana\\"
      },
      \\"audio/smv0\\": {
        source: \\"iana\\"
      },
      \\"audio/sofa\\": {
        source: \\"iana\\"
      },
      \\"audio/sp-midi\\": {
        source: \\"iana\\"
      },
      \\"audio/speex\\": {
        source: \\"iana\\"
      },
      \\"audio/t140c\\": {
        source: \\"iana\\"
      },
      \\"audio/t38\\": {
        source: \\"iana\\"
      },
      \\"audio/telephone-event\\": {
        source: \\"iana\\"
      },
      \\"audio/tetra_acelp\\": {
        source: \\"iana\\"
      },
      \\"audio/tetra_acelp_bb\\": {
        source: \\"iana\\"
      },
      \\"audio/tone\\": {
        source: \\"iana\\"
      },
      \\"audio/tsvcis\\": {
        source: \\"iana\\"
      },
      \\"audio/uemclip\\": {
        source: \\"iana\\"
      },
      \\"audio/ulpfec\\": {
        source: \\"iana\\"
      },
      \\"audio/usac\\": {
        source: \\"iana\\"
      },
      \\"audio/vdvi\\": {
        source: \\"iana\\"
      },
      \\"audio/vmr-wb\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.3gpp.iufp\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.4sb\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.audiokoz\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.celp\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.cisco.nse\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.cmles.radio-events\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.cns.anp1\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.cns.inf1\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.dece.audio\\": {
        source: \\"iana\\",
        extensions: [\\"uva\\", \\"uvva\\"]
      },
      \\"audio/vnd.digital-winds\\": {
        source: \\"iana\\",
        extensions: [\\"eol\\"]
      },
      \\"audio/vnd.dlna.adts\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.dolby.heaac.1\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.dolby.heaac.2\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.dolby.mlp\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.dolby.mps\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.dolby.pl2\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.dolby.pl2x\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.dolby.pl2z\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.dolby.pulse.1\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.dra\\": {
        source: \\"iana\\",
        extensions: [\\"dra\\"]
      },
      \\"audio/vnd.dts\\": {
        source: \\"iana\\",
        extensions: [\\"dts\\"]
      },
      \\"audio/vnd.dts.hd\\": {
        source: \\"iana\\",
        extensions: [\\"dtshd\\"]
      },
      \\"audio/vnd.dts.uhd\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.dvb.file\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.everad.plj\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.hns.audio\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.lucent.voice\\": {
        source: \\"iana\\",
        extensions: [\\"lvp\\"]
      },
      \\"audio/vnd.ms-playready.media.pya\\": {
        source: \\"iana\\",
        extensions: [\\"pya\\"]
      },
      \\"audio/vnd.nokia.mobile-xmf\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.nortel.vbk\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.nuera.ecelp4800\\": {
        source: \\"iana\\",
        extensions: [\\"ecelp4800\\"]
      },
      \\"audio/vnd.nuera.ecelp7470\\": {
        source: \\"iana\\",
        extensions: [\\"ecelp7470\\"]
      },
      \\"audio/vnd.nuera.ecelp9600\\": {
        source: \\"iana\\",
        extensions: [\\"ecelp9600\\"]
      },
      \\"audio/vnd.octel.sbc\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.presonus.multitrack\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.qcelp\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.rhetorex.32kadpcm\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.rip\\": {
        source: \\"iana\\",
        extensions: [\\"rip\\"]
      },
      \\"audio/vnd.rn-realaudio\\": {
        compressible: false
      },
      \\"audio/vnd.sealedmedia.softseal.mpeg\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.vmx.cvsd\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.wave\\": {
        compressible: false
      },
      \\"audio/vorbis\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"audio/vorbis-config\\": {
        source: \\"iana\\"
      },
      \\"audio/wav\\": {
        compressible: false,
        extensions: [\\"wav\\"]
      },
      \\"audio/wave\\": {
        compressible: false,
        extensions: [\\"wav\\"]
      },
      \\"audio/webm\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"weba\\"]
      },
      \\"audio/x-aac\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"aac\\"]
      },
      \\"audio/x-aiff\\": {
        source: \\"apache\\",
        extensions: [\\"aif\\", \\"aiff\\", \\"aifc\\"]
      },
      \\"audio/x-caf\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"caf\\"]
      },
      \\"audio/x-flac\\": {
        source: \\"apache\\",
        extensions: [\\"flac\\"]
      },
      \\"audio/x-m4a\\": {
        source: \\"nginx\\",
        extensions: [\\"m4a\\"]
      },
      \\"audio/x-matroska\\": {
        source: \\"apache\\",
        extensions: [\\"mka\\"]
      },
      \\"audio/x-mpegurl\\": {
        source: \\"apache\\",
        extensions: [\\"m3u\\"]
      },
      \\"audio/x-ms-wax\\": {
        source: \\"apache\\",
        extensions: [\\"wax\\"]
      },
      \\"audio/x-ms-wma\\": {
        source: \\"apache\\",
        extensions: [\\"wma\\"]
      },
      \\"audio/x-pn-realaudio\\": {
        source: \\"apache\\",
        extensions: [\\"ram\\", \\"ra\\"]
      },
      \\"audio/x-pn-realaudio-plugin\\": {
        source: \\"apache\\",
        extensions: [\\"rmp\\"]
      },
      \\"audio/x-realaudio\\": {
        source: \\"nginx\\",
        extensions: [\\"ra\\"]
      },
      \\"audio/x-tta\\": {
        source: \\"apache\\"
      },
      \\"audio/x-wav\\": {
        source: \\"apache\\",
        extensions: [\\"wav\\"]
      },
      \\"audio/xm\\": {
        source: \\"apache\\",
        extensions: [\\"xm\\"]
      },
      \\"chemical/x-cdx\\": {
        source: \\"apache\\",
        extensions: [\\"cdx\\"]
      },
      \\"chemical/x-cif\\": {
        source: \\"apache\\",
        extensions: [\\"cif\\"]
      },
      \\"chemical/x-cmdf\\": {
        source: \\"apache\\",
        extensions: [\\"cmdf\\"]
      },
      \\"chemical/x-cml\\": {
        source: \\"apache\\",
        extensions: [\\"cml\\"]
      },
      \\"chemical/x-csml\\": {
        source: \\"apache\\",
        extensions: [\\"csml\\"]
      },
      \\"chemical/x-pdb\\": {
        source: \\"apache\\"
      },
      \\"chemical/x-xyz\\": {
        source: \\"apache\\",
        extensions: [\\"xyz\\"]
      },
      \\"font/collection\\": {
        source: \\"iana\\",
        extensions: [\\"ttc\\"]
      },
      \\"font/otf\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"otf\\"]
      },
      \\"font/sfnt\\": {
        source: \\"iana\\"
      },
      \\"font/ttf\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"ttf\\"]
      },
      \\"font/woff\\": {
        source: \\"iana\\",
        extensions: [\\"woff\\"]
      },
      \\"font/woff2\\": {
        source: \\"iana\\",
        extensions: [\\"woff2\\"]
      },
      \\"image/aces\\": {
        source: \\"iana\\",
        extensions: [\\"exr\\"]
      },
      \\"image/apng\\": {
        compressible: false,
        extensions: [\\"apng\\"]
      },
      \\"image/avci\\": {
        source: \\"iana\\",
        extensions: [\\"avci\\"]
      },
      \\"image/avcs\\": {
        source: \\"iana\\",
        extensions: [\\"avcs\\"]
      },
      \\"image/avif\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"avif\\"]
      },
      \\"image/bmp\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"bmp\\"]
      },
      \\"image/cgm\\": {
        source: \\"iana\\",
        extensions: [\\"cgm\\"]
      },
      \\"image/dicom-rle\\": {
        source: \\"iana\\",
        extensions: [\\"drle\\"]
      },
      \\"image/emf\\": {
        source: \\"iana\\",
        extensions: [\\"emf\\"]
      },
      \\"image/fits\\": {
        source: \\"iana\\",
        extensions: [\\"fits\\"]
      },
      \\"image/g3fax\\": {
        source: \\"iana\\",
        extensions: [\\"g3\\"]
      },
      \\"image/gif\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"gif\\"]
      },
      \\"image/heic\\": {
        source: \\"iana\\",
        extensions: [\\"heic\\"]
      },
      \\"image/heic-sequence\\": {
        source: \\"iana\\",
        extensions: [\\"heics\\"]
      },
      \\"image/heif\\": {
        source: \\"iana\\",
        extensions: [\\"heif\\"]
      },
      \\"image/heif-sequence\\": {
        source: \\"iana\\",
        extensions: [\\"heifs\\"]
      },
      \\"image/hej2k\\": {
        source: \\"iana\\",
        extensions: [\\"hej2\\"]
      },
      \\"image/hsj2\\": {
        source: \\"iana\\",
        extensions: [\\"hsj2\\"]
      },
      \\"image/ief\\": {
        source: \\"iana\\",
        extensions: [\\"ief\\"]
      },
      \\"image/jls\\": {
        source: \\"iana\\",
        extensions: [\\"jls\\"]
      },
      \\"image/jp2\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"jp2\\", \\"jpg2\\"]
      },
      \\"image/jpeg\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"jpeg\\", \\"jpg\\", \\"jpe\\"]
      },
      \\"image/jph\\": {
        source: \\"iana\\",
        extensions: [\\"jph\\"]
      },
      \\"image/jphc\\": {
        source: \\"iana\\",
        extensions: [\\"jhc\\"]
      },
      \\"image/jpm\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"jpm\\"]
      },
      \\"image/jpx\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"jpx\\", \\"jpf\\"]
      },
      \\"image/jxr\\": {
        source: \\"iana\\",
        extensions: [\\"jxr\\"]
      },
      \\"image/jxra\\": {
        source: \\"iana\\",
        extensions: [\\"jxra\\"]
      },
      \\"image/jxrs\\": {
        source: \\"iana\\",
        extensions: [\\"jxrs\\"]
      },
      \\"image/jxs\\": {
        source: \\"iana\\",
        extensions: [\\"jxs\\"]
      },
      \\"image/jxsc\\": {
        source: \\"iana\\",
        extensions: [\\"jxsc\\"]
      },
      \\"image/jxsi\\": {
        source: \\"iana\\",
        extensions: [\\"jxsi\\"]
      },
      \\"image/jxss\\": {
        source: \\"iana\\",
        extensions: [\\"jxss\\"]
      },
      \\"image/ktx\\": {
        source: \\"iana\\",
        extensions: [\\"ktx\\"]
      },
      \\"image/ktx2\\": {
        source: \\"iana\\",
        extensions: [\\"ktx2\\"]
      },
      \\"image/naplps\\": {
        source: \\"iana\\"
      },
      \\"image/pjpeg\\": {
        compressible: false
      },
      \\"image/png\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"png\\"]
      },
      \\"image/prs.btif\\": {
        source: \\"iana\\",
        extensions: [\\"btif\\"]
      },
      \\"image/prs.pti\\": {
        source: \\"iana\\",
        extensions: [\\"pti\\"]
      },
      \\"image/pwg-raster\\": {
        source: \\"iana\\"
      },
      \\"image/sgi\\": {
        source: \\"apache\\",
        extensions: [\\"sgi\\"]
      },
      \\"image/svg+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"svg\\", \\"svgz\\"]
      },
      \\"image/t38\\": {
        source: \\"iana\\",
        extensions: [\\"t38\\"]
      },
      \\"image/tiff\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"tif\\", \\"tiff\\"]
      },
      \\"image/tiff-fx\\": {
        source: \\"iana\\",
        extensions: [\\"tfx\\"]
      },
      \\"image/vnd.adobe.photoshop\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"psd\\"]
      },
      \\"image/vnd.airzip.accelerator.azv\\": {
        source: \\"iana\\",
        extensions: [\\"azv\\"]
      },
      \\"image/vnd.cns.inf2\\": {
        source: \\"iana\\"
      },
      \\"image/vnd.dece.graphic\\": {
        source: \\"iana\\",
        extensions: [\\"uvi\\", \\"uvvi\\", \\"uvg\\", \\"uvvg\\"]
      },
      \\"image/vnd.djvu\\": {
        source: \\"iana\\",
        extensions: [\\"djvu\\", \\"djv\\"]
      },
      \\"image/vnd.dvb.subtitle\\": {
        source: \\"iana\\",
        extensions: [\\"sub\\"]
      },
      \\"image/vnd.dwg\\": {
        source: \\"iana\\",
        extensions: [\\"dwg\\"]
      },
      \\"image/vnd.dxf\\": {
        source: \\"iana\\",
        extensions: [\\"dxf\\"]
      },
      \\"image/vnd.fastbidsheet\\": {
        source: \\"iana\\",
        extensions: [\\"fbs\\"]
      },
      \\"image/vnd.fpx\\": {
        source: \\"iana\\",
        extensions: [\\"fpx\\"]
      },
      \\"image/vnd.fst\\": {
        source: \\"iana\\",
        extensions: [\\"fst\\"]
      },
      \\"image/vnd.fujixerox.edmics-mmr\\": {
        source: \\"iana\\",
        extensions: [\\"mmr\\"]
      },
      \\"image/vnd.fujixerox.edmics-rlc\\": {
        source: \\"iana\\",
        extensions: [\\"rlc\\"]
      },
      \\"image/vnd.globalgraphics.pgb\\": {
        source: \\"iana\\"
      },
      \\"image/vnd.microsoft.icon\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"ico\\"]
      },
      \\"image/vnd.mix\\": {
        source: \\"iana\\"
      },
      \\"image/vnd.mozilla.apng\\": {
        source: \\"iana\\"
      },
      \\"image/vnd.ms-dds\\": {
        compressible: true,
        extensions: [\\"dds\\"]
      },
      \\"image/vnd.ms-modi\\": {
        source: \\"iana\\",
        extensions: [\\"mdi\\"]
      },
      \\"image/vnd.ms-photo\\": {
        source: \\"apache\\",
        extensions: [\\"wdp\\"]
      },
      \\"image/vnd.net-fpx\\": {
        source: \\"iana\\",
        extensions: [\\"npx\\"]
      },
      \\"image/vnd.pco.b16\\": {
        source: \\"iana\\",
        extensions: [\\"b16\\"]
      },
      \\"image/vnd.radiance\\": {
        source: \\"iana\\"
      },
      \\"image/vnd.sealed.png\\": {
        source: \\"iana\\"
      },
      \\"image/vnd.sealedmedia.softseal.gif\\": {
        source: \\"iana\\"
      },
      \\"image/vnd.sealedmedia.softseal.jpg\\": {
        source: \\"iana\\"
      },
      \\"image/vnd.svf\\": {
        source: \\"iana\\"
      },
      \\"image/vnd.tencent.tap\\": {
        source: \\"iana\\",
        extensions: [\\"tap\\"]
      },
      \\"image/vnd.valve.source.texture\\": {
        source: \\"iana\\",
        extensions: [\\"vtf\\"]
      },
      \\"image/vnd.wap.wbmp\\": {
        source: \\"iana\\",
        extensions: [\\"wbmp\\"]
      },
      \\"image/vnd.xiff\\": {
        source: \\"iana\\",
        extensions: [\\"xif\\"]
      },
      \\"image/vnd.zbrush.pcx\\": {
        source: \\"iana\\",
        extensions: [\\"pcx\\"]
      },
      \\"image/webp\\": {
        source: \\"apache\\",
        extensions: [\\"webp\\"]
      },
      \\"image/wmf\\": {
        source: \\"iana\\",
        extensions: [\\"wmf\\"]
      },
      \\"image/x-3ds\\": {
        source: \\"apache\\",
        extensions: [\\"3ds\\"]
      },
      \\"image/x-cmu-raster\\": {
        source: \\"apache\\",
        extensions: [\\"ras\\"]
      },
      \\"image/x-cmx\\": {
        source: \\"apache\\",
        extensions: [\\"cmx\\"]
      },
      \\"image/x-freehand\\": {
        source: \\"apache\\",
        extensions: [\\"fh\\", \\"fhc\\", \\"fh4\\", \\"fh5\\", \\"fh7\\"]
      },
      \\"image/x-icon\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"ico\\"]
      },
      \\"image/x-jng\\": {
        source: \\"nginx\\",
        extensions: [\\"jng\\"]
      },
      \\"image/x-mrsid-image\\": {
        source: \\"apache\\",
        extensions: [\\"sid\\"]
      },
      \\"image/x-ms-bmp\\": {
        source: \\"nginx\\",
        compressible: true,
        extensions: [\\"bmp\\"]
      },
      \\"image/x-pcx\\": {
        source: \\"apache\\",
        extensions: [\\"pcx\\"]
      },
      \\"image/x-pict\\": {
        source: \\"apache\\",
        extensions: [\\"pic\\", \\"pct\\"]
      },
      \\"image/x-portable-anymap\\": {
        source: \\"apache\\",
        extensions: [\\"pnm\\"]
      },
      \\"image/x-portable-bitmap\\": {
        source: \\"apache\\",
        extensions: [\\"pbm\\"]
      },
      \\"image/x-portable-graymap\\": {
        source: \\"apache\\",
        extensions: [\\"pgm\\"]
      },
      \\"image/x-portable-pixmap\\": {
        source: \\"apache\\",
        extensions: [\\"ppm\\"]
      },
      \\"image/x-rgb\\": {
        source: \\"apache\\",
        extensions: [\\"rgb\\"]
      },
      \\"image/x-tga\\": {
        source: \\"apache\\",
        extensions: [\\"tga\\"]
      },
      \\"image/x-xbitmap\\": {
        source: \\"apache\\",
        extensions: [\\"xbm\\"]
      },
      \\"image/x-xcf\\": {
        compressible: false
      },
      \\"image/x-xpixmap\\": {
        source: \\"apache\\",
        extensions: [\\"xpm\\"]
      },
      \\"image/x-xwindowdump\\": {
        source: \\"apache\\",
        extensions: [\\"xwd\\"]
      },
      \\"message/cpim\\": {
        source: \\"iana\\"
      },
      \\"message/delivery-status\\": {
        source: \\"iana\\"
      },
      \\"message/disposition-notification\\": {
        source: \\"iana\\",
        extensions: [
          \\"disposition-notification\\"
        ]
      },
      \\"message/external-body\\": {
        source: \\"iana\\"
      },
      \\"message/feedback-report\\": {
        source: \\"iana\\"
      },
      \\"message/global\\": {
        source: \\"iana\\",
        extensions: [\\"u8msg\\"]
      },
      \\"message/global-delivery-status\\": {
        source: \\"iana\\",
        extensions: [\\"u8dsn\\"]
      },
      \\"message/global-disposition-notification\\": {
        source: \\"iana\\",
        extensions: [\\"u8mdn\\"]
      },
      \\"message/global-headers\\": {
        source: \\"iana\\",
        extensions: [\\"u8hdr\\"]
      },
      \\"message/http\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"message/imdn+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"message/news\\": {
        source: \\"iana\\"
      },
      \\"message/partial\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"message/rfc822\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"eml\\", \\"mime\\"]
      },
      \\"message/s-http\\": {
        source: \\"iana\\"
      },
      \\"message/sip\\": {
        source: \\"iana\\"
      },
      \\"message/sipfrag\\": {
        source: \\"iana\\"
      },
      \\"message/tracking-status\\": {
        source: \\"iana\\"
      },
      \\"message/vnd.si.simp\\": {
        source: \\"iana\\"
      },
      \\"message/vnd.wfa.wsc\\": {
        source: \\"iana\\",
        extensions: [\\"wsc\\"]
      },
      \\"model/3mf\\": {
        source: \\"iana\\",
        extensions: [\\"3mf\\"]
      },
      \\"model/e57\\": {
        source: \\"iana\\"
      },
      \\"model/gltf+json\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"gltf\\"]
      },
      \\"model/gltf-binary\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"glb\\"]
      },
      \\"model/iges\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"igs\\", \\"iges\\"]
      },
      \\"model/mesh\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"msh\\", \\"mesh\\", \\"silo\\"]
      },
      \\"model/mtl\\": {
        source: \\"iana\\",
        extensions: [\\"mtl\\"]
      },
      \\"model/obj\\": {
        source: \\"iana\\",
        extensions: [\\"obj\\"]
      },
      \\"model/step\\": {
        source: \\"iana\\"
      },
      \\"model/step+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"stpx\\"]
      },
      \\"model/step+zip\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"stpz\\"]
      },
      \\"model/step-xml+zip\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"stpxz\\"]
      },
      \\"model/stl\\": {
        source: \\"iana\\",
        extensions: [\\"stl\\"]
      },
      \\"model/vnd.collada+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"dae\\"]
      },
      \\"model/vnd.dwf\\": {
        source: \\"iana\\",
        extensions: [\\"dwf\\"]
      },
      \\"model/vnd.flatland.3dml\\": {
        source: \\"iana\\"
      },
      \\"model/vnd.gdl\\": {
        source: \\"iana\\",
        extensions: [\\"gdl\\"]
      },
      \\"model/vnd.gs-gdl\\": {
        source: \\"apache\\"
      },
      \\"model/vnd.gs.gdl\\": {
        source: \\"iana\\"
      },
      \\"model/vnd.gtw\\": {
        source: \\"iana\\",
        extensions: [\\"gtw\\"]
      },
      \\"model/vnd.moml+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"model/vnd.mts\\": {
        source: \\"iana\\",
        extensions: [\\"mts\\"]
      },
      \\"model/vnd.opengex\\": {
        source: \\"iana\\",
        extensions: [\\"ogex\\"]
      },
      \\"model/vnd.parasolid.transmit.binary\\": {
        source: \\"iana\\",
        extensions: [\\"x_b\\"]
      },
      \\"model/vnd.parasolid.transmit.text\\": {
        source: \\"iana\\",
        extensions: [\\"x_t\\"]
      },
      \\"model/vnd.pytha.pyox\\": {
        source: \\"iana\\"
      },
      \\"model/vnd.rosette.annotated-data-model\\": {
        source: \\"iana\\"
      },
      \\"model/vnd.sap.vds\\": {
        source: \\"iana\\",
        extensions: [\\"vds\\"]
      },
      \\"model/vnd.usdz+zip\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"usdz\\"]
      },
      \\"model/vnd.valve.source.compiled-map\\": {
        source: \\"iana\\",
        extensions: [\\"bsp\\"]
      },
      \\"model/vnd.vtu\\": {
        source: \\"iana\\",
        extensions: [\\"vtu\\"]
      },
      \\"model/vrml\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"wrl\\", \\"vrml\\"]
      },
      \\"model/x3d+binary\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"x3db\\", \\"x3dbz\\"]
      },
      \\"model/x3d+fastinfoset\\": {
        source: \\"iana\\",
        extensions: [\\"x3db\\"]
      },
      \\"model/x3d+vrml\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"x3dv\\", \\"x3dvz\\"]
      },
      \\"model/x3d+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"x3d\\", \\"x3dz\\"]
      },
      \\"model/x3d-vrml\\": {
        source: \\"iana\\",
        extensions: [\\"x3dv\\"]
      },
      \\"multipart/alternative\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"multipart/appledouble\\": {
        source: \\"iana\\"
      },
      \\"multipart/byteranges\\": {
        source: \\"iana\\"
      },
      \\"multipart/digest\\": {
        source: \\"iana\\"
      },
      \\"multipart/encrypted\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"multipart/form-data\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"multipart/header-set\\": {
        source: \\"iana\\"
      },
      \\"multipart/mixed\\": {
        source: \\"iana\\"
      },
      \\"multipart/multilingual\\": {
        source: \\"iana\\"
      },
      \\"multipart/parallel\\": {
        source: \\"iana\\"
      },
      \\"multipart/related\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"multipart/report\\": {
        source: \\"iana\\"
      },
      \\"multipart/signed\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"multipart/vnd.bint.med-plus\\": {
        source: \\"iana\\"
      },
      \\"multipart/voice-message\\": {
        source: \\"iana\\"
      },
      \\"multipart/x-mixed-replace\\": {
        source: \\"iana\\"
      },
      \\"text/1d-interleaved-parityfec\\": {
        source: \\"iana\\"
      },
      \\"text/cache-manifest\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"appcache\\", \\"manifest\\"]
      },
      \\"text/calendar\\": {
        source: \\"iana\\",
        extensions: [\\"ics\\", \\"ifb\\"]
      },
      \\"text/calender\\": {
        compressible: true
      },
      \\"text/cmd\\": {
        compressible: true
      },
      \\"text/coffeescript\\": {
        extensions: [\\"coffee\\", \\"litcoffee\\"]
      },
      \\"text/cql\\": {
        source: \\"iana\\"
      },
      \\"text/cql-expression\\": {
        source: \\"iana\\"
      },
      \\"text/cql-identifier\\": {
        source: \\"iana\\"
      },
      \\"text/css\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true,
        extensions: [\\"css\\"]
      },
      \\"text/csv\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"csv\\"]
      },
      \\"text/csv-schema\\": {
        source: \\"iana\\"
      },
      \\"text/directory\\": {
        source: \\"iana\\"
      },
      \\"text/dns\\": {
        source: \\"iana\\"
      },
      \\"text/ecmascript\\": {
        source: \\"iana\\"
      },
      \\"text/encaprtp\\": {
        source: \\"iana\\"
      },
      \\"text/enriched\\": {
        source: \\"iana\\"
      },
      \\"text/fhirpath\\": {
        source: \\"iana\\"
      },
      \\"text/flexfec\\": {
        source: \\"iana\\"
      },
      \\"text/fwdred\\": {
        source: \\"iana\\"
      },
      \\"text/gff3\\": {
        source: \\"iana\\"
      },
      \\"text/grammar-ref-list\\": {
        source: \\"iana\\"
      },
      \\"text/html\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"html\\", \\"htm\\", \\"shtml\\"]
      },
      \\"text/jade\\": {
        extensions: [\\"jade\\"]
      },
      \\"text/javascript\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"text/jcr-cnd\\": {
        source: \\"iana\\"
      },
      \\"text/jsx\\": {
        compressible: true,
        extensions: [\\"jsx\\"]
      },
      \\"text/less\\": {
        compressible: true,
        extensions: [\\"less\\"]
      },
      \\"text/markdown\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"markdown\\", \\"md\\"]
      },
      \\"text/mathml\\": {
        source: \\"nginx\\",
        extensions: [\\"mml\\"]
      },
      \\"text/mdx\\": {
        compressible: true,
        extensions: [\\"mdx\\"]
      },
      \\"text/mizar\\": {
        source: \\"iana\\"
      },
      \\"text/n3\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true,
        extensions: [\\"n3\\"]
      },
      \\"text/parameters\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\"
      },
      \\"text/parityfec\\": {
        source: \\"iana\\"
      },
      \\"text/plain\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"txt\\", \\"text\\", \\"conf\\", \\"def\\", \\"list\\", \\"log\\", \\"in\\", \\"ini\\"]
      },
      \\"text/provenance-notation\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\"
      },
      \\"text/prs.fallenstein.rst\\": {
        source: \\"iana\\"
      },
      \\"text/prs.lines.tag\\": {
        source: \\"iana\\",
        extensions: [\\"dsc\\"]
      },
      \\"text/prs.prop.logic\\": {
        source: \\"iana\\"
      },
      \\"text/raptorfec\\": {
        source: \\"iana\\"
      },
      \\"text/red\\": {
        source: \\"iana\\"
      },
      \\"text/rfc822-headers\\": {
        source: \\"iana\\"
      },
      \\"text/richtext\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"rtx\\"]
      },
      \\"text/rtf\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"rtf\\"]
      },
      \\"text/rtp-enc-aescm128\\": {
        source: \\"iana\\"
      },
      \\"text/rtploopback\\": {
        source: \\"iana\\"
      },
      \\"text/rtx\\": {
        source: \\"iana\\"
      },
      \\"text/sgml\\": {
        source: \\"iana\\",
        extensions: [\\"sgml\\", \\"sgm\\"]
      },
      \\"text/shaclc\\": {
        source: \\"iana\\"
      },
      \\"text/shex\\": {
        source: \\"iana\\",
        extensions: [\\"shex\\"]
      },
      \\"text/slim\\": {
        extensions: [\\"slim\\", \\"slm\\"]
      },
      \\"text/spdx\\": {
        source: \\"iana\\",
        extensions: [\\"spdx\\"]
      },
      \\"text/strings\\": {
        source: \\"iana\\"
      },
      \\"text/stylus\\": {
        extensions: [\\"stylus\\", \\"styl\\"]
      },
      \\"text/t140\\": {
        source: \\"iana\\"
      },
      \\"text/tab-separated-values\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"tsv\\"]
      },
      \\"text/troff\\": {
        source: \\"iana\\",
        extensions: [\\"t\\", \\"tr\\", \\"roff\\", \\"man\\", \\"me\\", \\"ms\\"]
      },
      \\"text/turtle\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        extensions: [\\"ttl\\"]
      },
      \\"text/ulpfec\\": {
        source: \\"iana\\"
      },
      \\"text/uri-list\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"uri\\", \\"uris\\", \\"urls\\"]
      },
      \\"text/vcard\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"vcard\\"]
      },
      \\"text/vnd.a\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.abc\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.ascii-art\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.curl\\": {
        source: \\"iana\\",
        extensions: [\\"curl\\"]
      },
      \\"text/vnd.curl.dcurl\\": {
        source: \\"apache\\",
        extensions: [\\"dcurl\\"]
      },
      \\"text/vnd.curl.mcurl\\": {
        source: \\"apache\\",
        extensions: [\\"mcurl\\"]
      },
      \\"text/vnd.curl.scurl\\": {
        source: \\"apache\\",
        extensions: [\\"scurl\\"]
      },
      \\"text/vnd.debian.copyright\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\"
      },
      \\"text/vnd.dmclientscript\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.dvb.subtitle\\": {
        source: \\"iana\\",
        extensions: [\\"sub\\"]
      },
      \\"text/vnd.esmertec.theme-descriptor\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\"
      },
      \\"text/vnd.familysearch.gedcom\\": {
        source: \\"iana\\",
        extensions: [\\"ged\\"]
      },
      \\"text/vnd.ficlab.flt\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.fly\\": {
        source: \\"iana\\",
        extensions: [\\"fly\\"]
      },
      \\"text/vnd.fmi.flexstor\\": {
        source: \\"iana\\",
        extensions: [\\"flx\\"]
      },
      \\"text/vnd.gml\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.graphviz\\": {
        source: \\"iana\\",
        extensions: [\\"gv\\"]
      },
      \\"text/vnd.hans\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.hgl\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.in3d.3dml\\": {
        source: \\"iana\\",
        extensions: [\\"3dml\\"]
      },
      \\"text/vnd.in3d.spot\\": {
        source: \\"iana\\",
        extensions: [\\"spot\\"]
      },
      \\"text/vnd.iptc.newsml\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.iptc.nitf\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.latex-z\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.motorola.reflex\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.ms-mediapackage\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.net2phone.commcenter.command\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.radisys.msml-basic-layout\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.senx.warpscript\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.si.uricatalogue\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.sosi\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.sun.j2me.app-descriptor\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        extensions: [\\"jad\\"]
      },
      \\"text/vnd.trolltech.linguist\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\"
      },
      \\"text/vnd.wap.si\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.wap.sl\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.wap.wml\\": {
        source: \\"iana\\",
        extensions: [\\"wml\\"]
      },
      \\"text/vnd.wap.wmlscript\\": {
        source: \\"iana\\",
        extensions: [\\"wmls\\"]
      },
      \\"text/vtt\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true,
        extensions: [\\"vtt\\"]
      },
      \\"text/x-asm\\": {
        source: \\"apache\\",
        extensions: [\\"s\\", \\"asm\\"]
      },
      \\"text/x-c\\": {
        source: \\"apache\\",
        extensions: [\\"c\\", \\"cc\\", \\"cxx\\", \\"cpp\\", \\"h\\", \\"hh\\", \\"dic\\"]
      },
      \\"text/x-component\\": {
        source: \\"nginx\\",
        extensions: [\\"htc\\"]
      },
      \\"text/x-fortran\\": {
        source: \\"apache\\",
        extensions: [\\"f\\", \\"for\\", \\"f77\\", \\"f90\\"]
      },
      \\"text/x-gwt-rpc\\": {
        compressible: true
      },
      \\"text/x-handlebars-template\\": {
        extensions: [\\"hbs\\"]
      },
      \\"text/x-java-source\\": {
        source: \\"apache\\",
        extensions: [\\"java\\"]
      },
      \\"text/x-jquery-tmpl\\": {
        compressible: true
      },
      \\"text/x-lua\\": {
        extensions: [\\"lua\\"]
      },
      \\"text/x-markdown\\": {
        compressible: true,
        extensions: [\\"mkd\\"]
      },
      \\"text/x-nfo\\": {
        source: \\"apache\\",
        extensions: [\\"nfo\\"]
      },
      \\"text/x-opml\\": {
        source: \\"apache\\",
        extensions: [\\"opml\\"]
      },
      \\"text/x-org\\": {
        compressible: true,
        extensions: [\\"org\\"]
      },
      \\"text/x-pascal\\": {
        source: \\"apache\\",
        extensions: [\\"p\\", \\"pas\\"]
      },
      \\"text/x-processing\\": {
        compressible: true,
        extensions: [\\"pde\\"]
      },
      \\"text/x-sass\\": {
        extensions: [\\"sass\\"]
      },
      \\"text/x-scss\\": {
        extensions: [\\"scss\\"]
      },
      \\"text/x-setext\\": {
        source: \\"apache\\",
        extensions: [\\"etx\\"]
      },
      \\"text/x-sfv\\": {
        source: \\"apache\\",
        extensions: [\\"sfv\\"]
      },
      \\"text/x-suse-ymp\\": {
        compressible: true,
        extensions: [\\"ymp\\"]
      },
      \\"text/x-uuencode\\": {
        source: \\"apache\\",
        extensions: [\\"uu\\"]
      },
      \\"text/x-vcalendar\\": {
        source: \\"apache\\",
        extensions: [\\"vcs\\"]
      },
      \\"text/x-vcard\\": {
        source: \\"apache\\",
        extensions: [\\"vcf\\"]
      },
      \\"text/xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xml\\"]
      },
      \\"text/xml-external-parsed-entity\\": {
        source: \\"iana\\"
      },
      \\"text/yaml\\": {
        compressible: true,
        extensions: [\\"yaml\\", \\"yml\\"]
      },
      \\"video/1d-interleaved-parityfec\\": {
        source: \\"iana\\"
      },
      \\"video/3gpp\\": {
        source: \\"iana\\",
        extensions: [\\"3gp\\", \\"3gpp\\"]
      },
      \\"video/3gpp-tt\\": {
        source: \\"iana\\"
      },
      \\"video/3gpp2\\": {
        source: \\"iana\\",
        extensions: [\\"3g2\\"]
      },
      \\"video/av1\\": {
        source: \\"iana\\"
      },
      \\"video/bmpeg\\": {
        source: \\"iana\\"
      },
      \\"video/bt656\\": {
        source: \\"iana\\"
      },
      \\"video/celb\\": {
        source: \\"iana\\"
      },
      \\"video/dv\\": {
        source: \\"iana\\"
      },
      \\"video/encaprtp\\": {
        source: \\"iana\\"
      },
      \\"video/ffv1\\": {
        source: \\"iana\\"
      },
      \\"video/flexfec\\": {
        source: \\"iana\\"
      },
      \\"video/h261\\": {
        source: \\"iana\\",
        extensions: [\\"h261\\"]
      },
      \\"video/h263\\": {
        source: \\"iana\\",
        extensions: [\\"h263\\"]
      },
      \\"video/h263-1998\\": {
        source: \\"iana\\"
      },
      \\"video/h263-2000\\": {
        source: \\"iana\\"
      },
      \\"video/h264\\": {
        source: \\"iana\\",
        extensions: [\\"h264\\"]
      },
      \\"video/h264-rcdo\\": {
        source: \\"iana\\"
      },
      \\"video/h264-svc\\": {
        source: \\"iana\\"
      },
      \\"video/h265\\": {
        source: \\"iana\\"
      },
      \\"video/iso.segment\\": {
        source: \\"iana\\",
        extensions: [\\"m4s\\"]
      },
      \\"video/jpeg\\": {
        source: \\"iana\\",
        extensions: [\\"jpgv\\"]
      },
      \\"video/jpeg2000\\": {
        source: \\"iana\\"
      },
      \\"video/jpm\\": {
        source: \\"apache\\",
        extensions: [\\"jpm\\", \\"jpgm\\"]
      },
      \\"video/jxsv\\": {
        source: \\"iana\\"
      },
      \\"video/mj2\\": {
        source: \\"iana\\",
        extensions: [\\"mj2\\", \\"mjp2\\"]
      },
      \\"video/mp1s\\": {
        source: \\"iana\\"
      },
      \\"video/mp2p\\": {
        source: \\"iana\\"
      },
      \\"video/mp2t\\": {
        source: \\"iana\\",
        extensions: [\\"ts\\"]
      },
      \\"video/mp4\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"mp4\\", \\"mp4v\\", \\"mpg4\\"]
      },
      \\"video/mp4v-es\\": {
        source: \\"iana\\"
      },
      \\"video/mpeg\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"mpeg\\", \\"mpg\\", \\"mpe\\", \\"m1v\\", \\"m2v\\"]
      },
      \\"video/mpeg4-generic\\": {
        source: \\"iana\\"
      },
      \\"video/mpv\\": {
        source: \\"iana\\"
      },
      \\"video/nv\\": {
        source: \\"iana\\"
      },
      \\"video/ogg\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"ogv\\"]
      },
      \\"video/parityfec\\": {
        source: \\"iana\\"
      },
      \\"video/pointer\\": {
        source: \\"iana\\"
      },
      \\"video/quicktime\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"qt\\", \\"mov\\"]
      },
      \\"video/raptorfec\\": {
        source: \\"iana\\"
      },
      \\"video/raw\\": {
        source: \\"iana\\"
      },
      \\"video/rtp-enc-aescm128\\": {
        source: \\"iana\\"
      },
      \\"video/rtploopback\\": {
        source: \\"iana\\"
      },
      \\"video/rtx\\": {
        source: \\"iana\\"
      },
      \\"video/scip\\": {
        source: \\"iana\\"
      },
      \\"video/smpte291\\": {
        source: \\"iana\\"
      },
      \\"video/smpte292m\\": {
        source: \\"iana\\"
      },
      \\"video/ulpfec\\": {
        source: \\"iana\\"
      },
      \\"video/vc1\\": {
        source: \\"iana\\"
      },
      \\"video/vc2\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.cctv\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.dece.hd\\": {
        source: \\"iana\\",
        extensions: [\\"uvh\\", \\"uvvh\\"]
      },
      \\"video/vnd.dece.mobile\\": {
        source: \\"iana\\",
        extensions: [\\"uvm\\", \\"uvvm\\"]
      },
      \\"video/vnd.dece.mp4\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.dece.pd\\": {
        source: \\"iana\\",
        extensions: [\\"uvp\\", \\"uvvp\\"]
      },
      \\"video/vnd.dece.sd\\": {
        source: \\"iana\\",
        extensions: [\\"uvs\\", \\"uvvs\\"]
      },
      \\"video/vnd.dece.video\\": {
        source: \\"iana\\",
        extensions: [\\"uvv\\", \\"uvvv\\"]
      },
      \\"video/vnd.directv.mpeg\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.directv.mpeg-tts\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.dlna.mpeg-tts\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.dvb.file\\": {
        source: \\"iana\\",
        extensions: [\\"dvb\\"]
      },
      \\"video/vnd.fvt\\": {
        source: \\"iana\\",
        extensions: [\\"fvt\\"]
      },
      \\"video/vnd.hns.video\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.iptvforum.1dparityfec-1010\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.iptvforum.1dparityfec-2005\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.iptvforum.2dparityfec-1010\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.iptvforum.2dparityfec-2005\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.iptvforum.ttsavc\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.iptvforum.ttsmpeg2\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.motorola.video\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.motorola.videop\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.mpegurl\\": {
        source: \\"iana\\",
        extensions: [\\"mxu\\", \\"m4u\\"]
      },
      \\"video/vnd.ms-playready.media.pyv\\": {
        source: \\"iana\\",
        extensions: [\\"pyv\\"]
      },
      \\"video/vnd.nokia.interleaved-multimedia\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.nokia.mp4vr\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.nokia.videovoip\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.objectvideo\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.radgamettools.bink\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.radgamettools.smacker\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.sealed.mpeg1\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.sealed.mpeg4\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.sealed.swf\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.sealedmedia.softseal.mov\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.uvvu.mp4\\": {
        source: \\"iana\\",
        extensions: [\\"uvu\\", \\"uvvu\\"]
      },
      \\"video/vnd.vivo\\": {
        source: \\"iana\\",
        extensions: [\\"viv\\"]
      },
      \\"video/vnd.youtube.yt\\": {
        source: \\"iana\\"
      },
      \\"video/vp8\\": {
        source: \\"iana\\"
      },
      \\"video/vp9\\": {
        source: \\"iana\\"
      },
      \\"video/webm\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"webm\\"]
      },
      \\"video/x-f4v\\": {
        source: \\"apache\\",
        extensions: [\\"f4v\\"]
      },
      \\"video/x-fli\\": {
        source: \\"apache\\",
        extensions: [\\"fli\\"]
      },
      \\"video/x-flv\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"flv\\"]
      },
      \\"video/x-m4v\\": {
        source: \\"apache\\",
        extensions: [\\"m4v\\"]
      },
      \\"video/x-matroska\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"mkv\\", \\"mk3d\\", \\"mks\\"]
      },
      \\"video/x-mng\\": {
        source: \\"apache\\",
        extensions: [\\"mng\\"]
      },
      \\"video/x-ms-asf\\": {
        source: \\"apache\\",
        extensions: [\\"asf\\", \\"asx\\"]
      },
      \\"video/x-ms-vob\\": {
        source: \\"apache\\",
        extensions: [\\"vob\\"]
      },
      \\"video/x-ms-wm\\": {
        source: \\"apache\\",
        extensions: [\\"wm\\"]
      },
      \\"video/x-ms-wmv\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"wmv\\"]
      },
      \\"video/x-ms-wmx\\": {
        source: \\"apache\\",
        extensions: [\\"wmx\\"]
      },
      \\"video/x-ms-wvx\\": {
        source: \\"apache\\",
        extensions: [\\"wvx\\"]
      },
      \\"video/x-msvideo\\": {
        source: \\"apache\\",
        extensions: [\\"avi\\"]
      },
      \\"video/x-sgi-movie\\": {
        source: \\"apache\\",
        extensions: [\\"movie\\"]
      },
      \\"video/x-smv\\": {
        source: \\"apache\\",
        extensions: [\\"smv\\"]
      },
      \\"x-conference/x-cooltalk\\": {
        source: \\"apache\\",
        extensions: [\\"ice\\"]
      },
      \\"x-shader/x-fragment\\": {
        compressible: true
      },
      \\"x-shader/x-vertex\\": {
        compressible: true
      }
    };
  }
});

// .yarn/cache/mime-db-npm-1.52.0-b5371d6fd2-0d99a03585.zip/node_modules/mime-db/index.js
var require_mime_db = __commonJS({
  \\".yarn/cache/mime-db-npm-1.52.0-b5371d6fd2-0d99a03585.zip/node_modules/mime-db/index.js\\"(exports, module2) {
    module2.exports = require_db();
  }
});

// .yarn/cache/mime-types-npm-2.1.35-dd9ea9f3e2-89a5b7f1de.zip/node_modules/mime-types/index.js
var require_mime_types = __commonJS({
  \\".yarn/cache/mime-types-npm-2.1.35-dd9ea9f3e2-89a5b7f1de.zip/node_modules/mime-types/index.js\\"(exports) {
    \\"use strict\\";
    var db = require_mime_db();
    var extname = require(\\"path\\").extname;
    var EXTRACT_TYPE_REGEXP = /^\\\\s*([^;\\\\s]*)(?:;|\\\\s|$)/;
    var TEXT_TYPE_REGEXP = /^text\\\\//i;
    exports.charset = charset;
    exports.charsets = { lookup: charset };
    exports.contentType = contentType;
    exports.extension = extension;
    exports.extensions = /* @__PURE__ */ Object.create(null);
    exports.lookup = lookup;
    exports.types = /* @__PURE__ */ Object.create(null);
    populateMaps(exports.extensions, exports.types);
    function charset(type) {
      if (!type || typeof type !== \\"string\\") {
        return false;
      }
      var match = EXTRACT_TYPE_REGEXP.exec(type);
      var mime = match && db[match[1].toLowerCase()];
      if (mime && mime.charset) {
        return mime.charset;
      }
      if (match && TEXT_TYPE_REGEXP.test(match[1])) {
        return \\"UTF-8\\";
      }
      return false;
    }
    function contentType(str) {
      if (!str || typeof str !== \\"string\\") {
        return false;
      }
      var mime = str.indexOf(\\"/\\") === -1 ? exports.lookup(str) : str;
      if (!mime) {
        return false;
      }
      if (mime.indexOf(\\"charset\\") === -1) {
        var charset2 = exports.charset(mime);
        if (charset2)
          mime += \\"; charset=\\" + charset2.toLowerCase();
      }
      return mime;
    }
    function extension(type) {
      if (!type || typeof type !== \\"string\\") {
        return false;
      }
      var match = EXTRACT_TYPE_REGEXP.exec(type);
      var exts = match && exports.extensions[match[1].toLowerCase()];
      if (!exts || !exts.length) {
        return false;
      }
      return exts[0];
    }
    function lookup(path) {
      if (!path || typeof path !== \\"string\\") {
        return false;
      }
      var extension2 = extname(\\"x.\\" + path).toLowerCase().substr(1);
      if (!extension2) {
        return false;
      }
      return exports.types[extension2] || false;
    }
    function populateMaps(extensions, types) {
      var preference = [\\"nginx\\", \\"apache\\", void 0, \\"iana\\"];
      Object.keys(db).forEach(function forEachMimeType(type) {
        var mime = db[type];
        var exts = mime.extensions;
        if (!exts || !exts.length) {
          return;
        }
        extensions[type] = exts;
        for (var i = 0; i < exts.length; i++) {
          var extension2 = exts[i];
          if (types[extension2]) {
            var from = preference.indexOf(db[types[extension2]].source);
            var to = preference.indexOf(mime.source);
            if (types[extension2] !== \\"application/octet-stream\\" && (from > to || from === to && types[extension2].substr(0, 12) === \\"application/\\")) {
              continue;
            }
          }
          types[extension2] = type;
        }
      });
    }
  }
});

// .yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/lib/defer.js
var require_defer = __commonJS({
  \\".yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/lib/defer.js\\"(exports, module2) {
    module2.exports = defer;
    function defer(fn) {
      var nextTick = typeof setImmediate == \\"function\\" ? setImmediate : typeof process == \\"object\\" && typeof process.nextTick == \\"function\\" ? process.nextTick : null;
      if (nextTick) {
        nextTick(fn);
      } else {
        setTimeout(fn, 0);
      }
    }
  }
});

// .yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/lib/async.js
var require_async = __commonJS({
  \\".yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/lib/async.js\\"(exports, module2) {
    var defer = require_defer();
    module2.exports = async;
    function async(callback) {
      var isAsync = false;
      defer(function() {
        isAsync = true;
      });
      return function async_callback(err, result) {
        if (isAsync) {
          callback(err, result);
        } else {
          defer(function nextTick_callback() {
            callback(err, result);
          });
        }
      };
    }
  }
});

// .yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/lib/abort.js
var require_abort = __commonJS({
  \\".yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/lib/abort.js\\"(exports, module2) {
    module2.exports = abort;
    function abort(state) {
      Object.keys(state.jobs).forEach(clean.bind(state));
      state.jobs = {};
    }
    function clean(key) {
      if (typeof this.jobs[key] == \\"function\\") {
        this.jobs[key]();
      }
    }
  }
});

// .yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/lib/iterate.js
var require_iterate = __commonJS({
  \\".yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/lib/iterate.js\\"(exports, module2) {
    var async = require_async();
    var abort = require_abort();
    module2.exports = iterate;
    function iterate(list2, iterator, state, callback) {
      var key = state[\\"keyedList\\"] ? state[\\"keyedList\\"][state.index] : state.index;
      state.jobs[key] = runJob(iterator, key, list2[key], function(error, output) {
        if (!(key in state.jobs)) {
          return;
        }
        delete state.jobs[key];
        if (error) {
          abort(state);
        } else {
          state.results[key] = output;
        }
        callback(error, state.results);
      });
    }
    function runJob(iterator, key, item, callback) {
      var aborter;
      if (iterator.length == 2) {
        aborter = iterator(item, async(callback));
      } else {
        aborter = iterator(item, key, async(callback));
      }
      return aborter;
    }
  }
});

// .yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/lib/state.js
var require_state = __commonJS({
  \\".yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/lib/state.js\\"(exports, module2) {
    module2.exports = state;
    function state(list2, sortMethod) {
      var isNamedList = !Array.isArray(list2), initState = {
        index: 0,
        keyedList: isNamedList || sortMethod ? Object.keys(list2) : null,
        jobs: {},
        results: isNamedList ? {} : [],
        size: isNamedList ? Object.keys(list2).length : list2.length
      };
      if (sortMethod) {
        initState.keyedList.sort(isNamedList ? sortMethod : function(a, b) {
          return sortMethod(list2[a], list2[b]);
        });
      }
      return initState;
    }
  }
});

// .yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/lib/terminator.js
var require_terminator = __commonJS({
  \\".yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/lib/terminator.js\\"(exports, module2) {
    var abort = require_abort();
    var async = require_async();
    module2.exports = terminator;
    function terminator(callback) {
      if (!Object.keys(this.jobs).length) {
        return;
      }
      this.index = this.size;
      abort(this);
      async(callback)(null, this.results);
    }
  }
});

// .yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/parallel.js
var require_parallel = __commonJS({
  \\".yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/parallel.js\\"(exports, module2) {
    var iterate = require_iterate();
    var initState = require_state();
    var terminator = require_terminator();
    module2.exports = parallel;
    function parallel(list2, iterator, callback) {
      var state = initState(list2);
      while (state.index < (state[\\"keyedList\\"] || list2).length) {
        iterate(list2, iterator, state, function(error, result) {
          if (error) {
            callback(error, result);
            return;
          }
          if (Object.keys(state.jobs).length === 0) {
            callback(null, state.results);
            return;
          }
        });
        state.index++;
      }
      return terminator.bind(state, callback);
    }
  }
});

// .yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/serialOrdered.js
var require_serialOrdered = __commonJS({
  \\".yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/serialOrdered.js\\"(exports, module2) {
    var iterate = require_iterate();
    var initState = require_state();
    var terminator = require_terminator();
    module2.exports = serialOrdered;
    module2.exports.ascending = ascending;
    module2.exports.descending = descending;
    function serialOrdered(list2, iterator, sortMethod, callback) {
      var state = initState(list2, sortMethod);
      iterate(list2, iterator, state, function iteratorHandler(error, result) {
        if (error) {
          callback(error, result);
          return;
        }
        state.index++;
        if (state.index < (state[\\"keyedList\\"] || list2).length) {
          iterate(list2, iterator, state, iteratorHandler);
          return;
        }
        callback(null, state.results);
      });
      return terminator.bind(state, callback);
    }
    function ascending(a, b) {
      return a < b ? -1 : a > b ? 1 : 0;
    }
    function descending(a, b) {
      return -1 * ascending(a, b);
    }
  }
});

// .yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/serial.js
var require_serial = __commonJS({
  \\".yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/serial.js\\"(exports, module2) {
    var serialOrdered = require_serialOrdered();
    module2.exports = serial;
    function serial(list2, iterator, callback) {
      return serialOrdered(list2, iterator, null, callback);
    }
  }
});

// .yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/index.js
var require_asynckit = __commonJS({
  \\".yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/index.js\\"(exports, module2) {
    module2.exports = {
      parallel: require_parallel(),
      serial: require_serial(),
      serialOrdered: require_serialOrdered()
    };
  }
});

// .yarn/cache/form-data-npm-4.0.0-916facec2d-01135bf867.zip/node_modules/form-data/lib/populate.js
var require_populate = __commonJS({
  \\".yarn/cache/form-data-npm-4.0.0-916facec2d-01135bf867.zip/node_modules/form-data/lib/populate.js\\"(exports, module2) {
    module2.exports = function(dst, src) {
      Object.keys(src).forEach(function(prop) {
        dst[prop] = dst[prop] || src[prop];
      });
      return dst;
    };
  }
});

// .yarn/cache/form-data-npm-4.0.0-916facec2d-01135bf867.zip/node_modules/form-data/lib/form_data.js
var require_form_data = __commonJS({
  \\".yarn/cache/form-data-npm-4.0.0-916facec2d-01135bf867.zip/node_modules/form-data/lib/form_data.js\\"(exports, module2) {
    var CombinedStream = require_combined_stream();
    var util2 = require(\\"util\\");
    var path = require(\\"path\\");
    var http2 = require(\\"http\\");
    var https2 = require(\\"https\\");
    var parseUrl = require(\\"url\\").parse;
    var fs = require(\\"fs\\");
    var Stream = require(\\"stream\\").Stream;
    var mime = require_mime_types();
    var asynckit = require_asynckit();
    var populate = require_populate();
    module2.exports = FormData3;
    util2.inherits(FormData3, CombinedStream);
    function FormData3(options) {
      if (!(this instanceof FormData3)) {
        return new FormData3(options);
      }
      this._overheadLength = 0;
      this._valueLength = 0;
      this._valuesToMeasure = [];
      CombinedStream.call(this);
      options = options || {};
      for (var option in options) {
        this[option] = options[option];
      }
    }
    FormData3.LINE_BREAK = \\"\\\\r\\\\n\\";
    FormData3.DEFAULT_CONTENT_TYPE = \\"application/octet-stream\\";
    FormData3.prototype.append = function(field, value, options) {
      options = options || {};
      if (typeof options == \\"string\\") {
        options = { filename: options };
      }
      var append2 = CombinedStream.prototype.append.bind(this);
      if (typeof value == \\"number\\") {
        value = \\"\\" + value;
      }
      if (util2.isArray(value)) {
        this._error(new Error(\\"Arrays are not supported.\\"));
        return;
      }
      var header = this._multiPartHeader(field, value, options);
      var footer = this._multiPartFooter();
      append2(header);
      append2(value);
      append2(footer);
      this._trackLength(header, value, options);
    };
    FormData3.prototype._trackLength = function(header, value, options) {
      var valueLength = 0;
      if (options.knownLength != null) {
        valueLength += +options.knownLength;
      } else if (Buffer.isBuffer(value)) {
        valueLength = value.length;
      } else if (typeof value === \\"string\\") {
        valueLength = Buffer.byteLength(value);
      }
      this._valueLength += valueLength;
      this._overheadLength += Buffer.byteLength(header) + FormData3.LINE_BREAK.length;
      if (!value || !value.path && !(value.readable && value.hasOwnProperty(\\"httpVersion\\")) && !(value instanceof Stream)) {
        return;
      }
      if (!options.knownLength) {
        this._valuesToMeasure.push(value);
      }
    };
    FormData3.prototype._lengthRetriever = function(value, callback) {
      if (value.hasOwnProperty(\\"fd\\")) {
        if (value.end != void 0 && value.end != Infinity && value.start != void 0) {
          callback(null, value.end + 1 - (value.start ? value.start : 0));
        } else {
          fs.stat(value.path, function(err, stat) {
            var fileSize;
            if (err) {
              callback(err);
              return;
            }
            fileSize = stat.size - (value.start ? value.start : 0);
            callback(null, fileSize);
          });
        }
      } else if (value.hasOwnProperty(\\"httpVersion\\")) {
        callback(null, +value.headers[\\"content-length\\"]);
      } else if (value.hasOwnProperty(\\"httpModule\\")) {
        value.on(\\"response\\", function(response) {
          value.pause();
          callback(null, +response.headers[\\"content-length\\"]);
        });
        value.resume();
      } else {
        callback(\\"Unknown stream\\");
      }
    };
    FormData3.prototype._multiPartHeader = function(field, value, options) {
      if (typeof options.header == \\"string\\") {
        return options.header;
      }
      var contentDisposition = this._getContentDisposition(value, options);
      var contentType = this._getContentType(value, options);
      var contents = \\"\\";
      var headers = {
        // add custom disposition as third element or keep it two elements if not
        \\"Content-Disposition\\": [\\"form-data\\", 'name=\\"' + field + '\\"'].concat(contentDisposition || []),
        // if no content type. allow it to be empty array
        \\"Content-Type\\": [].concat(contentType || [])
      };
      if (typeof options.header == \\"object\\") {
        populate(headers, options.header);
      }
      var header;
      for (var prop in headers) {
        if (!headers.hasOwnProperty(prop))
          continue;
        header = headers[prop];
        if (header == null) {
          continue;
        }
        if (!Array.isArray(header)) {
          header = [header];
        }
        if (header.length) {
          contents += prop + \\": \\" + header.join(\\"; \\") + FormData3.LINE_BREAK;
        }
      }
      return \\"--\\" + this.getBoundary() + FormData3.LINE_BREAK + contents + FormData3.LINE_BREAK;
    };
    FormData3.prototype._getContentDisposition = function(value, options) {
      var filename, contentDisposition;
      if (typeof options.filepath === \\"string\\") {
        filename = path.normalize(options.filepath).replace(/\\\\\\\\/g, \\"/\\");
      } else if (options.filename || value.name || value.path) {
        filename = path.basename(options.filename || value.name || value.path);
      } else if (value.readable && value.hasOwnProperty(\\"httpVersion\\")) {
        filename = path.basename(value.client._httpMessage.path || \\"\\");
      }
      if (filename) {
        contentDisposition = 'filename=\\"' + filename + '\\"';
      }
      return contentDisposition;
    };
    FormData3.prototype._getContentType = function(value, options) {
      var contentType = options.contentType;
      if (!contentType && value.name) {
        contentType = mime.lookup(value.name);
      }
      if (!contentType && value.path) {
        contentType = mime.lookup(value.path);
      }
      if (!contentType && value.readable && value.hasOwnProperty(\\"httpVersion\\")) {
        contentType = value.headers[\\"content-type\\"];
      }
      if (!contentType && (options.filepath || options.filename)) {
        contentType = mime.lookup(options.filepath || options.filename);
      }
      if (!contentType && typeof value == \\"object\\") {
        contentType = FormData3.DEFAULT_CONTENT_TYPE;
      }
      return contentType;
    };
    FormData3.prototype._multiPartFooter = function() {
      return function(next) {
        var footer = FormData3.LINE_BREAK;
        var lastPart = this._streams.length === 0;
        if (lastPart) {
          footer += this._lastBoundary();
        }
        next(footer);
      }.bind(this);
    };
    FormData3.prototype._lastBoundary = function() {
      return \\"--\\" + this.getBoundary() + \\"--\\" + FormData3.LINE_BREAK;
    };
    FormData3.prototype.getHeaders = function(userHeaders) {
      var header;
      var formHeaders = {
        \\"content-type\\": \\"multipart/form-data; boundary=\\" + this.getBoundary()
      };
      for (header in userHeaders) {
        if (userHeaders.hasOwnProperty(header)) {
          formHeaders[header.toLowerCase()] = userHeaders[header];
        }
      }
      return formHeaders;
    };
    FormData3.prototype.setBoundary = function(boundary) {
      this._boundary = boundary;
    };
    FormData3.prototype.getBoundary = function() {
      if (!this._boundary) {
        this._generateBoundary();
      }
      return this._boundary;
    };
    FormData3.prototype.getBuffer = function() {
      var dataBuffer = new Buffer.alloc(0);
      var boundary = this.getBoundary();
      for (var i = 0, len = this._streams.length; i < len; i++) {
        if (typeof this._streams[i] !== \\"function\\") {
          if (Buffer.isBuffer(this._streams[i])) {
            dataBuffer = Buffer.concat([dataBuffer, this._streams[i]]);
          } else {
            dataBuffer = Buffer.concat([dataBuffer, Buffer.from(this._streams[i])]);
          }
          if (typeof this._streams[i] !== \\"string\\" || this._streams[i].substring(2, boundary.length + 2) !== boundary) {
            dataBuffer = Buffer.concat([dataBuffer, Buffer.from(FormData3.LINE_BREAK)]);
          }
        }
      }
      return Buffer.concat([dataBuffer, Buffer.from(this._lastBoundary())]);
    };
    FormData3.prototype._generateBoundary = function() {
      var boundary = \\"--------------------------\\";
      for (var i = 0; i < 24; i++) {
        boundary += Math.floor(Math.random() * 10).toString(16);
      }
      this._boundary = boundary;
    };
    FormData3.prototype.getLengthSync = function() {
      var knownLength = this._overheadLength + this._valueLength;
      if (this._streams.length) {
        knownLength += this._lastBoundary().length;
      }
      if (!this.hasKnownLength()) {
        this._error(new Error(\\"Cannot calculate proper length in synchronous way.\\"));
      }
      return knownLength;
    };
    FormData3.prototype.hasKnownLength = function() {
      var hasKnownLength = true;
      if (this._valuesToMeasure.length) {
        hasKnownLength = false;
      }
      return hasKnownLength;
    };
    FormData3.prototype.getLength = function(cb) {
      var knownLength = this._overheadLength + this._valueLength;
      if (this._streams.length) {
        knownLength += this._lastBoundary().length;
      }
      if (!this._valuesToMeasure.length) {
        process.nextTick(cb.bind(this, null, knownLength));
        return;
      }
      asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {
        if (err) {
          cb(err);
          return;
        }
        values.forEach(function(length) {
          knownLength += length;
        });
        cb(null, knownLength);
      });
    };
    FormData3.prototype.submit = function(params, cb) {
      var request, options, defaults2 = { method: \\"post\\" };
      if (typeof params == \\"string\\") {
        params = parseUrl(params);
        options = populate({
          port: params.port,
          path: params.pathname,
          host: params.hostname,
          protocol: params.protocol
        }, defaults2);
      } else {
        options = populate(params, defaults2);
        if (!options.port) {
          options.port = options.protocol == \\"https:\\" ? 443 : 80;
        }
      }
      options.headers = this.getHeaders(params.headers);
      if (options.protocol == \\"https:\\") {
        request = https2.request(options);
      } else {
        request = http2.request(options);
      }
      this.getLength(function(err, length) {
        if (err && err !== \\"Unknown stream\\") {
          this._error(err);
          return;
        }
        if (length) {
          request.setHeader(\\"Content-Length\\", length);
        }
        this.pipe(request);
        if (cb) {
          var onResponse;
          var callback = function(error, responce) {
            request.removeListener(\\"error\\", callback);
            request.removeListener(\\"response\\", onResponse);
            return cb.call(this, error, responce);
          };
          onResponse = callback.bind(this, null);
          request.on(\\"error\\", callback);
          request.on(\\"response\\", onResponse);
        }
      }.bind(this));
      return request;
    };
    FormData3.prototype._error = function(err) {
      if (!this.error) {
        this.error = err;
        this.pause();
        this.emit(\\"error\\", err);
      }
    };
    FormData3.prototype.toString = function() {
      return \\"[object FormData]\\";
    };
  }
});

// .yarn/cache/proxy-from-env-npm-1.1.0-c13d07f26b-ed7fcc2ba0.zip/node_modules/proxy-from-env/index.js
var require_proxy_from_env = __commonJS({
  \\".yarn/cache/proxy-from-env-npm-1.1.0-c13d07f26b-ed7fcc2ba0.zip/node_modules/proxy-from-env/index.js\\"(exports) {
    \\"use strict\\";
    var parseUrl = require(\\"url\\").parse;
    var DEFAULT_PORTS = {
      ftp: 21,
      gopher: 70,
      http: 80,
      https: 443,
      ws: 80,
      wss: 443
    };
    var stringEndsWith = String.prototype.endsWith || function(s) {
      return s.length <= this.length && this.indexOf(s, this.length - s.length) !== -1;
    };
    function getProxyForUrl2(url2) {
      var parsedUrl = typeof url2 === \\"string\\" ? parseUrl(url2) : url2 || {};
      var proto = parsedUrl.protocol;
      var hostname = parsedUrl.host;
      var port = parsedUrl.port;
      if (typeof hostname !== \\"string\\" || !hostname || typeof proto !== \\"string\\") {
        return \\"\\";
      }
      proto = proto.split(\\":\\", 1)[0];
      hostname = hostname.replace(/:\\\\d*$/, \\"\\");
      port = parseInt(port) || DEFAULT_PORTS[proto] || 0;
      if (!shouldProxy(hostname, port)) {
        return \\"\\";
      }
      var proxy = getEnv(\\"npm_config_\\" + proto + \\"_proxy\\") || getEnv(proto + \\"_proxy\\") || getEnv(\\"npm_config_proxy\\") || getEnv(\\"all_proxy\\");
      if (proxy && proxy.indexOf(\\"://\\") === -1) {
        proxy = proto + \\"://\\" + proxy;
      }
      return proxy;
    }
    function shouldProxy(hostname, port) {
      var NO_PROXY = (getEnv(\\"npm_config_no_proxy\\") || getEnv(\\"no_proxy\\")).toLowerCase();
      if (!NO_PROXY) {
        return true;
      }
      if (NO_PROXY === \\"*\\") {
        return false;
      }
      return NO_PROXY.split(/[,\\\\s]/).every(function(proxy) {
        if (!proxy) {
          return true;
        }
        var parsedProxy = proxy.match(/^(.+):(\\\\d+)$/);
        var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;
        var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;
        if (parsedProxyPort && parsedProxyPort !== port) {
          return true;
        }
        if (!/^[.*]/.test(parsedProxyHostname)) {
          return hostname !== parsedProxyHostname;
        }
        if (parsedProxyHostname.charAt(0) === \\"*\\") {
          parsedProxyHostname = parsedProxyHostname.slice(1);
        }
        return !stringEndsWith.call(hostname, parsedProxyHostname);
      });
    }
    function getEnv(key) {
      return process.env[key.toLowerCase()] || process.env[key.toUpperCase()] || \\"\\";
    }
    exports.getProxyForUrl = getProxyForUrl2;
  }
});

// .yarn/__virtual__/follow-redirects-virtual-359bc4c55c/0/cache/follow-redirects-npm-1.15.2-1ec1dd82be-faa66059b6.zip/node_modules/follow-redirects/debug.js
var require_debug = __commonJS({
  \\".yarn/__virtual__/follow-redirects-virtual-359bc4c55c/0/cache/follow-redirects-npm-1.15.2-1ec1dd82be-faa66059b6.zip/node_modules/follow-redirects/debug.js\\"(exports, module2) {
    var debug;
    module2.exports = function() {
      if (!debug) {
        try {
          debug = require(\\"debug\\")(\\"follow-redirects\\");
        } catch (error) {
        }
        if (typeof debug !== \\"function\\") {
          debug = function() {
          };
        }
      }
      debug.apply(null, arguments);
    };
  }
});

// .yarn/__virtual__/follow-redirects-virtual-359bc4c55c/0/cache/follow-redirects-npm-1.15.2-1ec1dd82be-faa66059b6.zip/node_modules/follow-redirects/index.js
var require_follow_redirects = __commonJS({
  \\".yarn/__virtual__/follow-redirects-virtual-359bc4c55c/0/cache/follow-redirects-npm-1.15.2-1ec1dd82be-faa66059b6.zip/node_modules/follow-redirects/index.js\\"(exports, module2) {
    var url2 = require(\\"url\\");
    var URL2 = url2.URL;
    var http2 = require(\\"http\\");
    var https2 = require(\\"https\\");
    var Writable = require(\\"stream\\").Writable;
    var assert = require(\\"assert\\");
    var debug = require_debug();
    var events = [\\"abort\\", \\"aborted\\", \\"connect\\", \\"error\\", \\"socket\\", \\"timeout\\"];
    var eventHandlers = /* @__PURE__ */ Object.create(null);
    events.forEach(function(event) {
      eventHandlers[event] = function(arg1, arg2, arg3) {
        this._redirectable.emit(event, arg1, arg2, arg3);
      };
    });
    var InvalidUrlError = createErrorType(
      \\"ERR_INVALID_URL\\",
      \\"Invalid URL\\",
      TypeError
    );
    var RedirectionError = createErrorType(
      \\"ERR_FR_REDIRECTION_FAILURE\\",
      \\"Redirected request failed\\"
    );
    var TooManyRedirectsError = createErrorType(
      \\"ERR_FR_TOO_MANY_REDIRECTS\\",
      \\"Maximum number of redirects exceeded\\"
    );
    var MaxBodyLengthExceededError = createErrorType(
      \\"ERR_FR_MAX_BODY_LENGTH_EXCEEDED\\",
      \\"Request body larger than maxBodyLength limit\\"
    );
    var WriteAfterEndError = createErrorType(
      \\"ERR_STREAM_WRITE_AFTER_END\\",
      \\"write after end\\"
    );
    function RedirectableRequest(options, responseCallback) {
      Writable.call(this);
      this._sanitizeOptions(options);
      this._options = options;
      this._ended = false;
      this._ending = false;
      this._redirectCount = 0;
      this._redirects = [];
      this._requestBodyLength = 0;
      this._requestBodyBuffers = [];
      if (responseCallback) {
        this.on(\\"response\\", responseCallback);
      }
      var self2 = this;
      this._onNativeResponse = function(response) {
        self2._processResponse(response);
      };
      this._performRequest();
    }
    RedirectableRequest.prototype = Object.create(Writable.prototype);
    RedirectableRequest.prototype.abort = function() {
      abortRequest(this._currentRequest);
      this.emit(\\"abort\\");
    };
    RedirectableRequest.prototype.write = function(data, encoding, callback) {
      if (this._ending) {
        throw new WriteAfterEndError();
      }
      if (!isString2(data) && !isBuffer2(data)) {
        throw new TypeError(\\"data should be a string, Buffer or Uint8Array\\");
      }
      if (isFunction2(encoding)) {
        callback = encoding;
        encoding = null;
      }
      if (data.length === 0) {
        if (callback) {
          callback();
        }
        return;
      }
      if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
        this._requestBodyLength += data.length;
        this._requestBodyBuffers.push({ data, encoding });
        this._currentRequest.write(data, encoding, callback);
      } else {
        this.emit(\\"error\\", new MaxBodyLengthExceededError());
        this.abort();
      }
    };
    RedirectableRequest.prototype.end = function(data, encoding, callback) {
      if (isFunction2(data)) {
        callback = data;
        data = encoding = null;
      } else if (isFunction2(encoding)) {
        callback = encoding;
        encoding = null;
      }
      if (!data) {
        this._ended = this._ending = true;
        this._currentRequest.end(null, null, callback);
      } else {
        var self2 = this;
        var currentRequest = this._currentRequest;
        this.write(data, encoding, function() {
          self2._ended = true;
          currentRequest.end(null, null, callback);
        });
        this._ending = true;
      }
    };
    RedirectableRequest.prototype.setHeader = function(name, value) {
      this._options.headers[name] = value;
      this._currentRequest.setHeader(name, value);
    };
    RedirectableRequest.prototype.removeHeader = function(name) {
      delete this._options.headers[name];
      this._currentRequest.removeHeader(name);
    };
    RedirectableRequest.prototype.setTimeout = function(msecs, callback) {
      var self2 = this;
      function destroyOnTimeout(socket) {
        socket.setTimeout(msecs);
        socket.removeListener(\\"timeout\\", socket.destroy);
        socket.addListener(\\"timeout\\", socket.destroy);
      }
      function startTimer(socket) {
        if (self2._timeout) {
          clearTimeout(self2._timeout);
        }
        self2._timeout = setTimeout(function() {
          self2.emit(\\"timeout\\");
          clearTimer();
        }, msecs);
        destroyOnTimeout(socket);
      }
      function clearTimer() {
        if (self2._timeout) {
          clearTimeout(self2._timeout);
          self2._timeout = null;
        }
        self2.removeListener(\\"abort\\", clearTimer);
        self2.removeListener(\\"error\\", clearTimer);
        self2.removeListener(\\"response\\", clearTimer);
        if (callback) {
          self2.removeListener(\\"timeout\\", callback);
        }
        if (!self2.socket) {
          self2._currentRequest.removeListener(\\"socket\\", startTimer);
        }
      }
      if (callback) {
        this.on(\\"timeout\\", callback);
      }
      if (this.socket) {
        startTimer(this.socket);
      } else {
        this._currentRequest.once(\\"socket\\", startTimer);
      }
      this.on(\\"socket\\", destroyOnTimeout);
      this.on(\\"abort\\", clearTimer);
      this.on(\\"error\\", clearTimer);
      this.on(\\"response\\", clearTimer);
      return this;
    };
    [
      \\"flushHeaders\\",
      \\"getHeader\\",
      \\"setNoDelay\\",
      \\"setSocketKeepAlive\\"
    ].forEach(function(method) {
      RedirectableRequest.prototype[method] = function(a, b) {
        return this._currentRequest[method](a, b);
      };
    });
    [\\"aborted\\", \\"connection\\", \\"socket\\"].forEach(function(property2) {
      Object.defineProperty(RedirectableRequest.prototype, property2, {
        get: function() {
          return this._currentRequest[property2];
        }
      });
    });
    RedirectableRequest.prototype._sanitizeOptions = function(options) {
      if (!options.headers) {
        options.headers = {};
      }
      if (options.host) {
        if (!options.hostname) {
          options.hostname = options.host;
        }
        delete options.host;
      }
      if (!options.pathname && options.path) {
        var searchPos = options.path.indexOf(\\"?\\");
        if (searchPos < 0) {
          options.pathname = options.path;
        } else {
          options.pathname = options.path.substring(0, searchPos);
          options.search = options.path.substring(searchPos);
        }
      }
    };
    RedirectableRequest.prototype._performRequest = function() {
      var protocol = this._options.protocol;
      var nativeProtocol = this._options.nativeProtocols[protocol];
      if (!nativeProtocol) {
        this.emit(\\"error\\", new TypeError(\\"Unsupported protocol \\" + protocol));
        return;
      }
      if (this._options.agents) {
        var scheme = protocol.slice(0, -1);
        this._options.agent = this._options.agents[scheme];
      }
      var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);
      request._redirectable = this;
      for (var event of events) {
        request.on(event, eventHandlers[event]);
      }
      this._currentUrl = /^\\\\//.test(this._options.path) ? url2.format(this._options) : (
        // When making a request to a proxy, […]
        // a client MUST send the target URI in absolute-form […].
        this._options.path
      );
      if (this._isRedirect) {
        var i = 0;
        var self2 = this;
        var buffers = this._requestBodyBuffers;
        (function writeNext(error) {
          if (request === self2._currentRequest) {
            if (error) {
              self2.emit(\\"error\\", error);
            } else if (i < buffers.length) {
              var buffer = buffers[i++];
              if (!request.finished) {
                request.write(buffer.data, buffer.encoding, writeNext);
              }
            } else if (self2._ended) {
              request.end();
            }
          }
        })();
      }
    };
    RedirectableRequest.prototype._processResponse = function(response) {
      var statusCode = response.statusCode;
      if (this._options.trackRedirects) {
        this._redirects.push({
          url: this._currentUrl,
          headers: response.headers,
          statusCode
        });
      }
      var location = response.headers.location;
      if (!location || this._options.followRedirects === false || statusCode < 300 || statusCode >= 400) {
        response.responseUrl = this._currentUrl;
        response.redirects = this._redirects;
        this.emit(\\"response\\", response);
        this._requestBodyBuffers = [];
        return;
      }
      abortRequest(this._currentRequest);
      response.destroy();
      if (++this._redirectCount > this._options.maxRedirects) {
        this.emit(\\"error\\", new TooManyRedirectsError());
        return;
      }
      var requestHeaders;
      var beforeRedirect = this._options.beforeRedirect;
      if (beforeRedirect) {
        requestHeaders = Object.assign({
          // The Host header was set by nativeProtocol.request
          Host: response.req.getHeader(\\"host\\")
        }, this._options.headers);
      }
      var method = this._options.method;
      if ((statusCode === 301 || statusCode === 302) && this._options.method === \\"POST\\" || statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method)) {
        this._options.method = \\"GET\\";
        this._requestBodyBuffers = [];
        removeMatchingHeaders(/^content-/i, this._options.headers);
      }
      var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);
      var currentUrlParts = url2.parse(this._currentUrl);
      var currentHost = currentHostHeader || currentUrlParts.host;
      var currentUrl = /^\\\\w+:/.test(location) ? this._currentUrl : url2.format(Object.assign(currentUrlParts, { host: currentHost }));
      var redirectUrl;
      try {
        redirectUrl = url2.resolve(currentUrl, location);
      } catch (cause) {
        this.emit(\\"error\\", new RedirectionError({ cause }));
        return;
      }
      debug(\\"redirecting to\\", redirectUrl);
      this._isRedirect = true;
      var redirectUrlParts = url2.parse(redirectUrl);
      Object.assign(this._options, redirectUrlParts);
      if (redirectUrlParts.protocol !== currentUrlParts.protocol && redirectUrlParts.protocol !== \\"https:\\" || redirectUrlParts.host !== currentHost && !isSubdomain(redirectUrlParts.host, currentHost)) {
        removeMatchingHeaders(/^(?:authorization|cookie)$/i, this._options.headers);
      }
      if (isFunction2(beforeRedirect)) {
        var responseDetails = {
          headers: response.headers,
          statusCode
        };
        var requestDetails = {
          url: currentUrl,
          method,
          headers: requestHeaders
        };
        try {
          beforeRedirect(this._options, responseDetails, requestDetails);
        } catch (err) {
          this.emit(\\"error\\", err);
          return;
        }
        this._sanitizeOptions(this._options);
      }
      try {
        this._performRequest();
      } catch (cause) {
        this.emit(\\"error\\", new RedirectionError({ cause }));
      }
    };
    function wrap(protocols) {
      var exports2 = {
        maxRedirects: 21,
        maxBodyLength: 10 * 1024 * 1024
      };
      var nativeProtocols = {};
      Object.keys(protocols).forEach(function(scheme) {
        var protocol = scheme + \\":\\";
        var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
        var wrappedProtocol = exports2[scheme] = Object.create(nativeProtocol);
        function request(input, options, callback) {
          if (isString2(input)) {
            var parsed;
            try {
              parsed = urlToOptions(new URL2(input));
            } catch (err) {
              parsed = url2.parse(input);
            }
            if (!isString2(parsed.protocol)) {
              throw new InvalidUrlError({ input });
            }
            input = parsed;
          } else if (URL2 && input instanceof URL2) {
            input = urlToOptions(input);
          } else {
            callback = options;
            options = input;
            input = { protocol };
          }
          if (isFunction2(options)) {
            callback = options;
            options = null;
          }
          options = Object.assign({
            maxRedirects: exports2.maxRedirects,
            maxBodyLength: exports2.maxBodyLength
          }, input, options);
          options.nativeProtocols = nativeProtocols;
          if (!isString2(options.host) && !isString2(options.hostname)) {
            options.hostname = \\"::1\\";
          }
          assert.equal(options.protocol, protocol, \\"protocol mismatch\\");
          debug(\\"options\\", options);
          return new RedirectableRequest(options, callback);
        }
        function get(input, options, callback) {
          var wrappedRequest = wrappedProtocol.request(input, options, callback);
          wrappedRequest.end();
          return wrappedRequest;
        }
        Object.defineProperties(wrappedProtocol, {
          request: { value: request, configurable: true, enumerable: true, writable: true },
          get: { value: get, configurable: true, enumerable: true, writable: true }
        });
      });
      return exports2;
    }
    function noop2() {
    }
    function urlToOptions(urlObject) {
      var options = {
        protocol: urlObject.protocol,
        hostname: urlObject.hostname.startsWith(\\"[\\") ? (
          /* istanbul ignore next */
          urlObject.hostname.slice(1, -1)
        ) : urlObject.hostname,
        hash: urlObject.hash,
        search: urlObject.search,
        pathname: urlObject.pathname,
        path: urlObject.pathname + urlObject.search,
        href: urlObject.href
      };
      if (urlObject.port !== \\"\\") {
        options.port = Number(urlObject.port);
      }
      return options;
    }
    function removeMatchingHeaders(regex, headers) {
      var lastValue;
      for (var header in headers) {
        if (regex.test(header)) {
          lastValue = headers[header];
          delete headers[header];
        }
      }
      return lastValue === null || typeof lastValue === \\"undefined\\" ? void 0 : String(lastValue).trim();
    }
    function createErrorType(code, message, baseClass) {
      function CustomError(properties) {
        Error.captureStackTrace(this, this.constructor);
        Object.assign(this, properties || {});
        this.code = code;
        this.message = this.cause ? message + \\": \\" + this.cause.message : message;
      }
      CustomError.prototype = new (baseClass || Error)();
      CustomError.prototype.constructor = CustomError;
      CustomError.prototype.name = \\"Error [\\" + code + \\"]\\";
      return CustomError;
    }
    function abortRequest(request) {
      for (var event of events) {
        request.removeListener(event, eventHandlers[event]);
      }
      request.on(\\"error\\", noop2);
      request.abort();
    }
    function isSubdomain(subdomain, domain) {
      assert(isString2(subdomain) && isString2(domain));
      var dot = subdomain.length - domain.length - 1;
      return dot > 0 && subdomain[dot] === \\".\\" && subdomain.endsWith(domain);
    }
    function isString2(value) {
      return typeof value === \\"string\\" || value instanceof String;
    }
    function isFunction2(value) {
      return typeof value === \\"function\\";
    }
    function isBuffer2(value) {
      return typeof value === \\"object\\" && \\"length\\" in value;
    }
    module2.exports = wrap({ http: http2, https: https2 });
    module2.exports.wrap = wrap;
  }
});

// src/core/index.ts
var core_exports = {};
__export(core_exports, {
  BasicAuth: () => BasicAuth,
  BearerToken: () => BearerToken,
  Supplier: () => Supplier,
  fetcher: () => fetcher,
  serialization: () => schemas_exports
});
module.exports = __toCommonJS(core_exports);

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/bind.js
function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/utils.js
var { toString } = Object.prototype;
var { getPrototypeOf } = Object;
var kindOf = ((cache) => (thing) => {
  const str = toString.call(thing);
  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(/* @__PURE__ */ Object.create(null));
var kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type;
};
var typeOfTest = (type) => (thing) => typeof thing === type;
var { isArray } = Array;
var isUndefined = typeOfTest(\\"undefined\\");
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}
var isArrayBuffer = kindOfTest(\\"ArrayBuffer\\");
function isArrayBufferView(val) {
  let result;
  if (typeof ArrayBuffer !== \\"undefined\\" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
var isString = typeOfTest(\\"string\\");
var isFunction = typeOfTest(\\"function\\");
var isNumber = typeOfTest(\\"number\\");
var isObject = (thing) => thing !== null && typeof thing === \\"object\\";
var isBoolean = (thing) => thing === true || thing === false;
var isPlainObject = (val) => {
  if (kindOf(val) !== \\"object\\") {
    return false;
  }
  const prototype3 = getPrototypeOf(val);
  return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
};
var isDate = kindOfTest(\\"Date\\");
var isFile = kindOfTest(\\"File\\");
var isBlob = kindOfTest(\\"Blob\\");
var isFileList = kindOfTest(\\"FileList\\");
var isStream = (val) => isObject(val) && isFunction(val.pipe);
var isFormData = (thing) => {
  let kind;
  return thing && (typeof FormData === \\"function\\" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === \\"formdata\\" || kind === \\"object\\" && isFunction(thing.toString) && thing.toString() === \\"[object FormData]\\"));
};
var isURLSearchParams = kindOfTest(\\"URLSearchParams\\");
var trim = (str) => str.trim ? str.trim() : str.replace(/^[\\\\s\\\\uFEFF\\\\xA0]+|[\\\\s\\\\uFEFF\\\\xA0]+$/g, \\"\\");
function forEach(obj, fn, { allOwnKeys = false } = {}) {
  if (obj === null || typeof obj === \\"undefined\\") {
    return;
  }
  let i;
  let l;
  if (typeof obj !== \\"object\\") {
    obj = [obj];
  }
  if (isArray(obj)) {
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    const keys2 = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys2.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys2[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}
function findKey(obj, key) {
  key = key.toLowerCase();
  const keys2 = Object.keys(obj);
  let i = keys2.length;
  let _key;
  while (i-- > 0) {
    _key = keys2[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
var _global = (() => {
  if (typeof globalThis !== \\"undefined\\")
    return globalThis;
  return typeof self !== \\"undefined\\" ? self : typeof window !== \\"undefined\\" ? window : global;
})();
var isContextDefined = (context) => !isUndefined(context) && context !== _global;
function merge() {
  const { caseless } = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };
  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}
var extend = (a, b, thisArg, { allOwnKeys } = {}) => {
  forEach(b, (val, key) => {
    if (thisArg && isFunction(val)) {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  }, { allOwnKeys });
  return a;
};
var stripBOM = (content) => {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
};
var inherits = (constructor, superConstructor, props, descriptors2) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, \\"super\\", {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
};
var toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};
  destObj = destObj || {};
  if (sourceObj == null)
    return destObj;
  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
  return destObj;
};
var endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === void 0 || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};
var toArray = (thing) => {
  if (!thing)
    return null;
  if (isArray(thing))
    return thing;
  let i = thing.length;
  if (!isNumber(i))
    return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
};
var isTypedArray = ((TypedArray) => {
  return (thing) => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== \\"undefined\\" && getPrototypeOf(Uint8Array));
var forEachEntry = (obj, fn) => {
  const generator = obj && obj[Symbol.iterator];
  const iterator = generator.call(obj);
  let result;
  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
};
var matchAll = (regExp, str) => {
  let matches;
  const arr = [];
  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }
  return arr;
};
var isHTMLForm = kindOfTest(\\"HTMLFormElement\\");
var toCamelCase = (str) => {
  return str.toLowerCase().replace(
    /[-_\\\\s]([a-z\\\\d])(\\\\w*)/g,
    function replacer(m, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};
var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
var isRegExp = kindOfTest(\\"RegExp\\");
var reduceDescriptors = (obj, reducer) => {
  const descriptors2 = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};
  forEach(descriptors2, (descriptor, name) => {
    if (reducer(descriptor, name, obj) !== false) {
      reducedDescriptors[name] = descriptor;
    }
  });
  Object.defineProperties(obj, reducedDescriptors);
};
var freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    if (isFunction(obj) && [\\"arguments\\", \\"caller\\", \\"callee\\"].indexOf(name) !== -1) {
      return false;
    }
    const value = obj[name];
    if (!isFunction(value))
      return;
    descriptor.enumerable = false;
    if (\\"writable\\" in descriptor) {
      descriptor.writable = false;
      return;
    }
    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error(\\"Can not rewrite read-only method '\\" + name + \\"'\\");
      };
    }
  });
};
var toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};
  const define = (arr) => {
    arr.forEach((value) => {
      obj[value] = true;
    });
  };
  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
  return obj;
};
var noop = () => {
};
var toFiniteNumber = (value, defaultValue) => {
  value = +value;
  return Number.isFinite(value) ? value : defaultValue;
};
var ALPHA = \\"abcdefghijklmnopqrstuvwxyz\\";
var DIGIT = \\"0123456789\\";
var ALPHABET = {
  DIGIT,
  ALPHA,
  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
};
var generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
  let str = \\"\\";
  const { length } = alphabet;
  while (size--) {
    str += alphabet[Math.random() * length | 0];
  }
  return str;
};
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === \\"FormData\\" && thing[Symbol.iterator]);
}
var toJSONObject = (obj) => {
  const stack = new Array(10);
  const visit = (source, i) => {
    if (isObject(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }
      if (!(\\"toJSON\\" in source)) {
        stack[i] = source;
        const target = isArray(source) ? [] : {};
        forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });
        stack[i] = void 0;
        return target;
      }
    }
    return source;
  };
  return visit(obj, 0);
};
var isAsyncFn = kindOfTest(\\"AsyncFunction\\");
var isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
var utils_default = {
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject,
  isPlainObject,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty,
  // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  ALPHABET,
  generateString,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable
};

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/AxiosError.js
function AxiosError(message, code, config, request, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message;
  this.name = \\"AxiosError\\";
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  response && (this.response = response);
}
utils_default.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: utils_default.toJSONObject(this.config),
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});
var prototype = AxiosError.prototype;
var descriptors = {};
[
  \\"ERR_BAD_OPTION_VALUE\\",
  \\"ERR_BAD_OPTION\\",
  \\"ECONNABORTED\\",
  \\"ETIMEDOUT\\",
  \\"ERR_NETWORK\\",
  \\"ERR_FR_TOO_MANY_REDIRECTS\\",
  \\"ERR_DEPRECATED\\",
  \\"ERR_BAD_RESPONSE\\",
  \\"ERR_BAD_REQUEST\\",
  \\"ERR_CANCELED\\",
  \\"ERR_NOT_SUPPORT\\",
  \\"ERR_INVALID_URL\\"
  // eslint-disable-next-line func-names
].forEach((code) => {
  descriptors[code] = { value: code };
});
Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, \\"isAxiosError\\", { value: true });
AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(prototype);
  utils_default.toFlatObject(error, axiosError, function filter2(obj) {
    return obj !== Error.prototype;
  }, (prop) => {
    return prop !== \\"isAxiosError\\";
  });
  AxiosError.call(axiosError, error.message, code, config, request, response);
  axiosError.cause = error;
  axiosError.name = error.name;
  customProps && Object.assign(axiosError, customProps);
  return axiosError;
};
var AxiosError_default = AxiosError;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/node/classes/FormData.js
var import_form_data = __toESM(require_form_data(), 1);
var FormData_default = import_form_data.default;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/toFormData.js
function isVisitable(thing) {
  return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
}
function removeBrackets(key) {
  return utils_default.endsWith(key, \\"[]\\") ? key.slice(0, -2) : key;
}
function renderKey(path, key, dots) {
  if (!path)
    return key;
  return path.concat(key).map(function each(token, i) {
    token = removeBrackets(token);
    return !dots && i ? \\"[\\" + token + \\"]\\" : token;
  }).join(dots ? \\".\\" : \\"\\");
}
function isFlatArray(arr) {
  return utils_default.isArray(arr) && !arr.some(isVisitable);
}
var predicates = utils_default.toFlatObject(utils_default, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});
function toFormData(obj, formData, options) {
  if (!utils_default.isObject(obj)) {
    throw new TypeError(\\"target must be an object\\");
  }
  formData = formData || new (FormData_default || FormData)();
  options = utils_default.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    return !utils_default.isUndefined(source[option]);
  });
  const metaTokens = options.metaTokens;
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== \\"undefined\\" && Blob;
  const useBlob = _Blob && utils_default.isSpecCompliantForm(formData);
  if (!utils_default.isFunction(visitor)) {
    throw new TypeError(\\"visitor must be a function\\");
  }
  function convertValue(value) {
    if (value === null)
      return \\"\\";
    if (utils_default.isDate(value)) {
      return value.toISOString();
    }
    if (!useBlob && utils_default.isBlob(value)) {
      throw new AxiosError_default(\\"Blob is not supported. Use a Buffer instead.\\");
    }
    if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {
      return useBlob && typeof Blob === \\"function\\" ? new Blob([value]) : Buffer.from(value);
    }
    return value;
  }
  function defaultVisitor(value, key, path) {
    let arr = value;
    if (value && !path && typeof value === \\"object\\") {
      if (utils_default.endsWith(key, \\"{}\\")) {
        key = metaTokens ? key : key.slice(0, -2);
        value = JSON.stringify(value);
      } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key, \\"[]\\")) && (arr = utils_default.toArray(value))) {
        key = removeBrackets(key);
        arr.forEach(function each(el, index) {
          !(utils_default.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + \\"[]\\",
            convertValue(el)
          );
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path, key, dots), convertValue(value));
    return false;
  }
  const stack = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });
  function build(value, path) {
    if (utils_default.isUndefined(value))
      return;
    if (stack.indexOf(value) !== -1) {
      throw Error(\\"Circular reference detected in \\" + path.join(\\".\\"));
    }
    stack.push(value);
    utils_default.forEach(value, function each(el, key) {
      const result = !(utils_default.isUndefined(el) || el === null) && visitor.call(
        formData,
        el,
        utils_default.isString(key) ? key.trim() : key,
        path,
        exposedHelpers
      );
      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });
    stack.pop();
  }
  if (!utils_default.isObject(obj)) {
    throw new TypeError(\\"data must be an object\\");
  }
  build(obj);
  return formData;
}
var toFormData_default = toFormData;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/AxiosURLSearchParams.js
function encode(str) {
  const charMap = {
    \\"!\\": \\"%21\\",
    \\"'\\": \\"%27\\",
    \\"(\\": \\"%28\\",
    \\")\\": \\"%29\\",
    \\"~\\": \\"%7E\\",
    \\"%20\\": \\"+\\",
    \\"%00\\": \\"\\\\0\\"
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && toFormData_default(params, this, options);
}
var prototype2 = AxiosURLSearchParams.prototype;
prototype2.append = function append(name, value) {
  this._pairs.push([name, value]);
};
prototype2.toString = function toString2(encoder) {
  const _encode2 = encoder ? function(value) {
    return encoder.call(this, value, encode);
  } : encode;
  return this._pairs.map(function each(pair) {
    return _encode2(pair[0]) + \\"=\\" + _encode2(pair[1]);
  }, \\"\\").join(\\"&\\");
};
var AxiosURLSearchParams_default = AxiosURLSearchParams;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/buildURL.js
function encode2(val) {
  return encodeURIComponent(val).replace(/%3A/gi, \\":\\").replace(/%24/g, \\"$\\").replace(/%2C/gi, \\",\\").replace(/%20/g, \\"+\\").replace(/%5B/gi, \\"[\\").replace(/%5D/gi, \\"]\\");
}
function buildURL(url2, params, options) {
  if (!params) {
    return url2;
  }
  const _encode2 = options && options.encode || encode2;
  const serializeFn = options && options.serialize;
  let serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode2);
  }
  if (serializedParams) {
    const hashmarkIndex = url2.indexOf(\\"#\\");
    if (hashmarkIndex !== -1) {
      url2 = url2.slice(0, hashmarkIndex);
    }
    url2 += (url2.indexOf(\\"?\\") === -1 ? \\"?\\" : \\"&\\") + serializedParams;
  }
  return url2;
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/InterceptorManager.js
var InterceptorManager = class {
  constructor() {
    this.handlers = [];
  }
  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle \`then\` for a \`Promise\`
   * @param {Function} rejected The function to handle \`reject\` for a \`Promise\`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }
  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by \`use\`
   *
   * @returns {Boolean} \`true\` if the interceptor was removed, \`false\` otherwise
   */
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }
  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }
  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become \`null\` calling \`eject\`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    utils_default.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
};
var InterceptorManager_default = InterceptorManager;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/defaults/transitional.js
var transitional_default = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/node/classes/URLSearchParams.js
var import_url = __toESM(require(\\"url\\"), 1);
var URLSearchParams_default = import_url.default.URLSearchParams;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/node/index.js
var node_default = {
  isNode: true,
  classes: {
    URLSearchParams: URLSearchParams_default,
    FormData: FormData_default,
    Blob: typeof Blob !== \\"undefined\\" && Blob || null
  },
  protocols: [\\"http\\", \\"https\\", \\"file\\", \\"data\\"]
};

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/toURLEncodedForm.js
function toURLEncodedForm(data, options) {
  return toFormData_default(data, new node_default.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (node_default.isNode && utils_default.isBuffer(value)) {
        this.append(key, value.toString(\\"base64\\"));
        return false;
      }
      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/formDataToJSON.js
function parsePropPath(name) {
  return utils_default.matchAll(/\\\\w+|\\\\[(\\\\w*)]/g, name).map((match) => {
    return match[0] === \\"[]\\" ? \\"\\" : match[1] || match[0];
  });
}
function arrayToObject(arr) {
  const obj = {};
  const keys2 = Object.keys(arr);
  let i;
  const len = keys2.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys2[i];
    obj[key] = arr[key];
  }
  return obj;
}
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];
    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils_default.isArray(target) ? target.length : name;
    if (isLast) {
      if (utils_default.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !utils_default.isObject(target[name])) {
      target[name] = [];
    }
    const result = buildPath(path, value, target[name], index);
    if (result && utils_default.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
    const obj = {};
    utils_default.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}
var formDataToJSON_default = formDataToJSON;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/defaults/index.js
var DEFAULT_CONTENT_TYPE = {
  \\"Content-Type\\": void 0
};
function stringifySafely(rawValue, parser, encoder) {
  if (utils_default.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils_default.trim(rawValue);
    } catch (e) {
      if (e.name !== \\"SyntaxError\\") {
        throw e;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
var defaults = {
  transitional: transitional_default,
  adapter: [\\"xhr\\", \\"http\\"],
  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || \\"\\";
    const hasJSONContentType = contentType.indexOf(\\"application/json\\") > -1;
    const isObjectPayload = utils_default.isObject(data);
    if (isObjectPayload && utils_default.isHTMLForm(data)) {
      data = new FormData(data);
    }
    const isFormData2 = utils_default.isFormData(data);
    if (isFormData2) {
      if (!hasJSONContentType) {
        return data;
      }
      return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;
    }
    if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data)) {
      return data;
    }
    if (utils_default.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils_default.isURLSearchParams(data)) {
      headers.setContentType(\\"application/x-www-form-urlencoded;charset=utf-8\\", false);
      return data.toString();
    }
    let isFileList2;
    if (isObjectPayload) {
      if (contentType.indexOf(\\"application/x-www-form-urlencoded\\") > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }
      if ((isFileList2 = utils_default.isFileList(data)) || contentType.indexOf(\\"multipart/form-data\\") > -1) {
        const _FormData = this.env && this.env.FormData;
        return toFormData_default(
          isFileList2 ? { \\"files[]\\": data } : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }
    if (isObjectPayload || hasJSONContentType) {
      headers.setContentType(\\"application/json\\", false);
      return stringifySafely(data);
    }
    return data;
  }],
  transformResponse: [function transformResponse(data) {
    const transitional2 = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
    const JSONRequested = this.responseType === \\"json\\";
    if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
      const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === \\"SyntaxError\\") {
            throw AxiosError_default.from(e, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }
    return data;
  }],
  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: \\"XSRF-TOKEN\\",
  xsrfHeaderName: \\"X-XSRF-TOKEN\\",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: node_default.classes.FormData,
    Blob: node_default.classes.Blob
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      \\"Accept\\": \\"application/json, text/plain, */*\\"
    }
  }
};
utils_default.forEach([\\"delete\\", \\"get\\", \\"head\\"], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});
utils_default.forEach([\\"post\\", \\"put\\", \\"patch\\"], function forEachMethodWithData(method) {
  defaults.headers[method] = utils_default.merge(DEFAULT_CONTENT_TYPE);
});
var defaults_default = defaults;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/parseHeaders.js
var ignoreDuplicateOf = utils_default.toObjectSet([
  \\"age\\",
  \\"authorization\\",
  \\"content-length\\",
  \\"content-type\\",
  \\"etag\\",
  \\"expires\\",
  \\"from\\",
  \\"host\\",
  \\"if-modified-since\\",
  \\"if-unmodified-since\\",
  \\"last-modified\\",
  \\"location\\",
  \\"max-forwards\\",
  \\"proxy-authorization\\",
  \\"referer\\",
  \\"retry-after\\",
  \\"user-agent\\"
]);
var parseHeaders_default = (rawHeaders) => {
  const parsed = {};
  let key;
  let val;
  let i;
  rawHeaders && rawHeaders.split(\\"\\\\n\\").forEach(function parser(line) {
    i = line.indexOf(\\":\\");
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();
    if (!key || parsed[key] && ignoreDuplicateOf[key]) {
      return;
    }
    if (key === \\"set-cookie\\") {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + \\", \\" + val : val;
    }
  });
  return parsed;
};

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/AxiosHeaders.js
var $internals = Symbol(\\"internals\\");
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
  const tokens = /* @__PURE__ */ Object.create(null);
  const tokensRE = /([^\\\\s,;=]+)\\\\s*(?:=\\\\s*([^,;]+))?/g;
  let match;
  while (match = tokensRE.exec(str)) {
    tokens[match[1]] = match[2];
  }
  return tokens;
}
var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^\`|~,!#$%&'*+.]+$/.test(str.trim());
function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
  if (utils_default.isFunction(filter2)) {
    return filter2.call(this, value, header);
  }
  if (isHeaderNameFilter) {
    value = header;
  }
  if (!utils_default.isString(value))
    return;
  if (utils_default.isString(filter2)) {
    return value.indexOf(filter2) !== -1;
  }
  if (utils_default.isRegExp(filter2)) {
    return filter2.test(value);
  }
}
function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\\\\d])(\\\\w*)/g, (w, char, str) => {
    return char.toUpperCase() + str;
  });
}
function buildAccessors(obj, header) {
  const accessorName = utils_default.toCamelCase(\\" \\" + header);
  [\\"get\\", \\"set\\", \\"has\\"].forEach((methodName) => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}
var AxiosHeaders = class {
  constructor(headers) {
    headers && this.set(headers);
  }
  set(header, valueOrRewrite, rewrite) {
    const self2 = this;
    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);
      if (!lHeader) {
        throw new Error(\\"header name must be a non-empty string\\");
      }
      const key = utils_default.findKey(self2, lHeader);
      if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
        self2[key || _header] = normalizeValue(_value);
      }
    }
    const setHeaders = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
    if (utils_default.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite);
    } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(parseHeaders_default(header), valueOrRewrite);
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }
    return this;
  }
  get(header, parser) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      if (key) {
        const value = this[key];
        if (!parser) {
          return value;
        }
        if (parser === true) {
          return parseTokens(value);
        }
        if (utils_default.isFunction(parser)) {
          return parser.call(this, value, key);
        }
        if (utils_default.isRegExp(parser)) {
          return parser.exec(value);
        }
        throw new TypeError(\\"parser must be boolean|regexp|function\\");
      }
    }
  }
  has(header, matcher) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }
    return false;
  }
  delete(header, matcher) {
    const self2 = this;
    let deleted = false;
    function deleteHeader(_header) {
      _header = normalizeHeader(_header);
      if (_header) {
        const key = utils_default.findKey(self2, _header);
        if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
          delete self2[key];
          deleted = true;
        }
      }
    }
    if (utils_default.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }
    return deleted;
  }
  clear(matcher) {
    const keys2 = Object.keys(this);
    let i = keys2.length;
    let deleted = false;
    while (i--) {
      const key = keys2[i];
      if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }
    return deleted;
  }
  normalize(format) {
    const self2 = this;
    const headers = {};
    utils_default.forEach(this, (value, header) => {
      const key = utils_default.findKey(headers, header);
      if (key) {
        self2[key] = normalizeValue(value);
        delete self2[header];
        return;
      }
      const normalized = format ? formatHeader(header) : String(header).trim();
      if (normalized !== header) {
        delete self2[header];
      }
      self2[normalized] = normalizeValue(value);
      headers[normalized] = true;
    });
    return this;
  }
  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }
  toJSON(asStrings) {
    const obj = /* @__PURE__ */ Object.create(null);
    utils_default.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils_default.isArray(value) ? value.join(\\", \\") : value);
    });
    return obj;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + \\": \\" + value).join(\\"\\\\n\\");
  }
  get [Symbol.toStringTag]() {
    return \\"AxiosHeaders\\";
  }
  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }
  static concat(first, ...targets) {
    const computed = new this(first);
    targets.forEach((target) => computed.set(target));
    return computed;
  }
  static accessor(header) {
    const internals = this[$internals] = this[$internals] = {
      accessors: {}
    };
    const accessors = internals.accessors;
    const prototype3 = this.prototype;
    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);
      if (!accessors[lHeader]) {
        buildAccessors(prototype3, _header);
        accessors[lHeader] = true;
      }
    }
    utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
    return this;
  }
};
AxiosHeaders.accessor([\\"Content-Type\\", \\"Content-Length\\", \\"Accept\\", \\"Accept-Encoding\\", \\"User-Agent\\", \\"Authorization\\"]);
utils_default.freezeMethods(AxiosHeaders.prototype);
utils_default.freezeMethods(AxiosHeaders);
var AxiosHeaders_default = AxiosHeaders;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/transformData.js
function transformData(fns, response) {
  const config = this || defaults_default;
  const context = response || config;
  const headers = AxiosHeaders_default.from(context.headers);
  let data = context.data;
  utils_default.forEach(fns, function transform2(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
  });
  headers.normalize();
  return data;
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/cancel/isCancel.js
function isCancel(value) {
  return !!(value && value.__CANCEL__);
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/cancel/CanceledError.js
function CanceledError(message, config, request) {
  AxiosError_default.call(this, message == null ? \\"canceled\\" : message, AxiosError_default.ERR_CANCELED, config, request);
  this.name = \\"CanceledError\\";
}
utils_default.inherits(CanceledError, AxiosError_default, {
  __CANCEL__: true
});
var CanceledError_default = CanceledError;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/settle.js
function settle(resolve, reject, response) {
  const validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError_default(
      \\"Request failed with status code \\" + response.status,
      [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/isAbsoluteURL.js
function isAbsoluteURL(url2) {
  return /^([a-z][a-z\\\\d+\\\\-.]*:)?\\\\/\\\\//i.test(url2);
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/combineURLs.js
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\\\\/+$/, \\"\\") + \\"/\\" + relativeURL.replace(/^\\\\/+/, \\"\\") : baseURL;
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/buildFullPath.js
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/adapters/http.js
var import_proxy_from_env = __toESM(require_proxy_from_env(), 1);
var import_http = __toESM(require(\\"http\\"), 1);
var import_https = __toESM(require(\\"https\\"), 1);
var import_util2 = __toESM(require(\\"util\\"), 1);
var import_follow_redirects = __toESM(require_follow_redirects(), 1);
var import_zlib = __toESM(require(\\"zlib\\"), 1);

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/env/data.js
var VERSION = \\"1.4.0\\";

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/parseProtocol.js
function parseProtocol(url2) {
  const match = /^([-+\\\\w]{1,25})(:?\\\\/\\\\/|:)/.exec(url2);
  return match && match[1] || \\"\\";
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/fromDataURI.js
var DATA_URL_PATTERN = /^(?:([^;]+);)?(?:[^;]+;)?(base64|),([\\\\s\\\\S]*)$/;
function fromDataURI(uri, asBlob, options) {
  const _Blob = options && options.Blob || node_default.classes.Blob;
  const protocol = parseProtocol(uri);
  if (asBlob === void 0 && _Blob) {
    asBlob = true;
  }
  if (protocol === \\"data\\") {
    uri = protocol.length ? uri.slice(protocol.length + 1) : uri;
    const match = DATA_URL_PATTERN.exec(uri);
    if (!match) {
      throw new AxiosError_default(\\"Invalid URL\\", AxiosError_default.ERR_INVALID_URL);
    }
    const mime = match[1];
    const isBase64 = match[2];
    const body = match[3];
    const buffer = Buffer.from(decodeURIComponent(body), isBase64 ? \\"base64\\" : \\"utf8\\");
    if (asBlob) {
      if (!_Blob) {
        throw new AxiosError_default(\\"Blob is not supported\\", AxiosError_default.ERR_NOT_SUPPORT);
      }
      return new _Blob([buffer], { type: mime });
    }
    return buffer;
  }
  throw new AxiosError_default(\\"Unsupported protocol \\" + protocol, AxiosError_default.ERR_NOT_SUPPORT);
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/adapters/http.js
var import_stream4 = __toESM(require(\\"stream\\"), 1);

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/AxiosTransformStream.js
var import_stream = __toESM(require(\\"stream\\"), 1);

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/throttle.js
function throttle(fn, freq) {
  let timestamp = 0;
  const threshold = 1e3 / freq;
  let timer = null;
  return function throttled(force, args) {
    const now = Date.now();
    if (force || now - timestamp > threshold) {
      if (timer) {
        clearTimeout(timer);
        timer = null;
      }
      timestamp = now;
      return fn.apply(null, args);
    }
    if (!timer) {
      timer = setTimeout(() => {
        timer = null;
        timestamp = Date.now();
        return fn.apply(null, args);
      }, threshold - (now - timestamp));
    }
  };
}
var throttle_default = throttle;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/speedometer.js
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;
  min = min !== void 0 ? min : 1e3;
  return function push(chunkLength) {
    const now = Date.now();
    const startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now;
    }
    bytes[head] = chunkLength;
    timestamps[head] = now;
    let i = tail;
    let bytesCount = 0;
    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now - firstSampleTS < min) {
      return;
    }
    const passed = startedAt && now - startedAt;
    return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
  };
}
var speedometer_default = speedometer;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/AxiosTransformStream.js
var kInternals = Symbol(\\"internals\\");
var AxiosTransformStream = class extends import_stream.default.Transform {
  constructor(options) {
    options = utils_default.toFlatObject(options, {
      maxRate: 0,
      chunkSize: 64 * 1024,
      minChunkSize: 100,
      timeWindow: 500,
      ticksRate: 2,
      samplesCount: 15
    }, null, (prop, source) => {
      return !utils_default.isUndefined(source[prop]);
    });
    super({
      readableHighWaterMark: options.chunkSize
    });
    const self2 = this;
    const internals = this[kInternals] = {
      length: options.length,
      timeWindow: options.timeWindow,
      ticksRate: options.ticksRate,
      chunkSize: options.chunkSize,
      maxRate: options.maxRate,
      minChunkSize: options.minChunkSize,
      bytesSeen: 0,
      isCaptured: false,
      notifiedBytesLoaded: 0,
      ts: Date.now(),
      bytes: 0,
      onReadCallback: null
    };
    const _speedometer = speedometer_default(internals.ticksRate * options.samplesCount, internals.timeWindow);
    this.on(\\"newListener\\", (event) => {
      if (event === \\"progress\\") {
        if (!internals.isCaptured) {
          internals.isCaptured = true;
        }
      }
    });
    let bytesNotified = 0;
    internals.updateProgress = throttle_default(function throttledHandler() {
      const totalBytes = internals.length;
      const bytesTransferred = internals.bytesSeen;
      const progressBytes = bytesTransferred - bytesNotified;
      if (!progressBytes || self2.destroyed)
        return;
      const rate = _speedometer(progressBytes);
      bytesNotified = bytesTransferred;
      process.nextTick(() => {
        self2.emit(\\"progress\\", {
          \\"loaded\\": bytesTransferred,
          \\"total\\": totalBytes,
          \\"progress\\": totalBytes ? bytesTransferred / totalBytes : void 0,
          \\"bytes\\": progressBytes,
          \\"rate\\": rate ? rate : void 0,
          \\"estimated\\": rate && totalBytes && bytesTransferred <= totalBytes ? (totalBytes - bytesTransferred) / rate : void 0
        });
      });
    }, internals.ticksRate);
    const onFinish = () => {
      internals.updateProgress(true);
    };
    this.once(\\"end\\", onFinish);
    this.once(\\"error\\", onFinish);
  }
  _read(size) {
    const internals = this[kInternals];
    if (internals.onReadCallback) {
      internals.onReadCallback();
    }
    return super._read(size);
  }
  _transform(chunk, encoding, callback) {
    const self2 = this;
    const internals = this[kInternals];
    const maxRate = internals.maxRate;
    const readableHighWaterMark = this.readableHighWaterMark;
    const timeWindow = internals.timeWindow;
    const divider = 1e3 / timeWindow;
    const bytesThreshold = maxRate / divider;
    const minChunkSize = internals.minChunkSize !== false ? Math.max(internals.minChunkSize, bytesThreshold * 0.01) : 0;
    function pushChunk(_chunk, _callback) {
      const bytes = Buffer.byteLength(_chunk);
      internals.bytesSeen += bytes;
      internals.bytes += bytes;
      if (internals.isCaptured) {
        internals.updateProgress();
      }
      if (self2.push(_chunk)) {
        process.nextTick(_callback);
      } else {
        internals.onReadCallback = () => {
          internals.onReadCallback = null;
          process.nextTick(_callback);
        };
      }
    }
    const transformChunk = (_chunk, _callback) => {
      const chunkSize = Buffer.byteLength(_chunk);
      let chunkRemainder = null;
      let maxChunkSize = readableHighWaterMark;
      let bytesLeft;
      let passed = 0;
      if (maxRate) {
        const now = Date.now();
        if (!internals.ts || (passed = now - internals.ts) >= timeWindow) {
          internals.ts = now;
          bytesLeft = bytesThreshold - internals.bytes;
          internals.bytes = bytesLeft < 0 ? -bytesLeft : 0;
          passed = 0;
        }
        bytesLeft = bytesThreshold - internals.bytes;
      }
      if (maxRate) {
        if (bytesLeft <= 0) {
          return setTimeout(() => {
            _callback(null, _chunk);
          }, timeWindow - passed);
        }
        if (bytesLeft < maxChunkSize) {
          maxChunkSize = bytesLeft;
        }
      }
      if (maxChunkSize && chunkSize > maxChunkSize && chunkSize - maxChunkSize > minChunkSize) {
        chunkRemainder = _chunk.subarray(maxChunkSize);
        _chunk = _chunk.subarray(0, maxChunkSize);
      }
      pushChunk(_chunk, chunkRemainder ? () => {
        process.nextTick(_callback, null, chunkRemainder);
      } : _callback);
    };
    transformChunk(chunk, function transformNextChunk(err, _chunk) {
      if (err) {
        return callback(err);
      }
      if (_chunk) {
        transformChunk(_chunk, transformNextChunk);
      } else {
        callback(null);
      }
    });
  }
  setLength(length) {
    this[kInternals].length = +length;
    return this;
  }
};
var AxiosTransformStream_default = AxiosTransformStream;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/adapters/http.js
var import_events = __toESM(require(\\"events\\"), 1);

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/formDataToStream.js
var import_util = require(\\"util\\");
var import_stream2 = require(\\"stream\\");

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/readBlob.js
var { asyncIterator } = Symbol;
var readBlob = async function* (blob) {
  if (blob.stream) {
    yield* blob.stream();
  } else if (blob.arrayBuffer) {
    yield await blob.arrayBuffer();
  } else if (blob[asyncIterator]) {
    yield* blob[asyncIterator]();
  } else {
    yield blob;
  }
};
var readBlob_default = readBlob;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/formDataToStream.js
var BOUNDARY_ALPHABET = utils_default.ALPHABET.ALPHA_DIGIT + \\"-_\\";
var textEncoder = new import_util.TextEncoder();
var CRLF = \\"\\\\r\\\\n\\";
var CRLF_BYTES = textEncoder.encode(CRLF);
var CRLF_BYTES_COUNT = 2;
var FormDataPart = class {
  constructor(name, value) {
    const { escapeName } = this.constructor;
    const isStringValue = utils_default.isString(value);
    let headers = \`Content-Disposition: form-data; name=\\"\${escapeName(name)}\\"\${!isStringValue && value.name ? \`; filename=\\"\${escapeName(value.name)}\\"\` : \\"\\"}\${CRLF}\`;
    if (isStringValue) {
      value = textEncoder.encode(String(value).replace(/\\\\r?\\\\n|\\\\r\\\\n?/g, CRLF));
    } else {
      headers += \`Content-Type: \${value.type || \\"application/octet-stream\\"}\${CRLF}\`;
    }
    this.headers = textEncoder.encode(headers + CRLF);
    this.contentLength = isStringValue ? value.byteLength : value.size;
    this.size = this.headers.byteLength + this.contentLength + CRLF_BYTES_COUNT;
    this.name = name;
    this.value = value;
  }
  async *encode() {
    yield this.headers;
    const { value } = this;
    if (utils_default.isTypedArray(value)) {
      yield value;
    } else {
      yield* readBlob_default(value);
    }
    yield CRLF_BYTES;
  }
  static escapeName(name) {
    return String(name).replace(/[\\\\r\\\\n\\"]/g, (match) => ({
      \\"\\\\r\\": \\"%0D\\",
      \\"\\\\n\\": \\"%0A\\",
      '\\"': \\"%22\\"
    })[match]);
  }
};
var formDataToStream = (form, headersHandler, options) => {
  const {
    tag = \\"form-data-boundary\\",
    size = 25,
    boundary = tag + \\"-\\" + utils_default.generateString(size, BOUNDARY_ALPHABET)
  } = options || {};
  if (!utils_default.isFormData(form)) {
    throw TypeError(\\"FormData instance required\\");
  }
  if (boundary.length < 1 || boundary.length > 70) {
    throw Error(\\"boundary must be 10-70 characters long\\");
  }
  const boundaryBytes = textEncoder.encode(\\"--\\" + boundary + CRLF);
  const footerBytes = textEncoder.encode(\\"--\\" + boundary + \\"--\\" + CRLF + CRLF);
  let contentLength = footerBytes.byteLength;
  const parts = Array.from(form.entries()).map(([name, value]) => {
    const part = new FormDataPart(name, value);
    contentLength += part.size;
    return part;
  });
  contentLength += boundaryBytes.byteLength * parts.length;
  contentLength = utils_default.toFiniteNumber(contentLength);
  const computedHeaders = {
    \\"Content-Type\\": \`multipart/form-data; boundary=\${boundary}\`
  };
  if (Number.isFinite(contentLength)) {
    computedHeaders[\\"Content-Length\\"] = contentLength;
  }
  headersHandler && headersHandler(computedHeaders);
  return import_stream2.Readable.from(async function* () {
    for (const part of parts) {
      yield boundaryBytes;
      yield* part.encode();
    }
    yield footerBytes;
  }());
};
var formDataToStream_default = formDataToStream;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/ZlibHeaderTransformStream.js
var import_stream3 = __toESM(require(\\"stream\\"), 1);
var ZlibHeaderTransformStream = class extends import_stream3.default.Transform {
  __transform(chunk, encoding, callback) {
    this.push(chunk);
    callback();
  }
  _transform(chunk, encoding, callback) {
    if (chunk.length !== 0) {
      this._transform = this.__transform;
      if (chunk[0] !== 120) {
        const header = Buffer.alloc(2);
        header[0] = 120;
        header[1] = 156;
        this.push(header, encoding);
      }
    }
    this.__transform(chunk, encoding, callback);
  }
};
var ZlibHeaderTransformStream_default = ZlibHeaderTransformStream;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/callbackify.js
var callbackify = (fn, reducer) => {
  return utils_default.isAsyncFn(fn) ? function(...args) {
    const cb = args.pop();
    fn.apply(this, args).then((value) => {
      try {
        reducer ? cb(null, ...reducer(value)) : cb(null, value);
      } catch (err) {
        cb(err);
      }
    }, cb);
  } : fn;
};
var callbackify_default = callbackify;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/adapters/http.js
var zlibOptions = {
  flush: import_zlib.default.constants.Z_SYNC_FLUSH,
  finishFlush: import_zlib.default.constants.Z_SYNC_FLUSH
};
var brotliOptions = {
  flush: import_zlib.default.constants.BROTLI_OPERATION_FLUSH,
  finishFlush: import_zlib.default.constants.BROTLI_OPERATION_FLUSH
};
var isBrotliSupported = utils_default.isFunction(import_zlib.default.createBrotliDecompress);
var { http: httpFollow, https: httpsFollow } = import_follow_redirects.default;
var isHttps = /https:?/;
var supportedProtocols = node_default.protocols.map((protocol) => {
  return protocol + \\":\\";
});
function dispatchBeforeRedirect(options) {
  if (options.beforeRedirects.proxy) {
    options.beforeRedirects.proxy(options);
  }
  if (options.beforeRedirects.config) {
    options.beforeRedirects.config(options);
  }
}
function setProxy(options, configProxy, location) {
  let proxy = configProxy;
  if (!proxy && proxy !== false) {
    const proxyUrl = (0, import_proxy_from_env.getProxyForUrl)(location);
    if (proxyUrl) {
      proxy = new URL(proxyUrl);
    }
  }
  if (proxy) {
    if (proxy.username) {
      proxy.auth = (proxy.username || \\"\\") + \\":\\" + (proxy.password || \\"\\");
    }
    if (proxy.auth) {
      if (proxy.auth.username || proxy.auth.password) {
        proxy.auth = (proxy.auth.username || \\"\\") + \\":\\" + (proxy.auth.password || \\"\\");
      }
      const base64 = Buffer.from(proxy.auth, \\"utf8\\").toString(\\"base64\\");
      options.headers[\\"Proxy-Authorization\\"] = \\"Basic \\" + base64;
    }
    options.headers.host = options.hostname + (options.port ? \\":\\" + options.port : \\"\\");
    const proxyHost = proxy.hostname || proxy.host;
    options.hostname = proxyHost;
    options.host = proxyHost;
    options.port = proxy.port;
    options.path = location;
    if (proxy.protocol) {
      options.protocol = proxy.protocol.includes(\\":\\") ? proxy.protocol : \`\${proxy.protocol}:\`;
    }
  }
  options.beforeRedirects.proxy = function beforeRedirect(redirectOptions) {
    setProxy(redirectOptions, configProxy, redirectOptions.href);
  };
}
var isHttpAdapterSupported = typeof process !== \\"undefined\\" && utils_default.kindOf(process) === \\"process\\";
var wrapAsync = (asyncExecutor) => {
  return new Promise((resolve, reject) => {
    let onDone;
    let isDone;
    const done = (value, isRejected) => {
      if (isDone)
        return;
      isDone = true;
      onDone && onDone(value, isRejected);
    };
    const _resolve = (value) => {
      done(value);
      resolve(value);
    };
    const _reject = (reason) => {
      done(reason, true);
      reject(reason);
    };
    asyncExecutor(_resolve, _reject, (onDoneHandler) => onDone = onDoneHandler).catch(_reject);
  });
};
var http_default = isHttpAdapterSupported && function httpAdapter(config) {
  return wrapAsync(async function dispatchHttpRequest(resolve, reject, onDone) {
    let { data, lookup, family } = config;
    const { responseType, responseEncoding } = config;
    const method = config.method.toUpperCase();
    let isDone;
    let rejected = false;
    let req;
    if (lookup && utils_default.isAsyncFn(lookup)) {
      lookup = callbackify_default(lookup, (entry) => {
        if (utils_default.isString(entry)) {
          entry = [entry, entry.indexOf(\\".\\") < 0 ? 6 : 4];
        } else if (!utils_default.isArray(entry)) {
          throw new TypeError(\\"lookup async function must return an array [ip: string, family: number]]\\");
        }
        return entry;
      });
    }
    const emitter = new import_events.default();
    const onFinished = () => {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(abort);
      }
      if (config.signal) {
        config.signal.removeEventListener(\\"abort\\", abort);
      }
      emitter.removeAllListeners();
    };
    onDone((value, isRejected) => {
      isDone = true;
      if (isRejected) {
        rejected = true;
        onFinished();
      }
    });
    function abort(reason) {
      emitter.emit(\\"abort\\", !reason || reason.type ? new CanceledError_default(null, config, req) : reason);
    }
    emitter.once(\\"abort\\", reject);
    if (config.cancelToken || config.signal) {
      config.cancelToken && config.cancelToken.subscribe(abort);
      if (config.signal) {
        config.signal.aborted ? abort() : config.signal.addEventListener(\\"abort\\", abort);
      }
    }
    const fullPath = buildFullPath(config.baseURL, config.url);
    const parsed = new URL(fullPath, \\"http://localhost\\");
    const protocol = parsed.protocol || supportedProtocols[0];
    if (protocol === \\"data:\\") {
      let convertedData;
      if (method !== \\"GET\\") {
        return settle(resolve, reject, {
          status: 405,
          statusText: \\"method not allowed\\",
          headers: {},
          config
        });
      }
      try {
        convertedData = fromDataURI(config.url, responseType === \\"blob\\", {
          Blob: config.env && config.env.Blob
        });
      } catch (err) {
        throw AxiosError_default.from(err, AxiosError_default.ERR_BAD_REQUEST, config);
      }
      if (responseType === \\"text\\") {
        convertedData = convertedData.toString(responseEncoding);
        if (!responseEncoding || responseEncoding === \\"utf8\\") {
          convertedData = utils_default.stripBOM(convertedData);
        }
      } else if (responseType === \\"stream\\") {
        convertedData = import_stream4.default.Readable.from(convertedData);
      }
      return settle(resolve, reject, {
        data: convertedData,
        status: 200,
        statusText: \\"OK\\",
        headers: new AxiosHeaders_default(),
        config
      });
    }
    if (supportedProtocols.indexOf(protocol) === -1) {
      return reject(new AxiosError_default(
        \\"Unsupported protocol \\" + protocol,
        AxiosError_default.ERR_BAD_REQUEST,
        config
      ));
    }
    const headers = AxiosHeaders_default.from(config.headers).normalize();
    headers.set(\\"User-Agent\\", \\"axios/\\" + VERSION, false);
    const onDownloadProgress = config.onDownloadProgress;
    const onUploadProgress = config.onUploadProgress;
    const maxRate = config.maxRate;
    let maxUploadRate = void 0;
    let maxDownloadRate = void 0;
    if (utils_default.isSpecCompliantForm(data)) {
      const userBoundary = headers.getContentType(/boundary=([-_\\\\w\\\\d]{10,70})/i);
      data = formDataToStream_default(data, (formHeaders) => {
        headers.set(formHeaders);
      }, {
        tag: \`axios-\${VERSION}-boundary\`,
        boundary: userBoundary && userBoundary[1] || void 0
      });
    } else if (utils_default.isFormData(data) && utils_default.isFunction(data.getHeaders)) {
      headers.set(data.getHeaders());
      if (!headers.hasContentLength()) {
        try {
          const knownLength = await import_util2.default.promisify(data.getLength).call(data);
          Number.isFinite(knownLength) && knownLength >= 0 && headers.setContentLength(knownLength);
        } catch (e) {
        }
      }
    } else if (utils_default.isBlob(data)) {
      data.size && headers.setContentType(data.type || \\"application/octet-stream\\");
      headers.setContentLength(data.size || 0);
      data = import_stream4.default.Readable.from(readBlob_default(data));
    } else if (data && !utils_default.isStream(data)) {
      if (Buffer.isBuffer(data)) {
      } else if (utils_default.isArrayBuffer(data)) {
        data = Buffer.from(new Uint8Array(data));
      } else if (utils_default.isString(data)) {
        data = Buffer.from(data, \\"utf-8\\");
      } else {
        return reject(new AxiosError_default(
          \\"Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream\\",
          AxiosError_default.ERR_BAD_REQUEST,
          config
        ));
      }
      headers.setContentLength(data.length, false);
      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {
        return reject(new AxiosError_default(
          \\"Request body larger than maxBodyLength limit\\",
          AxiosError_default.ERR_BAD_REQUEST,
          config
        ));
      }
    }
    const contentLength = utils_default.toFiniteNumber(headers.getContentLength());
    if (utils_default.isArray(maxRate)) {
      maxUploadRate = maxRate[0];
      maxDownloadRate = maxRate[1];
    } else {
      maxUploadRate = maxDownloadRate = maxRate;
    }
    if (data && (onUploadProgress || maxUploadRate)) {
      if (!utils_default.isStream(data)) {
        data = import_stream4.default.Readable.from(data, { objectMode: false });
      }
      data = import_stream4.default.pipeline([data, new AxiosTransformStream_default({
        length: contentLength,
        maxRate: utils_default.toFiniteNumber(maxUploadRate)
      })], utils_default.noop);
      onUploadProgress && data.on(\\"progress\\", (progress) => {
        onUploadProgress(Object.assign(progress, {
          upload: true
        }));
      });
    }
    let auth = void 0;
    if (config.auth) {
      const username = config.auth.username || \\"\\";
      const password = config.auth.password || \\"\\";
      auth = username + \\":\\" + password;
    }
    if (!auth && parsed.username) {
      const urlUsername = parsed.username;
      const urlPassword = parsed.password;
      auth = urlUsername + \\":\\" + urlPassword;
    }
    auth && headers.delete(\\"authorization\\");
    let path;
    try {
      path = buildURL(
        parsed.pathname + parsed.search,
        config.params,
        config.paramsSerializer
      ).replace(/^\\\\?/, \\"\\");
    } catch (err) {
      const customErr = new Error(err.message);
      customErr.config = config;
      customErr.url = config.url;
      customErr.exists = true;
      return reject(customErr);
    }
    headers.set(
      \\"Accept-Encoding\\",
      \\"gzip, compress, deflate\\" + (isBrotliSupported ? \\", br\\" : \\"\\"),
      false
    );
    const options = {
      path,
      method,
      headers: headers.toJSON(),
      agents: { http: config.httpAgent, https: config.httpsAgent },
      auth,
      protocol,
      family,
      lookup,
      beforeRedirect: dispatchBeforeRedirect,
      beforeRedirects: {}
    };
    if (config.socketPath) {
      options.socketPath = config.socketPath;
    } else {
      options.hostname = parsed.hostname;
      options.port = parsed.port;
      setProxy(options, config.proxy, protocol + \\"//\\" + parsed.hostname + (parsed.port ? \\":\\" + parsed.port : \\"\\") + options.path);
    }
    let transport;
    const isHttpsRequest = isHttps.test(options.protocol);
    options.agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;
    if (config.transport) {
      transport = config.transport;
    } else if (config.maxRedirects === 0) {
      transport = isHttpsRequest ? import_https.default : import_http.default;
    } else {
      if (config.maxRedirects) {
        options.maxRedirects = config.maxRedirects;
      }
      if (config.beforeRedirect) {
        options.beforeRedirects.config = config.beforeRedirect;
      }
      transport = isHttpsRequest ? httpsFollow : httpFollow;
    }
    if (config.maxBodyLength > -1) {
      options.maxBodyLength = config.maxBodyLength;
    } else {
      options.maxBodyLength = Infinity;
    }
    if (config.insecureHTTPParser) {
      options.insecureHTTPParser = config.insecureHTTPParser;
    }
    req = transport.request(options, function handleResponse(res) {
      if (req.destroyed)
        return;
      const streams = [res];
      const responseLength = +res.headers[\\"content-length\\"];
      if (onDownloadProgress) {
        const transformStream = new AxiosTransformStream_default({
          length: utils_default.toFiniteNumber(responseLength),
          maxRate: utils_default.toFiniteNumber(maxDownloadRate)
        });
        onDownloadProgress && transformStream.on(\\"progress\\", (progress) => {
          onDownloadProgress(Object.assign(progress, {
            download: true
          }));
        });
        streams.push(transformStream);
      }
      let responseStream = res;
      const lastRequest = res.req || req;
      if (config.decompress !== false && res.headers[\\"content-encoding\\"]) {
        if (method === \\"HEAD\\" || res.statusCode === 204) {
          delete res.headers[\\"content-encoding\\"];
        }
        switch (res.headers[\\"content-encoding\\"]) {
          case \\"gzip\\":
          case \\"x-gzip\\":
          case \\"compress\\":
          case \\"x-compress\\":
            streams.push(import_zlib.default.createUnzip(zlibOptions));
            delete res.headers[\\"content-encoding\\"];
            break;
          case \\"deflate\\":
            streams.push(new ZlibHeaderTransformStream_default());
            streams.push(import_zlib.default.createUnzip(zlibOptions));
            delete res.headers[\\"content-encoding\\"];
            break;
          case \\"br\\":
            if (isBrotliSupported) {
              streams.push(import_zlib.default.createBrotliDecompress(brotliOptions));
              delete res.headers[\\"content-encoding\\"];
            }
        }
      }
      responseStream = streams.length > 1 ? import_stream4.default.pipeline(streams, utils_default.noop) : streams[0];
      const offListeners = import_stream4.default.finished(responseStream, () => {
        offListeners();
        onFinished();
      });
      const response = {
        status: res.statusCode,
        statusText: res.statusMessage,
        headers: new AxiosHeaders_default(res.headers),
        config,
        request: lastRequest
      };
      if (responseType === \\"stream\\") {
        response.data = responseStream;
        settle(resolve, reject, response);
      } else {
        const responseBuffer = [];
        let totalResponseBytes = 0;
        responseStream.on(\\"data\\", function handleStreamData(chunk) {
          responseBuffer.push(chunk);
          totalResponseBytes += chunk.length;
          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {
            rejected = true;
            responseStream.destroy();
            reject(new AxiosError_default(
              \\"maxContentLength size of \\" + config.maxContentLength + \\" exceeded\\",
              AxiosError_default.ERR_BAD_RESPONSE,
              config,
              lastRequest
            ));
          }
        });
        responseStream.on(\\"aborted\\", function handlerStreamAborted() {
          if (rejected) {
            return;
          }
          const err = new AxiosError_default(
            \\"maxContentLength size of \\" + config.maxContentLength + \\" exceeded\\",
            AxiosError_default.ERR_BAD_RESPONSE,
            config,
            lastRequest
          );
          responseStream.destroy(err);
          reject(err);
        });
        responseStream.on(\\"error\\", function handleStreamError(err) {
          if (req.destroyed)
            return;
          reject(AxiosError_default.from(err, null, config, lastRequest));
        });
        responseStream.on(\\"end\\", function handleStreamEnd() {
          try {
            let responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);
            if (responseType !== \\"arraybuffer\\") {
              responseData = responseData.toString(responseEncoding);
              if (!responseEncoding || responseEncoding === \\"utf8\\") {
                responseData = utils_default.stripBOM(responseData);
              }
            }
            response.data = responseData;
          } catch (err) {
            reject(AxiosError_default.from(err, null, config, response.request, response));
          }
          settle(resolve, reject, response);
        });
      }
      emitter.once(\\"abort\\", (err) => {
        if (!responseStream.destroyed) {
          responseStream.emit(\\"error\\", err);
          responseStream.destroy();
        }
      });
    });
    emitter.once(\\"abort\\", (err) => {
      reject(err);
      req.destroy(err);
    });
    req.on(\\"error\\", function handleRequestError(err) {
      reject(AxiosError_default.from(err, null, config, req));
    });
    req.on(\\"socket\\", function handleRequestSocket(socket) {
      socket.setKeepAlive(true, 1e3 * 60);
    });
    if (config.timeout) {
      const timeout = parseInt(config.timeout, 10);
      if (isNaN(timeout)) {
        reject(new AxiosError_default(
          \\"error trying to parse \`config.timeout\` to int\\",
          AxiosError_default.ERR_BAD_OPTION_VALUE,
          config,
          req
        ));
        return;
      }
      req.setTimeout(timeout, function handleRequestTimeout() {
        if (isDone)
          return;
        let timeoutErrorMessage = config.timeout ? \\"timeout of \\" + config.timeout + \\"ms exceeded\\" : \\"timeout exceeded\\";
        const transitional2 = config.transitional || transitional_default;
        if (config.timeoutErrorMessage) {
          timeoutErrorMessage = config.timeoutErrorMessage;
        }
        reject(new AxiosError_default(
          timeoutErrorMessage,
          transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,
          config,
          req
        ));
        abort();
      });
    }
    if (utils_default.isStream(data)) {
      let ended = false;
      let errored = false;
      data.on(\\"end\\", () => {
        ended = true;
      });
      data.once(\\"error\\", (err) => {
        errored = true;
        req.destroy(err);
      });
      data.on(\\"close\\", () => {
        if (!ended && !errored) {
          abort(new CanceledError_default(\\"Request stream has been aborted\\", config, req));
        }
      });
      data.pipe(req);
    } else {
      req.end(data);
    }
  });
};

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/cookies.js
var cookies_default = node_default.isStandardBrowserEnv ? function standardBrowserEnv() {
  return {
    write: function write(name, value, expires, path, domain, secure) {
      const cookie = [];
      cookie.push(name + \\"=\\" + encodeURIComponent(value));
      if (utils_default.isNumber(expires)) {
        cookie.push(\\"expires=\\" + new Date(expires).toGMTString());
      }
      if (utils_default.isString(path)) {
        cookie.push(\\"path=\\" + path);
      }
      if (utils_default.isString(domain)) {
        cookie.push(\\"domain=\\" + domain);
      }
      if (secure === true) {
        cookie.push(\\"secure\\");
      }
      document.cookie = cookie.join(\\"; \\");
    },
    read: function read(name) {
      const match = document.cookie.match(new RegExp(\\"(^|;\\\\\\\\s*)(\\" + name + \\")=([^;]*)\\"));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove: function remove(name) {
      this.write(name, \\"\\", Date.now() - 864e5);
    }
  };
}() : function nonStandardBrowserEnv() {
  return {
    write: function write() {
    },
    read: function read() {
      return null;
    },
    remove: function remove() {
    }
  };
}();

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/isURLSameOrigin.js
var isURLSameOrigin_default = node_default.isStandardBrowserEnv ? function standardBrowserEnv2() {
  const msie = /(msie|trident)/i.test(navigator.userAgent);
  const urlParsingNode = document.createElement(\\"a\\");
  let originURL;
  function resolveURL(url2) {
    let href = url2;
    if (msie) {
      urlParsingNode.setAttribute(\\"href\\", href);
      href = urlParsingNode.href;
    }
    urlParsingNode.setAttribute(\\"href\\", href);
    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, \\"\\") : \\"\\",
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\\\?/, \\"\\") : \\"\\",
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, \\"\\") : \\"\\",
      hostname: urlParsingNode.hostname,
      port: urlParsingNode.port,
      pathname: urlParsingNode.pathname.charAt(0) === \\"/\\" ? urlParsingNode.pathname : \\"/\\" + urlParsingNode.pathname
    };
  }
  originURL = resolveURL(window.location.href);
  return function isURLSameOrigin(requestURL) {
    const parsed = utils_default.isString(requestURL) ? resolveURL(requestURL) : requestURL;
    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
  };
}() : function nonStandardBrowserEnv2() {
  return function isURLSameOrigin() {
    return true;
  };
}();

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/adapters/xhr.js
function progressEventReducer(listener, isDownloadStream) {
  let bytesNotified = 0;
  const _speedometer = speedometer_default(50, 250);
  return (e) => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : void 0;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;
    bytesNotified = loaded;
    const data = {
      loaded,
      total,
      progress: total ? loaded / total : void 0,
      bytes: progressBytes,
      rate: rate ? rate : void 0,
      estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
      event: e
    };
    data[isDownloadStream ? \\"download\\" : \\"upload\\"] = true;
    listener(data);
  };
}
var isXHRAdapterSupported = typeof XMLHttpRequest !== \\"undefined\\";
var xhr_default = isXHRAdapterSupported && function(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    let requestData = config.data;
    const requestHeaders = AxiosHeaders_default.from(config.headers).normalize();
    const responseType = config.responseType;
    let onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }
      if (config.signal) {
        config.signal.removeEventListener(\\"abort\\", onCanceled);
      }
    }
    if (utils_default.isFormData(requestData)) {
      if (node_default.isStandardBrowserEnv || node_default.isStandardBrowserWebWorkerEnv) {
        requestHeaders.setContentType(false);
      } else {
        requestHeaders.setContentType(\\"multipart/form-data;\\", false);
      }
    }
    let request = new XMLHttpRequest();
    if (config.auth) {
      const username = config.auth.username || \\"\\";
      const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : \\"\\";
      requestHeaders.set(\\"Authorization\\", \\"Basic \\" + btoa(username + \\":\\" + password));
    }
    const fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
    request.timeout = config.timeout;
    function onloadend() {
      if (!request) {
        return;
      }
      const responseHeaders = AxiosHeaders_default.from(
        \\"getAllResponseHeaders\\" in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === \\"text\\" || responseType === \\"json\\" ? request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };
      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);
      request = null;
    }
    if (\\"onloadend\\" in request) {
      request.onloadend = onloadend;
    } else {
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf(\\"file:\\") === 0)) {
          return;
        }
        setTimeout(onloadend);
      };
    }
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }
      reject(new AxiosError_default(\\"Request aborted\\", AxiosError_default.ECONNABORTED, config, request));
      request = null;
    };
    request.onerror = function handleError() {
      reject(new AxiosError_default(\\"Network Error\\", AxiosError_default.ERR_NETWORK, config, request));
      request = null;
    };
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = config.timeout ? \\"timeout of \\" + config.timeout + \\"ms exceeded\\" : \\"timeout exceeded\\";
      const transitional2 = config.transitional || transitional_default;
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(new AxiosError_default(
        timeoutErrorMessage,
        transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,
        config,
        request
      ));
      request = null;
    };
    if (node_default.isStandardBrowserEnv) {
      const xsrfValue = (config.withCredentials || isURLSameOrigin_default(fullPath)) && config.xsrfCookieName && cookies_default.read(config.xsrfCookieName);
      if (xsrfValue) {
        requestHeaders.set(config.xsrfHeaderName, xsrfValue);
      }
    }
    requestData === void 0 && requestHeaders.setContentType(null);
    if (\\"setRequestHeader\\" in request) {
      utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }
    if (!utils_default.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }
    if (responseType && responseType !== \\"json\\") {
      request.responseType = config.responseType;
    }
    if (typeof config.onDownloadProgress === \\"function\\") {
      request.addEventListener(\\"progress\\", progressEventReducer(config.onDownloadProgress, true));
    }
    if (typeof config.onUploadProgress === \\"function\\" && request.upload) {
      request.upload.addEventListener(\\"progress\\", progressEventReducer(config.onUploadProgress));
    }
    if (config.cancelToken || config.signal) {
      onCanceled = (cancel) => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new CanceledError_default(null, config, request) : cancel);
        request.abort();
        request = null;
      };
      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener(\\"abort\\", onCanceled);
      }
    }
    const protocol = parseProtocol(fullPath);
    if (protocol && node_default.protocols.indexOf(protocol) === -1) {
      reject(new AxiosError_default(\\"Unsupported protocol \\" + protocol + \\":\\", AxiosError_default.ERR_BAD_REQUEST, config));
      return;
    }
    request.send(requestData || null);
  });
};

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/adapters/adapters.js
var knownAdapters = {
  http: http_default,
  xhr: xhr_default
};
utils_default.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, \\"name\\", { value });
    } catch (e) {
    }
    Object.defineProperty(fn, \\"adapterName\\", { value });
  }
});
var adapters_default = {
  getAdapter: (adapters) => {
    adapters = utils_default.isArray(adapters) ? adapters : [adapters];
    const { length } = adapters;
    let nameOrAdapter;
    let adapter;
    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters[i];
      if (adapter = utils_default.isString(nameOrAdapter) ? knownAdapters[nameOrAdapter.toLowerCase()] : nameOrAdapter) {
        break;
      }
    }
    if (!adapter) {
      if (adapter === false) {
        throw new AxiosError_default(
          \`Adapter \${nameOrAdapter} is not supported by the environment\`,
          \\"ERR_NOT_SUPPORT\\"
        );
      }
      throw new Error(
        utils_default.hasOwnProp(knownAdapters, nameOrAdapter) ? \`Adapter '\${nameOrAdapter}' is not available in the build\` : \`Unknown adapter '\${nameOrAdapter}'\`
      );
    }
    if (!utils_default.isFunction(adapter)) {
      throw new TypeError(\\"adapter is not a function\\");
    }
    return adapter;
  },
  adapters: knownAdapters
};

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/dispatchRequest.js
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
  if (config.signal && config.signal.aborted) {
    throw new CanceledError_default(null, config);
  }
}
function dispatchRequest(config) {
  throwIfCancellationRequested(config);
  config.headers = AxiosHeaders_default.from(config.headers);
  config.data = transformData.call(
    config,
    config.transformRequest
  );
  if ([\\"post\\", \\"put\\", \\"patch\\"].indexOf(config.method) !== -1) {
    config.headers.setContentType(\\"application/x-www-form-urlencoded\\", false);
  }
  const adapter = adapters_default.getAdapter(config.adapter || defaults_default.adapter);
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);
    response.data = transformData.call(
      config,
      config.transformResponse,
      response
    );
    response.headers = AxiosHeaders_default.from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
      }
    }
    return Promise.reject(reason);
  });
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/mergeConfig.js
var headersToObject = (thing) => thing instanceof AxiosHeaders_default ? thing.toJSON() : thing;
function mergeConfig(config1, config2) {
  config2 = config2 || {};
  const config = {};
  function getMergedValue(target, source, caseless) {
    if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
      return utils_default.merge.call({ caseless }, target, source);
    } else if (utils_default.isPlainObject(source)) {
      return utils_default.merge({}, source);
    } else if (utils_default.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(a, b, caseless) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(a, b, caseless);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a, caseless);
    }
  }
  function valueFromConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    }
  }
  function defaultToConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a);
    }
  }
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(void 0, a);
    }
  }
  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
  };
  utils_default.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge2 = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge2(config1[prop], config2[prop], prop);
    utils_default.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/validator.js
var validators = {};
[\\"object\\", \\"boolean\\", \\"number\\", \\"function\\", \\"string\\", \\"symbol\\"].forEach((type, i) => {
  validators[type] = function validator(thing) {
    return typeof thing === type || \\"a\\" + (i < 1 ? \\"n \\" : \\" \\") + type;
  };
});
var deprecatedWarnings = {};
validators.transitional = function transitional(validator, version2, message) {
  function formatMessage(opt, desc) {
    return \\"[Axios v\\" + VERSION + \\"] Transitional option '\\" + opt + \\"'\\" + desc + (message ? \\". \\" + message : \\"\\");
  }
  return (value, opt, opts) => {
    if (validator === false) {
      throw new AxiosError_default(
        formatMessage(opt, \\" has been removed\\" + (version2 ? \\" in \\" + version2 : \\"\\")),
        AxiosError_default.ERR_DEPRECATED
      );
    }
    if (version2 && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(
        formatMessage(
          opt,
          \\" has been deprecated since v\\" + version2 + \\" and will be removed in the near future\\"
        )
      );
    }
    return validator ? validator(value, opt, opts) : true;
  };
};
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== \\"object\\") {
    throw new AxiosError_default(\\"options must be an object\\", AxiosError_default.ERR_BAD_OPTION_VALUE);
  }
  const keys2 = Object.keys(options);
  let i = keys2.length;
  while (i-- > 0) {
    const opt = keys2[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === void 0 || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError_default(\\"option \\" + opt + \\" must be \\" + result, AxiosError_default.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError_default(\\"Unknown option \\" + opt, AxiosError_default.ERR_BAD_OPTION);
    }
  }
}
var validator_default = {
  assertOptions,
  validators
};

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/Axios.js
var validators2 = validator_default.validators;
var Axios = class {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager_default(),
      response: new InterceptorManager_default()
    };
  }
  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  request(configOrUrl, config) {
    if (typeof configOrUrl === \\"string\\") {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }
    config = mergeConfig(this.defaults, config);
    const { transitional: transitional2, paramsSerializer, headers } = config;
    if (transitional2 !== void 0) {
      validator_default.assertOptions(transitional2, {
        silentJSONParsing: validators2.transitional(validators2.boolean),
        forcedJSONParsing: validators2.transitional(validators2.boolean),
        clarifyTimeoutError: validators2.transitional(validators2.boolean)
      }, false);
    }
    if (paramsSerializer != null) {
      if (utils_default.isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        };
      } else {
        validator_default.assertOptions(paramsSerializer, {
          encode: validators2.function,
          serialize: validators2.function
        }, true);
      }
    }
    config.method = (config.method || this.defaults.method || \\"get\\").toLowerCase();
    let contextHeaders;
    contextHeaders = headers && utils_default.merge(
      headers.common,
      headers[config.method]
    );
    contextHeaders && utils_default.forEach(
      [\\"delete\\", \\"get\\", \\"head\\", \\"post\\", \\"put\\", \\"patch\\", \\"common\\"],
      (method) => {
        delete headers[method];
      }
    );
    config.headers = AxiosHeaders_default.concat(contextHeaders, headers);
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === \\"function\\" && interceptor.runWhen(config) === false) {
        return;
      }
      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    let promise;
    let i = 0;
    let len;
    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), void 0];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;
      promise = Promise.resolve(config);
      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }
      return promise;
    }
    len = requestInterceptorChain.length;
    let newConfig = config;
    i = 0;
    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }
    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }
    i = 0;
    len = responseInterceptorChain.length;
    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }
    return promise;
  }
  getUri(config) {
    config = mergeConfig(this.defaults, config);
    const fullPath = buildFullPath(config.baseURL, config.url);
    return buildURL(fullPath, config.params, config.paramsSerializer);
  }
};
utils_default.forEach([\\"delete\\", \\"get\\", \\"head\\", \\"options\\"], function forEachMethodNoData2(method) {
  Axios.prototype[method] = function(url2, config) {
    return this.request(mergeConfig(config || {}, {
      method,
      url: url2,
      data: (config || {}).data
    }));
  };
});
utils_default.forEach([\\"post\\", \\"put\\", \\"patch\\"], function forEachMethodWithData2(method) {
  function generateHTTPMethod(isForm) {
    return function httpMethod(url2, data, config) {
      return this.request(mergeConfig(config || {}, {
        method,
        headers: isForm ? {
          \\"Content-Type\\": \\"multipart/form-data\\"
        } : {},
        url: url2,
        data
      }));
    };
  }
  Axios.prototype[method] = generateHTTPMethod();
  Axios.prototype[method + \\"Form\\"] = generateHTTPMethod(true);
});
var Axios_default = Axios;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/cancel/CancelToken.js
var CancelToken = class {
  constructor(executor) {
    if (typeof executor !== \\"function\\") {
      throw new TypeError(\\"executor must be a function.\\");
    }
    let resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });
    const token = this;
    this.promise.then((cancel) => {
      if (!token._listeners)
        return;
      let i = token._listeners.length;
      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });
    this.promise.then = (onfulfilled) => {
      let _resolve;
      const promise = new Promise((resolve) => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);
      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };
      return promise;
    };
    executor(function cancel(message, config, request) {
      if (token.reason) {
        return;
      }
      token.reason = new CanceledError_default(message, config, request);
      resolvePromise(token.reason);
    });
  }
  /**
   * Throws a \`CanceledError\` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }
  /**
   * Subscribe to the cancel signal
   */
  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }
    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }
  /**
   * Unsubscribe from the cancel signal
   */
  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }
  /**
   * Returns an object that contains a new \`CancelToken\` and a function that, when called,
   * cancels the \`CancelToken\`.
   */
  static source() {
    let cancel;
    const token = new CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  }
};
var CancelToken_default = CancelToken;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/spread.js
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/isAxiosError.js
function isAxiosError(payload) {
  return utils_default.isObject(payload) && payload.isAxiosError === true;
}

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/HttpStatusCode.js
var HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511
};
Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});
var HttpStatusCode_default = HttpStatusCode;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/axios.js
function createInstance(defaultConfig) {
  const context = new Axios_default(defaultConfig);
  const instance = bind(Axios_default.prototype.request, context);
  utils_default.extend(instance, Axios_default.prototype, context, { allOwnKeys: true });
  utils_default.extend(instance, context, null, { allOwnKeys: true });
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };
  return instance;
}
var axios = createInstance(defaults_default);
axios.Axios = Axios_default;
axios.CanceledError = CanceledError_default;
axios.CancelToken = CancelToken_default;
axios.isCancel = isCancel;
axios.VERSION = VERSION;
axios.toFormData = toFormData_default;
axios.AxiosError = AxiosError_default;
axios.Cancel = axios.CanceledError;
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = spread;
axios.isAxiosError = isAxiosError;
axios.mergeConfig = mergeConfig;
axios.AxiosHeaders = AxiosHeaders_default;
axios.formToJSON = (thing) => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
axios.HttpStatusCode = HttpStatusCode_default;
axios.default = axios;
var axios_default = axios;

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/index.js
var {
  Axios: Axios2,
  AxiosError: AxiosError2,
  CanceledError: CanceledError2,
  isCancel: isCancel2,
  CancelToken: CancelToken2,
  VERSION: VERSION2,
  all: all2,
  Cancel,
  isAxiosError: isAxiosError2,
  spread: spread2,
  toFormData: toFormData2,
  AxiosHeaders: AxiosHeaders2,
  HttpStatusCode: HttpStatusCode2,
  formToJSON,
  mergeConfig: mergeConfig2
} = axios_default;

// src/core/fetcher/Fetcher.ts
async function fetcherImpl(args) {
  const headers = {};
  if (args.body !== void 0 && args.contentType != null) {
    headers[\\"Content-Type\\"] = args.contentType;
  }
  if (args.headers != null) {
    for (const [key, value] of Object.entries(args.headers)) {
      if (value != null) {
        headers[key] = value;
      }
    }
  }
  try {
    const response = await axios_default({
      url: args.url,
      params: args.queryParameters,
      method: args.method,
      headers,
      data: args.body,
      validateStatus: () => true,
      transformResponse: (response2) => response2,
      timeout: args.timeoutMs,
      transitional: {
        clarifyTimeoutError: true
      },
      withCredentials: args.withCredentials,
      adapter: args.adapter,
      onUploadProgress: args.onUploadProgress,
      maxBodyLength: Infinity,
      maxContentLength: Infinity,
      responseType: args.responseType ?? \\"json\\"
    });
    let body;
    if (args.responseType === \\"blob\\") {
      body = response.data;
    } else if (response.data != null && response.data.length > 0) {
      try {
        body = JSON.parse(response.data) ?? void 0;
      } catch {
        return {
          ok: false,
          error: {
            reason: \\"non-json\\",
            statusCode: response.status,
            rawBody: response.data
          }
        };
      }
    }
    if (response.status >= 200 && response.status < 400) {
      return {
        ok: true,
        body
      };
    } else {
      return {
        ok: false,
        error: {
          reason: \\"status-code\\",
          statusCode: response.status,
          body
        }
      };
    }
  } catch (error) {
    if (error.code === \\"ETIMEDOUT\\") {
      return {
        ok: false,
        error: {
          reason: \\"timeout\\"
        }
      };
    }
    return {
      ok: false,
      error: {
        reason: \\"unknown\\",
        errorMessage: error.message
      }
    };
  }
}
var fetcher = fetcherImpl;

// src/core/fetcher/Supplier.ts
var Supplier = {
  get: async (supplier) => {
    if (typeof supplier === \\"function\\") {
      return supplier();
    } else {
      return supplier;
    }
  }
};

// .yarn/cache/js-base64-npm-3.7.2-706fb77a0b-573f28e9a2.zip/node_modules/js-base64/base64.mjs
var version = \\"3.7.2\\";
var VERSION3 = version;
var _hasatob = typeof atob === \\"function\\";
var _hasbtoa = typeof btoa === \\"function\\";
var _hasBuffer = typeof Buffer === \\"function\\";
var _TD = typeof TextDecoder === \\"function\\" ? new TextDecoder() : void 0;
var _TE = typeof TextEncoder === \\"function\\" ? new TextEncoder() : void 0;
var b64ch = \\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\";
var b64chs = Array.prototype.slice.call(b64ch);
var b64tab = ((a) => {
  let tab = {};
  a.forEach((c, i) => tab[c] = i);
  return tab;
})(b64chs);
var b64re = /^(?:[A-Za-z\\\\d+\\\\/]{4})*?(?:[A-Za-z\\\\d+\\\\/]{2}(?:==)?|[A-Za-z\\\\d+\\\\/]{3}=?)?$/;
var _fromCC = String.fromCharCode.bind(String);
var _U8Afrom = typeof Uint8Array.from === \\"function\\" ? Uint8Array.from.bind(Uint8Array) : (it, fn = (x) => x) => new Uint8Array(Array.prototype.slice.call(it, 0).map(fn));
var _mkUriSafe = (src) => src.replace(/=/g, \\"\\").replace(/[+\\\\/]/g, (m0) => m0 == \\"+\\" ? \\"-\\" : \\"_\\");
var _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\\\\+\\\\/]/g, \\"\\");
var btoaPolyfill = (bin) => {
  let u32, c0, c1, c2, asc = \\"\\";
  const pad = bin.length % 3;
  for (let i = 0; i < bin.length; ) {
    if ((c0 = bin.charCodeAt(i++)) > 255 || (c1 = bin.charCodeAt(i++)) > 255 || (c2 = bin.charCodeAt(i++)) > 255)
      throw new TypeError(\\"invalid character found\\");
    u32 = c0 << 16 | c1 << 8 | c2;
    asc += b64chs[u32 >> 18 & 63] + b64chs[u32 >> 12 & 63] + b64chs[u32 >> 6 & 63] + b64chs[u32 & 63];
  }
  return pad ? asc.slice(0, pad - 3) + \\"===\\".substring(pad) : asc;
};
var _btoa = _hasbtoa ? (bin) => btoa(bin) : _hasBuffer ? (bin) => Buffer.from(bin, \\"binary\\").toString(\\"base64\\") : btoaPolyfill;
var _fromUint8Array = _hasBuffer ? (u8a) => Buffer.from(u8a).toString(\\"base64\\") : (u8a) => {
  const maxargs = 4096;
  let strs = [];
  for (let i = 0, l = u8a.length; i < l; i += maxargs) {
    strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));
  }
  return _btoa(strs.join(\\"\\"));
};
var fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);
var cb_utob = (c) => {
  if (c.length < 2) {
    var cc = c.charCodeAt(0);
    return cc < 128 ? c : cc < 2048 ? _fromCC(192 | cc >>> 6) + _fromCC(128 | cc & 63) : _fromCC(224 | cc >>> 12 & 15) + _fromCC(128 | cc >>> 6 & 63) + _fromCC(128 | cc & 63);
  } else {
    var cc = 65536 + (c.charCodeAt(0) - 55296) * 1024 + (c.charCodeAt(1) - 56320);
    return _fromCC(240 | cc >>> 18 & 7) + _fromCC(128 | cc >>> 12 & 63) + _fromCC(128 | cc >>> 6 & 63) + _fromCC(128 | cc & 63);
  }
};
var re_utob = /[\\\\uD800-\\\\uDBFF][\\\\uDC00-\\\\uDFFFF]|[^\\\\x00-\\\\x7F]/g;
var utob = (u) => u.replace(re_utob, cb_utob);
var _encode = _hasBuffer ? (s) => Buffer.from(s, \\"utf8\\").toString(\\"base64\\") : _TE ? (s) => _fromUint8Array(_TE.encode(s)) : (s) => _btoa(utob(s));
var encode3 = (src, urlsafe = false) => urlsafe ? _mkUriSafe(_encode(src)) : _encode(src);
var encodeURI = (src) => encode3(src, true);
var re_btou = /[\\\\xC0-\\\\xDF][\\\\x80-\\\\xBF]|[\\\\xE0-\\\\xEF][\\\\x80-\\\\xBF]{2}|[\\\\xF0-\\\\xF7][\\\\x80-\\\\xBF]{3}/g;
var cb_btou = (cccc) => {
  switch (cccc.length) {
    case 4:
      var cp = (7 & cccc.charCodeAt(0)) << 18 | (63 & cccc.charCodeAt(1)) << 12 | (63 & cccc.charCodeAt(2)) << 6 | 63 & cccc.charCodeAt(3), offset = cp - 65536;
      return _fromCC((offset >>> 10) + 55296) + _fromCC((offset & 1023) + 56320);
    case 3:
      return _fromCC((15 & cccc.charCodeAt(0)) << 12 | (63 & cccc.charCodeAt(1)) << 6 | 63 & cccc.charCodeAt(2));
    default:
      return _fromCC((31 & cccc.charCodeAt(0)) << 6 | 63 & cccc.charCodeAt(1));
  }
};
var btou = (b) => b.replace(re_btou, cb_btou);
var atobPolyfill = (asc) => {
  asc = asc.replace(/\\\\s+/g, \\"\\");
  if (!b64re.test(asc))
    throw new TypeError(\\"malformed base64.\\");
  asc += \\"==\\".slice(2 - (asc.length & 3));
  let u24, bin = \\"\\", r1, r2;
  for (let i = 0; i < asc.length; ) {
    u24 = b64tab[asc.charAt(i++)] << 18 | b64tab[asc.charAt(i++)] << 12 | (r1 = b64tab[asc.charAt(i++)]) << 6 | (r2 = b64tab[asc.charAt(i++)]);
    bin += r1 === 64 ? _fromCC(u24 >> 16 & 255) : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255) : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);
  }
  return bin;
};
var _atob = _hasatob ? (asc) => atob(_tidyB64(asc)) : _hasBuffer ? (asc) => Buffer.from(asc, \\"base64\\").toString(\\"binary\\") : atobPolyfill;
var _toUint8Array = _hasBuffer ? (a) => _U8Afrom(Buffer.from(a, \\"base64\\")) : (a) => _U8Afrom(_atob(a), (c) => c.charCodeAt(0));
var toUint8Array = (a) => _toUint8Array(_unURI(a));
var _decode = _hasBuffer ? (a) => Buffer.from(a, \\"base64\\").toString(\\"utf8\\") : _TD ? (a) => _TD.decode(_toUint8Array(a)) : (a) => btou(_atob(a));
var _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == \\"-\\" ? \\"+\\" : \\"/\\"));
var decode = (src) => _decode(_unURI(src));
var isValid = (src) => {
  if (typeof src !== \\"string\\")
    return false;
  const s = src.replace(/\\\\s+/g, \\"\\").replace(/={0,2}$/, \\"\\");
  return !/[^\\\\s0-9a-zA-Z\\\\+/]/.test(s) || !/[^\\\\s0-9a-zA-Z\\\\-_]/.test(s);
};
var _noEnum = (v) => {
  return {
    value: v,
    enumerable: false,
    writable: true,
    configurable: true
  };
};
var extendString = function() {
  const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));
  _add(\\"fromBase64\\", function() {
    return decode(this);
  });
  _add(\\"toBase64\\", function(urlsafe) {
    return encode3(this, urlsafe);
  });
  _add(\\"toBase64URI\\", function() {
    return encode3(this, true);
  });
  _add(\\"toBase64URL\\", function() {
    return encode3(this, true);
  });
  _add(\\"toUint8Array\\", function() {
    return toUint8Array(this);
  });
};
var extendUint8Array = function() {
  const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));
  _add(\\"toBase64\\", function(urlsafe) {
    return fromUint8Array(this, urlsafe);
  });
  _add(\\"toBase64URI\\", function() {
    return fromUint8Array(this, true);
  });
  _add(\\"toBase64URL\\", function() {
    return fromUint8Array(this, true);
  });
};
var extendBuiltins = () => {
  extendString();
  extendUint8Array();
};
var gBase64 = {
  version,
  VERSION: VERSION3,
  atob: _atob,
  atobPolyfill,
  btoa: _btoa,
  btoaPolyfill,
  fromBase64: decode,
  toBase64: encode3,
  encode: encode3,
  encodeURI,
  encodeURL: encodeURI,
  utob,
  btou,
  decode,
  isValid,
  fromUint8Array,
  toUint8Array,
  extendString,
  extendUint8Array,
  extendBuiltins
};

// src/core/auth/BasicAuth.ts
var BASIC_AUTH_HEADER_PREFIX = /^Basic /i;
var BasicAuth = {
  toAuthorizationHeader: (basicAuth) => {
    if (basicAuth == null) {
      return void 0;
    }
    const token = gBase64.encode(\`\${basicAuth.username}:\${basicAuth.password}\`);
    return \`Basic \${token}\`;
  },
  fromAuthorizationHeader: (header) => {
    const credentials = header.replace(BASIC_AUTH_HEADER_PREFIX, \\"\\");
    const decoded = gBase64.decode(credentials);
    const [username, password] = decoded.split(\\":\\", 2);
    if (username == null || password == null) {
      throw new Error(\\"Invalid basic auth\\");
    }
    return {
      username,
      password
    };
  }
};

// src/core/auth/BearerToken.ts
var BEARER_AUTH_HEADER_PREFIX = /^Bearer /i;
var BearerToken = {
  toAuthorizationHeader: (token) => {
    if (token == null) {
      return void 0;
    }
    return \`Bearer \${token}\`;
  },
  fromAuthorizationHeader: (header) => {
    return header.replace(BEARER_AUTH_HEADER_PREFIX, \\"\\").trim();
  }
};

// src/core/schemas/index.ts
var schemas_exports = {};
__export(schemas_exports, {
  JsonError: () => JsonError,
  ParseError: () => ParseError,
  any: () => any,
  boolean: () => boolean,
  date: () => date,
  discriminant: () => discriminant,
  enum_: () => enum_,
  getObjectLikeUtils: () => getObjectLikeUtils,
  getObjectUtils: () => getObjectUtils,
  getSchemaUtils: () => getSchemaUtils,
  isProperty: () => isProperty,
  lazy: () => lazy,
  lazyObject: () => lazyObject,
  list: () => list,
  number: () => number,
  object: () => object,
  optional: () => optional,
  property: () => property,
  record: () => record,
  set: () => set,
  string: () => string,
  stringLiteral: () => stringLiteral,
  transform: () => transform,
  undiscriminatedUnion: () => undiscriminatedUnion,
  union: () => union,
  unknown: () => unknown,
  withParsedProperties: () => withParsedProperties
});

// src/core/schemas/Schema.ts
var SchemaType = {
  DATE: \\"date\\",
  ENUM: \\"enum\\",
  LIST: \\"list\\",
  STRING_LITERAL: \\"stringLiteral\\",
  OBJECT: \\"object\\",
  ANY: \\"any\\",
  BOOLEAN: \\"boolean\\",
  NUMBER: \\"number\\",
  STRING: \\"string\\",
  UNKNOWN: \\"unknown\\",
  RECORD: \\"record\\",
  SET: \\"set\\",
  UNION: \\"union\\",
  UNDISCRIMINATED_UNION: \\"undiscriminatedUnion\\",
  OPTIONAL: \\"optional\\"
};

// src/core/schemas/utils/getErrorMessageForIncorrectType.ts
function getErrorMessageForIncorrectType(value, expectedType) {
  return \`Expected \${expectedType}. Received \${getTypeAsString(value)}.\`;
}
function getTypeAsString(value) {
  if (Array.isArray(value)) {
    return \\"list\\";
  }
  if (value === null) {
    return \\"null\\";
  }
  switch (typeof value) {
    case \\"string\\":
      return \`\\"\${value}\\"\`;
    case \\"number\\":
    case \\"boolean\\":
    case \\"undefined\\":
      return \`\${value}\`;
  }
  return typeof value;
}

// src/core/schemas/utils/maybeSkipValidation.ts
function maybeSkipValidation(schema) {
  return {
    ...schema,
    json: transformAndMaybeSkipValidation(schema.json),
    parse: transformAndMaybeSkipValidation(schema.parse)
  };
}
function transformAndMaybeSkipValidation(transform2) {
  return async (value, opts) => {
    const transformed = await transform2(value, opts);
    const { skipValidation = false } = opts ?? {};
    if (!transformed.ok && skipValidation) {
      console.warn(
        [
          \\"Failed to validate.\\",
          ...transformed.errors.map(
            (error) => \\"  - \\" + (error.path.length > 0 ? \`\${error.path.join(\\".\\")}: \${error.message}\` : error.message)
          )
        ].join(\\"\\\\n\\")
      );
      return {
        ok: true,
        value
      };
    } else {
      return transformed;
    }
  };
}

// src/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
function stringifyValidationError(error) {
  if (error.path.length === 0) {
    return error.message;
  }
  return \`\${error.path.join(\\" -> \\")}: \${error.message}\`;
}

// src/core/schemas/builders/schema-utils/JsonError.ts
var JsonError = class extends Error {
  constructor(errors) {
    super(errors.map(stringifyValidationError).join(\\"; \\"));
    this.errors = errors;
    Object.setPrototypeOf(this, JsonError.prototype);
  }
};

// src/core/schemas/builders/schema-utils/ParseError.ts
var ParseError = class extends Error {
  constructor(errors) {
    super(errors.map(stringifyValidationError).join(\\"; \\"));
    this.errors = errors;
    Object.setPrototypeOf(this, ParseError.prototype);
  }
};

// src/core/schemas/builders/schema-utils/getSchemaUtils.ts
function getSchemaUtils(schema) {
  return {
    optional: () => optional(schema),
    transform: (transformer) => transform(schema, transformer),
    parseOrThrow: async (raw, opts) => {
      const parsed = await schema.parse(raw, opts);
      if (parsed.ok) {
        return parsed.value;
      }
      throw new ParseError(parsed.errors);
    },
    jsonOrThrow: async (parsed, opts) => {
      const raw = await schema.json(parsed, opts);
      if (raw.ok) {
        return raw.value;
      }
      throw new JsonError(raw.errors);
    }
  };
}
function optional(schema) {
  const baseSchema = {
    parse: (raw, opts) => {
      if (raw == null) {
        return {
          ok: true,
          value: void 0
        };
      }
      return schema.parse(raw, opts);
    },
    json: (parsed, opts) => {
      if (parsed == null) {
        return {
          ok: true,
          value: null
        };
      }
      return schema.json(parsed, opts);
    },
    getType: () => SchemaType.OPTIONAL
  };
  return {
    ...baseSchema,
    ...getSchemaUtils(baseSchema)
  };
}
function transform(schema, transformer) {
  const baseSchema = {
    parse: async (raw, opts) => {
      const parsed = await schema.parse(raw, opts);
      if (!parsed.ok) {
        return parsed;
      }
      return {
        ok: true,
        value: transformer.transform(parsed.value)
      };
    },
    json: async (transformed, opts) => {
      const parsed = await transformer.untransform(transformed);
      return schema.json(parsed, opts);
    },
    getType: () => schema.getType()
  };
  return {
    ...baseSchema,
    ...getSchemaUtils(baseSchema)
  };
}

// src/core/schemas/builders/date/date.ts
var ISO_8601_REGEX = /^([+-]?\\\\d{4}(?!\\\\d{2}\\\\b))((-?)((0[1-9]|1[0-2])(\\\\3([12]\\\\d|0[1-9]|3[01]))?|W([0-4]\\\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\\\d|[12]\\\\d{2}|3([0-5]\\\\d|6[1-6])))([T\\\\s]((([01]\\\\d|2[0-3])((:?)[0-5]\\\\d)?|24:?00)([.,]\\\\d+(?!:))?)?(\\\\17[0-5]\\\\d([.,]\\\\d+)?)?([zZ]|([+-])([01]\\\\d|2[0-3]):?([0-5]\\\\d)?)?)?)?$/;
function date() {
  const baseSchema = {
    parse: (raw, { breadcrumbsPrefix = [] } = {}) => {
      if (typeof raw !== \\"string\\") {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(raw, \\"string\\")
            }
          ]
        };
      }
      if (!ISO_8601_REGEX.test(raw)) {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(raw, \\"ISO 8601 date string\\")
            }
          ]
        };
      }
      return {
        ok: true,
        value: new Date(raw)
      };
    },
    json: (date2, { breadcrumbsPrefix = [] } = {}) => {
      if (date2 instanceof Date) {
        return {
          ok: true,
          value: date2.toISOString()
        };
      } else {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(date2, \\"Date object\\")
            }
          ]
        };
      }
    },
    getType: () => SchemaType.DATE
  };
  return {
    ...maybeSkipValidation(baseSchema),
    ...getSchemaUtils(baseSchema)
  };
}

// src/core/schemas/utils/createIdentitySchemaCreator.ts
function createIdentitySchemaCreator(schemaType, validate) {
  return () => {
    const baseSchema = {
      parse: validate,
      json: validate,
      getType: () => schemaType
    };
    return {
      ...maybeSkipValidation(baseSchema),
      ...getSchemaUtils(baseSchema)
    };
  };
}

// src/core/schemas/builders/enum/enum.ts
function enum_(values) {
  const validValues = new Set(values);
  const schemaCreator = createIdentitySchemaCreator(
    SchemaType.ENUM,
    (value, { allowUnrecognizedEnumValues, breadcrumbsPrefix = [] } = {}) => {
      if (typeof value !== \\"string\\") {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(value, \\"string\\")
            }
          ]
        };
      }
      if (!validValues.has(value) && !allowUnrecognizedEnumValues) {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(value, \\"enum\\")
            }
          ]
        };
      }
      return {
        ok: true,
        value
      };
    }
  );
  return schemaCreator();
}

// src/core/schemas/builders/lazy/lazy.ts
function lazy(getter) {
  const baseSchema = constructLazyBaseSchema(getter);
  return {
    ...baseSchema,
    ...getSchemaUtils(baseSchema)
  };
}
function constructLazyBaseSchema(getter) {
  return {
    parse: async (raw, opts) => (await getMemoizedSchema(getter)).parse(raw, opts),
    json: async (parsed, opts) => (await getMemoizedSchema(getter)).json(parsed, opts),
    getType: async () => (await getMemoizedSchema(getter)).getType()
  };
}
async function getMemoizedSchema(getter) {
  const castedGetter = getter;
  if (castedGetter.__zurg_memoized == null) {
    castedGetter.__zurg_memoized = await getter();
  }
  return castedGetter.__zurg_memoized;
}

// src/core/schemas/utils/entries.ts
function entries(object2) {
  return Object.entries(object2);
}

// src/core/schemas/utils/filterObject.ts
function filterObject(obj, keysToInclude) {
  const keysToIncludeSet = new Set(keysToInclude);
  return Object.entries(obj).reduce((acc, [key, value]) => {
    if (keysToIncludeSet.has(key)) {
      acc[key] = value;
    }
    return acc;
  }, {});
}

// src/core/schemas/utils/isPlainObject.ts
function isPlainObject2(value) {
  if (typeof value !== \\"object\\" || value === null) {
    return false;
  }
  if (Object.getPrototypeOf(value) === null) {
    return true;
  }
  let proto = value;
  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }
  return Object.getPrototypeOf(value) === proto;
}

// src/core/schemas/utils/keys.ts
function keys(object2) {
  return Object.keys(object2);
}

// src/core/schemas/utils/partition.ts
function partition(items, predicate) {
  const trueItems = [], falseItems = [];
  for (const item of items) {
    if (predicate(item)) {
      trueItems.push(item);
    } else {
      falseItems.push(item);
    }
  }
  return [trueItems, falseItems];
}

// src/core/schemas/builders/object-like/getObjectLikeUtils.ts
function getObjectLikeUtils(schema) {
  return {
    withParsedProperties: (properties) => withParsedProperties(schema, properties)
  };
}
function withParsedProperties(objectLike, properties) {
  const objectSchema = {
    parse: async (raw, opts) => {
      const parsedObject = await objectLike.parse(raw, opts);
      if (!parsedObject.ok) {
        return parsedObject;
      }
      const additionalProperties = Object.entries(properties).reduce(
        (processed, [key, value]) => {
          return {
            ...processed,
            [key]: typeof value === \\"function\\" ? value(parsedObject.value) : value
          };
        },
        {}
      );
      return {
        ok: true,
        value: {
          ...parsedObject.value,
          ...additionalProperties
        }
      };
    },
    json: (parsed, opts) => {
      if (!isPlainObject2(parsed)) {
        return {
          ok: false,
          errors: [
            {
              path: (opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [],
              message: getErrorMessageForIncorrectType(parsed, \\"object\\")
            }
          ]
        };
      }
      const addedPropertyKeys = new Set(Object.keys(properties));
      const parsedWithoutAddedProperties = filterObject(
        parsed,
        Object.keys(parsed).filter((key) => !addedPropertyKeys.has(key))
      );
      return objectLike.json(parsedWithoutAddedProperties, opts);
    },
    getType: () => objectLike.getType()
  };
  return {
    ...objectSchema,
    ...getSchemaUtils(objectSchema),
    ...getObjectLikeUtils(objectSchema)
  };
}

// src/core/schemas/builders/object/property.ts
function property(rawKey, valueSchema) {
  return {
    rawKey,
    valueSchema,
    isProperty: true
  };
}
function isProperty(maybeProperty) {
  return maybeProperty.isProperty;
}

// src/core/schemas/builders/object/object.ts
function object(schemas) {
  const baseSchema = {
    _getRawProperties: () => Promise.resolve(
      Object.entries(schemas).map(
        ([parsedKey, propertySchema]) => isProperty(propertySchema) ? propertySchema.rawKey : parsedKey
      )
    ),
    _getParsedProperties: () => Promise.resolve(keys(schemas)),
    parse: async (raw, opts) => {
      const rawKeyToProperty = {};
      const requiredKeys = [];
      for (const [parsedKey, schemaOrObjectProperty] of entries(schemas)) {
        const rawKey = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.rawKey : parsedKey;
        const valueSchema = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.valueSchema : schemaOrObjectProperty;
        const property2 = {
          rawKey,
          parsedKey,
          valueSchema
        };
        rawKeyToProperty[rawKey] = property2;
        if (await isSchemaRequired(valueSchema)) {
          requiredKeys.push(rawKey);
        }
      }
      return validateAndTransformObject({
        value: raw,
        requiredKeys,
        getProperty: (rawKey) => {
          const property2 = rawKeyToProperty[rawKey];
          if (property2 == null) {
            return void 0;
          }
          return {
            transformedKey: property2.parsedKey,
            transform: (propertyValue) => property2.valueSchema.parse(propertyValue, {
              ...opts,
              breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], rawKey]
            })
          };
        },
        unrecognizedObjectKeys: opts == null ? void 0 : opts.unrecognizedObjectKeys,
        skipValidation: opts == null ? void 0 : opts.skipValidation,
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    },
    json: async (parsed, opts) => {
      const requiredKeys = [];
      for (const [parsedKey, schemaOrObjectProperty] of entries(schemas)) {
        const valueSchema = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.valueSchema : schemaOrObjectProperty;
        if (await isSchemaRequired(valueSchema)) {
          requiredKeys.push(parsedKey);
        }
      }
      return validateAndTransformObject({
        value: parsed,
        requiredKeys,
        getProperty: (parsedKey) => {
          const property2 = schemas[parsedKey];
          if (property2 == null) {
            return void 0;
          }
          if (isProperty(property2)) {
            return {
              transformedKey: property2.rawKey,
              transform: (propertyValue) => property2.valueSchema.json(propertyValue, {
                ...opts,
                breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], parsedKey]
              })
            };
          } else {
            return {
              transformedKey: parsedKey,
              transform: (propertyValue) => property2.json(propertyValue, {
                ...opts,
                breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], parsedKey]
              })
            };
          }
        },
        unrecognizedObjectKeys: opts == null ? void 0 : opts.unrecognizedObjectKeys,
        skipValidation: opts == null ? void 0 : opts.skipValidation,
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    },
    getType: () => SchemaType.OBJECT
  };
  return {
    ...maybeSkipValidation(baseSchema),
    ...getSchemaUtils(baseSchema),
    ...getObjectLikeUtils(baseSchema),
    ...getObjectUtils(baseSchema)
  };
}
async function validateAndTransformObject({
  value,
  requiredKeys,
  getProperty,
  unrecognizedObjectKeys = \\"fail\\",
  skipValidation = false,
  breadcrumbsPrefix = []
}) {
  if (!isPlainObject2(value)) {
    return {
      ok: false,
      errors: [
        {
          path: breadcrumbsPrefix,
          message: getErrorMessageForIncorrectType(value, \\"object\\")
        }
      ]
    };
  }
  const missingRequiredKeys = new Set(requiredKeys);
  const errors = [];
  const transformed = {};
  for (const [preTransformedKey, preTransformedItemValue] of Object.entries(value)) {
    const property2 = getProperty(preTransformedKey);
    if (property2 != null) {
      missingRequiredKeys.delete(preTransformedKey);
      const value2 = await property2.transform(preTransformedItemValue);
      if (value2.ok) {
        transformed[property2.transformedKey] = value2.value;
      } else {
        transformed[preTransformedKey] = preTransformedItemValue;
        errors.push(...value2.errors);
      }
    } else {
      switch (unrecognizedObjectKeys) {
        case \\"fail\\":
          errors.push({
            path: [...breadcrumbsPrefix, preTransformedKey],
            message: \`Unexpected key \\"\${preTransformedKey}\\"\`
          });
          break;
        case \\"strip\\":
          break;
        case \\"passthrough\\":
          transformed[preTransformedKey] = preTransformedItemValue;
          break;
      }
    }
  }
  errors.push(
    ...requiredKeys.filter((key) => missingRequiredKeys.has(key)).map((key) => ({
      path: breadcrumbsPrefix,
      message: \`Missing required key \\"\${key}\\"\`
    }))
  );
  if (errors.length === 0 || skipValidation) {
    return {
      ok: true,
      value: transformed
    };
  } else {
    return {
      ok: false,
      errors
    };
  }
}
function getObjectUtils(schema) {
  return {
    extend: (extension) => {
      const baseSchema = {
        _getParsedProperties: async () => [
          ...await schema._getParsedProperties(),
          ...await extension._getParsedProperties()
        ],
        _getRawProperties: async () => [
          ...await schema._getRawProperties(),
          ...await extension._getRawProperties()
        ],
        parse: async (raw, opts) => {
          return validateAndTransformExtendedObject({
            extensionKeys: await extension._getRawProperties(),
            value: raw,
            transformBase: (rawBase) => schema.parse(rawBase, opts),
            transformExtension: (rawExtension) => extension.parse(rawExtension, opts)
          });
        },
        json: async (parsed, opts) => {
          return validateAndTransformExtendedObject({
            extensionKeys: await extension._getParsedProperties(),
            value: parsed,
            transformBase: (parsedBase) => schema.json(parsedBase, opts),
            transformExtension: (parsedExtension) => extension.json(parsedExtension, opts)
          });
        },
        getType: () => SchemaType.OBJECT
      };
      return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
        ...getObjectLikeUtils(baseSchema),
        ...getObjectUtils(baseSchema)
      };
    }
  };
}
async function validateAndTransformExtendedObject({
  extensionKeys,
  value,
  transformBase,
  transformExtension
}) {
  const extensionPropertiesSet = new Set(extensionKeys);
  const [extensionProperties, baseProperties] = partition(
    keys(value),
    (key) => extensionPropertiesSet.has(key)
  );
  const transformedBase = await transformBase(filterObject(value, baseProperties));
  const transformedExtension = await transformExtension(filterObject(value, extensionProperties));
  if (transformedBase.ok && transformedExtension.ok) {
    return {
      ok: true,
      value: {
        ...transformedBase.value,
        ...transformedExtension.value
      }
    };
  } else {
    return {
      ok: false,
      errors: [
        ...transformedBase.ok ? [] : transformedBase.errors,
        ...transformedExtension.ok ? [] : transformedExtension.errors
      ]
    };
  }
}
async function isSchemaRequired(schema) {
  return !await isSchemaOptional(schema);
}
async function isSchemaOptional(schema) {
  switch (await schema.getType()) {
    case SchemaType.ANY:
    case SchemaType.UNKNOWN:
    case SchemaType.OPTIONAL:
      return true;
    default:
      return false;
  }
}

// src/core/schemas/builders/lazy/lazyObject.ts
function lazyObject(getter) {
  const baseSchema = {
    ...constructLazyBaseSchema(getter),
    _getRawProperties: async () => (await getMemoizedSchema(getter))._getRawProperties(),
    _getParsedProperties: async () => (await getMemoizedSchema(getter))._getParsedProperties()
  };
  return {
    ...baseSchema,
    ...getSchemaUtils(baseSchema),
    ...getObjectLikeUtils(baseSchema),
    ...getObjectUtils(baseSchema)
  };
}

// src/core/schemas/builders/list/list.ts
function list(schema) {
  const baseSchema = {
    parse: async (raw, opts) => validateAndTransformArray(
      raw,
      (item, index) => schema.parse(item, {
        ...opts,
        breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], \`[\${index}]\`]
      })
    ),
    json: (parsed, opts) => validateAndTransformArray(
      parsed,
      (item, index) => schema.json(item, {
        ...opts,
        breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], \`[\${index}]\`]
      })
    ),
    getType: () => SchemaType.LIST
  };
  return {
    ...maybeSkipValidation(baseSchema),
    ...getSchemaUtils(baseSchema)
  };
}
async function validateAndTransformArray(value, transformItem) {
  if (!Array.isArray(value)) {
    return {
      ok: false,
      errors: [
        {
          message: getErrorMessageForIncorrectType(value, \\"list\\"),
          path: []
        }
      ]
    };
  }
  const maybeValidItems = await Promise.all(value.map((item, index) => transformItem(item, index)));
  return maybeValidItems.reduce(
    (acc, item) => {
      if (acc.ok && item.ok) {
        return {
          ok: true,
          value: [...acc.value, item.value]
        };
      }
      const errors = [];
      if (!acc.ok) {
        errors.push(...acc.errors);
      }
      if (!item.ok) {
        errors.push(...item.errors);
      }
      return {
        ok: false,
        errors
      };
    },
    { ok: true, value: [] }
  );
}

// src/core/schemas/builders/literals/stringLiteral.ts
function stringLiteral(literal) {
  const schemaCreator = createIdentitySchemaCreator(
    SchemaType.STRING_LITERAL,
    (value, { breadcrumbsPrefix = [] } = {}) => {
      if (value === literal) {
        return {
          ok: true,
          value: literal
        };
      } else {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(value, \`\\"\${literal}\\"\`)
            }
          ]
        };
      }
    }
  );
  return schemaCreator();
}

// src/core/schemas/builders/primitives/any.ts
var any = createIdentitySchemaCreator(SchemaType.ANY, (value) => ({ ok: true, value }));

// src/core/schemas/builders/primitives/boolean.ts
var boolean = createIdentitySchemaCreator(
  SchemaType.BOOLEAN,
  (value, { breadcrumbsPrefix = [] } = {}) => {
    if (typeof value === \\"boolean\\") {
      return {
        ok: true,
        value
      };
    } else {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: getErrorMessageForIncorrectType(value, \\"boolean\\")
          }
        ]
      };
    }
  }
);

// src/core/schemas/builders/primitives/number.ts
var number = createIdentitySchemaCreator(
  SchemaType.NUMBER,
  (value, { breadcrumbsPrefix = [] } = {}) => {
    if (typeof value === \\"number\\") {
      return {
        ok: true,
        value
      };
    } else {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: getErrorMessageForIncorrectType(value, \\"number\\")
          }
        ]
      };
    }
  }
);

// src/core/schemas/builders/primitives/string.ts
var string = createIdentitySchemaCreator(
  SchemaType.STRING,
  (value, { breadcrumbsPrefix = [] } = {}) => {
    if (typeof value === \\"string\\") {
      return {
        ok: true,
        value
      };
    } else {
      return {
        ok: false,
        errors: [
          {
            path: breadcrumbsPrefix,
            message: getErrorMessageForIncorrectType(value, \\"string\\")
          }
        ]
      };
    }
  }
);

// src/core/schemas/builders/primitives/unknown.ts
var unknown = createIdentitySchemaCreator(SchemaType.UNKNOWN, (value) => ({ ok: true, value }));

// src/core/schemas/builders/record/record.ts
function record(keySchema, valueSchema) {
  const baseSchema = {
    parse: async (raw, opts) => {
      return validateAndTransformRecord({
        value: raw,
        isKeyNumeric: await keySchema.getType() === SchemaType.NUMBER,
        transformKey: (key) => keySchema.parse(key, {
          ...opts,
          breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], \`\${key} (key)\`]
        }),
        transformValue: (value, key) => valueSchema.parse(value, {
          ...opts,
          breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], \`\${key}\`]
        }),
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    },
    json: async (parsed, opts) => {
      return validateAndTransformRecord({
        value: parsed,
        isKeyNumeric: await keySchema.getType() === SchemaType.NUMBER,
        transformKey: (key) => keySchema.json(key, {
          ...opts,
          breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], \`\${key} (key)\`]
        }),
        transformValue: (value, key) => valueSchema.json(value, {
          ...opts,
          breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], \`\${key}\`]
        }),
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    },
    getType: () => SchemaType.RECORD
  };
  return {
    ...maybeSkipValidation(baseSchema),
    ...getSchemaUtils(baseSchema)
  };
}
async function validateAndTransformRecord({
  value,
  isKeyNumeric,
  transformKey,
  transformValue,
  breadcrumbsPrefix = []
}) {
  if (!isPlainObject2(value)) {
    return {
      ok: false,
      errors: [
        {
          path: breadcrumbsPrefix,
          message: getErrorMessageForIncorrectType(value, \\"object\\")
        }
      ]
    };
  }
  return entries(value).reduce(
    async (accPromise, [stringKey, value2]) => {
      if (value2 == null) {
        return accPromise;
      }
      const acc = await accPromise;
      let key = stringKey;
      if (isKeyNumeric) {
        const numberKey = stringKey.length > 0 ? Number(stringKey) : NaN;
        if (!isNaN(numberKey)) {
          key = numberKey;
        }
      }
      const transformedKey = await transformKey(key);
      const transformedValue = await transformValue(value2, key);
      if (acc.ok && transformedKey.ok && transformedValue.ok) {
        return {
          ok: true,
          value: {
            ...acc.value,
            [transformedKey.value]: transformedValue.value
          }
        };
      }
      const errors = [];
      if (!acc.ok) {
        errors.push(...acc.errors);
      }
      if (!transformedKey.ok) {
        errors.push(...transformedKey.errors);
      }
      if (!transformedValue.ok) {
        errors.push(...transformedValue.errors);
      }
      return {
        ok: false,
        errors
      };
    },
    Promise.resolve({ ok: true, value: {} })
  );
}

// src/core/schemas/builders/set/set.ts
function set(schema) {
  const listSchema = list(schema);
  const baseSchema = {
    parse: async (raw, opts) => {
      const parsedList = await listSchema.parse(raw, opts);
      if (parsedList.ok) {
        return {
          ok: true,
          value: new Set(parsedList.value)
        };
      } else {
        return parsedList;
      }
    },
    json: async (parsed, opts) => {
      if (!(parsed instanceof Set)) {
        return {
          ok: false,
          errors: [
            {
              path: (opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [],
              message: getErrorMessageForIncorrectType(parsed, \\"Set\\")
            }
          ]
        };
      }
      const jsonList = await listSchema.json([...parsed], opts);
      return jsonList;
    },
    getType: () => SchemaType.SET
  };
  return {
    ...maybeSkipValidation(baseSchema),
    ...getSchemaUtils(baseSchema)
  };
}

// src/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
function undiscriminatedUnion(schemas) {
  const baseSchema = {
    parse: async (raw, opts) => {
      return validateAndTransformUndiscriminatedUnion(
        (schema) => schema.parse(raw, opts),
        schemas
      );
    },
    json: async (parsed, opts) => {
      return validateAndTransformUndiscriminatedUnion(
        (schema) => schema.json(parsed, opts),
        schemas
      );
    },
    getType: () => SchemaType.UNDISCRIMINATED_UNION
  };
  return {
    ...maybeSkipValidation(baseSchema),
    ...getSchemaUtils(baseSchema)
  };
}
async function validateAndTransformUndiscriminatedUnion(transform2, schemas) {
  const errors = [];
  for (const [index, schema] of schemas.entries()) {
    const transformed = await transform2(schema);
    if (transformed.ok) {
      return transformed;
    } else {
      for (const error of errors) {
        errors.push({
          path: error.path,
          message: \`[Variant \${index}] \${error.message}\`
        });
      }
    }
  }
  return {
    ok: false,
    errors
  };
}

// src/core/schemas/builders/union/discriminant.ts
function discriminant(parsedDiscriminant, rawDiscriminant) {
  return {
    parsedDiscriminant,
    rawDiscriminant
  };
}

// src/core/schemas/builders/union/union.ts
function union(discriminant2, union2) {
  const rawDiscriminant = typeof discriminant2 === \\"string\\" ? discriminant2 : discriminant2.rawDiscriminant;
  const parsedDiscriminant = typeof discriminant2 === \\"string\\" ? discriminant2 : discriminant2.parsedDiscriminant;
  const discriminantValueSchema = enum_(keys(union2));
  const baseSchema = {
    parse: async (raw, opts) => {
      return transformAndValidateUnion({
        value: raw,
        discriminant: rawDiscriminant,
        transformedDiscriminant: parsedDiscriminant,
        transformDiscriminantValue: (discriminantValue) => discriminantValueSchema.parse(discriminantValue, {
          allowUnrecognizedEnumValues: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
          breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], rawDiscriminant]
        }),
        getAdditionalPropertiesSchema: (discriminantValue) => union2[discriminantValue],
        allowUnrecognizedUnionMembers: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
        transformAdditionalProperties: (additionalProperties, additionalPropertiesSchema) => additionalPropertiesSchema.parse(additionalProperties, opts),
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    },
    json: async (parsed, opts) => {
      return transformAndValidateUnion({
        value: parsed,
        discriminant: parsedDiscriminant,
        transformedDiscriminant: rawDiscriminant,
        transformDiscriminantValue: (discriminantValue) => discriminantValueSchema.json(discriminantValue, {
          allowUnrecognizedEnumValues: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
          breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], parsedDiscriminant]
        }),
        getAdditionalPropertiesSchema: (discriminantValue) => union2[discriminantValue],
        allowUnrecognizedUnionMembers: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
        transformAdditionalProperties: (additionalProperties, additionalPropertiesSchema) => additionalPropertiesSchema.json(additionalProperties, opts),
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    },
    getType: () => SchemaType.UNION
  };
  return {
    ...maybeSkipValidation(baseSchema),
    ...getSchemaUtils(baseSchema),
    ...getObjectLikeUtils(baseSchema)
  };
}
async function transformAndValidateUnion({
  value,
  discriminant: discriminant2,
  transformedDiscriminant,
  transformDiscriminantValue,
  getAdditionalPropertiesSchema,
  allowUnrecognizedUnionMembers = false,
  transformAdditionalProperties,
  breadcrumbsPrefix = []
}) {
  if (!isPlainObject2(value)) {
    return {
      ok: false,
      errors: [
        {
          path: breadcrumbsPrefix,
          message: getErrorMessageForIncorrectType(value, \\"object\\")
        }
      ]
    };
  }
  const { [discriminant2]: discriminantValue, ...additionalProperties } = value;
  if (discriminantValue == null) {
    return {
      ok: false,
      errors: [
        {
          path: breadcrumbsPrefix,
          message: \`Missing discriminant (\\"\${discriminant2}\\")\`
        }
      ]
    };
  }
  const transformedDiscriminantValue = await transformDiscriminantValue(discriminantValue);
  if (!transformedDiscriminantValue.ok) {
    return {
      ok: false,
      errors: transformedDiscriminantValue.errors
    };
  }
  const additionalPropertiesSchema = getAdditionalPropertiesSchema(transformedDiscriminantValue.value);
  if (additionalPropertiesSchema == null) {
    if (allowUnrecognizedUnionMembers) {
      return {
        ok: true,
        value: {
          [transformedDiscriminant]: transformedDiscriminantValue.value,
          ...additionalProperties
        }
      };
    } else {
      return {
        ok: false,
        errors: [
          {
            path: [...breadcrumbsPrefix, discriminant2],
            message: \\"Unexpected discriminant value\\"
          }
        ]
      };
    }
  }
  const transformedAdditionalProperties = await transformAdditionalProperties(
    additionalProperties,
    additionalPropertiesSchema
  );
  if (!transformedAdditionalProperties.ok) {
    return transformedAdditionalProperties;
  }
  return {
    ok: true,
    value: {
      [transformedDiscriminant]: discriminantValue,
      ...transformedAdditionalProperties.value
    }
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BasicAuth,
  BearerToken,
  Supplier,
  fetcher,
  serialization
});
/*! Bundled license information:

mime-db/index.js:
  (*!
   * mime-db
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015-2022 Douglas Christopher Wilson
   * MIT Licensed
   *)

mime-types/index.js:
  (*!
   * mime-types
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)
*/
",
            "name": "core.js",
            "type": "file",
          },
          Object {
            "contents": "\\"use strict\\";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all3) => {
  for (var name in all3)
    __defProp(target, name, { get: all3[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === \\"object\\" || typeof from === \\"function\\") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. \\"__esModule\\" has not been set), then set
  // \\"default\\" to the CommonJS \\"module.exports\\" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \\"default\\", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, \\"__esModule\\", { value: true }), mod);

// src/api/resources/remoteGen/types/RemoteGenJobId.ts
function RemoteGenJobId(value) {
  return value;
}
var init_RemoteGenJobId = __esm({
  \\"src/api/resources/remoteGen/types/RemoteGenJobId.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/RemoteGenTaskId.ts
function RemoteGenTaskId(value) {
  return value;
}
var init_RemoteGenTaskId = __esm({
  \\"src/api/resources/remoteGen/types/RemoteGenTaskId.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GeneratorIdAndVersion.ts
var init_GeneratorIdAndVersion = __esm({
  \\"src/api/resources/remoteGen/types/GeneratorIdAndVersion.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GeneratorConfig.ts
var init_GeneratorConfig = __esm({
  \\"src/api/resources/remoteGen/types/GeneratorConfig.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GeneratorConfigV2.ts
var init_GeneratorConfigV2 = __esm({
  \\"src/api/resources/remoteGen/types/GeneratorConfigV2.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/OutputMode.ts
var OutputMode;
var init_OutputMode = __esm({
  \\"src/api/resources/remoteGen/types/OutputMode.ts\\"() {
    \\"use strict\\";
    init_api();
    OutputMode = {
      publish: (value) => {
        return {
          ...value,
          type: \\"publish\\",
          _visit: function(visitor) {
            return OutputMode._visit(this, visitor);
          }
        };
      },
      publishV2: (value) => {
        return {
          publishV2: value,
          type: \\"publishV2\\",
          _visit: function(visitor) {
            return OutputMode._visit(this, visitor);
          }
        };
      },
      downloadFiles: () => {
        return {
          type: \\"downloadFiles\\",
          _visit: function(visitor) {
            return OutputMode._visit(this, visitor);
          }
        };
      },
      github: (value) => {
        return {
          ...value,
          type: \\"github\\",
          _visit: function(visitor) {
            return OutputMode._visit(this, visitor);
          }
        };
      },
      _unknown: (value) => {
        return {
          ...value,
          _visit: function(visitor) {
            return OutputMode._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.type) {
          case \\"publish\\":
            return visitor.publish(value);
          case \\"publishV2\\":
            return visitor.publishV2(value.publishV2);
          case \\"downloadFiles\\":
            return visitor.downloadFiles();
          case \\"github\\":
            return visitor.github(value);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/types/PublishOutputMode.ts
var init_PublishOutputMode = __esm({
  \\"src/api/resources/remoteGen/types/PublishOutputMode.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/PublishOutputModeV2.ts
var PublishOutputModeV2;
var init_PublishOutputModeV2 = __esm({
  \\"src/api/resources/remoteGen/types/PublishOutputModeV2.ts\\"() {
    \\"use strict\\";
    init_api();
    PublishOutputModeV2 = {
      npmOverride: (value) => {
        return {
          npmOverride: value,
          type: \\"npmOverride\\",
          _visit: function(visitor) {
            return PublishOutputModeV2._visit(this, visitor);
          }
        };
      },
      mavenOverride: (value) => {
        return {
          mavenOverride: value,
          type: \\"mavenOverride\\",
          _visit: function(visitor) {
            return PublishOutputModeV2._visit(this, visitor);
          }
        };
      },
      postman: (value) => {
        return {
          ...value,
          type: \\"postman\\",
          _visit: function(visitor) {
            return PublishOutputModeV2._visit(this, visitor);
          }
        };
      },
      _unknown: (value) => {
        return {
          ...value,
          _visit: function(visitor) {
            return PublishOutputModeV2._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.type) {
          case \\"npmOverride\\":
            return visitor.npmOverride(value.npmOverride);
          case \\"mavenOverride\\":
            return visitor.mavenOverride(value.mavenOverride);
          case \\"postman\\":
            return visitor.postman(value);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/types/RegistryOverrides.ts
var init_RegistryOverrides = __esm({
  \\"src/api/resources/remoteGen/types/RegistryOverrides.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GeneratorOutputs.ts
var init_GeneratorOutputs = __esm({
  \\"src/api/resources/remoteGen/types/GeneratorOutputs.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/NpmOutput.ts
var init_NpmOutput = __esm({
  \\"src/api/resources/remoteGen/types/NpmOutput.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/MavenOutput.ts
var init_MavenOutput = __esm({
  \\"src/api/resources/remoteGen/types/MavenOutput.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/PostmanOutput.ts
var init_PostmanOutput = __esm({
  \\"src/api/resources/remoteGen/types/PostmanOutput.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GithubOutputMode.ts
var init_GithubOutputMode = __esm({
  \\"src/api/resources/remoteGen/types/GithubOutputMode.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GithubPublishInfo.ts
var GithubPublishInfo;
var init_GithubPublishInfo = __esm({
  \\"src/api/resources/remoteGen/types/GithubPublishInfo.ts\\"() {
    \\"use strict\\";
    init_api();
    GithubPublishInfo = {
      npm: (value) => {
        return {
          ...value,
          type: \\"npm\\",
          _visit: function(visitor) {
            return GithubPublishInfo._visit(this, visitor);
          }
        };
      },
      maven: (value) => {
        return {
          ...value,
          type: \\"maven\\",
          _visit: function(visitor) {
            return GithubPublishInfo._visit(this, visitor);
          }
        };
      },
      postman: (value) => {
        return {
          ...value,
          type: \\"postman\\",
          _visit: function(visitor) {
            return GithubPublishInfo._visit(this, visitor);
          }
        };
      },
      _unknown: (value) => {
        return {
          ...value,
          _visit: function(visitor) {
            return GithubPublishInfo._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.type) {
          case \\"npm\\":
            return visitor.npm(value);
          case \\"maven\\":
            return visitor.maven(value);
          case \\"postman\\":
            return visitor.postman(value);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/types/NpmOutputWithOptionalToken.ts
var init_NpmOutputWithOptionalToken = __esm({
  \\"src/api/resources/remoteGen/types/NpmOutputWithOptionalToken.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/MavenOutputWithOptionalCreds.ts
var init_MavenOutputWithOptionalCreds = __esm({
  \\"src/api/resources/remoteGen/types/MavenOutputWithOptionalCreds.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/UsernamePassword.ts
var init_UsernamePassword = __esm({
  \\"src/api/resources/remoteGen/types/UsernamePassword.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/Task.ts
var init_Task = __esm({
  \\"src/api/resources/remoteGen/types/Task.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/TaskStatus.ts
var TaskStatus;
var init_TaskStatus = __esm({
  \\"src/api/resources/remoteGen/types/TaskStatus.ts\\"() {
    \\"use strict\\";
    init_api();
    TaskStatus = {
      notStarted: () => {
        return {
          type: \\"notStarted\\",
          _visit: function(visitor) {
            return TaskStatus._visit(this, visitor);
          }
        };
      },
      running: () => {
        return {
          type: \\"running\\",
          _visit: function(visitor) {
            return TaskStatus._visit(this, visitor);
          }
        };
      },
      failed: (value) => {
        return {
          ...value,
          type: \\"failed\\",
          _visit: function(visitor) {
            return TaskStatus._visit(this, visitor);
          }
        };
      },
      finished: (value) => {
        return {
          ...value,
          type: \\"finished\\",
          _visit: function(visitor) {
            return TaskStatus._visit(this, visitor);
          }
        };
      },
      _unknown: (value) => {
        return {
          ...value,
          _visit: function(visitor) {
            return TaskStatus._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.type) {
          case \\"notStarted\\":
            return visitor.notStarted();
          case \\"running\\":
            return visitor.running();
          case \\"failed\\":
            return visitor.failed(value);
          case \\"finished\\":
            return visitor.finished(value);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/types/FailedTaskStatus.ts
var init_FailedTaskStatus = __esm({
  \\"src/api/resources/remoteGen/types/FailedTaskStatus.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/FinishedTaskStatus.ts
var init_FinishedTaskStatus = __esm({
  \\"src/api/resources/remoteGen/types/FinishedTaskStatus.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/TaskLog.ts
var init_TaskLog = __esm({
  \\"src/api/resources/remoteGen/types/TaskLog.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/LogLevel.ts
var LogLevel;
var init_LogLevel = __esm({
  \\"src/api/resources/remoteGen/types/LogLevel.ts\\"() {
    \\"use strict\\";
    LogLevel = {
      Debug: \\"DEBUG\\",
      Info: \\"INFO\\",
      Warn: \\"WARN\\",
      Error: \\"ERROR\\"
    };
  }
});

// src/api/resources/remoteGen/types/Package.ts
var init_Package = __esm({
  \\"src/api/resources/remoteGen/types/Package.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/PackagePublishStatus.ts
var PackagePublishStatus;
var init_PackagePublishStatus = __esm({
  \\"src/api/resources/remoteGen/types/PackagePublishStatus.ts\\"() {
    \\"use strict\\";
    PackagePublishStatus = {
      NotStartedPublishing: \\"NOT_STARTED_PUBLISHING\\",
      Publishing: \\"PUBLISHING\\",
      Published: \\"PUBLISHED\\",
      FailedToPublish: \\"FAILED_TO_PUBLISH\\"
    };
  }
});

// src/api/resources/remoteGen/types/PackageCoordinate.ts
var PackageCoordinate;
var init_PackageCoordinate = __esm({
  \\"src/api/resources/remoteGen/types/PackageCoordinate.ts\\"() {
    \\"use strict\\";
    init_api();
    PackageCoordinate = {
      npm: (value) => {
        return {
          ...value,
          type: \\"npm\\",
          _visit: function(visitor) {
            return PackageCoordinate._visit(this, visitor);
          }
        };
      },
      maven: (value) => {
        return {
          ...value,
          type: \\"maven\\",
          _visit: function(visitor) {
            return PackageCoordinate._visit(this, visitor);
          }
        };
      },
      pypi: (value) => {
        return {
          ...value,
          type: \\"pypi\\",
          _visit: function(visitor) {
            return PackageCoordinate._visit(this, visitor);
          }
        };
      },
      _unknown: (value) => {
        return {
          ...value,
          _visit: function(visitor) {
            return PackageCoordinate._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.type) {
          case \\"npm\\":
            return visitor.npm(value);
          case \\"maven\\":
            return visitor.maven(value);
          case \\"pypi\\":
            return visitor.pypi(value);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/types/NpmCoordinate.ts
var init_NpmCoordinate = __esm({
  \\"src/api/resources/remoteGen/types/NpmCoordinate.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/MavenCoordinate.ts
var init_MavenCoordinate = __esm({
  \\"src/api/resources/remoteGen/types/MavenCoordinate.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/PypiCoordinate.ts
var init_PypiCoordinate = __esm({
  \\"src/api/resources/remoteGen/types/PypiCoordinate.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/CreateJobResponse.ts
var init_CreateJobResponse = __esm({
  \\"src/api/resources/remoteGen/types/CreateJobResponse.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GeneratorsDoNotExistErrorBodyType.ts
var init_GeneratorsDoNotExistErrorBodyType = __esm({
  \\"src/api/resources/remoteGen/types/GeneratorsDoNotExistErrorBodyType.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/CannotPublishToNpmScopeDetails.ts
var init_CannotPublishToNpmScopeDetails = __esm({
  \\"src/api/resources/remoteGen/types/CannotPublishToNpmScopeDetails.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/CannotPublishToMavenGroupDetails.ts
var init_CannotPublishToMavenGroupDetails = __esm({
  \\"src/api/resources/remoteGen/types/CannotPublishToMavenGroupDetails.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/InsufficientPermissionsDetails.ts
var init_InsufficientPermissionsDetails = __esm({
  \\"src/api/resources/remoteGen/types/InsufficientPermissionsDetails.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/index.ts
var init_types = __esm({
  \\"src/api/resources/remoteGen/types/index.ts\\"() {
    \\"use strict\\";
    init_RemoteGenJobId();
    init_RemoteGenTaskId();
    init_GeneratorIdAndVersion();
    init_GeneratorConfig();
    init_GeneratorConfigV2();
    init_OutputMode();
    init_PublishOutputMode();
    init_PublishOutputModeV2();
    init_RegistryOverrides();
    init_GeneratorOutputs();
    init_NpmOutput();
    init_MavenOutput();
    init_PostmanOutput();
    init_GithubOutputMode();
    init_GithubPublishInfo();
    init_NpmOutputWithOptionalToken();
    init_MavenOutputWithOptionalCreds();
    init_UsernamePassword();
    init_Task();
    init_TaskStatus();
    init_FailedTaskStatus();
    init_FinishedTaskStatus();
    init_TaskLog();
    init_LogLevel();
    init_Package();
    init_PackagePublishStatus();
    init_PackageCoordinate();
    init_NpmCoordinate();
    init_MavenCoordinate();
    init_PypiCoordinate();
    init_CreateJobResponse();
    init_GeneratorsDoNotExistErrorBodyType();
    init_CannotPublishToNpmScopeDetails();
    init_CannotPublishToMavenGroupDetails();
    init_InsufficientPermissionsDetails();
  }
});

// src/api/resources/remoteGen/client/requests/index.ts
var init_requests = __esm({
  \\"src/api/resources/remoteGen/client/requests/index.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/client/createJob.ts
var createJob_exports = {};
__export(createJob_exports, {
  Error: () => Error2
});
var Error2;
var init_createJob = __esm({
  \\"src/api/resources/remoteGen/client/createJob.ts\\"() {
    \\"use strict\\";
    init_api();
    Error2 = {
      illegalApiNameError: () => {
        return {
          error: \\"IllegalApiNameError\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      generatorsDoNotExistError: (value) => {
        return {
          content: value,
          error: \\"GeneratorsDoNotExistError\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      cannotPublishToNpmScope: (value) => {
        return {
          content: value,
          error: \\"CannotPublishToNpmScope\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      cannotPublishToMavenGroup: (value) => {
        return {
          content: value,
          error: \\"CannotPublishToMavenGroup\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      insufficientPermissions: (value) => {
        return {
          content: value,
          error: \\"InsufficientPermissions\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      _unknown: (fetcherError) => {
        return {
          error: void 0,
          content: fetcherError,
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.error) {
          case \\"IllegalApiNameError\\":
            return visitor.illegalApiNameError();
          case \\"GeneratorsDoNotExistError\\":
            return visitor.generatorsDoNotExistError(value.content);
          case \\"CannotPublishToNpmScope\\":
            return visitor.cannotPublishToNpmScope(value.content);
          case \\"CannotPublishToMavenGroup\\":
            return visitor.cannotPublishToMavenGroup(value.content);
          case \\"InsufficientPermissions\\":
            return visitor.insufficientPermissions(value.content);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/client/createJobV2.ts
var createJobV2_exports = {};
__export(createJobV2_exports, {
  Error: () => Error3
});
var Error3;
var init_createJobV2 = __esm({
  \\"src/api/resources/remoteGen/client/createJobV2.ts\\"() {
    \\"use strict\\";
    init_api();
    Error3 = {
      illegalApiNameError: () => {
        return {
          error: \\"IllegalApiNameError\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      generatorsDoNotExistError: (value) => {
        return {
          content: value,
          error: \\"GeneratorsDoNotExistError\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      cannotPublishToNpmScope: (value) => {
        return {
          content: value,
          error: \\"CannotPublishToNpmScope\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      cannotPublishToMavenGroup: (value) => {
        return {
          content: value,
          error: \\"CannotPublishToMavenGroup\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      insufficientPermissions: (value) => {
        return {
          content: value,
          error: \\"InsufficientPermissions\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      _unknown: (fetcherError) => {
        return {
          error: void 0,
          content: fetcherError,
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.error) {
          case \\"IllegalApiNameError\\":
            return visitor.illegalApiNameError();
          case \\"GeneratorsDoNotExistError\\":
            return visitor.generatorsDoNotExistError(value.content);
          case \\"CannotPublishToNpmScope\\":
            return visitor.cannotPublishToNpmScope(value.content);
          case \\"CannotPublishToMavenGroup\\":
            return visitor.cannotPublishToMavenGroup(value.content);
          case \\"InsufficientPermissions\\":
            return visitor.insufficientPermissions(value.content);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/client/getJobStatus.ts
var getJobStatus_exports = {};
__export(getJobStatus_exports, {
  Error: () => Error4
});
var Error4;
var init_getJobStatus = __esm({
  \\"src/api/resources/remoteGen/client/getJobStatus.ts\\"() {
    \\"use strict\\";
    init_api();
    Error4 = {
      _unknown: (fetcherError) => {
        return {
          error: void 0,
          content: fetcherError,
          _visit: function(visitor) {
            return remoteGen_exports.getJobStatus.Error._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.error) {
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/client/index.ts
var init_client = __esm({
  \\"src/api/resources/remoteGen/client/index.ts\\"() {
    \\"use strict\\";
    init_requests();
    init_createJob();
    init_createJobV2();
    init_getJobStatus();
  }
});

// src/api/resources/remoteGen/index.ts
var remoteGen_exports = {};
__export(remoteGen_exports, {
  GithubPublishInfo: () => GithubPublishInfo,
  LogLevel: () => LogLevel,
  OutputMode: () => OutputMode,
  PackageCoordinate: () => PackageCoordinate,
  PackagePublishStatus: () => PackagePublishStatus,
  PublishOutputModeV2: () => PublishOutputModeV2,
  RemoteGenJobId: () => RemoteGenJobId,
  RemoteGenTaskId: () => RemoteGenTaskId,
  TaskStatus: () => TaskStatus,
  createJob: () => createJob_exports,
  createJobV2: () => createJobV2_exports,
  getJobStatus: () => getJobStatus_exports
});
var init_remoteGen = __esm({
  \\"src/api/resources/remoteGen/index.ts\\"() {
    \\"use strict\\";
    init_types();
    init_client();
  }
});

// src/api/resources/fiddle/client/test.ts
var test_exports = {};
__export(test_exports, {
  Error: () => Error5
});
var Error5;
var init_test = __esm({
  \\"src/api/resources/fiddle/client/test.ts\\"() {
    \\"use strict\\";
    init_api();
    Error5 = {
      _unknown: (fetcherError) => {
        return {
          error: void 0,
          content: fetcherError,
          _visit: function(visitor) {
            return fiddle_exports.test.Error._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.error) {
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/fiddle/client/index.ts
var init_client2 = __esm({
  \\"src/api/resources/fiddle/client/index.ts\\"() {
    \\"use strict\\";
    init_test();
  }
});

// src/api/resources/fiddle/index.ts
var fiddle_exports = {};
__export(fiddle_exports, {
  test: () => test_exports
});
var init_fiddle = __esm({
  \\"src/api/resources/fiddle/index.ts\\"() {
    \\"use strict\\";
    init_client2();
  }
});

// src/api/resources/health/client/status.ts
var status_exports = {};
__export(status_exports, {
  Error: () => Error6
});
var Error6;
var init_status = __esm({
  \\"src/api/resources/health/client/status.ts\\"() {
    \\"use strict\\";
    init_api();
    Error6 = {
      _unknown: (fetcherError) => {
        return {
          error: void 0,
          content: fetcherError,
          _visit: function(visitor) {
            return health_exports.status.Error._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.error) {
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/health/client/index.ts
var init_client3 = __esm({
  \\"src/api/resources/health/client/index.ts\\"() {
    \\"use strict\\";
    init_status();
  }
});

// src/api/resources/health/index.ts
var health_exports = {};
__export(health_exports, {
  status: () => status_exports
});
var init_health = __esm({
  \\"src/api/resources/health/index.ts\\"() {
    \\"use strict\\";
    init_client3();
  }
});

// src/api/resources/index.ts
var init_resources = __esm({
  \\"src/api/resources/index.ts\\"() {
    \\"use strict\\";
    init_remoteGen();
    init_types();
    init_fiddle();
    init_health();
    init_requests();
  }
});

// src/api/index.ts
var api_exports = {};
__export(api_exports, {
  GithubPublishInfo: () => GithubPublishInfo,
  LogLevel: () => LogLevel,
  OutputMode: () => OutputMode,
  PackageCoordinate: () => PackageCoordinate,
  PackagePublishStatus: () => PackagePublishStatus,
  PublishOutputModeV2: () => PublishOutputModeV2,
  RemoteGenJobId: () => RemoteGenJobId,
  RemoteGenTaskId: () => RemoteGenTaskId,
  TaskStatus: () => TaskStatus,
  fiddle: () => fiddle_exports,
  health: () => health_exports,
  remoteGen: () => remoteGen_exports
});
var init_api = __esm({
  \\"src/api/index.ts\\"() {
    \\"use strict\\";
    init_resources();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/bind.js
function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}
var init_bind = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/bind.js\\"() {
    \\"use strict\\";
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/utils.js
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}
function isArrayBufferView(val) {
  let result;
  if (typeof ArrayBuffer !== \\"undefined\\" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
function forEach(obj, fn, { allOwnKeys = false } = {}) {
  if (obj === null || typeof obj === \\"undefined\\") {
    return;
  }
  let i;
  let l;
  if (typeof obj !== \\"object\\") {
    obj = [obj];
  }
  if (isArray(obj)) {
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    const keys2 = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys2.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys2[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}
function findKey(obj, key) {
  key = key.toLowerCase();
  const keys2 = Object.keys(obj);
  let i = keys2.length;
  let _key;
  while (i-- > 0) {
    _key = keys2[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
function merge() {
  const { caseless } = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };
  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === \\"FormData\\" && thing[Symbol.iterator]);
}
var toString, getPrototypeOf, kindOf, kindOfTest, typeOfTest, isArray, isUndefined, isArrayBuffer, isString, isFunction, isNumber, isObject, isBoolean, isPlainObject, isDate, isFile, isBlob, isFileList, isStream, isFormData, isURLSearchParams, trim, _global, isContextDefined, extend, stripBOM, inherits, toFlatObject, endsWith, toArray, isTypedArray, forEachEntry, matchAll, isHTMLForm, toCamelCase, hasOwnProperty, isRegExp, reduceDescriptors, freezeMethods, toObjectSet, noop, toFiniteNumber, ALPHA, DIGIT, ALPHABET, generateString, toJSONObject, isAsyncFn, isThenable, utils_default;
var init_utils = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/utils.js\\"() {
    \\"use strict\\";
    init_bind();
    ({ toString } = Object.prototype);
    ({ getPrototypeOf } = Object);
    kindOf = ((cache) => (thing) => {
      const str = toString.call(thing);
      return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    })(/* @__PURE__ */ Object.create(null));
    kindOfTest = (type) => {
      type = type.toLowerCase();
      return (thing) => kindOf(thing) === type;
    };
    typeOfTest = (type) => (thing) => typeof thing === type;
    ({ isArray } = Array);
    isUndefined = typeOfTest(\\"undefined\\");
    isArrayBuffer = kindOfTest(\\"ArrayBuffer\\");
    isString = typeOfTest(\\"string\\");
    isFunction = typeOfTest(\\"function\\");
    isNumber = typeOfTest(\\"number\\");
    isObject = (thing) => thing !== null && typeof thing === \\"object\\";
    isBoolean = (thing) => thing === true || thing === false;
    isPlainObject = (val) => {
      if (kindOf(val) !== \\"object\\") {
        return false;
      }
      const prototype3 = getPrototypeOf(val);
      return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
    };
    isDate = kindOfTest(\\"Date\\");
    isFile = kindOfTest(\\"File\\");
    isBlob = kindOfTest(\\"Blob\\");
    isFileList = kindOfTest(\\"FileList\\");
    isStream = (val) => isObject(val) && isFunction(val.pipe);
    isFormData = (thing) => {
      let kind;
      return thing && (typeof FormData === \\"function\\" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === \\"formdata\\" || kind === \\"object\\" && isFunction(thing.toString) && thing.toString() === \\"[object FormData]\\"));
    };
    isURLSearchParams = kindOfTest(\\"URLSearchParams\\");
    trim = (str) => str.trim ? str.trim() : str.replace(/^[\\\\s\\\\uFEFF\\\\xA0]+|[\\\\s\\\\uFEFF\\\\xA0]+$/g, \\"\\");
    _global = (() => {
      if (typeof globalThis !== \\"undefined\\")
        return globalThis;
      return typeof self !== \\"undefined\\" ? self : typeof window !== \\"undefined\\" ? window : global;
    })();
    isContextDefined = (context) => !isUndefined(context) && context !== _global;
    extend = (a, b, thisArg, { allOwnKeys } = {}) => {
      forEach(b, (val, key) => {
        if (thisArg && isFunction(val)) {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      }, { allOwnKeys });
      return a;
    };
    stripBOM = (content) => {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    };
    inherits = (constructor, superConstructor, props, descriptors2) => {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
      constructor.prototype.constructor = constructor;
      Object.defineProperty(constructor, \\"super\\", {
        value: superConstructor.prototype
      });
      props && Object.assign(constructor.prototype, props);
    };
    toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
      let props;
      let i;
      let prop;
      const merged = {};
      destObj = destObj || {};
      if (sourceObj == null)
        return destObj;
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    };
    endsWith = (str, searchString, position) => {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      const lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };
    toArray = (thing) => {
      if (!thing)
        return null;
      if (isArray(thing))
        return thing;
      let i = thing.length;
      if (!isNumber(i))
        return null;
      const arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    };
    isTypedArray = ((TypedArray) => {
      return (thing) => {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== \\"undefined\\" && getPrototypeOf(Uint8Array));
    forEachEntry = (obj, fn) => {
      const generator = obj && obj[Symbol.iterator];
      const iterator = generator.call(obj);
      let result;
      while ((result = iterator.next()) && !result.done) {
        const pair = result.value;
        fn.call(obj, pair[0], pair[1]);
      }
    };
    matchAll = (regExp, str) => {
      let matches;
      const arr = [];
      while ((matches = regExp.exec(str)) !== null) {
        arr.push(matches);
      }
      return arr;
    };
    isHTMLForm = kindOfTest(\\"HTMLFormElement\\");
    toCamelCase = (str) => {
      return str.toLowerCase().replace(
        /[-_\\\\s]([a-z\\\\d])(\\\\w*)/g,
        function replacer(m, p1, p2) {
          return p1.toUpperCase() + p2;
        }
      );
    };
    hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
    isRegExp = kindOfTest(\\"RegExp\\");
    reduceDescriptors = (obj, reducer) => {
      const descriptors2 = Object.getOwnPropertyDescriptors(obj);
      const reducedDescriptors = {};
      forEach(descriptors2, (descriptor, name) => {
        if (reducer(descriptor, name, obj) !== false) {
          reducedDescriptors[name] = descriptor;
        }
      });
      Object.defineProperties(obj, reducedDescriptors);
    };
    freezeMethods = (obj) => {
      reduceDescriptors(obj, (descriptor, name) => {
        if (isFunction(obj) && [\\"arguments\\", \\"caller\\", \\"callee\\"].indexOf(name) !== -1) {
          return false;
        }
        const value = obj[name];
        if (!isFunction(value))
          return;
        descriptor.enumerable = false;
        if (\\"writable\\" in descriptor) {
          descriptor.writable = false;
          return;
        }
        if (!descriptor.set) {
          descriptor.set = () => {
            throw Error(\\"Can not rewrite read-only method '\\" + name + \\"'\\");
          };
        }
      });
    };
    toObjectSet = (arrayOrString, delimiter) => {
      const obj = {};
      const define2 = (arr) => {
        arr.forEach((value) => {
          obj[value] = true;
        });
      };
      isArray(arrayOrString) ? define2(arrayOrString) : define2(String(arrayOrString).split(delimiter));
      return obj;
    };
    noop = () => {
    };
    toFiniteNumber = (value, defaultValue) => {
      value = +value;
      return Number.isFinite(value) ? value : defaultValue;
    };
    ALPHA = \\"abcdefghijklmnopqrstuvwxyz\\";
    DIGIT = \\"0123456789\\";
    ALPHABET = {
      DIGIT,
      ALPHA,
      ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
    };
    generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
      let str = \\"\\";
      const { length } = alphabet;
      while (size--) {
        str += alphabet[Math.random() * length | 0];
      }
      return str;
    };
    toJSONObject = (obj) => {
      const stack = new Array(10);
      const visit = (source, i) => {
        if (isObject(source)) {
          if (stack.indexOf(source) >= 0) {
            return;
          }
          if (!(\\"toJSON\\" in source)) {
            stack[i] = source;
            const target = isArray(source) ? [] : {};
            forEach(source, (value, key) => {
              const reducedValue = visit(value, i + 1);
              !isUndefined(reducedValue) && (target[key] = reducedValue);
            });
            stack[i] = void 0;
            return target;
          }
        }
        return source;
      };
      return visit(obj, 0);
    };
    isAsyncFn = kindOfTest(\\"AsyncFunction\\");
    isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
    utils_default = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isBoolean,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isRegExp,
      isFunction,
      isStream,
      isURLSearchParams,
      isTypedArray,
      isFileList,
      forEach,
      merge,
      extend,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray,
      forEachEntry,
      matchAll,
      isHTMLForm,
      hasOwnProperty,
      hasOwnProp: hasOwnProperty,
      // an alias to avoid ESLint no-prototype-builtins detection
      reduceDescriptors,
      freezeMethods,
      toObjectSet,
      toCamelCase,
      noop,
      toFiniteNumber,
      findKey,
      global: _global,
      isContextDefined,
      ALPHABET,
      generateString,
      isSpecCompliantForm,
      toJSONObject,
      isAsyncFn,
      isThenable
    };
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/AxiosError.js
function AxiosError(message, code, config, request, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message;
  this.name = \\"AxiosError\\";
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  response && (this.response = response);
}
var prototype, descriptors, AxiosError_default;
var init_AxiosError = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/AxiosError.js\\"() {
    \\"use strict\\";
    init_utils();
    utils_default.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: utils_default.toJSONObject(this.config),
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      }
    });
    prototype = AxiosError.prototype;
    descriptors = {};
    [
      \\"ERR_BAD_OPTION_VALUE\\",
      \\"ERR_BAD_OPTION\\",
      \\"ECONNABORTED\\",
      \\"ETIMEDOUT\\",
      \\"ERR_NETWORK\\",
      \\"ERR_FR_TOO_MANY_REDIRECTS\\",
      \\"ERR_DEPRECATED\\",
      \\"ERR_BAD_RESPONSE\\",
      \\"ERR_BAD_REQUEST\\",
      \\"ERR_CANCELED\\",
      \\"ERR_NOT_SUPPORT\\",
      \\"ERR_INVALID_URL\\"
      // eslint-disable-next-line func-names
    ].forEach((code) => {
      descriptors[code] = { value: code };
    });
    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype, \\"isAxiosError\\", { value: true });
    AxiosError.from = (error, code, config, request, response, customProps) => {
      const axiosError = Object.create(prototype);
      utils_default.toFlatObject(error, axiosError, function filter2(obj) {
        return obj !== Error.prototype;
      }, (prop) => {
        return prop !== \\"isAxiosError\\";
      });
      AxiosError.call(axiosError, error.message, code, config, request, response);
      axiosError.cause = error;
      axiosError.name = error.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    AxiosError_default = AxiosError;
  }
});

// .yarn/cache/delayed-stream-npm-1.0.0-c5a4c4cc02-46fe6e83e2.zip/node_modules/delayed-stream/lib/delayed_stream.js
var require_delayed_stream = __commonJS({
  \\".yarn/cache/delayed-stream-npm-1.0.0-c5a4c4cc02-46fe6e83e2.zip/node_modules/delayed-stream/lib/delayed_stream.js\\"(exports, module2) {
    var Stream = require(\\"stream\\").Stream;
    var util2 = require(\\"util\\");
    module2.exports = DelayedStream;
    function DelayedStream() {
      this.source = null;
      this.dataSize = 0;
      this.maxDataSize = 1024 * 1024;
      this.pauseStream = true;
      this._maxDataSizeExceeded = false;
      this._released = false;
      this._bufferedEvents = [];
    }
    util2.inherits(DelayedStream, Stream);
    DelayedStream.create = function(source, options) {
      var delayedStream = new this();
      options = options || {};
      for (var option in options) {
        delayedStream[option] = options[option];
      }
      delayedStream.source = source;
      var realEmit = source.emit;
      source.emit = function() {
        delayedStream._handleEmit(arguments);
        return realEmit.apply(source, arguments);
      };
      source.on(\\"error\\", function() {
      });
      if (delayedStream.pauseStream) {
        source.pause();
      }
      return delayedStream;
    };
    Object.defineProperty(DelayedStream.prototype, \\"readable\\", {
      configurable: true,
      enumerable: true,
      get: function() {
        return this.source.readable;
      }
    });
    DelayedStream.prototype.setEncoding = function() {
      return this.source.setEncoding.apply(this.source, arguments);
    };
    DelayedStream.prototype.resume = function() {
      if (!this._released) {
        this.release();
      }
      this.source.resume();
    };
    DelayedStream.prototype.pause = function() {
      this.source.pause();
    };
    DelayedStream.prototype.release = function() {
      this._released = true;
      this._bufferedEvents.forEach(function(args) {
        this.emit.apply(this, args);
      }.bind(this));
      this._bufferedEvents = [];
    };
    DelayedStream.prototype.pipe = function() {
      var r = Stream.prototype.pipe.apply(this, arguments);
      this.resume();
      return r;
    };
    DelayedStream.prototype._handleEmit = function(args) {
      if (this._released) {
        this.emit.apply(this, args);
        return;
      }
      if (args[0] === \\"data\\") {
        this.dataSize += args[1].length;
        this._checkIfMaxDataSizeExceeded();
      }
      this._bufferedEvents.push(args);
    };
    DelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {
      if (this._maxDataSizeExceeded) {
        return;
      }
      if (this.dataSize <= this.maxDataSize) {
        return;
      }
      this._maxDataSizeExceeded = true;
      var message = \\"DelayedStream#maxDataSize of \\" + this.maxDataSize + \\" bytes exceeded.\\";
      this.emit(\\"error\\", new Error(message));
    };
  }
});

// .yarn/cache/combined-stream-npm-1.0.8-dc14d4a63a-49fa4aeb49.zip/node_modules/combined-stream/lib/combined_stream.js
var require_combined_stream = __commonJS({
  \\".yarn/cache/combined-stream-npm-1.0.8-dc14d4a63a-49fa4aeb49.zip/node_modules/combined-stream/lib/combined_stream.js\\"(exports, module2) {
    var util2 = require(\\"util\\");
    var Stream = require(\\"stream\\").Stream;
    var DelayedStream = require_delayed_stream();
    module2.exports = CombinedStream;
    function CombinedStream() {
      this.writable = false;
      this.readable = true;
      this.dataSize = 0;
      this.maxDataSize = 2 * 1024 * 1024;
      this.pauseStreams = true;
      this._released = false;
      this._streams = [];
      this._currentStream = null;
      this._insideLoop = false;
      this._pendingNext = false;
    }
    util2.inherits(CombinedStream, Stream);
    CombinedStream.create = function(options) {
      var combinedStream = new this();
      options = options || {};
      for (var option in options) {
        combinedStream[option] = options[option];
      }
      return combinedStream;
    };
    CombinedStream.isStreamLike = function(stream4) {
      return typeof stream4 !== \\"function\\" && typeof stream4 !== \\"string\\" && typeof stream4 !== \\"boolean\\" && typeof stream4 !== \\"number\\" && !Buffer.isBuffer(stream4);
    };
    CombinedStream.prototype.append = function(stream4) {
      var isStreamLike = CombinedStream.isStreamLike(stream4);
      if (isStreamLike) {
        if (!(stream4 instanceof DelayedStream)) {
          var newStream = DelayedStream.create(stream4, {
            maxDataSize: Infinity,
            pauseStream: this.pauseStreams
          });
          stream4.on(\\"data\\", this._checkDataSize.bind(this));
          stream4 = newStream;
        }
        this._handleErrors(stream4);
        if (this.pauseStreams) {
          stream4.pause();
        }
      }
      this._streams.push(stream4);
      return this;
    };
    CombinedStream.prototype.pipe = function(dest, options) {
      Stream.prototype.pipe.call(this, dest, options);
      this.resume();
      return dest;
    };
    CombinedStream.prototype._getNext = function() {
      this._currentStream = null;
      if (this._insideLoop) {
        this._pendingNext = true;
        return;
      }
      this._insideLoop = true;
      try {
        do {
          this._pendingNext = false;
          this._realGetNext();
        } while (this._pendingNext);
      } finally {
        this._insideLoop = false;
      }
    };
    CombinedStream.prototype._realGetNext = function() {
      var stream4 = this._streams.shift();
      if (typeof stream4 == \\"undefined\\") {
        this.end();
        return;
      }
      if (typeof stream4 !== \\"function\\") {
        this._pipeNext(stream4);
        return;
      }
      var getStream = stream4;
      getStream(function(stream5) {
        var isStreamLike = CombinedStream.isStreamLike(stream5);
        if (isStreamLike) {
          stream5.on(\\"data\\", this._checkDataSize.bind(this));
          this._handleErrors(stream5);
        }
        this._pipeNext(stream5);
      }.bind(this));
    };
    CombinedStream.prototype._pipeNext = function(stream4) {
      this._currentStream = stream4;
      var isStreamLike = CombinedStream.isStreamLike(stream4);
      if (isStreamLike) {
        stream4.on(\\"end\\", this._getNext.bind(this));
        stream4.pipe(this, { end: false });
        return;
      }
      var value = stream4;
      this.write(value);
      this._getNext();
    };
    CombinedStream.prototype._handleErrors = function(stream4) {
      var self2 = this;
      stream4.on(\\"error\\", function(err) {
        self2._emitError(err);
      });
    };
    CombinedStream.prototype.write = function(data) {
      this.emit(\\"data\\", data);
    };
    CombinedStream.prototype.pause = function() {
      if (!this.pauseStreams) {
        return;
      }
      if (this.pauseStreams && this._currentStream && typeof this._currentStream.pause == \\"function\\")
        this._currentStream.pause();
      this.emit(\\"pause\\");
    };
    CombinedStream.prototype.resume = function() {
      if (!this._released) {
        this._released = true;
        this.writable = true;
        this._getNext();
      }
      if (this.pauseStreams && this._currentStream && typeof this._currentStream.resume == \\"function\\")
        this._currentStream.resume();
      this.emit(\\"resume\\");
    };
    CombinedStream.prototype.end = function() {
      this._reset();
      this.emit(\\"end\\");
    };
    CombinedStream.prototype.destroy = function() {
      this._reset();
      this.emit(\\"close\\");
    };
    CombinedStream.prototype._reset = function() {
      this.writable = false;
      this._streams = [];
      this._currentStream = null;
    };
    CombinedStream.prototype._checkDataSize = function() {
      this._updateDataSize();
      if (this.dataSize <= this.maxDataSize) {
        return;
      }
      var message = \\"DelayedStream#maxDataSize of \\" + this.maxDataSize + \\" bytes exceeded.\\";
      this._emitError(new Error(message));
    };
    CombinedStream.prototype._updateDataSize = function() {
      this.dataSize = 0;
      var self2 = this;
      this._streams.forEach(function(stream4) {
        if (!stream4.dataSize) {
          return;
        }
        self2.dataSize += stream4.dataSize;
      });
      if (this._currentStream && this._currentStream.dataSize) {
        this.dataSize += this._currentStream.dataSize;
      }
    };
    CombinedStream.prototype._emitError = function(err) {
      this._reset();
      this.emit(\\"error\\", err);
    };
  }
});

// .yarn/cache/mime-db-npm-1.52.0-b5371d6fd2-0d99a03585.zip/node_modules/mime-db/db.json
var require_db = __commonJS({
  \\".yarn/cache/mime-db-npm-1.52.0-b5371d6fd2-0d99a03585.zip/node_modules/mime-db/db.json\\"(exports, module2) {
    module2.exports = {
      \\"application/1d-interleaved-parityfec\\": {
        source: \\"iana\\"
      },
      \\"application/3gpdash-qoe-report+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/3gpp-ims+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/3gpphal+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/3gpphalforms+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/a2l\\": {
        source: \\"iana\\"
      },
      \\"application/ace+cbor\\": {
        source: \\"iana\\"
      },
      \\"application/activemessage\\": {
        source: \\"iana\\"
      },
      \\"application/activity+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/alto-costmap+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/alto-costmapfilter+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/alto-directory+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/alto-endpointcost+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/alto-endpointcostparams+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/alto-endpointprop+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/alto-endpointpropparams+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/alto-error+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/alto-networkmap+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/alto-networkmapfilter+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/alto-updatestreamcontrol+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/alto-updatestreamparams+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/aml\\": {
        source: \\"iana\\"
      },
      \\"application/andrew-inset\\": {
        source: \\"iana\\",
        extensions: [\\"ez\\"]
      },
      \\"application/applefile\\": {
        source: \\"iana\\"
      },
      \\"application/applixware\\": {
        source: \\"apache\\",
        extensions: [\\"aw\\"]
      },
      \\"application/at+jwt\\": {
        source: \\"iana\\"
      },
      \\"application/atf\\": {
        source: \\"iana\\"
      },
      \\"application/atfx\\": {
        source: \\"iana\\"
      },
      \\"application/atom+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"atom\\"]
      },
      \\"application/atomcat+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"atomcat\\"]
      },
      \\"application/atomdeleted+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"atomdeleted\\"]
      },
      \\"application/atomicmail\\": {
        source: \\"iana\\"
      },
      \\"application/atomsvc+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"atomsvc\\"]
      },
      \\"application/atsc-dwd+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"dwd\\"]
      },
      \\"application/atsc-dynamic-event-message\\": {
        source: \\"iana\\"
      },
      \\"application/atsc-held+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"held\\"]
      },
      \\"application/atsc-rdt+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/atsc-rsat+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"rsat\\"]
      },
      \\"application/atxml\\": {
        source: \\"iana\\"
      },
      \\"application/auth-policy+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/bacnet-xdd+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/batch-smtp\\": {
        source: \\"iana\\"
      },
      \\"application/bdoc\\": {
        compressible: false,
        extensions: [\\"bdoc\\"]
      },
      \\"application/beep+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/calendar+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/calendar+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xcs\\"]
      },
      \\"application/call-completion\\": {
        source: \\"iana\\"
      },
      \\"application/cals-1840\\": {
        source: \\"iana\\"
      },
      \\"application/captive+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/cbor\\": {
        source: \\"iana\\"
      },
      \\"application/cbor-seq\\": {
        source: \\"iana\\"
      },
      \\"application/cccex\\": {
        source: \\"iana\\"
      },
      \\"application/ccmp+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/ccxml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"ccxml\\"]
      },
      \\"application/cdfx+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"cdfx\\"]
      },
      \\"application/cdmi-capability\\": {
        source: \\"iana\\",
        extensions: [\\"cdmia\\"]
      },
      \\"application/cdmi-container\\": {
        source: \\"iana\\",
        extensions: [\\"cdmic\\"]
      },
      \\"application/cdmi-domain\\": {
        source: \\"iana\\",
        extensions: [\\"cdmid\\"]
      },
      \\"application/cdmi-object\\": {
        source: \\"iana\\",
        extensions: [\\"cdmio\\"]
      },
      \\"application/cdmi-queue\\": {
        source: \\"iana\\",
        extensions: [\\"cdmiq\\"]
      },
      \\"application/cdni\\": {
        source: \\"iana\\"
      },
      \\"application/cea\\": {
        source: \\"iana\\"
      },
      \\"application/cea-2018+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/cellml+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/cfw\\": {
        source: \\"iana\\"
      },
      \\"application/city+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/clr\\": {
        source: \\"iana\\"
      },
      \\"application/clue+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/clue_info+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/cms\\": {
        source: \\"iana\\"
      },
      \\"application/cnrp+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/coap-group+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/coap-payload\\": {
        source: \\"iana\\"
      },
      \\"application/commonground\\": {
        source: \\"iana\\"
      },
      \\"application/conference-info+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/cose\\": {
        source: \\"iana\\"
      },
      \\"application/cose-key\\": {
        source: \\"iana\\"
      },
      \\"application/cose-key-set\\": {
        source: \\"iana\\"
      },
      \\"application/cpl+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"cpl\\"]
      },
      \\"application/csrattrs\\": {
        source: \\"iana\\"
      },
      \\"application/csta+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/cstadata+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/csvm+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/cu-seeme\\": {
        source: \\"apache\\",
        extensions: [\\"cu\\"]
      },
      \\"application/cwt\\": {
        source: \\"iana\\"
      },
      \\"application/cybercash\\": {
        source: \\"iana\\"
      },
      \\"application/dart\\": {
        compressible: true
      },
      \\"application/dash+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"mpd\\"]
      },
      \\"application/dash-patch+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"mpp\\"]
      },
      \\"application/dashdelta\\": {
        source: \\"iana\\"
      },
      \\"application/davmount+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"davmount\\"]
      },
      \\"application/dca-rft\\": {
        source: \\"iana\\"
      },
      \\"application/dcd\\": {
        source: \\"iana\\"
      },
      \\"application/dec-dx\\": {
        source: \\"iana\\"
      },
      \\"application/dialog-info+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/dicom\\": {
        source: \\"iana\\"
      },
      \\"application/dicom+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/dicom+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/dii\\": {
        source: \\"iana\\"
      },
      \\"application/dit\\": {
        source: \\"iana\\"
      },
      \\"application/dns\\": {
        source: \\"iana\\"
      },
      \\"application/dns+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/dns-message\\": {
        source: \\"iana\\"
      },
      \\"application/docbook+xml\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"dbk\\"]
      },
      \\"application/dots+cbor\\": {
        source: \\"iana\\"
      },
      \\"application/dskpp+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/dssc+der\\": {
        source: \\"iana\\",
        extensions: [\\"dssc\\"]
      },
      \\"application/dssc+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xdssc\\"]
      },
      \\"application/dvcs\\": {
        source: \\"iana\\"
      },
      \\"application/ecmascript\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"es\\", \\"ecma\\"]
      },
      \\"application/edi-consent\\": {
        source: \\"iana\\"
      },
      \\"application/edi-x12\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/edifact\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/efi\\": {
        source: \\"iana\\"
      },
      \\"application/elm+json\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/elm+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/emergencycalldata.cap+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/emergencycalldata.comment+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/emergencycalldata.control+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/emergencycalldata.deviceinfo+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/emergencycalldata.ecall.msd\\": {
        source: \\"iana\\"
      },
      \\"application/emergencycalldata.providerinfo+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/emergencycalldata.serviceinfo+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/emergencycalldata.subscriberinfo+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/emergencycalldata.veds+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/emma+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"emma\\"]
      },
      \\"application/emotionml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"emotionml\\"]
      },
      \\"application/encaprtp\\": {
        source: \\"iana\\"
      },
      \\"application/epp+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/epub+zip\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"epub\\"]
      },
      \\"application/eshop\\": {
        source: \\"iana\\"
      },
      \\"application/exi\\": {
        source: \\"iana\\",
        extensions: [\\"exi\\"]
      },
      \\"application/expect-ct-report+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/express\\": {
        source: \\"iana\\",
        extensions: [\\"exp\\"]
      },
      \\"application/fastinfoset\\": {
        source: \\"iana\\"
      },
      \\"application/fastsoap\\": {
        source: \\"iana\\"
      },
      \\"application/fdt+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"fdt\\"]
      },
      \\"application/fhir+json\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/fhir+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/fido.trusted-apps+json\\": {
        compressible: true
      },
      \\"application/fits\\": {
        source: \\"iana\\"
      },
      \\"application/flexfec\\": {
        source: \\"iana\\"
      },
      \\"application/font-sfnt\\": {
        source: \\"iana\\"
      },
      \\"application/font-tdpfr\\": {
        source: \\"iana\\",
        extensions: [\\"pfr\\"]
      },
      \\"application/font-woff\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/framework-attributes+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/geo+json\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"geojson\\"]
      },
      \\"application/geo+json-seq\\": {
        source: \\"iana\\"
      },
      \\"application/geopackage+sqlite3\\": {
        source: \\"iana\\"
      },
      \\"application/geoxacml+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/gltf-buffer\\": {
        source: \\"iana\\"
      },
      \\"application/gml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"gml\\"]
      },
      \\"application/gpx+xml\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"gpx\\"]
      },
      \\"application/gxf\\": {
        source: \\"apache\\",
        extensions: [\\"gxf\\"]
      },
      \\"application/gzip\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"gz\\"]
      },
      \\"application/h224\\": {
        source: \\"iana\\"
      },
      \\"application/held+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/hjson\\": {
        extensions: [\\"hjson\\"]
      },
      \\"application/http\\": {
        source: \\"iana\\"
      },
      \\"application/hyperstudio\\": {
        source: \\"iana\\",
        extensions: [\\"stk\\"]
      },
      \\"application/ibe-key-request+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/ibe-pkg-reply+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/ibe-pp-data\\": {
        source: \\"iana\\"
      },
      \\"application/iges\\": {
        source: \\"iana\\"
      },
      \\"application/im-iscomposing+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/index\\": {
        source: \\"iana\\"
      },
      \\"application/index.cmd\\": {
        source: \\"iana\\"
      },
      \\"application/index.obj\\": {
        source: \\"iana\\"
      },
      \\"application/index.response\\": {
        source: \\"iana\\"
      },
      \\"application/index.vnd\\": {
        source: \\"iana\\"
      },
      \\"application/inkml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"ink\\", \\"inkml\\"]
      },
      \\"application/iotp\\": {
        source: \\"iana\\"
      },
      \\"application/ipfix\\": {
        source: \\"iana\\",
        extensions: [\\"ipfix\\"]
      },
      \\"application/ipp\\": {
        source: \\"iana\\"
      },
      \\"application/isup\\": {
        source: \\"iana\\"
      },
      \\"application/its+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"its\\"]
      },
      \\"application/java-archive\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"jar\\", \\"war\\", \\"ear\\"]
      },
      \\"application/java-serialized-object\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"ser\\"]
      },
      \\"application/java-vm\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"class\\"]
      },
      \\"application/javascript\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true,
        extensions: [\\"js\\", \\"mjs\\"]
      },
      \\"application/jf2feed+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/jose\\": {
        source: \\"iana\\"
      },
      \\"application/jose+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/jrd+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/jscalendar+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/json\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true,
        extensions: [\\"json\\", \\"map\\"]
      },
      \\"application/json-patch+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/json-seq\\": {
        source: \\"iana\\"
      },
      \\"application/json5\\": {
        extensions: [\\"json5\\"]
      },
      \\"application/jsonml+json\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"jsonml\\"]
      },
      \\"application/jwk+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/jwk-set+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/jwt\\": {
        source: \\"iana\\"
      },
      \\"application/kpml-request+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/kpml-response+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/ld+json\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"jsonld\\"]
      },
      \\"application/lgr+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"lgr\\"]
      },
      \\"application/link-format\\": {
        source: \\"iana\\"
      },
      \\"application/load-control+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/lost+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"lostxml\\"]
      },
      \\"application/lostsync+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/lpf+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/lxf\\": {
        source: \\"iana\\"
      },
      \\"application/mac-binhex40\\": {
        source: \\"iana\\",
        extensions: [\\"hqx\\"]
      },
      \\"application/mac-compactpro\\": {
        source: \\"apache\\",
        extensions: [\\"cpt\\"]
      },
      \\"application/macwriteii\\": {
        source: \\"iana\\"
      },
      \\"application/mads+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"mads\\"]
      },
      \\"application/manifest+json\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true,
        extensions: [\\"webmanifest\\"]
      },
      \\"application/marc\\": {
        source: \\"iana\\",
        extensions: [\\"mrc\\"]
      },
      \\"application/marcxml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"mrcx\\"]
      },
      \\"application/mathematica\\": {
        source: \\"iana\\",
        extensions: [\\"ma\\", \\"nb\\", \\"mb\\"]
      },
      \\"application/mathml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"mathml\\"]
      },
      \\"application/mathml-content+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/mathml-presentation+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/mbms-associated-procedure-description+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/mbms-deregister+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/mbms-envelope+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/mbms-msk+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/mbms-msk-response+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/mbms-protection-description+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/mbms-reception-report+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/mbms-register+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/mbms-register-response+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/mbms-schedule+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/mbms-user-service-description+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/mbox\\": {
        source: \\"iana\\",
        extensions: [\\"mbox\\"]
      },
      \\"application/media-policy-dataset+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"mpf\\"]
      },
      \\"application/media_control+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/mediaservercontrol+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"mscml\\"]
      },
      \\"application/merge-patch+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/metalink+xml\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"metalink\\"]
      },
      \\"application/metalink4+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"meta4\\"]
      },
      \\"application/mets+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"mets\\"]
      },
      \\"application/mf4\\": {
        source: \\"iana\\"
      },
      \\"application/mikey\\": {
        source: \\"iana\\"
      },
      \\"application/mipc\\": {
        source: \\"iana\\"
      },
      \\"application/missing-blocks+cbor-seq\\": {
        source: \\"iana\\"
      },
      \\"application/mmt-aei+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"maei\\"]
      },
      \\"application/mmt-usd+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"musd\\"]
      },
      \\"application/mods+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"mods\\"]
      },
      \\"application/moss-keys\\": {
        source: \\"iana\\"
      },
      \\"application/moss-signature\\": {
        source: \\"iana\\"
      },
      \\"application/mosskey-data\\": {
        source: \\"iana\\"
      },
      \\"application/mosskey-request\\": {
        source: \\"iana\\"
      },
      \\"application/mp21\\": {
        source: \\"iana\\",
        extensions: [\\"m21\\", \\"mp21\\"]
      },
      \\"application/mp4\\": {
        source: \\"iana\\",
        extensions: [\\"mp4s\\", \\"m4p\\"]
      },
      \\"application/mpeg4-generic\\": {
        source: \\"iana\\"
      },
      \\"application/mpeg4-iod\\": {
        source: \\"iana\\"
      },
      \\"application/mpeg4-iod-xmt\\": {
        source: \\"iana\\"
      },
      \\"application/mrb-consumer+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/mrb-publish+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/msc-ivr+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/msc-mixer+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/msword\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"doc\\", \\"dot\\"]
      },
      \\"application/mud+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/multipart-core\\": {
        source: \\"iana\\"
      },
      \\"application/mxf\\": {
        source: \\"iana\\",
        extensions: [\\"mxf\\"]
      },
      \\"application/n-quads\\": {
        source: \\"iana\\",
        extensions: [\\"nq\\"]
      },
      \\"application/n-triples\\": {
        source: \\"iana\\",
        extensions: [\\"nt\\"]
      },
      \\"application/nasdata\\": {
        source: \\"iana\\"
      },
      \\"application/news-checkgroups\\": {
        source: \\"iana\\",
        charset: \\"US-ASCII\\"
      },
      \\"application/news-groupinfo\\": {
        source: \\"iana\\",
        charset: \\"US-ASCII\\"
      },
      \\"application/news-transmission\\": {
        source: \\"iana\\"
      },
      \\"application/nlsml+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/node\\": {
        source: \\"iana\\",
        extensions: [\\"cjs\\"]
      },
      \\"application/nss\\": {
        source: \\"iana\\"
      },
      \\"application/oauth-authz-req+jwt\\": {
        source: \\"iana\\"
      },
      \\"application/oblivious-dns-message\\": {
        source: \\"iana\\"
      },
      \\"application/ocsp-request\\": {
        source: \\"iana\\"
      },
      \\"application/ocsp-response\\": {
        source: \\"iana\\"
      },
      \\"application/octet-stream\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"bin\\", \\"dms\\", \\"lrf\\", \\"mar\\", \\"so\\", \\"dist\\", \\"distz\\", \\"pkg\\", \\"bpk\\", \\"dump\\", \\"elc\\", \\"deploy\\", \\"exe\\", \\"dll\\", \\"deb\\", \\"dmg\\", \\"iso\\", \\"img\\", \\"msi\\", \\"msp\\", \\"msm\\", \\"buffer\\"]
      },
      \\"application/oda\\": {
        source: \\"iana\\",
        extensions: [\\"oda\\"]
      },
      \\"application/odm+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/odx\\": {
        source: \\"iana\\"
      },
      \\"application/oebps-package+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"opf\\"]
      },
      \\"application/ogg\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"ogx\\"]
      },
      \\"application/omdoc+xml\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"omdoc\\"]
      },
      \\"application/onenote\\": {
        source: \\"apache\\",
        extensions: [\\"onetoc\\", \\"onetoc2\\", \\"onetmp\\", \\"onepkg\\"]
      },
      \\"application/opc-nodeset+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/oscore\\": {
        source: \\"iana\\"
      },
      \\"application/oxps\\": {
        source: \\"iana\\",
        extensions: [\\"oxps\\"]
      },
      \\"application/p21\\": {
        source: \\"iana\\"
      },
      \\"application/p21+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/p2p-overlay+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"relo\\"]
      },
      \\"application/parityfec\\": {
        source: \\"iana\\"
      },
      \\"application/passport\\": {
        source: \\"iana\\"
      },
      \\"application/patch-ops-error+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xer\\"]
      },
      \\"application/pdf\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"pdf\\"]
      },
      \\"application/pdx\\": {
        source: \\"iana\\"
      },
      \\"application/pem-certificate-chain\\": {
        source: \\"iana\\"
      },
      \\"application/pgp-encrypted\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"pgp\\"]
      },
      \\"application/pgp-keys\\": {
        source: \\"iana\\",
        extensions: [\\"asc\\"]
      },
      \\"application/pgp-signature\\": {
        source: \\"iana\\",
        extensions: [\\"asc\\", \\"sig\\"]
      },
      \\"application/pics-rules\\": {
        source: \\"apache\\",
        extensions: [\\"prf\\"]
      },
      \\"application/pidf+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/pidf-diff+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/pkcs10\\": {
        source: \\"iana\\",
        extensions: [\\"p10\\"]
      },
      \\"application/pkcs12\\": {
        source: \\"iana\\"
      },
      \\"application/pkcs7-mime\\": {
        source: \\"iana\\",
        extensions: [\\"p7m\\", \\"p7c\\"]
      },
      \\"application/pkcs7-signature\\": {
        source: \\"iana\\",
        extensions: [\\"p7s\\"]
      },
      \\"application/pkcs8\\": {
        source: \\"iana\\",
        extensions: [\\"p8\\"]
      },
      \\"application/pkcs8-encrypted\\": {
        source: \\"iana\\"
      },
      \\"application/pkix-attr-cert\\": {
        source: \\"iana\\",
        extensions: [\\"ac\\"]
      },
      \\"application/pkix-cert\\": {
        source: \\"iana\\",
        extensions: [\\"cer\\"]
      },
      \\"application/pkix-crl\\": {
        source: \\"iana\\",
        extensions: [\\"crl\\"]
      },
      \\"application/pkix-pkipath\\": {
        source: \\"iana\\",
        extensions: [\\"pkipath\\"]
      },
      \\"application/pkixcmp\\": {
        source: \\"iana\\",
        extensions: [\\"pki\\"]
      },
      \\"application/pls+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"pls\\"]
      },
      \\"application/poc-settings+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/postscript\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"ai\\", \\"eps\\", \\"ps\\"]
      },
      \\"application/ppsp-tracker+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/problem+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/problem+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/provenance+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"provx\\"]
      },
      \\"application/prs.alvestrand.titrax-sheet\\": {
        source: \\"iana\\"
      },
      \\"application/prs.cww\\": {
        source: \\"iana\\",
        extensions: [\\"cww\\"]
      },
      \\"application/prs.cyn\\": {
        source: \\"iana\\",
        charset: \\"7-BIT\\"
      },
      \\"application/prs.hpub+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/prs.nprend\\": {
        source: \\"iana\\"
      },
      \\"application/prs.plucker\\": {
        source: \\"iana\\"
      },
      \\"application/prs.rdf-xml-crypt\\": {
        source: \\"iana\\"
      },
      \\"application/prs.xsf+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/pskc+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"pskcxml\\"]
      },
      \\"application/pvd+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/qsig\\": {
        source: \\"iana\\"
      },
      \\"application/raml+yaml\\": {
        compressible: true,
        extensions: [\\"raml\\"]
      },
      \\"application/raptorfec\\": {
        source: \\"iana\\"
      },
      \\"application/rdap+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/rdf+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"rdf\\", \\"owl\\"]
      },
      \\"application/reginfo+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"rif\\"]
      },
      \\"application/relax-ng-compact-syntax\\": {
        source: \\"iana\\",
        extensions: [\\"rnc\\"]
      },
      \\"application/remote-printing\\": {
        source: \\"iana\\"
      },
      \\"application/reputon+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/resource-lists+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"rl\\"]
      },
      \\"application/resource-lists-diff+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"rld\\"]
      },
      \\"application/rfc+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/riscos\\": {
        source: \\"iana\\"
      },
      \\"application/rlmi+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/rls-services+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"rs\\"]
      },
      \\"application/route-apd+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"rapd\\"]
      },
      \\"application/route-s-tsid+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"sls\\"]
      },
      \\"application/route-usd+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"rusd\\"]
      },
      \\"application/rpki-ghostbusters\\": {
        source: \\"iana\\",
        extensions: [\\"gbr\\"]
      },
      \\"application/rpki-manifest\\": {
        source: \\"iana\\",
        extensions: [\\"mft\\"]
      },
      \\"application/rpki-publication\\": {
        source: \\"iana\\"
      },
      \\"application/rpki-roa\\": {
        source: \\"iana\\",
        extensions: [\\"roa\\"]
      },
      \\"application/rpki-updown\\": {
        source: \\"iana\\"
      },
      \\"application/rsd+xml\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"rsd\\"]
      },
      \\"application/rss+xml\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"rss\\"]
      },
      \\"application/rtf\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"rtf\\"]
      },
      \\"application/rtploopback\\": {
        source: \\"iana\\"
      },
      \\"application/rtx\\": {
        source: \\"iana\\"
      },
      \\"application/samlassertion+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/samlmetadata+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/sarif+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/sarif-external-properties+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/sbe\\": {
        source: \\"iana\\"
      },
      \\"application/sbml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"sbml\\"]
      },
      \\"application/scaip+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/scim+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/scvp-cv-request\\": {
        source: \\"iana\\",
        extensions: [\\"scq\\"]
      },
      \\"application/scvp-cv-response\\": {
        source: \\"iana\\",
        extensions: [\\"scs\\"]
      },
      \\"application/scvp-vp-request\\": {
        source: \\"iana\\",
        extensions: [\\"spq\\"]
      },
      \\"application/scvp-vp-response\\": {
        source: \\"iana\\",
        extensions: [\\"spp\\"]
      },
      \\"application/sdp\\": {
        source: \\"iana\\",
        extensions: [\\"sdp\\"]
      },
      \\"application/secevent+jwt\\": {
        source: \\"iana\\"
      },
      \\"application/senml+cbor\\": {
        source: \\"iana\\"
      },
      \\"application/senml+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/senml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"senmlx\\"]
      },
      \\"application/senml-etch+cbor\\": {
        source: \\"iana\\"
      },
      \\"application/senml-etch+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/senml-exi\\": {
        source: \\"iana\\"
      },
      \\"application/sensml+cbor\\": {
        source: \\"iana\\"
      },
      \\"application/sensml+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/sensml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"sensmlx\\"]
      },
      \\"application/sensml-exi\\": {
        source: \\"iana\\"
      },
      \\"application/sep+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/sep-exi\\": {
        source: \\"iana\\"
      },
      \\"application/session-info\\": {
        source: \\"iana\\"
      },
      \\"application/set-payment\\": {
        source: \\"iana\\"
      },
      \\"application/set-payment-initiation\\": {
        source: \\"iana\\",
        extensions: [\\"setpay\\"]
      },
      \\"application/set-registration\\": {
        source: \\"iana\\"
      },
      \\"application/set-registration-initiation\\": {
        source: \\"iana\\",
        extensions: [\\"setreg\\"]
      },
      \\"application/sgml\\": {
        source: \\"iana\\"
      },
      \\"application/sgml-open-catalog\\": {
        source: \\"iana\\"
      },
      \\"application/shf+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"shf\\"]
      },
      \\"application/sieve\\": {
        source: \\"iana\\",
        extensions: [\\"siv\\", \\"sieve\\"]
      },
      \\"application/simple-filter+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/simple-message-summary\\": {
        source: \\"iana\\"
      },
      \\"application/simplesymbolcontainer\\": {
        source: \\"iana\\"
      },
      \\"application/sipc\\": {
        source: \\"iana\\"
      },
      \\"application/slate\\": {
        source: \\"iana\\"
      },
      \\"application/smil\\": {
        source: \\"iana\\"
      },
      \\"application/smil+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"smi\\", \\"smil\\"]
      },
      \\"application/smpte336m\\": {
        source: \\"iana\\"
      },
      \\"application/soap+fastinfoset\\": {
        source: \\"iana\\"
      },
      \\"application/soap+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/sparql-query\\": {
        source: \\"iana\\",
        extensions: [\\"rq\\"]
      },
      \\"application/sparql-results+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"srx\\"]
      },
      \\"application/spdx+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/spirits-event+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/sql\\": {
        source: \\"iana\\"
      },
      \\"application/srgs\\": {
        source: \\"iana\\",
        extensions: [\\"gram\\"]
      },
      \\"application/srgs+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"grxml\\"]
      },
      \\"application/sru+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"sru\\"]
      },
      \\"application/ssdl+xml\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"ssdl\\"]
      },
      \\"application/ssml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"ssml\\"]
      },
      \\"application/stix+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/swid+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"swidtag\\"]
      },
      \\"application/tamp-apex-update\\": {
        source: \\"iana\\"
      },
      \\"application/tamp-apex-update-confirm\\": {
        source: \\"iana\\"
      },
      \\"application/tamp-community-update\\": {
        source: \\"iana\\"
      },
      \\"application/tamp-community-update-confirm\\": {
        source: \\"iana\\"
      },
      \\"application/tamp-error\\": {
        source: \\"iana\\"
      },
      \\"application/tamp-sequence-adjust\\": {
        source: \\"iana\\"
      },
      \\"application/tamp-sequence-adjust-confirm\\": {
        source: \\"iana\\"
      },
      \\"application/tamp-status-query\\": {
        source: \\"iana\\"
      },
      \\"application/tamp-status-response\\": {
        source: \\"iana\\"
      },
      \\"application/tamp-update\\": {
        source: \\"iana\\"
      },
      \\"application/tamp-update-confirm\\": {
        source: \\"iana\\"
      },
      \\"application/tar\\": {
        compressible: true
      },
      \\"application/taxii+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/td+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/tei+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"tei\\", \\"teicorpus\\"]
      },
      \\"application/tetra_isi\\": {
        source: \\"iana\\"
      },
      \\"application/thraud+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"tfi\\"]
      },
      \\"application/timestamp-query\\": {
        source: \\"iana\\"
      },
      \\"application/timestamp-reply\\": {
        source: \\"iana\\"
      },
      \\"application/timestamped-data\\": {
        source: \\"iana\\",
        extensions: [\\"tsd\\"]
      },
      \\"application/tlsrpt+gzip\\": {
        source: \\"iana\\"
      },
      \\"application/tlsrpt+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/tnauthlist\\": {
        source: \\"iana\\"
      },
      \\"application/token-introspection+jwt\\": {
        source: \\"iana\\"
      },
      \\"application/toml\\": {
        compressible: true,
        extensions: [\\"toml\\"]
      },
      \\"application/trickle-ice-sdpfrag\\": {
        source: \\"iana\\"
      },
      \\"application/trig\\": {
        source: \\"iana\\",
        extensions: [\\"trig\\"]
      },
      \\"application/ttml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"ttml\\"]
      },
      \\"application/tve-trigger\\": {
        source: \\"iana\\"
      },
      \\"application/tzif\\": {
        source: \\"iana\\"
      },
      \\"application/tzif-leap\\": {
        source: \\"iana\\"
      },
      \\"application/ubjson\\": {
        compressible: false,
        extensions: [\\"ubj\\"]
      },
      \\"application/ulpfec\\": {
        source: \\"iana\\"
      },
      \\"application/urc-grpsheet+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/urc-ressheet+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"rsheet\\"]
      },
      \\"application/urc-targetdesc+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"td\\"]
      },
      \\"application/urc-uisocketdesc+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vcard+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vcard+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vemmi\\": {
        source: \\"iana\\"
      },
      \\"application/vividence.scriptfile\\": {
        source: \\"apache\\"
      },
      \\"application/vnd.1000minds.decision-model+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"1km\\"]
      },
      \\"application/vnd.3gpp-prose+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp-prose-pc3ch+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp-v2x-local-service-information\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.3gpp.5gnas\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.3gpp.access-transfer-events+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.bsf+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.gmop+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.gtpc\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.3gpp.interworking-data\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.3gpp.lpp\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.3gpp.mc-signalling-ear\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.3gpp.mcdata-affiliation-command+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcdata-info+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcdata-payload\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.3gpp.mcdata-service-config+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcdata-signalling\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.3gpp.mcdata-ue-config+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcdata-user-profile+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcptt-affiliation-command+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcptt-floor-request+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcptt-info+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcptt-location-info+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcptt-mbms-usage-info+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcptt-service-config+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcptt-signed+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcptt-ue-config+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcptt-ue-init-config+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcptt-user-profile+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcvideo-affiliation-command+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcvideo-affiliation-info+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcvideo-info+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcvideo-location-info+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcvideo-mbms-usage-info+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcvideo-service-config+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcvideo-transmission-request+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcvideo-ue-config+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mcvideo-user-profile+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.mid-call+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.ngap\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.3gpp.pfcp\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.3gpp.pic-bw-large\\": {
        source: \\"iana\\",
        extensions: [\\"plb\\"]
      },
      \\"application/vnd.3gpp.pic-bw-small\\": {
        source: \\"iana\\",
        extensions: [\\"psb\\"]
      },
      \\"application/vnd.3gpp.pic-bw-var\\": {
        source: \\"iana\\",
        extensions: [\\"pvb\\"]
      },
      \\"application/vnd.3gpp.s1ap\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.3gpp.sms\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.3gpp.sms+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.srvcc-ext+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.srvcc-info+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.state-and-event-info+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp.ussd+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp2.bcmcsinfo+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.3gpp2.sms\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.3gpp2.tcap\\": {
        source: \\"iana\\",
        extensions: [\\"tcap\\"]
      },
      \\"application/vnd.3lightssoftware.imagescal\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.3m.post-it-notes\\": {
        source: \\"iana\\",
        extensions: [\\"pwn\\"]
      },
      \\"application/vnd.accpac.simply.aso\\": {
        source: \\"iana\\",
        extensions: [\\"aso\\"]
      },
      \\"application/vnd.accpac.simply.imp\\": {
        source: \\"iana\\",
        extensions: [\\"imp\\"]
      },
      \\"application/vnd.acucobol\\": {
        source: \\"iana\\",
        extensions: [\\"acu\\"]
      },
      \\"application/vnd.acucorp\\": {
        source: \\"iana\\",
        extensions: [\\"atc\\", \\"acutc\\"]
      },
      \\"application/vnd.adobe.air-application-installer-package+zip\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"air\\"]
      },
      \\"application/vnd.adobe.flash.movie\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.adobe.formscentral.fcdt\\": {
        source: \\"iana\\",
        extensions: [\\"fcdt\\"]
      },
      \\"application/vnd.adobe.fxp\\": {
        source: \\"iana\\",
        extensions: [\\"fxp\\", \\"fxpl\\"]
      },
      \\"application/vnd.adobe.partial-upload\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.adobe.xdp+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xdp\\"]
      },
      \\"application/vnd.adobe.xfdf\\": {
        source: \\"iana\\",
        extensions: [\\"xfdf\\"]
      },
      \\"application/vnd.aether.imp\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.afpc.afplinedata\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.afpc.afplinedata-pagedef\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.afpc.cmoca-cmresource\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.afpc.foca-charset\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.afpc.foca-codedfont\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.afpc.foca-codepage\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.afpc.modca\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.afpc.modca-cmtable\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.afpc.modca-formdef\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.afpc.modca-mediummap\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.afpc.modca-objectcontainer\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.afpc.modca-overlay\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.afpc.modca-pagesegment\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.age\\": {
        source: \\"iana\\",
        extensions: [\\"age\\"]
      },
      \\"application/vnd.ah-barcode\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ahead.space\\": {
        source: \\"iana\\",
        extensions: [\\"ahead\\"]
      },
      \\"application/vnd.airzip.filesecure.azf\\": {
        source: \\"iana\\",
        extensions: [\\"azf\\"]
      },
      \\"application/vnd.airzip.filesecure.azs\\": {
        source: \\"iana\\",
        extensions: [\\"azs\\"]
      },
      \\"application/vnd.amadeus+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.amazon.ebook\\": {
        source: \\"apache\\",
        extensions: [\\"azw\\"]
      },
      \\"application/vnd.amazon.mobi8-ebook\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.americandynamics.acc\\": {
        source: \\"iana\\",
        extensions: [\\"acc\\"]
      },
      \\"application/vnd.amiga.ami\\": {
        source: \\"iana\\",
        extensions: [\\"ami\\"]
      },
      \\"application/vnd.amundsen.maze+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.android.ota\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.android.package-archive\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"apk\\"]
      },
      \\"application/vnd.anki\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.anser-web-certificate-issue-initiation\\": {
        source: \\"iana\\",
        extensions: [\\"cii\\"]
      },
      \\"application/vnd.anser-web-funds-transfer-initiation\\": {
        source: \\"apache\\",
        extensions: [\\"fti\\"]
      },
      \\"application/vnd.antix.game-component\\": {
        source: \\"iana\\",
        extensions: [\\"atx\\"]
      },
      \\"application/vnd.apache.arrow.file\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.apache.arrow.stream\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.apache.thrift.binary\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.apache.thrift.compact\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.apache.thrift.json\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.api+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.aplextor.warrp+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.apothekende.reservation+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.apple.installer+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"mpkg\\"]
      },
      \\"application/vnd.apple.keynote\\": {
        source: \\"iana\\",
        extensions: [\\"key\\"]
      },
      \\"application/vnd.apple.mpegurl\\": {
        source: \\"iana\\",
        extensions: [\\"m3u8\\"]
      },
      \\"application/vnd.apple.numbers\\": {
        source: \\"iana\\",
        extensions: [\\"numbers\\"]
      },
      \\"application/vnd.apple.pages\\": {
        source: \\"iana\\",
        extensions: [\\"pages\\"]
      },
      \\"application/vnd.apple.pkpass\\": {
        compressible: false,
        extensions: [\\"pkpass\\"]
      },
      \\"application/vnd.arastra.swi\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.aristanetworks.swi\\": {
        source: \\"iana\\",
        extensions: [\\"swi\\"]
      },
      \\"application/vnd.artisan+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.artsquare\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.astraea-software.iota\\": {
        source: \\"iana\\",
        extensions: [\\"iota\\"]
      },
      \\"application/vnd.audiograph\\": {
        source: \\"iana\\",
        extensions: [\\"aep\\"]
      },
      \\"application/vnd.autopackage\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.avalon+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.avistar+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.balsamiq.bmml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"bmml\\"]
      },
      \\"application/vnd.balsamiq.bmpr\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.banana-accounting\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.bbf.usp.error\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.bbf.usp.msg\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.bbf.usp.msg+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.bekitzur-stech+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.bint.med-content\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.biopax.rdf+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.blink-idb-value-wrapper\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.blueice.multipass\\": {
        source: \\"iana\\",
        extensions: [\\"mpm\\"]
      },
      \\"application/vnd.bluetooth.ep.oob\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.bluetooth.le.oob\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.bmi\\": {
        source: \\"iana\\",
        extensions: [\\"bmi\\"]
      },
      \\"application/vnd.bpf\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.bpf3\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.businessobjects\\": {
        source: \\"iana\\",
        extensions: [\\"rep\\"]
      },
      \\"application/vnd.byu.uapi+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.cab-jscript\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.canon-cpdl\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.canon-lips\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.capasystems-pg+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.cendio.thinlinc.clientconf\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.century-systems.tcp_stream\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.chemdraw+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"cdxml\\"]
      },
      \\"application/vnd.chess-pgn\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.chipnuts.karaoke-mmd\\": {
        source: \\"iana\\",
        extensions: [\\"mmd\\"]
      },
      \\"application/vnd.ciedi\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.cinderella\\": {
        source: \\"iana\\",
        extensions: [\\"cdy\\"]
      },
      \\"application/vnd.cirpack.isdn-ext\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.citationstyles.style+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"csl\\"]
      },
      \\"application/vnd.claymore\\": {
        source: \\"iana\\",
        extensions: [\\"cla\\"]
      },
      \\"application/vnd.cloanto.rp9\\": {
        source: \\"iana\\",
        extensions: [\\"rp9\\"]
      },
      \\"application/vnd.clonk.c4group\\": {
        source: \\"iana\\",
        extensions: [\\"c4g\\", \\"c4d\\", \\"c4f\\", \\"c4p\\", \\"c4u\\"]
      },
      \\"application/vnd.cluetrust.cartomobile-config\\": {
        source: \\"iana\\",
        extensions: [\\"c11amc\\"]
      },
      \\"application/vnd.cluetrust.cartomobile-config-pkg\\": {
        source: \\"iana\\",
        extensions: [\\"c11amz\\"]
      },
      \\"application/vnd.coffeescript\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.collabio.xodocuments.document\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.collabio.xodocuments.document-template\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.collabio.xodocuments.presentation\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.collabio.xodocuments.presentation-template\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.collabio.xodocuments.spreadsheet\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.collabio.xodocuments.spreadsheet-template\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.collection+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.collection.doc+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.collection.next+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.comicbook+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/vnd.comicbook-rar\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.commerce-battelle\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.commonspace\\": {
        source: \\"iana\\",
        extensions: [\\"csp\\"]
      },
      \\"application/vnd.contact.cmsg\\": {
        source: \\"iana\\",
        extensions: [\\"cdbcmsg\\"]
      },
      \\"application/vnd.coreos.ignition+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.cosmocaller\\": {
        source: \\"iana\\",
        extensions: [\\"cmc\\"]
      },
      \\"application/vnd.crick.clicker\\": {
        source: \\"iana\\",
        extensions: [\\"clkx\\"]
      },
      \\"application/vnd.crick.clicker.keyboard\\": {
        source: \\"iana\\",
        extensions: [\\"clkk\\"]
      },
      \\"application/vnd.crick.clicker.palette\\": {
        source: \\"iana\\",
        extensions: [\\"clkp\\"]
      },
      \\"application/vnd.crick.clicker.template\\": {
        source: \\"iana\\",
        extensions: [\\"clkt\\"]
      },
      \\"application/vnd.crick.clicker.wordbank\\": {
        source: \\"iana\\",
        extensions: [\\"clkw\\"]
      },
      \\"application/vnd.criticaltools.wbs+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"wbs\\"]
      },
      \\"application/vnd.cryptii.pipe+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.crypto-shade-file\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.cryptomator.encrypted\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.cryptomator.vault\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ctc-posml\\": {
        source: \\"iana\\",
        extensions: [\\"pml\\"]
      },
      \\"application/vnd.ctct.ws+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.cups-pdf\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.cups-postscript\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.cups-ppd\\": {
        source: \\"iana\\",
        extensions: [\\"ppd\\"]
      },
      \\"application/vnd.cups-raster\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.cups-raw\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.curl\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.curl.car\\": {
        source: \\"apache\\",
        extensions: [\\"car\\"]
      },
      \\"application/vnd.curl.pcurl\\": {
        source: \\"apache\\",
        extensions: [\\"pcurl\\"]
      },
      \\"application/vnd.cyan.dean.root+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.cybank\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.cyclonedx+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.cyclonedx+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.d2l.coursepackage1p0+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/vnd.d3m-dataset\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.d3m-problem\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dart\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"dart\\"]
      },
      \\"application/vnd.data-vision.rdz\\": {
        source: \\"iana\\",
        extensions: [\\"rdz\\"]
      },
      \\"application/vnd.datapackage+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.dataresource+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.dbf\\": {
        source: \\"iana\\",
        extensions: [\\"dbf\\"]
      },
      \\"application/vnd.debian.binary-package\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dece.data\\": {
        source: \\"iana\\",
        extensions: [\\"uvf\\", \\"uvvf\\", \\"uvd\\", \\"uvvd\\"]
      },
      \\"application/vnd.dece.ttml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"uvt\\", \\"uvvt\\"]
      },
      \\"application/vnd.dece.unspecified\\": {
        source: \\"iana\\",
        extensions: [\\"uvx\\", \\"uvvx\\"]
      },
      \\"application/vnd.dece.zip\\": {
        source: \\"iana\\",
        extensions: [\\"uvz\\", \\"uvvz\\"]
      },
      \\"application/vnd.denovo.fcselayout-link\\": {
        source: \\"iana\\",
        extensions: [\\"fe_launch\\"]
      },
      \\"application/vnd.desmume.movie\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dir-bi.plate-dl-nosuffix\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dm.delegation+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.dna\\": {
        source: \\"iana\\",
        extensions: [\\"dna\\"]
      },
      \\"application/vnd.document+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.dolby.mlp\\": {
        source: \\"apache\\",
        extensions: [\\"mlp\\"]
      },
      \\"application/vnd.dolby.mobile.1\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dolby.mobile.2\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.doremir.scorecloud-binary-document\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dpgraph\\": {
        source: \\"iana\\",
        extensions: [\\"dpg\\"]
      },
      \\"application/vnd.dreamfactory\\": {
        source: \\"iana\\",
        extensions: [\\"dfac\\"]
      },
      \\"application/vnd.drive+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.ds-keypoint\\": {
        source: \\"apache\\",
        extensions: [\\"kpxx\\"]
      },
      \\"application/vnd.dtg.local\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dtg.local.flash\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dtg.local.html\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dvb.ait\\": {
        source: \\"iana\\",
        extensions: [\\"ait\\"]
      },
      \\"application/vnd.dvb.dvbisl+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.dvb.dvbj\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dvb.esgcontainer\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dvb.ipdcdftnotifaccess\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dvb.ipdcesgaccess\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dvb.ipdcesgaccess2\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dvb.ipdcesgpdd\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dvb.ipdcroaming\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dvb.iptv.alfec-base\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dvb.iptv.alfec-enhancement\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dvb.notif-aggregate-root+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.dvb.notif-container+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.dvb.notif-generic+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.dvb.notif-ia-msglist+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.dvb.notif-ia-registration-request+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.dvb.notif-ia-registration-response+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.dvb.notif-init+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.dvb.pfr\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dvb.service\\": {
        source: \\"iana\\",
        extensions: [\\"svc\\"]
      },
      \\"application/vnd.dxr\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.dynageo\\": {
        source: \\"iana\\",
        extensions: [\\"geo\\"]
      },
      \\"application/vnd.dzr\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.easykaraoke.cdgdownload\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ecdis-update\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ecip.rlp\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.eclipse.ditto+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.ecowin.chart\\": {
        source: \\"iana\\",
        extensions: [\\"mag\\"]
      },
      \\"application/vnd.ecowin.filerequest\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ecowin.fileupdate\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ecowin.series\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ecowin.seriesrequest\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ecowin.seriesupdate\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.efi.img\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.efi.iso\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.emclient.accessrequest+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.enliven\\": {
        source: \\"iana\\",
        extensions: [\\"nml\\"]
      },
      \\"application/vnd.enphase.envoy\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.eprints.data+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.epson.esf\\": {
        source: \\"iana\\",
        extensions: [\\"esf\\"]
      },
      \\"application/vnd.epson.msf\\": {
        source: \\"iana\\",
        extensions: [\\"msf\\"]
      },
      \\"application/vnd.epson.quickanime\\": {
        source: \\"iana\\",
        extensions: [\\"qam\\"]
      },
      \\"application/vnd.epson.salt\\": {
        source: \\"iana\\",
        extensions: [\\"slt\\"]
      },
      \\"application/vnd.epson.ssf\\": {
        source: \\"iana\\",
        extensions: [\\"ssf\\"]
      },
      \\"application/vnd.ericsson.quickcall\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.espass-espass+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/vnd.eszigno3+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"es3\\", \\"et3\\"]
      },
      \\"application/vnd.etsi.aoc+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.asic-e+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/vnd.etsi.asic-s+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/vnd.etsi.cug+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.iptvcommand+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.iptvdiscovery+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.iptvprofile+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.iptvsad-bc+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.iptvsad-cod+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.iptvsad-npvr+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.iptvservice+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.iptvsync+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.iptvueprofile+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.mcid+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.mheg5\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.etsi.overload-control-policy-dataset+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.pstn+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.sci+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.simservs+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.timestamp-token\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.etsi.tsl+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.etsi.tsl.der\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.eu.kasparian.car+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.eudora.data\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.evolv.ecig.profile\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.evolv.ecig.settings\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.evolv.ecig.theme\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.exstream-empower+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/vnd.exstream-package\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ezpix-album\\": {
        source: \\"iana\\",
        extensions: [\\"ez2\\"]
      },
      \\"application/vnd.ezpix-package\\": {
        source: \\"iana\\",
        extensions: [\\"ez3\\"]
      },
      \\"application/vnd.f-secure.mobile\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.familysearch.gedcom+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/vnd.fastcopy-disk-image\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.fdf\\": {
        source: \\"iana\\",
        extensions: [\\"fdf\\"]
      },
      \\"application/vnd.fdsn.mseed\\": {
        source: \\"iana\\",
        extensions: [\\"mseed\\"]
      },
      \\"application/vnd.fdsn.seed\\": {
        source: \\"iana\\",
        extensions: [\\"seed\\", \\"dataless\\"]
      },
      \\"application/vnd.ffsns\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ficlab.flb+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/vnd.filmit.zfc\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.fints\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.firemonkeys.cloudcell\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.flographit\\": {
        source: \\"iana\\",
        extensions: [\\"gph\\"]
      },
      \\"application/vnd.fluxtime.clip\\": {
        source: \\"iana\\",
        extensions: [\\"ftc\\"]
      },
      \\"application/vnd.font-fontforge-sfd\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.framemaker\\": {
        source: \\"iana\\",
        extensions: [\\"fm\\", \\"frame\\", \\"maker\\", \\"book\\"]
      },
      \\"application/vnd.frogans.fnc\\": {
        source: \\"iana\\",
        extensions: [\\"fnc\\"]
      },
      \\"application/vnd.frogans.ltf\\": {
        source: \\"iana\\",
        extensions: [\\"ltf\\"]
      },
      \\"application/vnd.fsc.weblaunch\\": {
        source: \\"iana\\",
        extensions: [\\"fsc\\"]
      },
      \\"application/vnd.fujifilm.fb.docuworks\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.fujifilm.fb.docuworks.binder\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.fujifilm.fb.docuworks.container\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.fujifilm.fb.jfi+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.fujitsu.oasys\\": {
        source: \\"iana\\",
        extensions: [\\"oas\\"]
      },
      \\"application/vnd.fujitsu.oasys2\\": {
        source: \\"iana\\",
        extensions: [\\"oa2\\"]
      },
      \\"application/vnd.fujitsu.oasys3\\": {
        source: \\"iana\\",
        extensions: [\\"oa3\\"]
      },
      \\"application/vnd.fujitsu.oasysgp\\": {
        source: \\"iana\\",
        extensions: [\\"fg5\\"]
      },
      \\"application/vnd.fujitsu.oasysprs\\": {
        source: \\"iana\\",
        extensions: [\\"bh2\\"]
      },
      \\"application/vnd.fujixerox.art-ex\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.fujixerox.art4\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.fujixerox.ddd\\": {
        source: \\"iana\\",
        extensions: [\\"ddd\\"]
      },
      \\"application/vnd.fujixerox.docuworks\\": {
        source: \\"iana\\",
        extensions: [\\"xdw\\"]
      },
      \\"application/vnd.fujixerox.docuworks.binder\\": {
        source: \\"iana\\",
        extensions: [\\"xbd\\"]
      },
      \\"application/vnd.fujixerox.docuworks.container\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.fujixerox.hbpl\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.fut-misnet\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.futoin+cbor\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.futoin+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.fuzzysheet\\": {
        source: \\"iana\\",
        extensions: [\\"fzs\\"]
      },
      \\"application/vnd.genomatix.tuxedo\\": {
        source: \\"iana\\",
        extensions: [\\"txd\\"]
      },
      \\"application/vnd.gentics.grd+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.geo+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.geocube+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.geogebra.file\\": {
        source: \\"iana\\",
        extensions: [\\"ggb\\"]
      },
      \\"application/vnd.geogebra.slides\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.geogebra.tool\\": {
        source: \\"iana\\",
        extensions: [\\"ggt\\"]
      },
      \\"application/vnd.geometry-explorer\\": {
        source: \\"iana\\",
        extensions: [\\"gex\\", \\"gre\\"]
      },
      \\"application/vnd.geonext\\": {
        source: \\"iana\\",
        extensions: [\\"gxt\\"]
      },
      \\"application/vnd.geoplan\\": {
        source: \\"iana\\",
        extensions: [\\"g2w\\"]
      },
      \\"application/vnd.geospace\\": {
        source: \\"iana\\",
        extensions: [\\"g3w\\"]
      },
      \\"application/vnd.gerber\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.globalplatform.card-content-mgt\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.globalplatform.card-content-mgt-response\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.gmx\\": {
        source: \\"iana\\",
        extensions: [\\"gmx\\"]
      },
      \\"application/vnd.google-apps.document\\": {
        compressible: false,
        extensions: [\\"gdoc\\"]
      },
      \\"application/vnd.google-apps.presentation\\": {
        compressible: false,
        extensions: [\\"gslides\\"]
      },
      \\"application/vnd.google-apps.spreadsheet\\": {
        compressible: false,
        extensions: [\\"gsheet\\"]
      },
      \\"application/vnd.google-earth.kml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"kml\\"]
      },
      \\"application/vnd.google-earth.kmz\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"kmz\\"]
      },
      \\"application/vnd.gov.sk.e-form+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.gov.sk.e-form+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/vnd.gov.sk.xmldatacontainer+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.grafeq\\": {
        source: \\"iana\\",
        extensions: [\\"gqf\\", \\"gqs\\"]
      },
      \\"application/vnd.gridmp\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.groove-account\\": {
        source: \\"iana\\",
        extensions: [\\"gac\\"]
      },
      \\"application/vnd.groove-help\\": {
        source: \\"iana\\",
        extensions: [\\"ghf\\"]
      },
      \\"application/vnd.groove-identity-message\\": {
        source: \\"iana\\",
        extensions: [\\"gim\\"]
      },
      \\"application/vnd.groove-injector\\": {
        source: \\"iana\\",
        extensions: [\\"grv\\"]
      },
      \\"application/vnd.groove-tool-message\\": {
        source: \\"iana\\",
        extensions: [\\"gtm\\"]
      },
      \\"application/vnd.groove-tool-template\\": {
        source: \\"iana\\",
        extensions: [\\"tpl\\"]
      },
      \\"application/vnd.groove-vcard\\": {
        source: \\"iana\\",
        extensions: [\\"vcg\\"]
      },
      \\"application/vnd.hal+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.hal+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"hal\\"]
      },
      \\"application/vnd.handheld-entertainment+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"zmm\\"]
      },
      \\"application/vnd.hbci\\": {
        source: \\"iana\\",
        extensions: [\\"hbci\\"]
      },
      \\"application/vnd.hc+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.hcl-bireports\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.hdt\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.heroku+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.hhe.lesson-player\\": {
        source: \\"iana\\",
        extensions: [\\"les\\"]
      },
      \\"application/vnd.hl7cda+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/vnd.hl7v2+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/vnd.hp-hpgl\\": {
        source: \\"iana\\",
        extensions: [\\"hpgl\\"]
      },
      \\"application/vnd.hp-hpid\\": {
        source: \\"iana\\",
        extensions: [\\"hpid\\"]
      },
      \\"application/vnd.hp-hps\\": {
        source: \\"iana\\",
        extensions: [\\"hps\\"]
      },
      \\"application/vnd.hp-jlyt\\": {
        source: \\"iana\\",
        extensions: [\\"jlt\\"]
      },
      \\"application/vnd.hp-pcl\\": {
        source: \\"iana\\",
        extensions: [\\"pcl\\"]
      },
      \\"application/vnd.hp-pclxl\\": {
        source: \\"iana\\",
        extensions: [\\"pclxl\\"]
      },
      \\"application/vnd.httphone\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.hydrostatix.sof-data\\": {
        source: \\"iana\\",
        extensions: [\\"sfd-hdstx\\"]
      },
      \\"application/vnd.hyper+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.hyper-item+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.hyperdrive+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.hzn-3d-crossword\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ibm.afplinedata\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ibm.electronic-media\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ibm.minipay\\": {
        source: \\"iana\\",
        extensions: [\\"mpy\\"]
      },
      \\"application/vnd.ibm.modcap\\": {
        source: \\"iana\\",
        extensions: [\\"afp\\", \\"listafp\\", \\"list3820\\"]
      },
      \\"application/vnd.ibm.rights-management\\": {
        source: \\"iana\\",
        extensions: [\\"irm\\"]
      },
      \\"application/vnd.ibm.secure-container\\": {
        source: \\"iana\\",
        extensions: [\\"sc\\"]
      },
      \\"application/vnd.iccprofile\\": {
        source: \\"iana\\",
        extensions: [\\"icc\\", \\"icm\\"]
      },
      \\"application/vnd.ieee.1905\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.igloader\\": {
        source: \\"iana\\",
        extensions: [\\"igl\\"]
      },
      \\"application/vnd.imagemeter.folder+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/vnd.imagemeter.image+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/vnd.immervision-ivp\\": {
        source: \\"iana\\",
        extensions: [\\"ivp\\"]
      },
      \\"application/vnd.immervision-ivu\\": {
        source: \\"iana\\",
        extensions: [\\"ivu\\"]
      },
      \\"application/vnd.ims.imsccv1p1\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ims.imsccv1p2\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ims.imsccv1p3\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ims.lis.v2.result+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.ims.lti.v2.toolconsumerprofile+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.ims.lti.v2.toolproxy+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.ims.lti.v2.toolproxy.id+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.ims.lti.v2.toolsettings+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.ims.lti.v2.toolsettings.simple+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.informedcontrol.rms+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.informix-visionary\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.infotech.project\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.infotech.project+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.innopath.wamp.notification\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.insors.igm\\": {
        source: \\"iana\\",
        extensions: [\\"igm\\"]
      },
      \\"application/vnd.intercon.formnet\\": {
        source: \\"iana\\",
        extensions: [\\"xpw\\", \\"xpx\\"]
      },
      \\"application/vnd.intergeo\\": {
        source: \\"iana\\",
        extensions: [\\"i2g\\"]
      },
      \\"application/vnd.intertrust.digibox\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.intertrust.nncp\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.intu.qbo\\": {
        source: \\"iana\\",
        extensions: [\\"qbo\\"]
      },
      \\"application/vnd.intu.qfx\\": {
        source: \\"iana\\",
        extensions: [\\"qfx\\"]
      },
      \\"application/vnd.iptc.g2.catalogitem+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.iptc.g2.conceptitem+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.iptc.g2.knowledgeitem+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.iptc.g2.newsitem+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.iptc.g2.newsmessage+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.iptc.g2.packageitem+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.iptc.g2.planningitem+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.ipunplugged.rcprofile\\": {
        source: \\"iana\\",
        extensions: [\\"rcprofile\\"]
      },
      \\"application/vnd.irepository.package+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"irp\\"]
      },
      \\"application/vnd.is-xpr\\": {
        source: \\"iana\\",
        extensions: [\\"xpr\\"]
      },
      \\"application/vnd.isac.fcs\\": {
        source: \\"iana\\",
        extensions: [\\"fcs\\"]
      },
      \\"application/vnd.iso11783-10+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/vnd.jam\\": {
        source: \\"iana\\",
        extensions: [\\"jam\\"]
      },
      \\"application/vnd.japannet-directory-service\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.japannet-jpnstore-wakeup\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.japannet-payment-wakeup\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.japannet-registration\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.japannet-registration-wakeup\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.japannet-setstore-wakeup\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.japannet-verification\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.japannet-verification-wakeup\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.jcp.javame.midlet-rms\\": {
        source: \\"iana\\",
        extensions: [\\"rms\\"]
      },
      \\"application/vnd.jisp\\": {
        source: \\"iana\\",
        extensions: [\\"jisp\\"]
      },
      \\"application/vnd.joost.joda-archive\\": {
        source: \\"iana\\",
        extensions: [\\"joda\\"]
      },
      \\"application/vnd.jsk.isdn-ngn\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.kahootz\\": {
        source: \\"iana\\",
        extensions: [\\"ktz\\", \\"ktr\\"]
      },
      \\"application/vnd.kde.karbon\\": {
        source: \\"iana\\",
        extensions: [\\"karbon\\"]
      },
      \\"application/vnd.kde.kchart\\": {
        source: \\"iana\\",
        extensions: [\\"chrt\\"]
      },
      \\"application/vnd.kde.kformula\\": {
        source: \\"iana\\",
        extensions: [\\"kfo\\"]
      },
      \\"application/vnd.kde.kivio\\": {
        source: \\"iana\\",
        extensions: [\\"flw\\"]
      },
      \\"application/vnd.kde.kontour\\": {
        source: \\"iana\\",
        extensions: [\\"kon\\"]
      },
      \\"application/vnd.kde.kpresenter\\": {
        source: \\"iana\\",
        extensions: [\\"kpr\\", \\"kpt\\"]
      },
      \\"application/vnd.kde.kspread\\": {
        source: \\"iana\\",
        extensions: [\\"ksp\\"]
      },
      \\"application/vnd.kde.kword\\": {
        source: \\"iana\\",
        extensions: [\\"kwd\\", \\"kwt\\"]
      },
      \\"application/vnd.kenameaapp\\": {
        source: \\"iana\\",
        extensions: [\\"htke\\"]
      },
      \\"application/vnd.kidspiration\\": {
        source: \\"iana\\",
        extensions: [\\"kia\\"]
      },
      \\"application/vnd.kinar\\": {
        source: \\"iana\\",
        extensions: [\\"kne\\", \\"knp\\"]
      },
      \\"application/vnd.koan\\": {
        source: \\"iana\\",
        extensions: [\\"skp\\", \\"skd\\", \\"skt\\", \\"skm\\"]
      },
      \\"application/vnd.kodak-descriptor\\": {
        source: \\"iana\\",
        extensions: [\\"sse\\"]
      },
      \\"application/vnd.las\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.las.las+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.las.las+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"lasxml\\"]
      },
      \\"application/vnd.laszip\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.leap+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.liberty-request+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.llamagraphics.life-balance.desktop\\": {
        source: \\"iana\\",
        extensions: [\\"lbd\\"]
      },
      \\"application/vnd.llamagraphics.life-balance.exchange+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"lbe\\"]
      },
      \\"application/vnd.logipipe.circuit+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/vnd.loom\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.lotus-1-2-3\\": {
        source: \\"iana\\",
        extensions: [\\"123\\"]
      },
      \\"application/vnd.lotus-approach\\": {
        source: \\"iana\\",
        extensions: [\\"apr\\"]
      },
      \\"application/vnd.lotus-freelance\\": {
        source: \\"iana\\",
        extensions: [\\"pre\\"]
      },
      \\"application/vnd.lotus-notes\\": {
        source: \\"iana\\",
        extensions: [\\"nsf\\"]
      },
      \\"application/vnd.lotus-organizer\\": {
        source: \\"iana\\",
        extensions: [\\"org\\"]
      },
      \\"application/vnd.lotus-screencam\\": {
        source: \\"iana\\",
        extensions: [\\"scm\\"]
      },
      \\"application/vnd.lotus-wordpro\\": {
        source: \\"iana\\",
        extensions: [\\"lwp\\"]
      },
      \\"application/vnd.macports.portpkg\\": {
        source: \\"iana\\",
        extensions: [\\"portpkg\\"]
      },
      \\"application/vnd.mapbox-vector-tile\\": {
        source: \\"iana\\",
        extensions: [\\"mvt\\"]
      },
      \\"application/vnd.marlin.drm.actiontoken+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.marlin.drm.conftoken+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.marlin.drm.license+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.marlin.drm.mdcf\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.mason+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.maxar.archive.3tz+zip\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"application/vnd.maxmind.maxmind-db\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.mcd\\": {
        source: \\"iana\\",
        extensions: [\\"mcd\\"]
      },
      \\"application/vnd.medcalcdata\\": {
        source: \\"iana\\",
        extensions: [\\"mc1\\"]
      },
      \\"application/vnd.mediastation.cdkey\\": {
        source: \\"iana\\",
        extensions: [\\"cdkey\\"]
      },
      \\"application/vnd.meridian-slingshot\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.mfer\\": {
        source: \\"iana\\",
        extensions: [\\"mwf\\"]
      },
      \\"application/vnd.mfmp\\": {
        source: \\"iana\\",
        extensions: [\\"mfm\\"]
      },
      \\"application/vnd.micro+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.micrografx.flo\\": {
        source: \\"iana\\",
        extensions: [\\"flo\\"]
      },
      \\"application/vnd.micrografx.igx\\": {
        source: \\"iana\\",
        extensions: [\\"igx\\"]
      },
      \\"application/vnd.microsoft.portable-executable\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.microsoft.windows.thumbnail-cache\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.miele+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.mif\\": {
        source: \\"iana\\",
        extensions: [\\"mif\\"]
      },
      \\"application/vnd.minisoft-hp3000-save\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.mitsubishi.misty-guard.trustweb\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.mobius.daf\\": {
        source: \\"iana\\",
        extensions: [\\"daf\\"]
      },
      \\"application/vnd.mobius.dis\\": {
        source: \\"iana\\",
        extensions: [\\"dis\\"]
      },
      \\"application/vnd.mobius.mbk\\": {
        source: \\"iana\\",
        extensions: [\\"mbk\\"]
      },
      \\"application/vnd.mobius.mqy\\": {
        source: \\"iana\\",
        extensions: [\\"mqy\\"]
      },
      \\"application/vnd.mobius.msl\\": {
        source: \\"iana\\",
        extensions: [\\"msl\\"]
      },
      \\"application/vnd.mobius.plc\\": {
        source: \\"iana\\",
        extensions: [\\"plc\\"]
      },
      \\"application/vnd.mobius.txf\\": {
        source: \\"iana\\",
        extensions: [\\"txf\\"]
      },
      \\"application/vnd.mophun.application\\": {
        source: \\"iana\\",
        extensions: [\\"mpn\\"]
      },
      \\"application/vnd.mophun.certificate\\": {
        source: \\"iana\\",
        extensions: [\\"mpc\\"]
      },
      \\"application/vnd.motorola.flexsuite\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.motorola.flexsuite.adsi\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.motorola.flexsuite.fis\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.motorola.flexsuite.gotap\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.motorola.flexsuite.kmr\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.motorola.flexsuite.ttc\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.motorola.flexsuite.wem\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.motorola.iprm\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.mozilla.xul+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xul\\"]
      },
      \\"application/vnd.ms-3mfdocument\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ms-artgalry\\": {
        source: \\"iana\\",
        extensions: [\\"cil\\"]
      },
      \\"application/vnd.ms-asf\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ms-cab-compressed\\": {
        source: \\"iana\\",
        extensions: [\\"cab\\"]
      },
      \\"application/vnd.ms-color.iccprofile\\": {
        source: \\"apache\\"
      },
      \\"application/vnd.ms-excel\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"xls\\", \\"xlm\\", \\"xla\\", \\"xlc\\", \\"xlt\\", \\"xlw\\"]
      },
      \\"application/vnd.ms-excel.addin.macroenabled.12\\": {
        source: \\"iana\\",
        extensions: [\\"xlam\\"]
      },
      \\"application/vnd.ms-excel.sheet.binary.macroenabled.12\\": {
        source: \\"iana\\",
        extensions: [\\"xlsb\\"]
      },
      \\"application/vnd.ms-excel.sheet.macroenabled.12\\": {
        source: \\"iana\\",
        extensions: [\\"xlsm\\"]
      },
      \\"application/vnd.ms-excel.template.macroenabled.12\\": {
        source: \\"iana\\",
        extensions: [\\"xltm\\"]
      },
      \\"application/vnd.ms-fontobject\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"eot\\"]
      },
      \\"application/vnd.ms-htmlhelp\\": {
        source: \\"iana\\",
        extensions: [\\"chm\\"]
      },
      \\"application/vnd.ms-ims\\": {
        source: \\"iana\\",
        extensions: [\\"ims\\"]
      },
      \\"application/vnd.ms-lrm\\": {
        source: \\"iana\\",
        extensions: [\\"lrm\\"]
      },
      \\"application/vnd.ms-office.activex+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.ms-officetheme\\": {
        source: \\"iana\\",
        extensions: [\\"thmx\\"]
      },
      \\"application/vnd.ms-opentype\\": {
        source: \\"apache\\",
        compressible: true
      },
      \\"application/vnd.ms-outlook\\": {
        compressible: false,
        extensions: [\\"msg\\"]
      },
      \\"application/vnd.ms-package.obfuscated-opentype\\": {
        source: \\"apache\\"
      },
      \\"application/vnd.ms-pki.seccat\\": {
        source: \\"apache\\",
        extensions: [\\"cat\\"]
      },
      \\"application/vnd.ms-pki.stl\\": {
        source: \\"apache\\",
        extensions: [\\"stl\\"]
      },
      \\"application/vnd.ms-playready.initiator+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.ms-powerpoint\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"ppt\\", \\"pps\\", \\"pot\\"]
      },
      \\"application/vnd.ms-powerpoint.addin.macroenabled.12\\": {
        source: \\"iana\\",
        extensions: [\\"ppam\\"]
      },
      \\"application/vnd.ms-powerpoint.presentation.macroenabled.12\\": {
        source: \\"iana\\",
        extensions: [\\"pptm\\"]
      },
      \\"application/vnd.ms-powerpoint.slide.macroenabled.12\\": {
        source: \\"iana\\",
        extensions: [\\"sldm\\"]
      },
      \\"application/vnd.ms-powerpoint.slideshow.macroenabled.12\\": {
        source: \\"iana\\",
        extensions: [\\"ppsm\\"]
      },
      \\"application/vnd.ms-powerpoint.template.macroenabled.12\\": {
        source: \\"iana\\",
        extensions: [\\"potm\\"]
      },
      \\"application/vnd.ms-printdevicecapabilities+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.ms-printing.printticket+xml\\": {
        source: \\"apache\\",
        compressible: true
      },
      \\"application/vnd.ms-printschematicket+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.ms-project\\": {
        source: \\"iana\\",
        extensions: [\\"mpp\\", \\"mpt\\"]
      },
      \\"application/vnd.ms-tnef\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ms-windows.devicepairing\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ms-windows.nwprinting.oob\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ms-windows.printerpairing\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ms-windows.wsd.oob\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ms-wmdrm.lic-chlg-req\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ms-wmdrm.lic-resp\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ms-wmdrm.meter-chlg-req\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ms-wmdrm.meter-resp\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ms-word.document.macroenabled.12\\": {
        source: \\"iana\\",
        extensions: [\\"docm\\"]
      },
      \\"application/vnd.ms-word.template.macroenabled.12\\": {
        source: \\"iana\\",
        extensions: [\\"dotm\\"]
      },
      \\"application/vnd.ms-works\\": {
        source: \\"iana\\",
        extensions: [\\"wps\\", \\"wks\\", \\"wcm\\", \\"wdb\\"]
      },
      \\"application/vnd.ms-wpl\\": {
        source: \\"iana\\",
        extensions: [\\"wpl\\"]
      },
      \\"application/vnd.ms-xpsdocument\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"xps\\"]
      },
      \\"application/vnd.msa-disk-image\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.mseq\\": {
        source: \\"iana\\",
        extensions: [\\"mseq\\"]
      },
      \\"application/vnd.msign\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.multiad.creator\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.multiad.creator.cif\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.music-niff\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.musician\\": {
        source: \\"iana\\",
        extensions: [\\"mus\\"]
      },
      \\"application/vnd.muvee.style\\": {
        source: \\"iana\\",
        extensions: [\\"msty\\"]
      },
      \\"application/vnd.mynfc\\": {
        source: \\"iana\\",
        extensions: [\\"taglet\\"]
      },
      \\"application/vnd.nacamar.ybrid+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.ncd.control\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ncd.reference\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.nearst.inv+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.nebumind.line\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.nervana\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.netfpx\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.neurolanguage.nlu\\": {
        source: \\"iana\\",
        extensions: [\\"nlu\\"]
      },
      \\"application/vnd.nimn\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.nintendo.nitro.rom\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.nintendo.snes.rom\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.nitf\\": {
        source: \\"iana\\",
        extensions: [\\"ntf\\", \\"nitf\\"]
      },
      \\"application/vnd.noblenet-directory\\": {
        source: \\"iana\\",
        extensions: [\\"nnd\\"]
      },
      \\"application/vnd.noblenet-sealer\\": {
        source: \\"iana\\",
        extensions: [\\"nns\\"]
      },
      \\"application/vnd.noblenet-web\\": {
        source: \\"iana\\",
        extensions: [\\"nnw\\"]
      },
      \\"application/vnd.nokia.catalogs\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.nokia.conml+wbxml\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.nokia.conml+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.nokia.iptv.config+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.nokia.isds-radio-presets\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.nokia.landmark+wbxml\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.nokia.landmark+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.nokia.landmarkcollection+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.nokia.n-gage.ac+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"ac\\"]
      },
      \\"application/vnd.nokia.n-gage.data\\": {
        source: \\"iana\\",
        extensions: [\\"ngdat\\"]
      },
      \\"application/vnd.nokia.n-gage.symbian.install\\": {
        source: \\"iana\\",
        extensions: [\\"n-gage\\"]
      },
      \\"application/vnd.nokia.ncd\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.nokia.pcd+wbxml\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.nokia.pcd+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.nokia.radio-preset\\": {
        source: \\"iana\\",
        extensions: [\\"rpst\\"]
      },
      \\"application/vnd.nokia.radio-presets\\": {
        source: \\"iana\\",
        extensions: [\\"rpss\\"]
      },
      \\"application/vnd.novadigm.edm\\": {
        source: \\"iana\\",
        extensions: [\\"edm\\"]
      },
      \\"application/vnd.novadigm.edx\\": {
        source: \\"iana\\",
        extensions: [\\"edx\\"]
      },
      \\"application/vnd.novadigm.ext\\": {
        source: \\"iana\\",
        extensions: [\\"ext\\"]
      },
      \\"application/vnd.ntt-local.content-share\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ntt-local.file-transfer\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ntt-local.ogw_remote-access\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ntt-local.sip-ta_remote\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ntt-local.sip-ta_tcp_stream\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oasis.opendocument.chart\\": {
        source: \\"iana\\",
        extensions: [\\"odc\\"]
      },
      \\"application/vnd.oasis.opendocument.chart-template\\": {
        source: \\"iana\\",
        extensions: [\\"otc\\"]
      },
      \\"application/vnd.oasis.opendocument.database\\": {
        source: \\"iana\\",
        extensions: [\\"odb\\"]
      },
      \\"application/vnd.oasis.opendocument.formula\\": {
        source: \\"iana\\",
        extensions: [\\"odf\\"]
      },
      \\"application/vnd.oasis.opendocument.formula-template\\": {
        source: \\"iana\\",
        extensions: [\\"odft\\"]
      },
      \\"application/vnd.oasis.opendocument.graphics\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"odg\\"]
      },
      \\"application/vnd.oasis.opendocument.graphics-template\\": {
        source: \\"iana\\",
        extensions: [\\"otg\\"]
      },
      \\"application/vnd.oasis.opendocument.image\\": {
        source: \\"iana\\",
        extensions: [\\"odi\\"]
      },
      \\"application/vnd.oasis.opendocument.image-template\\": {
        source: \\"iana\\",
        extensions: [\\"oti\\"]
      },
      \\"application/vnd.oasis.opendocument.presentation\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"odp\\"]
      },
      \\"application/vnd.oasis.opendocument.presentation-template\\": {
        source: \\"iana\\",
        extensions: [\\"otp\\"]
      },
      \\"application/vnd.oasis.opendocument.spreadsheet\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"ods\\"]
      },
      \\"application/vnd.oasis.opendocument.spreadsheet-template\\": {
        source: \\"iana\\",
        extensions: [\\"ots\\"]
      },
      \\"application/vnd.oasis.opendocument.text\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"odt\\"]
      },
      \\"application/vnd.oasis.opendocument.text-master\\": {
        source: \\"iana\\",
        extensions: [\\"odm\\"]
      },
      \\"application/vnd.oasis.opendocument.text-template\\": {
        source: \\"iana\\",
        extensions: [\\"ott\\"]
      },
      \\"application/vnd.oasis.opendocument.text-web\\": {
        source: \\"iana\\",
        extensions: [\\"oth\\"]
      },
      \\"application/vnd.obn\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ocf+cbor\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oci.image.manifest.v1+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oftn.l10n+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oipf.contentaccessdownload+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oipf.contentaccessstreaming+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oipf.cspg-hexbinary\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oipf.dae.svg+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oipf.dae.xhtml+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oipf.mippvcontrolmessage+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oipf.pae.gem\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oipf.spdiscovery+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oipf.spdlist+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oipf.ueprofile+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oipf.userprofile+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.olpc-sugar\\": {
        source: \\"iana\\",
        extensions: [\\"xo\\"]
      },
      \\"application/vnd.oma-scws-config\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oma-scws-http-request\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oma-scws-http-response\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oma.bcast.associated-procedure-parameter+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.bcast.drm-trigger+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.bcast.imd+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.bcast.ltkm\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oma.bcast.notification+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.bcast.provisioningtrigger\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oma.bcast.sgboot\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oma.bcast.sgdd+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.bcast.sgdu\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oma.bcast.simple-symbol-container\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oma.bcast.smartcard-trigger+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.bcast.sprov+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.bcast.stkm\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oma.cab-address-book+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.cab-feature-handler+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.cab-pcc+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.cab-subs-invite+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.cab-user-prefs+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.dcd\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oma.dcdc\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oma.dd2+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"dd2\\"]
      },
      \\"application/vnd.oma.drm.risd+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.group-usage-list+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.lwm2m+cbor\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oma.lwm2m+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.lwm2m+tlv\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oma.pal+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.poc.detailed-progress-report+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.poc.final-report+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.poc.groups+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.poc.invocation-descriptor+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.poc.optimized-progress-report+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.push\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.oma.scidm.messages+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oma.xcap-directory+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.omads-email+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/vnd.omads-file+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/vnd.omads-folder+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/vnd.omaloc-supl-init\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.onepager\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.onepagertamp\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.onepagertamx\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.onepagertat\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.onepagertatp\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.onepagertatx\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.openblox.game+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"obgx\\"]
      },
      \\"application/vnd.openblox.game-binary\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.openeye.oeb\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.openofficeorg.extension\\": {
        source: \\"apache\\",
        extensions: [\\"oxt\\"]
      },
      \\"application/vnd.openstreetmap.data+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"osm\\"]
      },
      \\"application/vnd.opentimestamps.ots\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.openxmlformats-officedocument.custom-properties+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.customxmlproperties+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.drawing+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.drawingml.chart+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.extended-properties+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.comments+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.presentation\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"pptx\\"]
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.slide\\": {
        source: \\"iana\\",
        extensions: [\\"sldx\\"]
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.slide+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.slideshow\\": {
        source: \\"iana\\",
        extensions: [\\"ppsx\\"]
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.tags+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.template\\": {
        source: \\"iana\\",
        extensions: [\\"potx\\"]
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"xlsx\\"]
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.template\\": {
        source: \\"iana\\",
        extensions: [\\"xltx\\"]
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.theme+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.themeoverride+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.vmldrawing\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"docx\\"]
      },
      \\"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.wordprocessingml.template\\": {
        source: \\"iana\\",
        extensions: [\\"dotx\\"]
      },
      \\"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-package.core-properties+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.openxmlformats-package.relationships+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oracle.resource+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.orange.indata\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.osa.netdeploy\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.osgeo.mapguide.package\\": {
        source: \\"iana\\",
        extensions: [\\"mgp\\"]
      },
      \\"application/vnd.osgi.bundle\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.osgi.dp\\": {
        source: \\"iana\\",
        extensions: [\\"dp\\"]
      },
      \\"application/vnd.osgi.subsystem\\": {
        source: \\"iana\\",
        extensions: [\\"esa\\"]
      },
      \\"application/vnd.otps.ct-kip+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.oxli.countgraph\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.pagerduty+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.palm\\": {
        source: \\"iana\\",
        extensions: [\\"pdb\\", \\"pqa\\", \\"oprc\\"]
      },
      \\"application/vnd.panoply\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.paos.xml\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.patentdive\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.patientecommsdoc\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.pawaafile\\": {
        source: \\"iana\\",
        extensions: [\\"paw\\"]
      },
      \\"application/vnd.pcos\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.pg.format\\": {
        source: \\"iana\\",
        extensions: [\\"str\\"]
      },
      \\"application/vnd.pg.osasli\\": {
        source: \\"iana\\",
        extensions: [\\"ei6\\"]
      },
      \\"application/vnd.piaccess.application-licence\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.picsel\\": {
        source: \\"iana\\",
        extensions: [\\"efif\\"]
      },
      \\"application/vnd.pmi.widget\\": {
        source: \\"iana\\",
        extensions: [\\"wg\\"]
      },
      \\"application/vnd.poc.group-advertisement+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.pocketlearn\\": {
        source: \\"iana\\",
        extensions: [\\"plf\\"]
      },
      \\"application/vnd.powerbuilder6\\": {
        source: \\"iana\\",
        extensions: [\\"pbd\\"]
      },
      \\"application/vnd.powerbuilder6-s\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.powerbuilder7\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.powerbuilder7-s\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.powerbuilder75\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.powerbuilder75-s\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.preminet\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.previewsystems.box\\": {
        source: \\"iana\\",
        extensions: [\\"box\\"]
      },
      \\"application/vnd.proteus.magazine\\": {
        source: \\"iana\\",
        extensions: [\\"mgz\\"]
      },
      \\"application/vnd.psfs\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.publishare-delta-tree\\": {
        source: \\"iana\\",
        extensions: [\\"qps\\"]
      },
      \\"application/vnd.pvi.ptid1\\": {
        source: \\"iana\\",
        extensions: [\\"ptid\\"]
      },
      \\"application/vnd.pwg-multiplexed\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.pwg-xhtml-print+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.qualcomm.brew-app-res\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.quarantainenet\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.quark.quarkxpress\\": {
        source: \\"iana\\",
        extensions: [\\"qxd\\", \\"qxt\\", \\"qwd\\", \\"qwt\\", \\"qxl\\", \\"qxb\\"]
      },
      \\"application/vnd.quobject-quoxdocument\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.radisys.moml+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.radisys.msml+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.radisys.msml-audit+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.radisys.msml-audit-conf+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.radisys.msml-audit-conn+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.radisys.msml-audit-dialog+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.radisys.msml-audit-stream+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.radisys.msml-conf+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.radisys.msml-dialog+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.radisys.msml-dialog-base+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.radisys.msml-dialog-fax-detect+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.radisys.msml-dialog-fax-sendrecv+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.radisys.msml-dialog-group+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.radisys.msml-dialog-speech+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.radisys.msml-dialog-transform+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.rainstor.data\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.rapid\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.rar\\": {
        source: \\"iana\\",
        extensions: [\\"rar\\"]
      },
      \\"application/vnd.realvnc.bed\\": {
        source: \\"iana\\",
        extensions: [\\"bed\\"]
      },
      \\"application/vnd.recordare.musicxml\\": {
        source: \\"iana\\",
        extensions: [\\"mxl\\"]
      },
      \\"application/vnd.recordare.musicxml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"musicxml\\"]
      },
      \\"application/vnd.renlearn.rlprint\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.resilient.logic\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.restful+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.rig.cryptonote\\": {
        source: \\"iana\\",
        extensions: [\\"cryptonote\\"]
      },
      \\"application/vnd.rim.cod\\": {
        source: \\"apache\\",
        extensions: [\\"cod\\"]
      },
      \\"application/vnd.rn-realmedia\\": {
        source: \\"apache\\",
        extensions: [\\"rm\\"]
      },
      \\"application/vnd.rn-realmedia-vbr\\": {
        source: \\"apache\\",
        extensions: [\\"rmvb\\"]
      },
      \\"application/vnd.route66.link66+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"link66\\"]
      },
      \\"application/vnd.rs-274x\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ruckus.download\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.s3sms\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sailingtracker.track\\": {
        source: \\"iana\\",
        extensions: [\\"st\\"]
      },
      \\"application/vnd.sar\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sbm.cid\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sbm.mid2\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.scribus\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sealed.3df\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sealed.csf\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sealed.doc\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sealed.eml\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sealed.mht\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sealed.net\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sealed.ppt\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sealed.tiff\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sealed.xls\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sealedmedia.softseal.html\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sealedmedia.softseal.pdf\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.seemail\\": {
        source: \\"iana\\",
        extensions: [\\"see\\"]
      },
      \\"application/vnd.seis+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.sema\\": {
        source: \\"iana\\",
        extensions: [\\"sema\\"]
      },
      \\"application/vnd.semd\\": {
        source: \\"iana\\",
        extensions: [\\"semd\\"]
      },
      \\"application/vnd.semf\\": {
        source: \\"iana\\",
        extensions: [\\"semf\\"]
      },
      \\"application/vnd.shade-save-file\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.shana.informed.formdata\\": {
        source: \\"iana\\",
        extensions: [\\"ifm\\"]
      },
      \\"application/vnd.shana.informed.formtemplate\\": {
        source: \\"iana\\",
        extensions: [\\"itp\\"]
      },
      \\"application/vnd.shana.informed.interchange\\": {
        source: \\"iana\\",
        extensions: [\\"iif\\"]
      },
      \\"application/vnd.shana.informed.package\\": {
        source: \\"iana\\",
        extensions: [\\"ipk\\"]
      },
      \\"application/vnd.shootproof+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.shopkick+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.shp\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.shx\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sigrok.session\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.simtech-mindmapper\\": {
        source: \\"iana\\",
        extensions: [\\"twd\\", \\"twds\\"]
      },
      \\"application/vnd.siren+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.smaf\\": {
        source: \\"iana\\",
        extensions: [\\"mmf\\"]
      },
      \\"application/vnd.smart.notebook\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.smart.teacher\\": {
        source: \\"iana\\",
        extensions: [\\"teacher\\"]
      },
      \\"application/vnd.snesdev-page-table\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.software602.filler.form+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"fo\\"]
      },
      \\"application/vnd.software602.filler.form-xml-zip\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.solent.sdkm+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"sdkm\\", \\"sdkd\\"]
      },
      \\"application/vnd.spotfire.dxp\\": {
        source: \\"iana\\",
        extensions: [\\"dxp\\"]
      },
      \\"application/vnd.spotfire.sfs\\": {
        source: \\"iana\\",
        extensions: [\\"sfs\\"]
      },
      \\"application/vnd.sqlite3\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sss-cod\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sss-dtf\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sss-ntf\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.stardivision.calc\\": {
        source: \\"apache\\",
        extensions: [\\"sdc\\"]
      },
      \\"application/vnd.stardivision.draw\\": {
        source: \\"apache\\",
        extensions: [\\"sda\\"]
      },
      \\"application/vnd.stardivision.impress\\": {
        source: \\"apache\\",
        extensions: [\\"sdd\\"]
      },
      \\"application/vnd.stardivision.math\\": {
        source: \\"apache\\",
        extensions: [\\"smf\\"]
      },
      \\"application/vnd.stardivision.writer\\": {
        source: \\"apache\\",
        extensions: [\\"sdw\\", \\"vor\\"]
      },
      \\"application/vnd.stardivision.writer-global\\": {
        source: \\"apache\\",
        extensions: [\\"sgl\\"]
      },
      \\"application/vnd.stepmania.package\\": {
        source: \\"iana\\",
        extensions: [\\"smzip\\"]
      },
      \\"application/vnd.stepmania.stepchart\\": {
        source: \\"iana\\",
        extensions: [\\"sm\\"]
      },
      \\"application/vnd.street-stream\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sun.wadl+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"wadl\\"]
      },
      \\"application/vnd.sun.xml.calc\\": {
        source: \\"apache\\",
        extensions: [\\"sxc\\"]
      },
      \\"application/vnd.sun.xml.calc.template\\": {
        source: \\"apache\\",
        extensions: [\\"stc\\"]
      },
      \\"application/vnd.sun.xml.draw\\": {
        source: \\"apache\\",
        extensions: [\\"sxd\\"]
      },
      \\"application/vnd.sun.xml.draw.template\\": {
        source: \\"apache\\",
        extensions: [\\"std\\"]
      },
      \\"application/vnd.sun.xml.impress\\": {
        source: \\"apache\\",
        extensions: [\\"sxi\\"]
      },
      \\"application/vnd.sun.xml.impress.template\\": {
        source: \\"apache\\",
        extensions: [\\"sti\\"]
      },
      \\"application/vnd.sun.xml.math\\": {
        source: \\"apache\\",
        extensions: [\\"sxm\\"]
      },
      \\"application/vnd.sun.xml.writer\\": {
        source: \\"apache\\",
        extensions: [\\"sxw\\"]
      },
      \\"application/vnd.sun.xml.writer.global\\": {
        source: \\"apache\\",
        extensions: [\\"sxg\\"]
      },
      \\"application/vnd.sun.xml.writer.template\\": {
        source: \\"apache\\",
        extensions: [\\"stw\\"]
      },
      \\"application/vnd.sus-calendar\\": {
        source: \\"iana\\",
        extensions: [\\"sus\\", \\"susp\\"]
      },
      \\"application/vnd.svd\\": {
        source: \\"iana\\",
        extensions: [\\"svd\\"]
      },
      \\"application/vnd.swiftview-ics\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.sycle+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.syft+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.symbian.install\\": {
        source: \\"apache\\",
        extensions: [\\"sis\\", \\"sisx\\"]
      },
      \\"application/vnd.syncml+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true,
        extensions: [\\"xsm\\"]
      },
      \\"application/vnd.syncml.dm+wbxml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        extensions: [\\"bdm\\"]
      },
      \\"application/vnd.syncml.dm+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true,
        extensions: [\\"xdm\\"]
      },
      \\"application/vnd.syncml.dm.notification\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.syncml.dmddf+wbxml\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.syncml.dmddf+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true,
        extensions: [\\"ddf\\"]
      },
      \\"application/vnd.syncml.dmtnds+wbxml\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.syncml.dmtnds+xml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true
      },
      \\"application/vnd.syncml.ds.notification\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.tableschema+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.tao.intent-module-archive\\": {
        source: \\"iana\\",
        extensions: [\\"tao\\"]
      },
      \\"application/vnd.tcpdump.pcap\\": {
        source: \\"iana\\",
        extensions: [\\"pcap\\", \\"cap\\", \\"dmp\\"]
      },
      \\"application/vnd.think-cell.ppttc+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.tmd.mediaflex.api+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.tml\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.tmobile-livetv\\": {
        source: \\"iana\\",
        extensions: [\\"tmo\\"]
      },
      \\"application/vnd.tri.onesource\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.trid.tpt\\": {
        source: \\"iana\\",
        extensions: [\\"tpt\\"]
      },
      \\"application/vnd.triscape.mxs\\": {
        source: \\"iana\\",
        extensions: [\\"mxs\\"]
      },
      \\"application/vnd.trueapp\\": {
        source: \\"iana\\",
        extensions: [\\"tra\\"]
      },
      \\"application/vnd.truedoc\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ubisoft.webplayer\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ufdl\\": {
        source: \\"iana\\",
        extensions: [\\"ufd\\", \\"ufdl\\"]
      },
      \\"application/vnd.uiq.theme\\": {
        source: \\"iana\\",
        extensions: [\\"utz\\"]
      },
      \\"application/vnd.umajin\\": {
        source: \\"iana\\",
        extensions: [\\"umj\\"]
      },
      \\"application/vnd.unity\\": {
        source: \\"iana\\",
        extensions: [\\"unityweb\\"]
      },
      \\"application/vnd.uoml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"uoml\\"]
      },
      \\"application/vnd.uplanet.alert\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.uplanet.alert-wbxml\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.uplanet.bearer-choice\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.uplanet.bearer-choice-wbxml\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.uplanet.cacheop\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.uplanet.cacheop-wbxml\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.uplanet.channel\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.uplanet.channel-wbxml\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.uplanet.list\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.uplanet.list-wbxml\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.uplanet.listcmd\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.uplanet.listcmd-wbxml\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.uplanet.signal\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.uri-map\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.valve.source.material\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.vcx\\": {
        source: \\"iana\\",
        extensions: [\\"vcx\\"]
      },
      \\"application/vnd.vd-study\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.vectorworks\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.vel+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.verimatrix.vcas\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.veritone.aion+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.veryant.thin\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.ves.encrypted\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.vidsoft.vidconference\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.visio\\": {
        source: \\"iana\\",
        extensions: [\\"vsd\\", \\"vst\\", \\"vss\\", \\"vsw\\"]
      },
      \\"application/vnd.visionary\\": {
        source: \\"iana\\",
        extensions: [\\"vis\\"]
      },
      \\"application/vnd.vividence.scriptfile\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.vsf\\": {
        source: \\"iana\\",
        extensions: [\\"vsf\\"]
      },
      \\"application/vnd.wap.sic\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.wap.slc\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.wap.wbxml\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        extensions: [\\"wbxml\\"]
      },
      \\"application/vnd.wap.wmlc\\": {
        source: \\"iana\\",
        extensions: [\\"wmlc\\"]
      },
      \\"application/vnd.wap.wmlscriptc\\": {
        source: \\"iana\\",
        extensions: [\\"wmlsc\\"]
      },
      \\"application/vnd.webturbo\\": {
        source: \\"iana\\",
        extensions: [\\"wtb\\"]
      },
      \\"application/vnd.wfa.dpp\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.wfa.p2p\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.wfa.wsc\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.windows.devicepairing\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.wmc\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.wmf.bootstrap\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.wolfram.mathematica\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.wolfram.mathematica.package\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.wolfram.player\\": {
        source: \\"iana\\",
        extensions: [\\"nbp\\"]
      },
      \\"application/vnd.wordperfect\\": {
        source: \\"iana\\",
        extensions: [\\"wpd\\"]
      },
      \\"application/vnd.wqd\\": {
        source: \\"iana\\",
        extensions: [\\"wqd\\"]
      },
      \\"application/vnd.wrq-hp3000-labelled\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.wt.stf\\": {
        source: \\"iana\\",
        extensions: [\\"stf\\"]
      },
      \\"application/vnd.wv.csp+wbxml\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.wv.csp+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.wv.ssp+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.xacml+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.xara\\": {
        source: \\"iana\\",
        extensions: [\\"xar\\"]
      },
      \\"application/vnd.xfdl\\": {
        source: \\"iana\\",
        extensions: [\\"xfdl\\"]
      },
      \\"application/vnd.xfdl.webform\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.xmi+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vnd.xmpie.cpkg\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.xmpie.dpkg\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.xmpie.plan\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.xmpie.ppkg\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.xmpie.xlim\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.yamaha.hv-dic\\": {
        source: \\"iana\\",
        extensions: [\\"hvd\\"]
      },
      \\"application/vnd.yamaha.hv-script\\": {
        source: \\"iana\\",
        extensions: [\\"hvs\\"]
      },
      \\"application/vnd.yamaha.hv-voice\\": {
        source: \\"iana\\",
        extensions: [\\"hvp\\"]
      },
      \\"application/vnd.yamaha.openscoreformat\\": {
        source: \\"iana\\",
        extensions: [\\"osf\\"]
      },
      \\"application/vnd.yamaha.openscoreformat.osfpvg+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"osfpvg\\"]
      },
      \\"application/vnd.yamaha.remote-setup\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.yamaha.smaf-audio\\": {
        source: \\"iana\\",
        extensions: [\\"saf\\"]
      },
      \\"application/vnd.yamaha.smaf-phrase\\": {
        source: \\"iana\\",
        extensions: [\\"spf\\"]
      },
      \\"application/vnd.yamaha.through-ngn\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.yamaha.tunnel-udpencap\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.yaoweme\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.yellowriver-custom-menu\\": {
        source: \\"iana\\",
        extensions: [\\"cmp\\"]
      },
      \\"application/vnd.youtube.yt\\": {
        source: \\"iana\\"
      },
      \\"application/vnd.zul\\": {
        source: \\"iana\\",
        extensions: [\\"zir\\", \\"zirz\\"]
      },
      \\"application/vnd.zzazz.deck+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"zaz\\"]
      },
      \\"application/voicexml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"vxml\\"]
      },
      \\"application/voucher-cms+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/vq-rtcpxr\\": {
        source: \\"iana\\"
      },
      \\"application/wasm\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"wasm\\"]
      },
      \\"application/watcherinfo+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"wif\\"]
      },
      \\"application/webpush-options+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/whoispp-query\\": {
        source: \\"iana\\"
      },
      \\"application/whoispp-response\\": {
        source: \\"iana\\"
      },
      \\"application/widget\\": {
        source: \\"iana\\",
        extensions: [\\"wgt\\"]
      },
      \\"application/winhlp\\": {
        source: \\"apache\\",
        extensions: [\\"hlp\\"]
      },
      \\"application/wita\\": {
        source: \\"iana\\"
      },
      \\"application/wordperfect5.1\\": {
        source: \\"iana\\"
      },
      \\"application/wsdl+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"wsdl\\"]
      },
      \\"application/wspolicy+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"wspolicy\\"]
      },
      \\"application/x-7z-compressed\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"7z\\"]
      },
      \\"application/x-abiword\\": {
        source: \\"apache\\",
        extensions: [\\"abw\\"]
      },
      \\"application/x-ace-compressed\\": {
        source: \\"apache\\",
        extensions: [\\"ace\\"]
      },
      \\"application/x-amf\\": {
        source: \\"apache\\"
      },
      \\"application/x-apple-diskimage\\": {
        source: \\"apache\\",
        extensions: [\\"dmg\\"]
      },
      \\"application/x-arj\\": {
        compressible: false,
        extensions: [\\"arj\\"]
      },
      \\"application/x-authorware-bin\\": {
        source: \\"apache\\",
        extensions: [\\"aab\\", \\"x32\\", \\"u32\\", \\"vox\\"]
      },
      \\"application/x-authorware-map\\": {
        source: \\"apache\\",
        extensions: [\\"aam\\"]
      },
      \\"application/x-authorware-seg\\": {
        source: \\"apache\\",
        extensions: [\\"aas\\"]
      },
      \\"application/x-bcpio\\": {
        source: \\"apache\\",
        extensions: [\\"bcpio\\"]
      },
      \\"application/x-bdoc\\": {
        compressible: false,
        extensions: [\\"bdoc\\"]
      },
      \\"application/x-bittorrent\\": {
        source: \\"apache\\",
        extensions: [\\"torrent\\"]
      },
      \\"application/x-blorb\\": {
        source: \\"apache\\",
        extensions: [\\"blb\\", \\"blorb\\"]
      },
      \\"application/x-bzip\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"bz\\"]
      },
      \\"application/x-bzip2\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"bz2\\", \\"boz\\"]
      },
      \\"application/x-cbr\\": {
        source: \\"apache\\",
        extensions: [\\"cbr\\", \\"cba\\", \\"cbt\\", \\"cbz\\", \\"cb7\\"]
      },
      \\"application/x-cdlink\\": {
        source: \\"apache\\",
        extensions: [\\"vcd\\"]
      },
      \\"application/x-cfs-compressed\\": {
        source: \\"apache\\",
        extensions: [\\"cfs\\"]
      },
      \\"application/x-chat\\": {
        source: \\"apache\\",
        extensions: [\\"chat\\"]
      },
      \\"application/x-chess-pgn\\": {
        source: \\"apache\\",
        extensions: [\\"pgn\\"]
      },
      \\"application/x-chrome-extension\\": {
        extensions: [\\"crx\\"]
      },
      \\"application/x-cocoa\\": {
        source: \\"nginx\\",
        extensions: [\\"cco\\"]
      },
      \\"application/x-compress\\": {
        source: \\"apache\\"
      },
      \\"application/x-conference\\": {
        source: \\"apache\\",
        extensions: [\\"nsc\\"]
      },
      \\"application/x-cpio\\": {
        source: \\"apache\\",
        extensions: [\\"cpio\\"]
      },
      \\"application/x-csh\\": {
        source: \\"apache\\",
        extensions: [\\"csh\\"]
      },
      \\"application/x-deb\\": {
        compressible: false
      },
      \\"application/x-debian-package\\": {
        source: \\"apache\\",
        extensions: [\\"deb\\", \\"udeb\\"]
      },
      \\"application/x-dgc-compressed\\": {
        source: \\"apache\\",
        extensions: [\\"dgc\\"]
      },
      \\"application/x-director\\": {
        source: \\"apache\\",
        extensions: [\\"dir\\", \\"dcr\\", \\"dxr\\", \\"cst\\", \\"cct\\", \\"cxt\\", \\"w3d\\", \\"fgd\\", \\"swa\\"]
      },
      \\"application/x-doom\\": {
        source: \\"apache\\",
        extensions: [\\"wad\\"]
      },
      \\"application/x-dtbncx+xml\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"ncx\\"]
      },
      \\"application/x-dtbook+xml\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"dtb\\"]
      },
      \\"application/x-dtbresource+xml\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"res\\"]
      },
      \\"application/x-dvi\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"dvi\\"]
      },
      \\"application/x-envoy\\": {
        source: \\"apache\\",
        extensions: [\\"evy\\"]
      },
      \\"application/x-eva\\": {
        source: \\"apache\\",
        extensions: [\\"eva\\"]
      },
      \\"application/x-font-bdf\\": {
        source: \\"apache\\",
        extensions: [\\"bdf\\"]
      },
      \\"application/x-font-dos\\": {
        source: \\"apache\\"
      },
      \\"application/x-font-framemaker\\": {
        source: \\"apache\\"
      },
      \\"application/x-font-ghostscript\\": {
        source: \\"apache\\",
        extensions: [\\"gsf\\"]
      },
      \\"application/x-font-libgrx\\": {
        source: \\"apache\\"
      },
      \\"application/x-font-linux-psf\\": {
        source: \\"apache\\",
        extensions: [\\"psf\\"]
      },
      \\"application/x-font-pcf\\": {
        source: \\"apache\\",
        extensions: [\\"pcf\\"]
      },
      \\"application/x-font-snf\\": {
        source: \\"apache\\",
        extensions: [\\"snf\\"]
      },
      \\"application/x-font-speedo\\": {
        source: \\"apache\\"
      },
      \\"application/x-font-sunos-news\\": {
        source: \\"apache\\"
      },
      \\"application/x-font-type1\\": {
        source: \\"apache\\",
        extensions: [\\"pfa\\", \\"pfb\\", \\"pfm\\", \\"afm\\"]
      },
      \\"application/x-font-vfont\\": {
        source: \\"apache\\"
      },
      \\"application/x-freearc\\": {
        source: \\"apache\\",
        extensions: [\\"arc\\"]
      },
      \\"application/x-futuresplash\\": {
        source: \\"apache\\",
        extensions: [\\"spl\\"]
      },
      \\"application/x-gca-compressed\\": {
        source: \\"apache\\",
        extensions: [\\"gca\\"]
      },
      \\"application/x-glulx\\": {
        source: \\"apache\\",
        extensions: [\\"ulx\\"]
      },
      \\"application/x-gnumeric\\": {
        source: \\"apache\\",
        extensions: [\\"gnumeric\\"]
      },
      \\"application/x-gramps-xml\\": {
        source: \\"apache\\",
        extensions: [\\"gramps\\"]
      },
      \\"application/x-gtar\\": {
        source: \\"apache\\",
        extensions: [\\"gtar\\"]
      },
      \\"application/x-gzip\\": {
        source: \\"apache\\"
      },
      \\"application/x-hdf\\": {
        source: \\"apache\\",
        extensions: [\\"hdf\\"]
      },
      \\"application/x-httpd-php\\": {
        compressible: true,
        extensions: [\\"php\\"]
      },
      \\"application/x-install-instructions\\": {
        source: \\"apache\\",
        extensions: [\\"install\\"]
      },
      \\"application/x-iso9660-image\\": {
        source: \\"apache\\",
        extensions: [\\"iso\\"]
      },
      \\"application/x-iwork-keynote-sffkey\\": {
        extensions: [\\"key\\"]
      },
      \\"application/x-iwork-numbers-sffnumbers\\": {
        extensions: [\\"numbers\\"]
      },
      \\"application/x-iwork-pages-sffpages\\": {
        extensions: [\\"pages\\"]
      },
      \\"application/x-java-archive-diff\\": {
        source: \\"nginx\\",
        extensions: [\\"jardiff\\"]
      },
      \\"application/x-java-jnlp-file\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"jnlp\\"]
      },
      \\"application/x-javascript\\": {
        compressible: true
      },
      \\"application/x-keepass2\\": {
        extensions: [\\"kdbx\\"]
      },
      \\"application/x-latex\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"latex\\"]
      },
      \\"application/x-lua-bytecode\\": {
        extensions: [\\"luac\\"]
      },
      \\"application/x-lzh-compressed\\": {
        source: \\"apache\\",
        extensions: [\\"lzh\\", \\"lha\\"]
      },
      \\"application/x-makeself\\": {
        source: \\"nginx\\",
        extensions: [\\"run\\"]
      },
      \\"application/x-mie\\": {
        source: \\"apache\\",
        extensions: [\\"mie\\"]
      },
      \\"application/x-mobipocket-ebook\\": {
        source: \\"apache\\",
        extensions: [\\"prc\\", \\"mobi\\"]
      },
      \\"application/x-mpegurl\\": {
        compressible: false
      },
      \\"application/x-ms-application\\": {
        source: \\"apache\\",
        extensions: [\\"application\\"]
      },
      \\"application/x-ms-shortcut\\": {
        source: \\"apache\\",
        extensions: [\\"lnk\\"]
      },
      \\"application/x-ms-wmd\\": {
        source: \\"apache\\",
        extensions: [\\"wmd\\"]
      },
      \\"application/x-ms-wmz\\": {
        source: \\"apache\\",
        extensions: [\\"wmz\\"]
      },
      \\"application/x-ms-xbap\\": {
        source: \\"apache\\",
        extensions: [\\"xbap\\"]
      },
      \\"application/x-msaccess\\": {
        source: \\"apache\\",
        extensions: [\\"mdb\\"]
      },
      \\"application/x-msbinder\\": {
        source: \\"apache\\",
        extensions: [\\"obd\\"]
      },
      \\"application/x-mscardfile\\": {
        source: \\"apache\\",
        extensions: [\\"crd\\"]
      },
      \\"application/x-msclip\\": {
        source: \\"apache\\",
        extensions: [\\"clp\\"]
      },
      \\"application/x-msdos-program\\": {
        extensions: [\\"exe\\"]
      },
      \\"application/x-msdownload\\": {
        source: \\"apache\\",
        extensions: [\\"exe\\", \\"dll\\", \\"com\\", \\"bat\\", \\"msi\\"]
      },
      \\"application/x-msmediaview\\": {
        source: \\"apache\\",
        extensions: [\\"mvb\\", \\"m13\\", \\"m14\\"]
      },
      \\"application/x-msmetafile\\": {
        source: \\"apache\\",
        extensions: [\\"wmf\\", \\"wmz\\", \\"emf\\", \\"emz\\"]
      },
      \\"application/x-msmoney\\": {
        source: \\"apache\\",
        extensions: [\\"mny\\"]
      },
      \\"application/x-mspublisher\\": {
        source: \\"apache\\",
        extensions: [\\"pub\\"]
      },
      \\"application/x-msschedule\\": {
        source: \\"apache\\",
        extensions: [\\"scd\\"]
      },
      \\"application/x-msterminal\\": {
        source: \\"apache\\",
        extensions: [\\"trm\\"]
      },
      \\"application/x-mswrite\\": {
        source: \\"apache\\",
        extensions: [\\"wri\\"]
      },
      \\"application/x-netcdf\\": {
        source: \\"apache\\",
        extensions: [\\"nc\\", \\"cdf\\"]
      },
      \\"application/x-ns-proxy-autoconfig\\": {
        compressible: true,
        extensions: [\\"pac\\"]
      },
      \\"application/x-nzb\\": {
        source: \\"apache\\",
        extensions: [\\"nzb\\"]
      },
      \\"application/x-perl\\": {
        source: \\"nginx\\",
        extensions: [\\"pl\\", \\"pm\\"]
      },
      \\"application/x-pilot\\": {
        source: \\"nginx\\",
        extensions: [\\"prc\\", \\"pdb\\"]
      },
      \\"application/x-pkcs12\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"p12\\", \\"pfx\\"]
      },
      \\"application/x-pkcs7-certificates\\": {
        source: \\"apache\\",
        extensions: [\\"p7b\\", \\"spc\\"]
      },
      \\"application/x-pkcs7-certreqresp\\": {
        source: \\"apache\\",
        extensions: [\\"p7r\\"]
      },
      \\"application/x-pki-message\\": {
        source: \\"iana\\"
      },
      \\"application/x-rar-compressed\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"rar\\"]
      },
      \\"application/x-redhat-package-manager\\": {
        source: \\"nginx\\",
        extensions: [\\"rpm\\"]
      },
      \\"application/x-research-info-systems\\": {
        source: \\"apache\\",
        extensions: [\\"ris\\"]
      },
      \\"application/x-sea\\": {
        source: \\"nginx\\",
        extensions: [\\"sea\\"]
      },
      \\"application/x-sh\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"sh\\"]
      },
      \\"application/x-shar\\": {
        source: \\"apache\\",
        extensions: [\\"shar\\"]
      },
      \\"application/x-shockwave-flash\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"swf\\"]
      },
      \\"application/x-silverlight-app\\": {
        source: \\"apache\\",
        extensions: [\\"xap\\"]
      },
      \\"application/x-sql\\": {
        source: \\"apache\\",
        extensions: [\\"sql\\"]
      },
      \\"application/x-stuffit\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"sit\\"]
      },
      \\"application/x-stuffitx\\": {
        source: \\"apache\\",
        extensions: [\\"sitx\\"]
      },
      \\"application/x-subrip\\": {
        source: \\"apache\\",
        extensions: [\\"srt\\"]
      },
      \\"application/x-sv4cpio\\": {
        source: \\"apache\\",
        extensions: [\\"sv4cpio\\"]
      },
      \\"application/x-sv4crc\\": {
        source: \\"apache\\",
        extensions: [\\"sv4crc\\"]
      },
      \\"application/x-t3vm-image\\": {
        source: \\"apache\\",
        extensions: [\\"t3\\"]
      },
      \\"application/x-tads\\": {
        source: \\"apache\\",
        extensions: [\\"gam\\"]
      },
      \\"application/x-tar\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"tar\\"]
      },
      \\"application/x-tcl\\": {
        source: \\"apache\\",
        extensions: [\\"tcl\\", \\"tk\\"]
      },
      \\"application/x-tex\\": {
        source: \\"apache\\",
        extensions: [\\"tex\\"]
      },
      \\"application/x-tex-tfm\\": {
        source: \\"apache\\",
        extensions: [\\"tfm\\"]
      },
      \\"application/x-texinfo\\": {
        source: \\"apache\\",
        extensions: [\\"texinfo\\", \\"texi\\"]
      },
      \\"application/x-tgif\\": {
        source: \\"apache\\",
        extensions: [\\"obj\\"]
      },
      \\"application/x-ustar\\": {
        source: \\"apache\\",
        extensions: [\\"ustar\\"]
      },
      \\"application/x-virtualbox-hdd\\": {
        compressible: true,
        extensions: [\\"hdd\\"]
      },
      \\"application/x-virtualbox-ova\\": {
        compressible: true,
        extensions: [\\"ova\\"]
      },
      \\"application/x-virtualbox-ovf\\": {
        compressible: true,
        extensions: [\\"ovf\\"]
      },
      \\"application/x-virtualbox-vbox\\": {
        compressible: true,
        extensions: [\\"vbox\\"]
      },
      \\"application/x-virtualbox-vbox-extpack\\": {
        compressible: false,
        extensions: [\\"vbox-extpack\\"]
      },
      \\"application/x-virtualbox-vdi\\": {
        compressible: true,
        extensions: [\\"vdi\\"]
      },
      \\"application/x-virtualbox-vhd\\": {
        compressible: true,
        extensions: [\\"vhd\\"]
      },
      \\"application/x-virtualbox-vmdk\\": {
        compressible: true,
        extensions: [\\"vmdk\\"]
      },
      \\"application/x-wais-source\\": {
        source: \\"apache\\",
        extensions: [\\"src\\"]
      },
      \\"application/x-web-app-manifest+json\\": {
        compressible: true,
        extensions: [\\"webapp\\"]
      },
      \\"application/x-www-form-urlencoded\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/x-x509-ca-cert\\": {
        source: \\"iana\\",
        extensions: [\\"der\\", \\"crt\\", \\"pem\\"]
      },
      \\"application/x-x509-ca-ra-cert\\": {
        source: \\"iana\\"
      },
      \\"application/x-x509-next-ca-cert\\": {
        source: \\"iana\\"
      },
      \\"application/x-xfig\\": {
        source: \\"apache\\",
        extensions: [\\"fig\\"]
      },
      \\"application/x-xliff+xml\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"xlf\\"]
      },
      \\"application/x-xpinstall\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"xpi\\"]
      },
      \\"application/x-xz\\": {
        source: \\"apache\\",
        extensions: [\\"xz\\"]
      },
      \\"application/x-zmachine\\": {
        source: \\"apache\\",
        extensions: [\\"z1\\", \\"z2\\", \\"z3\\", \\"z4\\", \\"z5\\", \\"z6\\", \\"z7\\", \\"z8\\"]
      },
      \\"application/x400-bp\\": {
        source: \\"iana\\"
      },
      \\"application/xacml+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/xaml+xml\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"xaml\\"]
      },
      \\"application/xcap-att+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xav\\"]
      },
      \\"application/xcap-caps+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xca\\"]
      },
      \\"application/xcap-diff+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xdf\\"]
      },
      \\"application/xcap-el+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xel\\"]
      },
      \\"application/xcap-error+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/xcap-ns+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xns\\"]
      },
      \\"application/xcon-conference-info+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/xcon-conference-info-diff+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/xenc+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xenc\\"]
      },
      \\"application/xhtml+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xhtml\\", \\"xht\\"]
      },
      \\"application/xhtml-voice+xml\\": {
        source: \\"apache\\",
        compressible: true
      },
      \\"application/xliff+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xlf\\"]
      },
      \\"application/xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xml\\", \\"xsl\\", \\"xsd\\", \\"rng\\"]
      },
      \\"application/xml-dtd\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"dtd\\"]
      },
      \\"application/xml-external-parsed-entity\\": {
        source: \\"iana\\"
      },
      \\"application/xml-patch+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/xmpp+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/xop+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xop\\"]
      },
      \\"application/xproc+xml\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"xpl\\"]
      },
      \\"application/xslt+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xsl\\", \\"xslt\\"]
      },
      \\"application/xspf+xml\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"xspf\\"]
      },
      \\"application/xv+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"mxml\\", \\"xhvml\\", \\"xvml\\", \\"xvm\\"]
      },
      \\"application/yang\\": {
        source: \\"iana\\",
        extensions: [\\"yang\\"]
      },
      \\"application/yang-data+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/yang-data+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/yang-patch+json\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/yang-patch+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"application/yin+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"yin\\"]
      },
      \\"application/zip\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"zip\\"]
      },
      \\"application/zlib\\": {
        source: \\"iana\\"
      },
      \\"application/zstd\\": {
        source: \\"iana\\"
      },
      \\"audio/1d-interleaved-parityfec\\": {
        source: \\"iana\\"
      },
      \\"audio/32kadpcm\\": {
        source: \\"iana\\"
      },
      \\"audio/3gpp\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"3gpp\\"]
      },
      \\"audio/3gpp2\\": {
        source: \\"iana\\"
      },
      \\"audio/aac\\": {
        source: \\"iana\\"
      },
      \\"audio/ac3\\": {
        source: \\"iana\\"
      },
      \\"audio/adpcm\\": {
        source: \\"apache\\",
        extensions: [\\"adp\\"]
      },
      \\"audio/amr\\": {
        source: \\"iana\\",
        extensions: [\\"amr\\"]
      },
      \\"audio/amr-wb\\": {
        source: \\"iana\\"
      },
      \\"audio/amr-wb+\\": {
        source: \\"iana\\"
      },
      \\"audio/aptx\\": {
        source: \\"iana\\"
      },
      \\"audio/asc\\": {
        source: \\"iana\\"
      },
      \\"audio/atrac-advanced-lossless\\": {
        source: \\"iana\\"
      },
      \\"audio/atrac-x\\": {
        source: \\"iana\\"
      },
      \\"audio/atrac3\\": {
        source: \\"iana\\"
      },
      \\"audio/basic\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"au\\", \\"snd\\"]
      },
      \\"audio/bv16\\": {
        source: \\"iana\\"
      },
      \\"audio/bv32\\": {
        source: \\"iana\\"
      },
      \\"audio/clearmode\\": {
        source: \\"iana\\"
      },
      \\"audio/cn\\": {
        source: \\"iana\\"
      },
      \\"audio/dat12\\": {
        source: \\"iana\\"
      },
      \\"audio/dls\\": {
        source: \\"iana\\"
      },
      \\"audio/dsr-es201108\\": {
        source: \\"iana\\"
      },
      \\"audio/dsr-es202050\\": {
        source: \\"iana\\"
      },
      \\"audio/dsr-es202211\\": {
        source: \\"iana\\"
      },
      \\"audio/dsr-es202212\\": {
        source: \\"iana\\"
      },
      \\"audio/dv\\": {
        source: \\"iana\\"
      },
      \\"audio/dvi4\\": {
        source: \\"iana\\"
      },
      \\"audio/eac3\\": {
        source: \\"iana\\"
      },
      \\"audio/encaprtp\\": {
        source: \\"iana\\"
      },
      \\"audio/evrc\\": {
        source: \\"iana\\"
      },
      \\"audio/evrc-qcp\\": {
        source: \\"iana\\"
      },
      \\"audio/evrc0\\": {
        source: \\"iana\\"
      },
      \\"audio/evrc1\\": {
        source: \\"iana\\"
      },
      \\"audio/evrcb\\": {
        source: \\"iana\\"
      },
      \\"audio/evrcb0\\": {
        source: \\"iana\\"
      },
      \\"audio/evrcb1\\": {
        source: \\"iana\\"
      },
      \\"audio/evrcnw\\": {
        source: \\"iana\\"
      },
      \\"audio/evrcnw0\\": {
        source: \\"iana\\"
      },
      \\"audio/evrcnw1\\": {
        source: \\"iana\\"
      },
      \\"audio/evrcwb\\": {
        source: \\"iana\\"
      },
      \\"audio/evrcwb0\\": {
        source: \\"iana\\"
      },
      \\"audio/evrcwb1\\": {
        source: \\"iana\\"
      },
      \\"audio/evs\\": {
        source: \\"iana\\"
      },
      \\"audio/flexfec\\": {
        source: \\"iana\\"
      },
      \\"audio/fwdred\\": {
        source: \\"iana\\"
      },
      \\"audio/g711-0\\": {
        source: \\"iana\\"
      },
      \\"audio/g719\\": {
        source: \\"iana\\"
      },
      \\"audio/g722\\": {
        source: \\"iana\\"
      },
      \\"audio/g7221\\": {
        source: \\"iana\\"
      },
      \\"audio/g723\\": {
        source: \\"iana\\"
      },
      \\"audio/g726-16\\": {
        source: \\"iana\\"
      },
      \\"audio/g726-24\\": {
        source: \\"iana\\"
      },
      \\"audio/g726-32\\": {
        source: \\"iana\\"
      },
      \\"audio/g726-40\\": {
        source: \\"iana\\"
      },
      \\"audio/g728\\": {
        source: \\"iana\\"
      },
      \\"audio/g729\\": {
        source: \\"iana\\"
      },
      \\"audio/g7291\\": {
        source: \\"iana\\"
      },
      \\"audio/g729d\\": {
        source: \\"iana\\"
      },
      \\"audio/g729e\\": {
        source: \\"iana\\"
      },
      \\"audio/gsm\\": {
        source: \\"iana\\"
      },
      \\"audio/gsm-efr\\": {
        source: \\"iana\\"
      },
      \\"audio/gsm-hr-08\\": {
        source: \\"iana\\"
      },
      \\"audio/ilbc\\": {
        source: \\"iana\\"
      },
      \\"audio/ip-mr_v2.5\\": {
        source: \\"iana\\"
      },
      \\"audio/isac\\": {
        source: \\"apache\\"
      },
      \\"audio/l16\\": {
        source: \\"iana\\"
      },
      \\"audio/l20\\": {
        source: \\"iana\\"
      },
      \\"audio/l24\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"audio/l8\\": {
        source: \\"iana\\"
      },
      \\"audio/lpc\\": {
        source: \\"iana\\"
      },
      \\"audio/melp\\": {
        source: \\"iana\\"
      },
      \\"audio/melp1200\\": {
        source: \\"iana\\"
      },
      \\"audio/melp2400\\": {
        source: \\"iana\\"
      },
      \\"audio/melp600\\": {
        source: \\"iana\\"
      },
      \\"audio/mhas\\": {
        source: \\"iana\\"
      },
      \\"audio/midi\\": {
        source: \\"apache\\",
        extensions: [\\"mid\\", \\"midi\\", \\"kar\\", \\"rmi\\"]
      },
      \\"audio/mobile-xmf\\": {
        source: \\"iana\\",
        extensions: [\\"mxmf\\"]
      },
      \\"audio/mp3\\": {
        compressible: false,
        extensions: [\\"mp3\\"]
      },
      \\"audio/mp4\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"m4a\\", \\"mp4a\\"]
      },
      \\"audio/mp4a-latm\\": {
        source: \\"iana\\"
      },
      \\"audio/mpa\\": {
        source: \\"iana\\"
      },
      \\"audio/mpa-robust\\": {
        source: \\"iana\\"
      },
      \\"audio/mpeg\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"mpga\\", \\"mp2\\", \\"mp2a\\", \\"mp3\\", \\"m2a\\", \\"m3a\\"]
      },
      \\"audio/mpeg4-generic\\": {
        source: \\"iana\\"
      },
      \\"audio/musepack\\": {
        source: \\"apache\\"
      },
      \\"audio/ogg\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"oga\\", \\"ogg\\", \\"spx\\", \\"opus\\"]
      },
      \\"audio/opus\\": {
        source: \\"iana\\"
      },
      \\"audio/parityfec\\": {
        source: \\"iana\\"
      },
      \\"audio/pcma\\": {
        source: \\"iana\\"
      },
      \\"audio/pcma-wb\\": {
        source: \\"iana\\"
      },
      \\"audio/pcmu\\": {
        source: \\"iana\\"
      },
      \\"audio/pcmu-wb\\": {
        source: \\"iana\\"
      },
      \\"audio/prs.sid\\": {
        source: \\"iana\\"
      },
      \\"audio/qcelp\\": {
        source: \\"iana\\"
      },
      \\"audio/raptorfec\\": {
        source: \\"iana\\"
      },
      \\"audio/red\\": {
        source: \\"iana\\"
      },
      \\"audio/rtp-enc-aescm128\\": {
        source: \\"iana\\"
      },
      \\"audio/rtp-midi\\": {
        source: \\"iana\\"
      },
      \\"audio/rtploopback\\": {
        source: \\"iana\\"
      },
      \\"audio/rtx\\": {
        source: \\"iana\\"
      },
      \\"audio/s3m\\": {
        source: \\"apache\\",
        extensions: [\\"s3m\\"]
      },
      \\"audio/scip\\": {
        source: \\"iana\\"
      },
      \\"audio/silk\\": {
        source: \\"apache\\",
        extensions: [\\"sil\\"]
      },
      \\"audio/smv\\": {
        source: \\"iana\\"
      },
      \\"audio/smv-qcp\\": {
        source: \\"iana\\"
      },
      \\"audio/smv0\\": {
        source: \\"iana\\"
      },
      \\"audio/sofa\\": {
        source: \\"iana\\"
      },
      \\"audio/sp-midi\\": {
        source: \\"iana\\"
      },
      \\"audio/speex\\": {
        source: \\"iana\\"
      },
      \\"audio/t140c\\": {
        source: \\"iana\\"
      },
      \\"audio/t38\\": {
        source: \\"iana\\"
      },
      \\"audio/telephone-event\\": {
        source: \\"iana\\"
      },
      \\"audio/tetra_acelp\\": {
        source: \\"iana\\"
      },
      \\"audio/tetra_acelp_bb\\": {
        source: \\"iana\\"
      },
      \\"audio/tone\\": {
        source: \\"iana\\"
      },
      \\"audio/tsvcis\\": {
        source: \\"iana\\"
      },
      \\"audio/uemclip\\": {
        source: \\"iana\\"
      },
      \\"audio/ulpfec\\": {
        source: \\"iana\\"
      },
      \\"audio/usac\\": {
        source: \\"iana\\"
      },
      \\"audio/vdvi\\": {
        source: \\"iana\\"
      },
      \\"audio/vmr-wb\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.3gpp.iufp\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.4sb\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.audiokoz\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.celp\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.cisco.nse\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.cmles.radio-events\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.cns.anp1\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.cns.inf1\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.dece.audio\\": {
        source: \\"iana\\",
        extensions: [\\"uva\\", \\"uvva\\"]
      },
      \\"audio/vnd.digital-winds\\": {
        source: \\"iana\\",
        extensions: [\\"eol\\"]
      },
      \\"audio/vnd.dlna.adts\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.dolby.heaac.1\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.dolby.heaac.2\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.dolby.mlp\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.dolby.mps\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.dolby.pl2\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.dolby.pl2x\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.dolby.pl2z\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.dolby.pulse.1\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.dra\\": {
        source: \\"iana\\",
        extensions: [\\"dra\\"]
      },
      \\"audio/vnd.dts\\": {
        source: \\"iana\\",
        extensions: [\\"dts\\"]
      },
      \\"audio/vnd.dts.hd\\": {
        source: \\"iana\\",
        extensions: [\\"dtshd\\"]
      },
      \\"audio/vnd.dts.uhd\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.dvb.file\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.everad.plj\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.hns.audio\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.lucent.voice\\": {
        source: \\"iana\\",
        extensions: [\\"lvp\\"]
      },
      \\"audio/vnd.ms-playready.media.pya\\": {
        source: \\"iana\\",
        extensions: [\\"pya\\"]
      },
      \\"audio/vnd.nokia.mobile-xmf\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.nortel.vbk\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.nuera.ecelp4800\\": {
        source: \\"iana\\",
        extensions: [\\"ecelp4800\\"]
      },
      \\"audio/vnd.nuera.ecelp7470\\": {
        source: \\"iana\\",
        extensions: [\\"ecelp7470\\"]
      },
      \\"audio/vnd.nuera.ecelp9600\\": {
        source: \\"iana\\",
        extensions: [\\"ecelp9600\\"]
      },
      \\"audio/vnd.octel.sbc\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.presonus.multitrack\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.qcelp\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.rhetorex.32kadpcm\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.rip\\": {
        source: \\"iana\\",
        extensions: [\\"rip\\"]
      },
      \\"audio/vnd.rn-realaudio\\": {
        compressible: false
      },
      \\"audio/vnd.sealedmedia.softseal.mpeg\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.vmx.cvsd\\": {
        source: \\"iana\\"
      },
      \\"audio/vnd.wave\\": {
        compressible: false
      },
      \\"audio/vorbis\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"audio/vorbis-config\\": {
        source: \\"iana\\"
      },
      \\"audio/wav\\": {
        compressible: false,
        extensions: [\\"wav\\"]
      },
      \\"audio/wave\\": {
        compressible: false,
        extensions: [\\"wav\\"]
      },
      \\"audio/webm\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"weba\\"]
      },
      \\"audio/x-aac\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"aac\\"]
      },
      \\"audio/x-aiff\\": {
        source: \\"apache\\",
        extensions: [\\"aif\\", \\"aiff\\", \\"aifc\\"]
      },
      \\"audio/x-caf\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"caf\\"]
      },
      \\"audio/x-flac\\": {
        source: \\"apache\\",
        extensions: [\\"flac\\"]
      },
      \\"audio/x-m4a\\": {
        source: \\"nginx\\",
        extensions: [\\"m4a\\"]
      },
      \\"audio/x-matroska\\": {
        source: \\"apache\\",
        extensions: [\\"mka\\"]
      },
      \\"audio/x-mpegurl\\": {
        source: \\"apache\\",
        extensions: [\\"m3u\\"]
      },
      \\"audio/x-ms-wax\\": {
        source: \\"apache\\",
        extensions: [\\"wax\\"]
      },
      \\"audio/x-ms-wma\\": {
        source: \\"apache\\",
        extensions: [\\"wma\\"]
      },
      \\"audio/x-pn-realaudio\\": {
        source: \\"apache\\",
        extensions: [\\"ram\\", \\"ra\\"]
      },
      \\"audio/x-pn-realaudio-plugin\\": {
        source: \\"apache\\",
        extensions: [\\"rmp\\"]
      },
      \\"audio/x-realaudio\\": {
        source: \\"nginx\\",
        extensions: [\\"ra\\"]
      },
      \\"audio/x-tta\\": {
        source: \\"apache\\"
      },
      \\"audio/x-wav\\": {
        source: \\"apache\\",
        extensions: [\\"wav\\"]
      },
      \\"audio/xm\\": {
        source: \\"apache\\",
        extensions: [\\"xm\\"]
      },
      \\"chemical/x-cdx\\": {
        source: \\"apache\\",
        extensions: [\\"cdx\\"]
      },
      \\"chemical/x-cif\\": {
        source: \\"apache\\",
        extensions: [\\"cif\\"]
      },
      \\"chemical/x-cmdf\\": {
        source: \\"apache\\",
        extensions: [\\"cmdf\\"]
      },
      \\"chemical/x-cml\\": {
        source: \\"apache\\",
        extensions: [\\"cml\\"]
      },
      \\"chemical/x-csml\\": {
        source: \\"apache\\",
        extensions: [\\"csml\\"]
      },
      \\"chemical/x-pdb\\": {
        source: \\"apache\\"
      },
      \\"chemical/x-xyz\\": {
        source: \\"apache\\",
        extensions: [\\"xyz\\"]
      },
      \\"font/collection\\": {
        source: \\"iana\\",
        extensions: [\\"ttc\\"]
      },
      \\"font/otf\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"otf\\"]
      },
      \\"font/sfnt\\": {
        source: \\"iana\\"
      },
      \\"font/ttf\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"ttf\\"]
      },
      \\"font/woff\\": {
        source: \\"iana\\",
        extensions: [\\"woff\\"]
      },
      \\"font/woff2\\": {
        source: \\"iana\\",
        extensions: [\\"woff2\\"]
      },
      \\"image/aces\\": {
        source: \\"iana\\",
        extensions: [\\"exr\\"]
      },
      \\"image/apng\\": {
        compressible: false,
        extensions: [\\"apng\\"]
      },
      \\"image/avci\\": {
        source: \\"iana\\",
        extensions: [\\"avci\\"]
      },
      \\"image/avcs\\": {
        source: \\"iana\\",
        extensions: [\\"avcs\\"]
      },
      \\"image/avif\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"avif\\"]
      },
      \\"image/bmp\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"bmp\\"]
      },
      \\"image/cgm\\": {
        source: \\"iana\\",
        extensions: [\\"cgm\\"]
      },
      \\"image/dicom-rle\\": {
        source: \\"iana\\",
        extensions: [\\"drle\\"]
      },
      \\"image/emf\\": {
        source: \\"iana\\",
        extensions: [\\"emf\\"]
      },
      \\"image/fits\\": {
        source: \\"iana\\",
        extensions: [\\"fits\\"]
      },
      \\"image/g3fax\\": {
        source: \\"iana\\",
        extensions: [\\"g3\\"]
      },
      \\"image/gif\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"gif\\"]
      },
      \\"image/heic\\": {
        source: \\"iana\\",
        extensions: [\\"heic\\"]
      },
      \\"image/heic-sequence\\": {
        source: \\"iana\\",
        extensions: [\\"heics\\"]
      },
      \\"image/heif\\": {
        source: \\"iana\\",
        extensions: [\\"heif\\"]
      },
      \\"image/heif-sequence\\": {
        source: \\"iana\\",
        extensions: [\\"heifs\\"]
      },
      \\"image/hej2k\\": {
        source: \\"iana\\",
        extensions: [\\"hej2\\"]
      },
      \\"image/hsj2\\": {
        source: \\"iana\\",
        extensions: [\\"hsj2\\"]
      },
      \\"image/ief\\": {
        source: \\"iana\\",
        extensions: [\\"ief\\"]
      },
      \\"image/jls\\": {
        source: \\"iana\\",
        extensions: [\\"jls\\"]
      },
      \\"image/jp2\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"jp2\\", \\"jpg2\\"]
      },
      \\"image/jpeg\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"jpeg\\", \\"jpg\\", \\"jpe\\"]
      },
      \\"image/jph\\": {
        source: \\"iana\\",
        extensions: [\\"jph\\"]
      },
      \\"image/jphc\\": {
        source: \\"iana\\",
        extensions: [\\"jhc\\"]
      },
      \\"image/jpm\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"jpm\\"]
      },
      \\"image/jpx\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"jpx\\", \\"jpf\\"]
      },
      \\"image/jxr\\": {
        source: \\"iana\\",
        extensions: [\\"jxr\\"]
      },
      \\"image/jxra\\": {
        source: \\"iana\\",
        extensions: [\\"jxra\\"]
      },
      \\"image/jxrs\\": {
        source: \\"iana\\",
        extensions: [\\"jxrs\\"]
      },
      \\"image/jxs\\": {
        source: \\"iana\\",
        extensions: [\\"jxs\\"]
      },
      \\"image/jxsc\\": {
        source: \\"iana\\",
        extensions: [\\"jxsc\\"]
      },
      \\"image/jxsi\\": {
        source: \\"iana\\",
        extensions: [\\"jxsi\\"]
      },
      \\"image/jxss\\": {
        source: \\"iana\\",
        extensions: [\\"jxss\\"]
      },
      \\"image/ktx\\": {
        source: \\"iana\\",
        extensions: [\\"ktx\\"]
      },
      \\"image/ktx2\\": {
        source: \\"iana\\",
        extensions: [\\"ktx2\\"]
      },
      \\"image/naplps\\": {
        source: \\"iana\\"
      },
      \\"image/pjpeg\\": {
        compressible: false
      },
      \\"image/png\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"png\\"]
      },
      \\"image/prs.btif\\": {
        source: \\"iana\\",
        extensions: [\\"btif\\"]
      },
      \\"image/prs.pti\\": {
        source: \\"iana\\",
        extensions: [\\"pti\\"]
      },
      \\"image/pwg-raster\\": {
        source: \\"iana\\"
      },
      \\"image/sgi\\": {
        source: \\"apache\\",
        extensions: [\\"sgi\\"]
      },
      \\"image/svg+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"svg\\", \\"svgz\\"]
      },
      \\"image/t38\\": {
        source: \\"iana\\",
        extensions: [\\"t38\\"]
      },
      \\"image/tiff\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"tif\\", \\"tiff\\"]
      },
      \\"image/tiff-fx\\": {
        source: \\"iana\\",
        extensions: [\\"tfx\\"]
      },
      \\"image/vnd.adobe.photoshop\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"psd\\"]
      },
      \\"image/vnd.airzip.accelerator.azv\\": {
        source: \\"iana\\",
        extensions: [\\"azv\\"]
      },
      \\"image/vnd.cns.inf2\\": {
        source: \\"iana\\"
      },
      \\"image/vnd.dece.graphic\\": {
        source: \\"iana\\",
        extensions: [\\"uvi\\", \\"uvvi\\", \\"uvg\\", \\"uvvg\\"]
      },
      \\"image/vnd.djvu\\": {
        source: \\"iana\\",
        extensions: [\\"djvu\\", \\"djv\\"]
      },
      \\"image/vnd.dvb.subtitle\\": {
        source: \\"iana\\",
        extensions: [\\"sub\\"]
      },
      \\"image/vnd.dwg\\": {
        source: \\"iana\\",
        extensions: [\\"dwg\\"]
      },
      \\"image/vnd.dxf\\": {
        source: \\"iana\\",
        extensions: [\\"dxf\\"]
      },
      \\"image/vnd.fastbidsheet\\": {
        source: \\"iana\\",
        extensions: [\\"fbs\\"]
      },
      \\"image/vnd.fpx\\": {
        source: \\"iana\\",
        extensions: [\\"fpx\\"]
      },
      \\"image/vnd.fst\\": {
        source: \\"iana\\",
        extensions: [\\"fst\\"]
      },
      \\"image/vnd.fujixerox.edmics-mmr\\": {
        source: \\"iana\\",
        extensions: [\\"mmr\\"]
      },
      \\"image/vnd.fujixerox.edmics-rlc\\": {
        source: \\"iana\\",
        extensions: [\\"rlc\\"]
      },
      \\"image/vnd.globalgraphics.pgb\\": {
        source: \\"iana\\"
      },
      \\"image/vnd.microsoft.icon\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"ico\\"]
      },
      \\"image/vnd.mix\\": {
        source: \\"iana\\"
      },
      \\"image/vnd.mozilla.apng\\": {
        source: \\"iana\\"
      },
      \\"image/vnd.ms-dds\\": {
        compressible: true,
        extensions: [\\"dds\\"]
      },
      \\"image/vnd.ms-modi\\": {
        source: \\"iana\\",
        extensions: [\\"mdi\\"]
      },
      \\"image/vnd.ms-photo\\": {
        source: \\"apache\\",
        extensions: [\\"wdp\\"]
      },
      \\"image/vnd.net-fpx\\": {
        source: \\"iana\\",
        extensions: [\\"npx\\"]
      },
      \\"image/vnd.pco.b16\\": {
        source: \\"iana\\",
        extensions: [\\"b16\\"]
      },
      \\"image/vnd.radiance\\": {
        source: \\"iana\\"
      },
      \\"image/vnd.sealed.png\\": {
        source: \\"iana\\"
      },
      \\"image/vnd.sealedmedia.softseal.gif\\": {
        source: \\"iana\\"
      },
      \\"image/vnd.sealedmedia.softseal.jpg\\": {
        source: \\"iana\\"
      },
      \\"image/vnd.svf\\": {
        source: \\"iana\\"
      },
      \\"image/vnd.tencent.tap\\": {
        source: \\"iana\\",
        extensions: [\\"tap\\"]
      },
      \\"image/vnd.valve.source.texture\\": {
        source: \\"iana\\",
        extensions: [\\"vtf\\"]
      },
      \\"image/vnd.wap.wbmp\\": {
        source: \\"iana\\",
        extensions: [\\"wbmp\\"]
      },
      \\"image/vnd.xiff\\": {
        source: \\"iana\\",
        extensions: [\\"xif\\"]
      },
      \\"image/vnd.zbrush.pcx\\": {
        source: \\"iana\\",
        extensions: [\\"pcx\\"]
      },
      \\"image/webp\\": {
        source: \\"apache\\",
        extensions: [\\"webp\\"]
      },
      \\"image/wmf\\": {
        source: \\"iana\\",
        extensions: [\\"wmf\\"]
      },
      \\"image/x-3ds\\": {
        source: \\"apache\\",
        extensions: [\\"3ds\\"]
      },
      \\"image/x-cmu-raster\\": {
        source: \\"apache\\",
        extensions: [\\"ras\\"]
      },
      \\"image/x-cmx\\": {
        source: \\"apache\\",
        extensions: [\\"cmx\\"]
      },
      \\"image/x-freehand\\": {
        source: \\"apache\\",
        extensions: [\\"fh\\", \\"fhc\\", \\"fh4\\", \\"fh5\\", \\"fh7\\"]
      },
      \\"image/x-icon\\": {
        source: \\"apache\\",
        compressible: true,
        extensions: [\\"ico\\"]
      },
      \\"image/x-jng\\": {
        source: \\"nginx\\",
        extensions: [\\"jng\\"]
      },
      \\"image/x-mrsid-image\\": {
        source: \\"apache\\",
        extensions: [\\"sid\\"]
      },
      \\"image/x-ms-bmp\\": {
        source: \\"nginx\\",
        compressible: true,
        extensions: [\\"bmp\\"]
      },
      \\"image/x-pcx\\": {
        source: \\"apache\\",
        extensions: [\\"pcx\\"]
      },
      \\"image/x-pict\\": {
        source: \\"apache\\",
        extensions: [\\"pic\\", \\"pct\\"]
      },
      \\"image/x-portable-anymap\\": {
        source: \\"apache\\",
        extensions: [\\"pnm\\"]
      },
      \\"image/x-portable-bitmap\\": {
        source: \\"apache\\",
        extensions: [\\"pbm\\"]
      },
      \\"image/x-portable-graymap\\": {
        source: \\"apache\\",
        extensions: [\\"pgm\\"]
      },
      \\"image/x-portable-pixmap\\": {
        source: \\"apache\\",
        extensions: [\\"ppm\\"]
      },
      \\"image/x-rgb\\": {
        source: \\"apache\\",
        extensions: [\\"rgb\\"]
      },
      \\"image/x-tga\\": {
        source: \\"apache\\",
        extensions: [\\"tga\\"]
      },
      \\"image/x-xbitmap\\": {
        source: \\"apache\\",
        extensions: [\\"xbm\\"]
      },
      \\"image/x-xcf\\": {
        compressible: false
      },
      \\"image/x-xpixmap\\": {
        source: \\"apache\\",
        extensions: [\\"xpm\\"]
      },
      \\"image/x-xwindowdump\\": {
        source: \\"apache\\",
        extensions: [\\"xwd\\"]
      },
      \\"message/cpim\\": {
        source: \\"iana\\"
      },
      \\"message/delivery-status\\": {
        source: \\"iana\\"
      },
      \\"message/disposition-notification\\": {
        source: \\"iana\\",
        extensions: [
          \\"disposition-notification\\"
        ]
      },
      \\"message/external-body\\": {
        source: \\"iana\\"
      },
      \\"message/feedback-report\\": {
        source: \\"iana\\"
      },
      \\"message/global\\": {
        source: \\"iana\\",
        extensions: [\\"u8msg\\"]
      },
      \\"message/global-delivery-status\\": {
        source: \\"iana\\",
        extensions: [\\"u8dsn\\"]
      },
      \\"message/global-disposition-notification\\": {
        source: \\"iana\\",
        extensions: [\\"u8mdn\\"]
      },
      \\"message/global-headers\\": {
        source: \\"iana\\",
        extensions: [\\"u8hdr\\"]
      },
      \\"message/http\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"message/imdn+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"message/news\\": {
        source: \\"iana\\"
      },
      \\"message/partial\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"message/rfc822\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"eml\\", \\"mime\\"]
      },
      \\"message/s-http\\": {
        source: \\"iana\\"
      },
      \\"message/sip\\": {
        source: \\"iana\\"
      },
      \\"message/sipfrag\\": {
        source: \\"iana\\"
      },
      \\"message/tracking-status\\": {
        source: \\"iana\\"
      },
      \\"message/vnd.si.simp\\": {
        source: \\"iana\\"
      },
      \\"message/vnd.wfa.wsc\\": {
        source: \\"iana\\",
        extensions: [\\"wsc\\"]
      },
      \\"model/3mf\\": {
        source: \\"iana\\",
        extensions: [\\"3mf\\"]
      },
      \\"model/e57\\": {
        source: \\"iana\\"
      },
      \\"model/gltf+json\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"gltf\\"]
      },
      \\"model/gltf-binary\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"glb\\"]
      },
      \\"model/iges\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"igs\\", \\"iges\\"]
      },
      \\"model/mesh\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"msh\\", \\"mesh\\", \\"silo\\"]
      },
      \\"model/mtl\\": {
        source: \\"iana\\",
        extensions: [\\"mtl\\"]
      },
      \\"model/obj\\": {
        source: \\"iana\\",
        extensions: [\\"obj\\"]
      },
      \\"model/step\\": {
        source: \\"iana\\"
      },
      \\"model/step+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"stpx\\"]
      },
      \\"model/step+zip\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"stpz\\"]
      },
      \\"model/step-xml+zip\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"stpxz\\"]
      },
      \\"model/stl\\": {
        source: \\"iana\\",
        extensions: [\\"stl\\"]
      },
      \\"model/vnd.collada+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"dae\\"]
      },
      \\"model/vnd.dwf\\": {
        source: \\"iana\\",
        extensions: [\\"dwf\\"]
      },
      \\"model/vnd.flatland.3dml\\": {
        source: \\"iana\\"
      },
      \\"model/vnd.gdl\\": {
        source: \\"iana\\",
        extensions: [\\"gdl\\"]
      },
      \\"model/vnd.gs-gdl\\": {
        source: \\"apache\\"
      },
      \\"model/vnd.gs.gdl\\": {
        source: \\"iana\\"
      },
      \\"model/vnd.gtw\\": {
        source: \\"iana\\",
        extensions: [\\"gtw\\"]
      },
      \\"model/vnd.moml+xml\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"model/vnd.mts\\": {
        source: \\"iana\\",
        extensions: [\\"mts\\"]
      },
      \\"model/vnd.opengex\\": {
        source: \\"iana\\",
        extensions: [\\"ogex\\"]
      },
      \\"model/vnd.parasolid.transmit.binary\\": {
        source: \\"iana\\",
        extensions: [\\"x_b\\"]
      },
      \\"model/vnd.parasolid.transmit.text\\": {
        source: \\"iana\\",
        extensions: [\\"x_t\\"]
      },
      \\"model/vnd.pytha.pyox\\": {
        source: \\"iana\\"
      },
      \\"model/vnd.rosette.annotated-data-model\\": {
        source: \\"iana\\"
      },
      \\"model/vnd.sap.vds\\": {
        source: \\"iana\\",
        extensions: [\\"vds\\"]
      },
      \\"model/vnd.usdz+zip\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"usdz\\"]
      },
      \\"model/vnd.valve.source.compiled-map\\": {
        source: \\"iana\\",
        extensions: [\\"bsp\\"]
      },
      \\"model/vnd.vtu\\": {
        source: \\"iana\\",
        extensions: [\\"vtu\\"]
      },
      \\"model/vrml\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"wrl\\", \\"vrml\\"]
      },
      \\"model/x3d+binary\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"x3db\\", \\"x3dbz\\"]
      },
      \\"model/x3d+fastinfoset\\": {
        source: \\"iana\\",
        extensions: [\\"x3db\\"]
      },
      \\"model/x3d+vrml\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"x3dv\\", \\"x3dvz\\"]
      },
      \\"model/x3d+xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"x3d\\", \\"x3dz\\"]
      },
      \\"model/x3d-vrml\\": {
        source: \\"iana\\",
        extensions: [\\"x3dv\\"]
      },
      \\"multipart/alternative\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"multipart/appledouble\\": {
        source: \\"iana\\"
      },
      \\"multipart/byteranges\\": {
        source: \\"iana\\"
      },
      \\"multipart/digest\\": {
        source: \\"iana\\"
      },
      \\"multipart/encrypted\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"multipart/form-data\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"multipart/header-set\\": {
        source: \\"iana\\"
      },
      \\"multipart/mixed\\": {
        source: \\"iana\\"
      },
      \\"multipart/multilingual\\": {
        source: \\"iana\\"
      },
      \\"multipart/parallel\\": {
        source: \\"iana\\"
      },
      \\"multipart/related\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"multipart/report\\": {
        source: \\"iana\\"
      },
      \\"multipart/signed\\": {
        source: \\"iana\\",
        compressible: false
      },
      \\"multipart/vnd.bint.med-plus\\": {
        source: \\"iana\\"
      },
      \\"multipart/voice-message\\": {
        source: \\"iana\\"
      },
      \\"multipart/x-mixed-replace\\": {
        source: \\"iana\\"
      },
      \\"text/1d-interleaved-parityfec\\": {
        source: \\"iana\\"
      },
      \\"text/cache-manifest\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"appcache\\", \\"manifest\\"]
      },
      \\"text/calendar\\": {
        source: \\"iana\\",
        extensions: [\\"ics\\", \\"ifb\\"]
      },
      \\"text/calender\\": {
        compressible: true
      },
      \\"text/cmd\\": {
        compressible: true
      },
      \\"text/coffeescript\\": {
        extensions: [\\"coffee\\", \\"litcoffee\\"]
      },
      \\"text/cql\\": {
        source: \\"iana\\"
      },
      \\"text/cql-expression\\": {
        source: \\"iana\\"
      },
      \\"text/cql-identifier\\": {
        source: \\"iana\\"
      },
      \\"text/css\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true,
        extensions: [\\"css\\"]
      },
      \\"text/csv\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"csv\\"]
      },
      \\"text/csv-schema\\": {
        source: \\"iana\\"
      },
      \\"text/directory\\": {
        source: \\"iana\\"
      },
      \\"text/dns\\": {
        source: \\"iana\\"
      },
      \\"text/ecmascript\\": {
        source: \\"iana\\"
      },
      \\"text/encaprtp\\": {
        source: \\"iana\\"
      },
      \\"text/enriched\\": {
        source: \\"iana\\"
      },
      \\"text/fhirpath\\": {
        source: \\"iana\\"
      },
      \\"text/flexfec\\": {
        source: \\"iana\\"
      },
      \\"text/fwdred\\": {
        source: \\"iana\\"
      },
      \\"text/gff3\\": {
        source: \\"iana\\"
      },
      \\"text/grammar-ref-list\\": {
        source: \\"iana\\"
      },
      \\"text/html\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"html\\", \\"htm\\", \\"shtml\\"]
      },
      \\"text/jade\\": {
        extensions: [\\"jade\\"]
      },
      \\"text/javascript\\": {
        source: \\"iana\\",
        compressible: true
      },
      \\"text/jcr-cnd\\": {
        source: \\"iana\\"
      },
      \\"text/jsx\\": {
        compressible: true,
        extensions: [\\"jsx\\"]
      },
      \\"text/less\\": {
        compressible: true,
        extensions: [\\"less\\"]
      },
      \\"text/markdown\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"markdown\\", \\"md\\"]
      },
      \\"text/mathml\\": {
        source: \\"nginx\\",
        extensions: [\\"mml\\"]
      },
      \\"text/mdx\\": {
        compressible: true,
        extensions: [\\"mdx\\"]
      },
      \\"text/mizar\\": {
        source: \\"iana\\"
      },
      \\"text/n3\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true,
        extensions: [\\"n3\\"]
      },
      \\"text/parameters\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\"
      },
      \\"text/parityfec\\": {
        source: \\"iana\\"
      },
      \\"text/plain\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"txt\\", \\"text\\", \\"conf\\", \\"def\\", \\"list\\", \\"log\\", \\"in\\", \\"ini\\"]
      },
      \\"text/provenance-notation\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\"
      },
      \\"text/prs.fallenstein.rst\\": {
        source: \\"iana\\"
      },
      \\"text/prs.lines.tag\\": {
        source: \\"iana\\",
        extensions: [\\"dsc\\"]
      },
      \\"text/prs.prop.logic\\": {
        source: \\"iana\\"
      },
      \\"text/raptorfec\\": {
        source: \\"iana\\"
      },
      \\"text/red\\": {
        source: \\"iana\\"
      },
      \\"text/rfc822-headers\\": {
        source: \\"iana\\"
      },
      \\"text/richtext\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"rtx\\"]
      },
      \\"text/rtf\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"rtf\\"]
      },
      \\"text/rtp-enc-aescm128\\": {
        source: \\"iana\\"
      },
      \\"text/rtploopback\\": {
        source: \\"iana\\"
      },
      \\"text/rtx\\": {
        source: \\"iana\\"
      },
      \\"text/sgml\\": {
        source: \\"iana\\",
        extensions: [\\"sgml\\", \\"sgm\\"]
      },
      \\"text/shaclc\\": {
        source: \\"iana\\"
      },
      \\"text/shex\\": {
        source: \\"iana\\",
        extensions: [\\"shex\\"]
      },
      \\"text/slim\\": {
        extensions: [\\"slim\\", \\"slm\\"]
      },
      \\"text/spdx\\": {
        source: \\"iana\\",
        extensions: [\\"spdx\\"]
      },
      \\"text/strings\\": {
        source: \\"iana\\"
      },
      \\"text/stylus\\": {
        extensions: [\\"stylus\\", \\"styl\\"]
      },
      \\"text/t140\\": {
        source: \\"iana\\"
      },
      \\"text/tab-separated-values\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"tsv\\"]
      },
      \\"text/troff\\": {
        source: \\"iana\\",
        extensions: [\\"t\\", \\"tr\\", \\"roff\\", \\"man\\", \\"me\\", \\"ms\\"]
      },
      \\"text/turtle\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        extensions: [\\"ttl\\"]
      },
      \\"text/ulpfec\\": {
        source: \\"iana\\"
      },
      \\"text/uri-list\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"uri\\", \\"uris\\", \\"urls\\"]
      },
      \\"text/vcard\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"vcard\\"]
      },
      \\"text/vnd.a\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.abc\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.ascii-art\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.curl\\": {
        source: \\"iana\\",
        extensions: [\\"curl\\"]
      },
      \\"text/vnd.curl.dcurl\\": {
        source: \\"apache\\",
        extensions: [\\"dcurl\\"]
      },
      \\"text/vnd.curl.mcurl\\": {
        source: \\"apache\\",
        extensions: [\\"mcurl\\"]
      },
      \\"text/vnd.curl.scurl\\": {
        source: \\"apache\\",
        extensions: [\\"scurl\\"]
      },
      \\"text/vnd.debian.copyright\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\"
      },
      \\"text/vnd.dmclientscript\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.dvb.subtitle\\": {
        source: \\"iana\\",
        extensions: [\\"sub\\"]
      },
      \\"text/vnd.esmertec.theme-descriptor\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\"
      },
      \\"text/vnd.familysearch.gedcom\\": {
        source: \\"iana\\",
        extensions: [\\"ged\\"]
      },
      \\"text/vnd.ficlab.flt\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.fly\\": {
        source: \\"iana\\",
        extensions: [\\"fly\\"]
      },
      \\"text/vnd.fmi.flexstor\\": {
        source: \\"iana\\",
        extensions: [\\"flx\\"]
      },
      \\"text/vnd.gml\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.graphviz\\": {
        source: \\"iana\\",
        extensions: [\\"gv\\"]
      },
      \\"text/vnd.hans\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.hgl\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.in3d.3dml\\": {
        source: \\"iana\\",
        extensions: [\\"3dml\\"]
      },
      \\"text/vnd.in3d.spot\\": {
        source: \\"iana\\",
        extensions: [\\"spot\\"]
      },
      \\"text/vnd.iptc.newsml\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.iptc.nitf\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.latex-z\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.motorola.reflex\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.ms-mediapackage\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.net2phone.commcenter.command\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.radisys.msml-basic-layout\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.senx.warpscript\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.si.uricatalogue\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.sosi\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.sun.j2me.app-descriptor\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        extensions: [\\"jad\\"]
      },
      \\"text/vnd.trolltech.linguist\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\"
      },
      \\"text/vnd.wap.si\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.wap.sl\\": {
        source: \\"iana\\"
      },
      \\"text/vnd.wap.wml\\": {
        source: \\"iana\\",
        extensions: [\\"wml\\"]
      },
      \\"text/vnd.wap.wmlscript\\": {
        source: \\"iana\\",
        extensions: [\\"wmls\\"]
      },
      \\"text/vtt\\": {
        source: \\"iana\\",
        charset: \\"UTF-8\\",
        compressible: true,
        extensions: [\\"vtt\\"]
      },
      \\"text/x-asm\\": {
        source: \\"apache\\",
        extensions: [\\"s\\", \\"asm\\"]
      },
      \\"text/x-c\\": {
        source: \\"apache\\",
        extensions: [\\"c\\", \\"cc\\", \\"cxx\\", \\"cpp\\", \\"h\\", \\"hh\\", \\"dic\\"]
      },
      \\"text/x-component\\": {
        source: \\"nginx\\",
        extensions: [\\"htc\\"]
      },
      \\"text/x-fortran\\": {
        source: \\"apache\\",
        extensions: [\\"f\\", \\"for\\", \\"f77\\", \\"f90\\"]
      },
      \\"text/x-gwt-rpc\\": {
        compressible: true
      },
      \\"text/x-handlebars-template\\": {
        extensions: [\\"hbs\\"]
      },
      \\"text/x-java-source\\": {
        source: \\"apache\\",
        extensions: [\\"java\\"]
      },
      \\"text/x-jquery-tmpl\\": {
        compressible: true
      },
      \\"text/x-lua\\": {
        extensions: [\\"lua\\"]
      },
      \\"text/x-markdown\\": {
        compressible: true,
        extensions: [\\"mkd\\"]
      },
      \\"text/x-nfo\\": {
        source: \\"apache\\",
        extensions: [\\"nfo\\"]
      },
      \\"text/x-opml\\": {
        source: \\"apache\\",
        extensions: [\\"opml\\"]
      },
      \\"text/x-org\\": {
        compressible: true,
        extensions: [\\"org\\"]
      },
      \\"text/x-pascal\\": {
        source: \\"apache\\",
        extensions: [\\"p\\", \\"pas\\"]
      },
      \\"text/x-processing\\": {
        compressible: true,
        extensions: [\\"pde\\"]
      },
      \\"text/x-sass\\": {
        extensions: [\\"sass\\"]
      },
      \\"text/x-scss\\": {
        extensions: [\\"scss\\"]
      },
      \\"text/x-setext\\": {
        source: \\"apache\\",
        extensions: [\\"etx\\"]
      },
      \\"text/x-sfv\\": {
        source: \\"apache\\",
        extensions: [\\"sfv\\"]
      },
      \\"text/x-suse-ymp\\": {
        compressible: true,
        extensions: [\\"ymp\\"]
      },
      \\"text/x-uuencode\\": {
        source: \\"apache\\",
        extensions: [\\"uu\\"]
      },
      \\"text/x-vcalendar\\": {
        source: \\"apache\\",
        extensions: [\\"vcs\\"]
      },
      \\"text/x-vcard\\": {
        source: \\"apache\\",
        extensions: [\\"vcf\\"]
      },
      \\"text/xml\\": {
        source: \\"iana\\",
        compressible: true,
        extensions: [\\"xml\\"]
      },
      \\"text/xml-external-parsed-entity\\": {
        source: \\"iana\\"
      },
      \\"text/yaml\\": {
        compressible: true,
        extensions: [\\"yaml\\", \\"yml\\"]
      },
      \\"video/1d-interleaved-parityfec\\": {
        source: \\"iana\\"
      },
      \\"video/3gpp\\": {
        source: \\"iana\\",
        extensions: [\\"3gp\\", \\"3gpp\\"]
      },
      \\"video/3gpp-tt\\": {
        source: \\"iana\\"
      },
      \\"video/3gpp2\\": {
        source: \\"iana\\",
        extensions: [\\"3g2\\"]
      },
      \\"video/av1\\": {
        source: \\"iana\\"
      },
      \\"video/bmpeg\\": {
        source: \\"iana\\"
      },
      \\"video/bt656\\": {
        source: \\"iana\\"
      },
      \\"video/celb\\": {
        source: \\"iana\\"
      },
      \\"video/dv\\": {
        source: \\"iana\\"
      },
      \\"video/encaprtp\\": {
        source: \\"iana\\"
      },
      \\"video/ffv1\\": {
        source: \\"iana\\"
      },
      \\"video/flexfec\\": {
        source: \\"iana\\"
      },
      \\"video/h261\\": {
        source: \\"iana\\",
        extensions: [\\"h261\\"]
      },
      \\"video/h263\\": {
        source: \\"iana\\",
        extensions: [\\"h263\\"]
      },
      \\"video/h263-1998\\": {
        source: \\"iana\\"
      },
      \\"video/h263-2000\\": {
        source: \\"iana\\"
      },
      \\"video/h264\\": {
        source: \\"iana\\",
        extensions: [\\"h264\\"]
      },
      \\"video/h264-rcdo\\": {
        source: \\"iana\\"
      },
      \\"video/h264-svc\\": {
        source: \\"iana\\"
      },
      \\"video/h265\\": {
        source: \\"iana\\"
      },
      \\"video/iso.segment\\": {
        source: \\"iana\\",
        extensions: [\\"m4s\\"]
      },
      \\"video/jpeg\\": {
        source: \\"iana\\",
        extensions: [\\"jpgv\\"]
      },
      \\"video/jpeg2000\\": {
        source: \\"iana\\"
      },
      \\"video/jpm\\": {
        source: \\"apache\\",
        extensions: [\\"jpm\\", \\"jpgm\\"]
      },
      \\"video/jxsv\\": {
        source: \\"iana\\"
      },
      \\"video/mj2\\": {
        source: \\"iana\\",
        extensions: [\\"mj2\\", \\"mjp2\\"]
      },
      \\"video/mp1s\\": {
        source: \\"iana\\"
      },
      \\"video/mp2p\\": {
        source: \\"iana\\"
      },
      \\"video/mp2t\\": {
        source: \\"iana\\",
        extensions: [\\"ts\\"]
      },
      \\"video/mp4\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"mp4\\", \\"mp4v\\", \\"mpg4\\"]
      },
      \\"video/mp4v-es\\": {
        source: \\"iana\\"
      },
      \\"video/mpeg\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"mpeg\\", \\"mpg\\", \\"mpe\\", \\"m1v\\", \\"m2v\\"]
      },
      \\"video/mpeg4-generic\\": {
        source: \\"iana\\"
      },
      \\"video/mpv\\": {
        source: \\"iana\\"
      },
      \\"video/nv\\": {
        source: \\"iana\\"
      },
      \\"video/ogg\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"ogv\\"]
      },
      \\"video/parityfec\\": {
        source: \\"iana\\"
      },
      \\"video/pointer\\": {
        source: \\"iana\\"
      },
      \\"video/quicktime\\": {
        source: \\"iana\\",
        compressible: false,
        extensions: [\\"qt\\", \\"mov\\"]
      },
      \\"video/raptorfec\\": {
        source: \\"iana\\"
      },
      \\"video/raw\\": {
        source: \\"iana\\"
      },
      \\"video/rtp-enc-aescm128\\": {
        source: \\"iana\\"
      },
      \\"video/rtploopback\\": {
        source: \\"iana\\"
      },
      \\"video/rtx\\": {
        source: \\"iana\\"
      },
      \\"video/scip\\": {
        source: \\"iana\\"
      },
      \\"video/smpte291\\": {
        source: \\"iana\\"
      },
      \\"video/smpte292m\\": {
        source: \\"iana\\"
      },
      \\"video/ulpfec\\": {
        source: \\"iana\\"
      },
      \\"video/vc1\\": {
        source: \\"iana\\"
      },
      \\"video/vc2\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.cctv\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.dece.hd\\": {
        source: \\"iana\\",
        extensions: [\\"uvh\\", \\"uvvh\\"]
      },
      \\"video/vnd.dece.mobile\\": {
        source: \\"iana\\",
        extensions: [\\"uvm\\", \\"uvvm\\"]
      },
      \\"video/vnd.dece.mp4\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.dece.pd\\": {
        source: \\"iana\\",
        extensions: [\\"uvp\\", \\"uvvp\\"]
      },
      \\"video/vnd.dece.sd\\": {
        source: \\"iana\\",
        extensions: [\\"uvs\\", \\"uvvs\\"]
      },
      \\"video/vnd.dece.video\\": {
        source: \\"iana\\",
        extensions: [\\"uvv\\", \\"uvvv\\"]
      },
      \\"video/vnd.directv.mpeg\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.directv.mpeg-tts\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.dlna.mpeg-tts\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.dvb.file\\": {
        source: \\"iana\\",
        extensions: [\\"dvb\\"]
      },
      \\"video/vnd.fvt\\": {
        source: \\"iana\\",
        extensions: [\\"fvt\\"]
      },
      \\"video/vnd.hns.video\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.iptvforum.1dparityfec-1010\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.iptvforum.1dparityfec-2005\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.iptvforum.2dparityfec-1010\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.iptvforum.2dparityfec-2005\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.iptvforum.ttsavc\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.iptvforum.ttsmpeg2\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.motorola.video\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.motorola.videop\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.mpegurl\\": {
        source: \\"iana\\",
        extensions: [\\"mxu\\", \\"m4u\\"]
      },
      \\"video/vnd.ms-playready.media.pyv\\": {
        source: \\"iana\\",
        extensions: [\\"pyv\\"]
      },
      \\"video/vnd.nokia.interleaved-multimedia\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.nokia.mp4vr\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.nokia.videovoip\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.objectvideo\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.radgamettools.bink\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.radgamettools.smacker\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.sealed.mpeg1\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.sealed.mpeg4\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.sealed.swf\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.sealedmedia.softseal.mov\\": {
        source: \\"iana\\"
      },
      \\"video/vnd.uvvu.mp4\\": {
        source: \\"iana\\",
        extensions: [\\"uvu\\", \\"uvvu\\"]
      },
      \\"video/vnd.vivo\\": {
        source: \\"iana\\",
        extensions: [\\"viv\\"]
      },
      \\"video/vnd.youtube.yt\\": {
        source: \\"iana\\"
      },
      \\"video/vp8\\": {
        source: \\"iana\\"
      },
      \\"video/vp9\\": {
        source: \\"iana\\"
      },
      \\"video/webm\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"webm\\"]
      },
      \\"video/x-f4v\\": {
        source: \\"apache\\",
        extensions: [\\"f4v\\"]
      },
      \\"video/x-fli\\": {
        source: \\"apache\\",
        extensions: [\\"fli\\"]
      },
      \\"video/x-flv\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"flv\\"]
      },
      \\"video/x-m4v\\": {
        source: \\"apache\\",
        extensions: [\\"m4v\\"]
      },
      \\"video/x-matroska\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"mkv\\", \\"mk3d\\", \\"mks\\"]
      },
      \\"video/x-mng\\": {
        source: \\"apache\\",
        extensions: [\\"mng\\"]
      },
      \\"video/x-ms-asf\\": {
        source: \\"apache\\",
        extensions: [\\"asf\\", \\"asx\\"]
      },
      \\"video/x-ms-vob\\": {
        source: \\"apache\\",
        extensions: [\\"vob\\"]
      },
      \\"video/x-ms-wm\\": {
        source: \\"apache\\",
        extensions: [\\"wm\\"]
      },
      \\"video/x-ms-wmv\\": {
        source: \\"apache\\",
        compressible: false,
        extensions: [\\"wmv\\"]
      },
      \\"video/x-ms-wmx\\": {
        source: \\"apache\\",
        extensions: [\\"wmx\\"]
      },
      \\"video/x-ms-wvx\\": {
        source: \\"apache\\",
        extensions: [\\"wvx\\"]
      },
      \\"video/x-msvideo\\": {
        source: \\"apache\\",
        extensions: [\\"avi\\"]
      },
      \\"video/x-sgi-movie\\": {
        source: \\"apache\\",
        extensions: [\\"movie\\"]
      },
      \\"video/x-smv\\": {
        source: \\"apache\\",
        extensions: [\\"smv\\"]
      },
      \\"x-conference/x-cooltalk\\": {
        source: \\"apache\\",
        extensions: [\\"ice\\"]
      },
      \\"x-shader/x-fragment\\": {
        compressible: true
      },
      \\"x-shader/x-vertex\\": {
        compressible: true
      }
    };
  }
});

// .yarn/cache/mime-db-npm-1.52.0-b5371d6fd2-0d99a03585.zip/node_modules/mime-db/index.js
var require_mime_db = __commonJS({
  \\".yarn/cache/mime-db-npm-1.52.0-b5371d6fd2-0d99a03585.zip/node_modules/mime-db/index.js\\"(exports, module2) {
    module2.exports = require_db();
  }
});

// .yarn/cache/mime-types-npm-2.1.35-dd9ea9f3e2-89a5b7f1de.zip/node_modules/mime-types/index.js
var require_mime_types = __commonJS({
  \\".yarn/cache/mime-types-npm-2.1.35-dd9ea9f3e2-89a5b7f1de.zip/node_modules/mime-types/index.js\\"(exports) {
    \\"use strict\\";
    var db = require_mime_db();
    var extname = require(\\"path\\").extname;
    var EXTRACT_TYPE_REGEXP = /^\\\\s*([^;\\\\s]*)(?:;|\\\\s|$)/;
    var TEXT_TYPE_REGEXP = /^text\\\\//i;
    exports.charset = charset;
    exports.charsets = { lookup: charset };
    exports.contentType = contentType;
    exports.extension = extension;
    exports.extensions = /* @__PURE__ */ Object.create(null);
    exports.lookup = lookup;
    exports.types = /* @__PURE__ */ Object.create(null);
    populateMaps(exports.extensions, exports.types);
    function charset(type) {
      if (!type || typeof type !== \\"string\\") {
        return false;
      }
      var match = EXTRACT_TYPE_REGEXP.exec(type);
      var mime = match && db[match[1].toLowerCase()];
      if (mime && mime.charset) {
        return mime.charset;
      }
      if (match && TEXT_TYPE_REGEXP.test(match[1])) {
        return \\"UTF-8\\";
      }
      return false;
    }
    function contentType(str) {
      if (!str || typeof str !== \\"string\\") {
        return false;
      }
      var mime = str.indexOf(\\"/\\") === -1 ? exports.lookup(str) : str;
      if (!mime) {
        return false;
      }
      if (mime.indexOf(\\"charset\\") === -1) {
        var charset2 = exports.charset(mime);
        if (charset2)
          mime += \\"; charset=\\" + charset2.toLowerCase();
      }
      return mime;
    }
    function extension(type) {
      if (!type || typeof type !== \\"string\\") {
        return false;
      }
      var match = EXTRACT_TYPE_REGEXP.exec(type);
      var exts = match && exports.extensions[match[1].toLowerCase()];
      if (!exts || !exts.length) {
        return false;
      }
      return exts[0];
    }
    function lookup(path) {
      if (!path || typeof path !== \\"string\\") {
        return false;
      }
      var extension2 = extname(\\"x.\\" + path).toLowerCase().substr(1);
      if (!extension2) {
        return false;
      }
      return exports.types[extension2] || false;
    }
    function populateMaps(extensions, types) {
      var preference = [\\"nginx\\", \\"apache\\", void 0, \\"iana\\"];
      Object.keys(db).forEach(function forEachMimeType(type) {
        var mime = db[type];
        var exts = mime.extensions;
        if (!exts || !exts.length) {
          return;
        }
        extensions[type] = exts;
        for (var i = 0; i < exts.length; i++) {
          var extension2 = exts[i];
          if (types[extension2]) {
            var from = preference.indexOf(db[types[extension2]].source);
            var to = preference.indexOf(mime.source);
            if (types[extension2] !== \\"application/octet-stream\\" && (from > to || from === to && types[extension2].substr(0, 12) === \\"application/\\")) {
              continue;
            }
          }
          types[extension2] = type;
        }
      });
    }
  }
});

// .yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/lib/defer.js
var require_defer = __commonJS({
  \\".yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/lib/defer.js\\"(exports, module2) {
    module2.exports = defer;
    function defer(fn) {
      var nextTick = typeof setImmediate == \\"function\\" ? setImmediate : typeof process == \\"object\\" && typeof process.nextTick == \\"function\\" ? process.nextTick : null;
      if (nextTick) {
        nextTick(fn);
      } else {
        setTimeout(fn, 0);
      }
    }
  }
});

// .yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/lib/async.js
var require_async = __commonJS({
  \\".yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/lib/async.js\\"(exports, module2) {
    var defer = require_defer();
    module2.exports = async;
    function async(callback) {
      var isAsync = false;
      defer(function() {
        isAsync = true;
      });
      return function async_callback(err, result) {
        if (isAsync) {
          callback(err, result);
        } else {
          defer(function nextTick_callback() {
            callback(err, result);
          });
        }
      };
    }
  }
});

// .yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/lib/abort.js
var require_abort = __commonJS({
  \\".yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/lib/abort.js\\"(exports, module2) {
    module2.exports = abort;
    function abort(state) {
      Object.keys(state.jobs).forEach(clean.bind(state));
      state.jobs = {};
    }
    function clean(key) {
      if (typeof this.jobs[key] == \\"function\\") {
        this.jobs[key]();
      }
    }
  }
});

// .yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/lib/iterate.js
var require_iterate = __commonJS({
  \\".yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/lib/iterate.js\\"(exports, module2) {
    var async = require_async();
    var abort = require_abort();
    module2.exports = iterate;
    function iterate(list2, iterator, state, callback) {
      var key = state[\\"keyedList\\"] ? state[\\"keyedList\\"][state.index] : state.index;
      state.jobs[key] = runJob(iterator, key, list2[key], function(error, output) {
        if (!(key in state.jobs)) {
          return;
        }
        delete state.jobs[key];
        if (error) {
          abort(state);
        } else {
          state.results[key] = output;
        }
        callback(error, state.results);
      });
    }
    function runJob(iterator, key, item, callback) {
      var aborter;
      if (iterator.length == 2) {
        aborter = iterator(item, async(callback));
      } else {
        aborter = iterator(item, key, async(callback));
      }
      return aborter;
    }
  }
});

// .yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/lib/state.js
var require_state = __commonJS({
  \\".yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/lib/state.js\\"(exports, module2) {
    module2.exports = state;
    function state(list2, sortMethod) {
      var isNamedList = !Array.isArray(list2), initState = {
        index: 0,
        keyedList: isNamedList || sortMethod ? Object.keys(list2) : null,
        jobs: {},
        results: isNamedList ? {} : [],
        size: isNamedList ? Object.keys(list2).length : list2.length
      };
      if (sortMethod) {
        initState.keyedList.sort(isNamedList ? sortMethod : function(a, b) {
          return sortMethod(list2[a], list2[b]);
        });
      }
      return initState;
    }
  }
});

// .yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/lib/terminator.js
var require_terminator = __commonJS({
  \\".yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/lib/terminator.js\\"(exports, module2) {
    var abort = require_abort();
    var async = require_async();
    module2.exports = terminator;
    function terminator(callback) {
      if (!Object.keys(this.jobs).length) {
        return;
      }
      this.index = this.size;
      abort(this);
      async(callback)(null, this.results);
    }
  }
});

// .yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/parallel.js
var require_parallel = __commonJS({
  \\".yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/parallel.js\\"(exports, module2) {
    var iterate = require_iterate();
    var initState = require_state();
    var terminator = require_terminator();
    module2.exports = parallel;
    function parallel(list2, iterator, callback) {
      var state = initState(list2);
      while (state.index < (state[\\"keyedList\\"] || list2).length) {
        iterate(list2, iterator, state, function(error, result) {
          if (error) {
            callback(error, result);
            return;
          }
          if (Object.keys(state.jobs).length === 0) {
            callback(null, state.results);
            return;
          }
        });
        state.index++;
      }
      return terminator.bind(state, callback);
    }
  }
});

// .yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/serialOrdered.js
var require_serialOrdered = __commonJS({
  \\".yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/serialOrdered.js\\"(exports, module2) {
    var iterate = require_iterate();
    var initState = require_state();
    var terminator = require_terminator();
    module2.exports = serialOrdered;
    module2.exports.ascending = ascending;
    module2.exports.descending = descending;
    function serialOrdered(list2, iterator, sortMethod, callback) {
      var state = initState(list2, sortMethod);
      iterate(list2, iterator, state, function iteratorHandler(error, result) {
        if (error) {
          callback(error, result);
          return;
        }
        state.index++;
        if (state.index < (state[\\"keyedList\\"] || list2).length) {
          iterate(list2, iterator, state, iteratorHandler);
          return;
        }
        callback(null, state.results);
      });
      return terminator.bind(state, callback);
    }
    function ascending(a, b) {
      return a < b ? -1 : a > b ? 1 : 0;
    }
    function descending(a, b) {
      return -1 * ascending(a, b);
    }
  }
});

// .yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/serial.js
var require_serial = __commonJS({
  \\".yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/serial.js\\"(exports, module2) {
    var serialOrdered = require_serialOrdered();
    module2.exports = serial;
    function serial(list2, iterator, callback) {
      return serialOrdered(list2, iterator, null, callback);
    }
  }
});

// .yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/index.js
var require_asynckit = __commonJS({
  \\".yarn/cache/asynckit-npm-0.4.0-c718858525-7b78c451df.zip/node_modules/asynckit/index.js\\"(exports, module2) {
    module2.exports = {
      parallel: require_parallel(),
      serial: require_serial(),
      serialOrdered: require_serialOrdered()
    };
  }
});

// .yarn/cache/form-data-npm-4.0.0-916facec2d-01135bf867.zip/node_modules/form-data/lib/populate.js
var require_populate = __commonJS({
  \\".yarn/cache/form-data-npm-4.0.0-916facec2d-01135bf867.zip/node_modules/form-data/lib/populate.js\\"(exports, module2) {
    module2.exports = function(dst, src) {
      Object.keys(src).forEach(function(prop) {
        dst[prop] = dst[prop] || src[prop];
      });
      return dst;
    };
  }
});

// .yarn/cache/form-data-npm-4.0.0-916facec2d-01135bf867.zip/node_modules/form-data/lib/form_data.js
var require_form_data = __commonJS({
  \\".yarn/cache/form-data-npm-4.0.0-916facec2d-01135bf867.zip/node_modules/form-data/lib/form_data.js\\"(exports, module2) {
    var CombinedStream = require_combined_stream();
    var util2 = require(\\"util\\");
    var path = require(\\"path\\");
    var http2 = require(\\"http\\");
    var https2 = require(\\"https\\");
    var parseUrl = require(\\"url\\").parse;
    var fs = require(\\"fs\\");
    var Stream = require(\\"stream\\").Stream;
    var mime = require_mime_types();
    var asynckit = require_asynckit();
    var populate = require_populate();
    module2.exports = FormData3;
    util2.inherits(FormData3, CombinedStream);
    function FormData3(options) {
      if (!(this instanceof FormData3)) {
        return new FormData3(options);
      }
      this._overheadLength = 0;
      this._valueLength = 0;
      this._valuesToMeasure = [];
      CombinedStream.call(this);
      options = options || {};
      for (var option in options) {
        this[option] = options[option];
      }
    }
    FormData3.LINE_BREAK = \\"\\\\r\\\\n\\";
    FormData3.DEFAULT_CONTENT_TYPE = \\"application/octet-stream\\";
    FormData3.prototype.append = function(field, value, options) {
      options = options || {};
      if (typeof options == \\"string\\") {
        options = { filename: options };
      }
      var append2 = CombinedStream.prototype.append.bind(this);
      if (typeof value == \\"number\\") {
        value = \\"\\" + value;
      }
      if (util2.isArray(value)) {
        this._error(new Error(\\"Arrays are not supported.\\"));
        return;
      }
      var header = this._multiPartHeader(field, value, options);
      var footer = this._multiPartFooter();
      append2(header);
      append2(value);
      append2(footer);
      this._trackLength(header, value, options);
    };
    FormData3.prototype._trackLength = function(header, value, options) {
      var valueLength = 0;
      if (options.knownLength != null) {
        valueLength += +options.knownLength;
      } else if (Buffer.isBuffer(value)) {
        valueLength = value.length;
      } else if (typeof value === \\"string\\") {
        valueLength = Buffer.byteLength(value);
      }
      this._valueLength += valueLength;
      this._overheadLength += Buffer.byteLength(header) + FormData3.LINE_BREAK.length;
      if (!value || !value.path && !(value.readable && value.hasOwnProperty(\\"httpVersion\\")) && !(value instanceof Stream)) {
        return;
      }
      if (!options.knownLength) {
        this._valuesToMeasure.push(value);
      }
    };
    FormData3.prototype._lengthRetriever = function(value, callback) {
      if (value.hasOwnProperty(\\"fd\\")) {
        if (value.end != void 0 && value.end != Infinity && value.start != void 0) {
          callback(null, value.end + 1 - (value.start ? value.start : 0));
        } else {
          fs.stat(value.path, function(err, stat) {
            var fileSize;
            if (err) {
              callback(err);
              return;
            }
            fileSize = stat.size - (value.start ? value.start : 0);
            callback(null, fileSize);
          });
        }
      } else if (value.hasOwnProperty(\\"httpVersion\\")) {
        callback(null, +value.headers[\\"content-length\\"]);
      } else if (value.hasOwnProperty(\\"httpModule\\")) {
        value.on(\\"response\\", function(response) {
          value.pause();
          callback(null, +response.headers[\\"content-length\\"]);
        });
        value.resume();
      } else {
        callback(\\"Unknown stream\\");
      }
    };
    FormData3.prototype._multiPartHeader = function(field, value, options) {
      if (typeof options.header == \\"string\\") {
        return options.header;
      }
      var contentDisposition = this._getContentDisposition(value, options);
      var contentType = this._getContentType(value, options);
      var contents = \\"\\";
      var headers = {
        // add custom disposition as third element or keep it two elements if not
        \\"Content-Disposition\\": [\\"form-data\\", 'name=\\"' + field + '\\"'].concat(contentDisposition || []),
        // if no content type. allow it to be empty array
        \\"Content-Type\\": [].concat(contentType || [])
      };
      if (typeof options.header == \\"object\\") {
        populate(headers, options.header);
      }
      var header;
      for (var prop in headers) {
        if (!headers.hasOwnProperty(prop))
          continue;
        header = headers[prop];
        if (header == null) {
          continue;
        }
        if (!Array.isArray(header)) {
          header = [header];
        }
        if (header.length) {
          contents += prop + \\": \\" + header.join(\\"; \\") + FormData3.LINE_BREAK;
        }
      }
      return \\"--\\" + this.getBoundary() + FormData3.LINE_BREAK + contents + FormData3.LINE_BREAK;
    };
    FormData3.prototype._getContentDisposition = function(value, options) {
      var filename, contentDisposition;
      if (typeof options.filepath === \\"string\\") {
        filename = path.normalize(options.filepath).replace(/\\\\\\\\/g, \\"/\\");
      } else if (options.filename || value.name || value.path) {
        filename = path.basename(options.filename || value.name || value.path);
      } else if (value.readable && value.hasOwnProperty(\\"httpVersion\\")) {
        filename = path.basename(value.client._httpMessage.path || \\"\\");
      }
      if (filename) {
        contentDisposition = 'filename=\\"' + filename + '\\"';
      }
      return contentDisposition;
    };
    FormData3.prototype._getContentType = function(value, options) {
      var contentType = options.contentType;
      if (!contentType && value.name) {
        contentType = mime.lookup(value.name);
      }
      if (!contentType && value.path) {
        contentType = mime.lookup(value.path);
      }
      if (!contentType && value.readable && value.hasOwnProperty(\\"httpVersion\\")) {
        contentType = value.headers[\\"content-type\\"];
      }
      if (!contentType && (options.filepath || options.filename)) {
        contentType = mime.lookup(options.filepath || options.filename);
      }
      if (!contentType && typeof value == \\"object\\") {
        contentType = FormData3.DEFAULT_CONTENT_TYPE;
      }
      return contentType;
    };
    FormData3.prototype._multiPartFooter = function() {
      return function(next) {
        var footer = FormData3.LINE_BREAK;
        var lastPart = this._streams.length === 0;
        if (lastPart) {
          footer += this._lastBoundary();
        }
        next(footer);
      }.bind(this);
    };
    FormData3.prototype._lastBoundary = function() {
      return \\"--\\" + this.getBoundary() + \\"--\\" + FormData3.LINE_BREAK;
    };
    FormData3.prototype.getHeaders = function(userHeaders) {
      var header;
      var formHeaders = {
        \\"content-type\\": \\"multipart/form-data; boundary=\\" + this.getBoundary()
      };
      for (header in userHeaders) {
        if (userHeaders.hasOwnProperty(header)) {
          formHeaders[header.toLowerCase()] = userHeaders[header];
        }
      }
      return formHeaders;
    };
    FormData3.prototype.setBoundary = function(boundary) {
      this._boundary = boundary;
    };
    FormData3.prototype.getBoundary = function() {
      if (!this._boundary) {
        this._generateBoundary();
      }
      return this._boundary;
    };
    FormData3.prototype.getBuffer = function() {
      var dataBuffer = new Buffer.alloc(0);
      var boundary = this.getBoundary();
      for (var i = 0, len = this._streams.length; i < len; i++) {
        if (typeof this._streams[i] !== \\"function\\") {
          if (Buffer.isBuffer(this._streams[i])) {
            dataBuffer = Buffer.concat([dataBuffer, this._streams[i]]);
          } else {
            dataBuffer = Buffer.concat([dataBuffer, Buffer.from(this._streams[i])]);
          }
          if (typeof this._streams[i] !== \\"string\\" || this._streams[i].substring(2, boundary.length + 2) !== boundary) {
            dataBuffer = Buffer.concat([dataBuffer, Buffer.from(FormData3.LINE_BREAK)]);
          }
        }
      }
      return Buffer.concat([dataBuffer, Buffer.from(this._lastBoundary())]);
    };
    FormData3.prototype._generateBoundary = function() {
      var boundary = \\"--------------------------\\";
      for (var i = 0; i < 24; i++) {
        boundary += Math.floor(Math.random() * 10).toString(16);
      }
      this._boundary = boundary;
    };
    FormData3.prototype.getLengthSync = function() {
      var knownLength = this._overheadLength + this._valueLength;
      if (this._streams.length) {
        knownLength += this._lastBoundary().length;
      }
      if (!this.hasKnownLength()) {
        this._error(new Error(\\"Cannot calculate proper length in synchronous way.\\"));
      }
      return knownLength;
    };
    FormData3.prototype.hasKnownLength = function() {
      var hasKnownLength = true;
      if (this._valuesToMeasure.length) {
        hasKnownLength = false;
      }
      return hasKnownLength;
    };
    FormData3.prototype.getLength = function(cb) {
      var knownLength = this._overheadLength + this._valueLength;
      if (this._streams.length) {
        knownLength += this._lastBoundary().length;
      }
      if (!this._valuesToMeasure.length) {
        process.nextTick(cb.bind(this, null, knownLength));
        return;
      }
      asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {
        if (err) {
          cb(err);
          return;
        }
        values.forEach(function(length) {
          knownLength += length;
        });
        cb(null, knownLength);
      });
    };
    FormData3.prototype.submit = function(params, cb) {
      var request, options, defaults2 = { method: \\"post\\" };
      if (typeof params == \\"string\\") {
        params = parseUrl(params);
        options = populate({
          port: params.port,
          path: params.pathname,
          host: params.hostname,
          protocol: params.protocol
        }, defaults2);
      } else {
        options = populate(params, defaults2);
        if (!options.port) {
          options.port = options.protocol == \\"https:\\" ? 443 : 80;
        }
      }
      options.headers = this.getHeaders(params.headers);
      if (options.protocol == \\"https:\\") {
        request = https2.request(options);
      } else {
        request = http2.request(options);
      }
      this.getLength(function(err, length) {
        if (err && err !== \\"Unknown stream\\") {
          this._error(err);
          return;
        }
        if (length) {
          request.setHeader(\\"Content-Length\\", length);
        }
        this.pipe(request);
        if (cb) {
          var onResponse;
          var callback = function(error, responce) {
            request.removeListener(\\"error\\", callback);
            request.removeListener(\\"response\\", onResponse);
            return cb.call(this, error, responce);
          };
          onResponse = callback.bind(this, null);
          request.on(\\"error\\", callback);
          request.on(\\"response\\", onResponse);
        }
      }.bind(this));
      return request;
    };
    FormData3.prototype._error = function(err) {
      if (!this.error) {
        this.error = err;
        this.pause();
        this.emit(\\"error\\", err);
      }
    };
    FormData3.prototype.toString = function() {
      return \\"[object FormData]\\";
    };
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/node/classes/FormData.js
var import_form_data, FormData_default;
var init_FormData = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/node/classes/FormData.js\\"() {
    import_form_data = __toESM(require_form_data(), 1);
    FormData_default = import_form_data.default;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/toFormData.js
function isVisitable(thing) {
  return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
}
function removeBrackets(key) {
  return utils_default.endsWith(key, \\"[]\\") ? key.slice(0, -2) : key;
}
function renderKey(path, key, dots) {
  if (!path)
    return key;
  return path.concat(key).map(function each(token, i) {
    token = removeBrackets(token);
    return !dots && i ? \\"[\\" + token + \\"]\\" : token;
  }).join(dots ? \\".\\" : \\"\\");
}
function isFlatArray(arr) {
  return utils_default.isArray(arr) && !arr.some(isVisitable);
}
function toFormData(obj, formData, options) {
  if (!utils_default.isObject(obj)) {
    throw new TypeError(\\"target must be an object\\");
  }
  formData = formData || new (FormData_default || FormData)();
  options = utils_default.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    return !utils_default.isUndefined(source[option]);
  });
  const metaTokens = options.metaTokens;
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== \\"undefined\\" && Blob;
  const useBlob = _Blob && utils_default.isSpecCompliantForm(formData);
  if (!utils_default.isFunction(visitor)) {
    throw new TypeError(\\"visitor must be a function\\");
  }
  function convertValue(value) {
    if (value === null)
      return \\"\\";
    if (utils_default.isDate(value)) {
      return value.toISOString();
    }
    if (!useBlob && utils_default.isBlob(value)) {
      throw new AxiosError_default(\\"Blob is not supported. Use a Buffer instead.\\");
    }
    if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {
      return useBlob && typeof Blob === \\"function\\" ? new Blob([value]) : Buffer.from(value);
    }
    return value;
  }
  function defaultVisitor(value, key, path) {
    let arr = value;
    if (value && !path && typeof value === \\"object\\") {
      if (utils_default.endsWith(key, \\"{}\\")) {
        key = metaTokens ? key : key.slice(0, -2);
        value = JSON.stringify(value);
      } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key, \\"[]\\")) && (arr = utils_default.toArray(value))) {
        key = removeBrackets(key);
        arr.forEach(function each(el, index) {
          !(utils_default.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + \\"[]\\",
            convertValue(el)
          );
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path, key, dots), convertValue(value));
    return false;
  }
  const stack = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });
  function build(value, path) {
    if (utils_default.isUndefined(value))
      return;
    if (stack.indexOf(value) !== -1) {
      throw Error(\\"Circular reference detected in \\" + path.join(\\".\\"));
    }
    stack.push(value);
    utils_default.forEach(value, function each(el, key) {
      const result = !(utils_default.isUndefined(el) || el === null) && visitor.call(
        formData,
        el,
        utils_default.isString(key) ? key.trim() : key,
        path,
        exposedHelpers
      );
      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });
    stack.pop();
  }
  if (!utils_default.isObject(obj)) {
    throw new TypeError(\\"data must be an object\\");
  }
  build(obj);
  return formData;
}
var predicates, toFormData_default;
var init_toFormData = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/toFormData.js\\"() {
    \\"use strict\\";
    init_utils();
    init_AxiosError();
    init_FormData();
    predicates = utils_default.toFlatObject(utils_default, {}, null, function filter(prop) {
      return /^is[A-Z]/.test(prop);
    });
    toFormData_default = toFormData;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/AxiosURLSearchParams.js
function encode(str) {
  const charMap = {
    \\"!\\": \\"%21\\",
    \\"'\\": \\"%27\\",
    \\"(\\": \\"%28\\",
    \\")\\": \\"%29\\",
    \\"~\\": \\"%7E\\",
    \\"%20\\": \\"+\\",
    \\"%00\\": \\"\\\\0\\"
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && toFormData_default(params, this, options);
}
var prototype2, AxiosURLSearchParams_default;
var init_AxiosURLSearchParams = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/AxiosURLSearchParams.js\\"() {
    \\"use strict\\";
    init_toFormData();
    prototype2 = AxiosURLSearchParams.prototype;
    prototype2.append = function append(name, value) {
      this._pairs.push([name, value]);
    };
    prototype2.toString = function toString2(encoder) {
      const _encode = encoder ? function(value) {
        return encoder.call(this, value, encode);
      } : encode;
      return this._pairs.map(function each(pair) {
        return _encode(pair[0]) + \\"=\\" + _encode(pair[1]);
      }, \\"\\").join(\\"&\\");
    };
    AxiosURLSearchParams_default = AxiosURLSearchParams;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/buildURL.js
function encode2(val) {
  return encodeURIComponent(val).replace(/%3A/gi, \\":\\").replace(/%24/g, \\"$\\").replace(/%2C/gi, \\",\\").replace(/%20/g, \\"+\\").replace(/%5B/gi, \\"[\\").replace(/%5D/gi, \\"]\\");
}
function buildURL(url2, params, options) {
  if (!params) {
    return url2;
  }
  const _encode = options && options.encode || encode2;
  const serializeFn = options && options.serialize;
  let serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode);
  }
  if (serializedParams) {
    const hashmarkIndex = url2.indexOf(\\"#\\");
    if (hashmarkIndex !== -1) {
      url2 = url2.slice(0, hashmarkIndex);
    }
    url2 += (url2.indexOf(\\"?\\") === -1 ? \\"?\\" : \\"&\\") + serializedParams;
  }
  return url2;
}
var init_buildURL = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/buildURL.js\\"() {
    \\"use strict\\";
    init_utils();
    init_AxiosURLSearchParams();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/InterceptorManager.js
var InterceptorManager, InterceptorManager_default;
var init_InterceptorManager = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/InterceptorManager.js\\"() {
    \\"use strict\\";
    init_utils();
    InterceptorManager = class {
      constructor() {
        this.handlers = [];
      }
      /**
       * Add a new interceptor to the stack
       *
       * @param {Function} fulfilled The function to handle \`then\` for a \`Promise\`
       * @param {Function} rejected The function to handle \`reject\` for a \`Promise\`
       *
       * @return {Number} An ID used to remove interceptor later
       */
      use(fulfilled, rejected, options) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options ? options.synchronous : false,
          runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
      }
      /**
       * Remove an interceptor from the stack
       *
       * @param {Number} id The ID that was returned by \`use\`
       *
       * @returns {Boolean} \`true\` if the interceptor was removed, \`false\` otherwise
       */
      eject(id) {
        if (this.handlers[id]) {
          this.handlers[id] = null;
        }
      }
      /**
       * Clear all interceptors from the stack
       *
       * @returns {void}
       */
      clear() {
        if (this.handlers) {
          this.handlers = [];
        }
      }
      /**
       * Iterate over all the registered interceptors
       *
       * This method is particularly useful for skipping over any
       * interceptors that may have become \`null\` calling \`eject\`.
       *
       * @param {Function} fn The function to call for each interceptor
       *
       * @returns {void}
       */
      forEach(fn) {
        utils_default.forEach(this.handlers, function forEachHandler(h) {
          if (h !== null) {
            fn(h);
          }
        });
      }
    };
    InterceptorManager_default = InterceptorManager;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/defaults/transitional.js
var transitional_default;
var init_transitional = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/defaults/transitional.js\\"() {
    \\"use strict\\";
    transitional_default = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/node/classes/URLSearchParams.js
var import_url, URLSearchParams_default;
var init_URLSearchParams = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/node/classes/URLSearchParams.js\\"() {
    \\"use strict\\";
    import_url = __toESM(require(\\"url\\"), 1);
    URLSearchParams_default = import_url.default.URLSearchParams;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/node/index.js
var node_default;
var init_node = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/node/index.js\\"() {
    init_URLSearchParams();
    init_FormData();
    node_default = {
      isNode: true,
      classes: {
        URLSearchParams: URLSearchParams_default,
        FormData: FormData_default,
        Blob: typeof Blob !== \\"undefined\\" && Blob || null
      },
      protocols: [\\"http\\", \\"https\\", \\"file\\", \\"data\\"]
    };
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/index.js
var init_platform = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/platform/index.js\\"() {
    init_node();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/toURLEncodedForm.js
function toURLEncodedForm(data, options) {
  return toFormData_default(data, new node_default.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (node_default.isNode && utils_default.isBuffer(value)) {
        this.append(key, value.toString(\\"base64\\"));
        return false;
      }
      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}
var init_toURLEncodedForm = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/toURLEncodedForm.js\\"() {
    \\"use strict\\";
    init_utils();
    init_toFormData();
    init_platform();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/formDataToJSON.js
function parsePropPath(name) {
  return utils_default.matchAll(/\\\\w+|\\\\[(\\\\w*)]/g, name).map((match) => {
    return match[0] === \\"[]\\" ? \\"\\" : match[1] || match[0];
  });
}
function arrayToObject(arr) {
  const obj = {};
  const keys2 = Object.keys(arr);
  let i;
  const len = keys2.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys2[i];
    obj[key] = arr[key];
  }
  return obj;
}
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];
    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils_default.isArray(target) ? target.length : name;
    if (isLast) {
      if (utils_default.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !utils_default.isObject(target[name])) {
      target[name] = [];
    }
    const result = buildPath(path, value, target[name], index);
    if (result && utils_default.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
    const obj = {};
    utils_default.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}
var formDataToJSON_default;
var init_formDataToJSON = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/formDataToJSON.js\\"() {
    \\"use strict\\";
    init_utils();
    formDataToJSON_default = formDataToJSON;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/defaults/index.js
function stringifySafely(rawValue, parser, encoder) {
  if (utils_default.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils_default.trim(rawValue);
    } catch (e) {
      if (e.name !== \\"SyntaxError\\") {
        throw e;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
var DEFAULT_CONTENT_TYPE, defaults, defaults_default;
var init_defaults = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/defaults/index.js\\"() {
    \\"use strict\\";
    init_utils();
    init_AxiosError();
    init_transitional();
    init_toFormData();
    init_toURLEncodedForm();
    init_platform();
    init_formDataToJSON();
    DEFAULT_CONTENT_TYPE = {
      \\"Content-Type\\": void 0
    };
    defaults = {
      transitional: transitional_default,
      adapter: [\\"xhr\\", \\"http\\"],
      transformRequest: [function transformRequest(data, headers) {
        const contentType = headers.getContentType() || \\"\\";
        const hasJSONContentType = contentType.indexOf(\\"application/json\\") > -1;
        const isObjectPayload = utils_default.isObject(data);
        if (isObjectPayload && utils_default.isHTMLForm(data)) {
          data = new FormData(data);
        }
        const isFormData2 = utils_default.isFormData(data);
        if (isFormData2) {
          if (!hasJSONContentType) {
            return data;
          }
          return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;
        }
        if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data)) {
          return data;
        }
        if (utils_default.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils_default.isURLSearchParams(data)) {
          headers.setContentType(\\"application/x-www-form-urlencoded;charset=utf-8\\", false);
          return data.toString();
        }
        let isFileList2;
        if (isObjectPayload) {
          if (contentType.indexOf(\\"application/x-www-form-urlencoded\\") > -1) {
            return toURLEncodedForm(data, this.formSerializer).toString();
          }
          if ((isFileList2 = utils_default.isFileList(data)) || contentType.indexOf(\\"multipart/form-data\\") > -1) {
            const _FormData = this.env && this.env.FormData;
            return toFormData_default(
              isFileList2 ? { \\"files[]\\": data } : data,
              _FormData && new _FormData(),
              this.formSerializer
            );
          }
        }
        if (isObjectPayload || hasJSONContentType) {
          headers.setContentType(\\"application/json\\", false);
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        const transitional2 = this.transitional || defaults.transitional;
        const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
        const JSONRequested = this.responseType === \\"json\\";
        if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
          const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
          const strictJSONParsing = !silentJSONParsing && JSONRequested;
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === \\"SyntaxError\\") {
                throw AxiosError_default.from(e, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: \\"XSRF-TOKEN\\",
      xsrfHeaderName: \\"X-XSRF-TOKEN\\",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: node_default.classes.FormData,
        Blob: node_default.classes.Blob
      },
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          \\"Accept\\": \\"application/json, text/plain, */*\\"
        }
      }
    };
    utils_default.forEach([\\"delete\\", \\"get\\", \\"head\\"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils_default.forEach([\\"post\\", \\"put\\", \\"patch\\"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils_default.merge(DEFAULT_CONTENT_TYPE);
    });
    defaults_default = defaults;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/parseHeaders.js
var ignoreDuplicateOf, parseHeaders_default;
var init_parseHeaders = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/parseHeaders.js\\"() {
    \\"use strict\\";
    init_utils();
    ignoreDuplicateOf = utils_default.toObjectSet([
      \\"age\\",
      \\"authorization\\",
      \\"content-length\\",
      \\"content-type\\",
      \\"etag\\",
      \\"expires\\",
      \\"from\\",
      \\"host\\",
      \\"if-modified-since\\",
      \\"if-unmodified-since\\",
      \\"last-modified\\",
      \\"location\\",
      \\"max-forwards\\",
      \\"proxy-authorization\\",
      \\"referer\\",
      \\"retry-after\\",
      \\"user-agent\\"
    ]);
    parseHeaders_default = (rawHeaders) => {
      const parsed = {};
      let key;
      let val;
      let i;
      rawHeaders && rawHeaders.split(\\"\\\\n\\").forEach(function parser(line) {
        i = line.indexOf(\\":\\");
        key = line.substring(0, i).trim().toLowerCase();
        val = line.substring(i + 1).trim();
        if (!key || parsed[key] && ignoreDuplicateOf[key]) {
          return;
        }
        if (key === \\"set-cookie\\") {
          if (parsed[key]) {
            parsed[key].push(val);
          } else {
            parsed[key] = [val];
          }
        } else {
          parsed[key] = parsed[key] ? parsed[key] + \\", \\" + val : val;
        }
      });
      return parsed;
    };
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/AxiosHeaders.js
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
  const tokens = /* @__PURE__ */ Object.create(null);
  const tokensRE = /([^\\\\s,;=]+)\\\\s*(?:=\\\\s*([^,;]+))?/g;
  let match;
  while (match = tokensRE.exec(str)) {
    tokens[match[1]] = match[2];
  }
  return tokens;
}
function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
  if (utils_default.isFunction(filter2)) {
    return filter2.call(this, value, header);
  }
  if (isHeaderNameFilter) {
    value = header;
  }
  if (!utils_default.isString(value))
    return;
  if (utils_default.isString(filter2)) {
    return value.indexOf(filter2) !== -1;
  }
  if (utils_default.isRegExp(filter2)) {
    return filter2.test(value);
  }
}
function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\\\\d])(\\\\w*)/g, (w, char, str) => {
    return char.toUpperCase() + str;
  });
}
function buildAccessors(obj, header) {
  const accessorName = utils_default.toCamelCase(\\" \\" + header);
  [\\"get\\", \\"set\\", \\"has\\"].forEach((methodName) => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}
var $internals, isValidHeaderName, AxiosHeaders, AxiosHeaders_default;
var init_AxiosHeaders = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/AxiosHeaders.js\\"() {
    \\"use strict\\";
    init_utils();
    init_parseHeaders();
    $internals = Symbol(\\"internals\\");
    isValidHeaderName = (str) => /^[-_a-zA-Z0-9^\`|~,!#$%&'*+.]+$/.test(str.trim());
    AxiosHeaders = class {
      constructor(headers) {
        headers && this.set(headers);
      }
      set(header, valueOrRewrite, rewrite) {
        const self2 = this;
        function setHeader(_value, _header, _rewrite) {
          const lHeader = normalizeHeader(_header);
          if (!lHeader) {
            throw new Error(\\"header name must be a non-empty string\\");
          }
          const key = utils_default.findKey(self2, lHeader);
          if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
            self2[key || _header] = normalizeValue(_value);
          }
        }
        const setHeaders = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
        if (utils_default.isPlainObject(header) || header instanceof this.constructor) {
          setHeaders(header, valueOrRewrite);
        } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
          setHeaders(parseHeaders_default(header), valueOrRewrite);
        } else {
          header != null && setHeader(valueOrRewrite, header, rewrite);
        }
        return this;
      }
      get(header, parser) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils_default.findKey(this, header);
          if (key) {
            const value = this[key];
            if (!parser) {
              return value;
            }
            if (parser === true) {
              return parseTokens(value);
            }
            if (utils_default.isFunction(parser)) {
              return parser.call(this, value, key);
            }
            if (utils_default.isRegExp(parser)) {
              return parser.exec(value);
            }
            throw new TypeError(\\"parser must be boolean|regexp|function\\");
          }
        }
      }
      has(header, matcher) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils_default.findKey(this, header);
          return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
        }
        return false;
      }
      delete(header, matcher) {
        const self2 = this;
        let deleted = false;
        function deleteHeader(_header) {
          _header = normalizeHeader(_header);
          if (_header) {
            const key = utils_default.findKey(self2, _header);
            if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
              delete self2[key];
              deleted = true;
            }
          }
        }
        if (utils_default.isArray(header)) {
          header.forEach(deleteHeader);
        } else {
          deleteHeader(header);
        }
        return deleted;
      }
      clear(matcher) {
        const keys2 = Object.keys(this);
        let i = keys2.length;
        let deleted = false;
        while (i--) {
          const key = keys2[i];
          if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
            delete this[key];
            deleted = true;
          }
        }
        return deleted;
      }
      normalize(format) {
        const self2 = this;
        const headers = {};
        utils_default.forEach(this, (value, header) => {
          const key = utils_default.findKey(headers, header);
          if (key) {
            self2[key] = normalizeValue(value);
            delete self2[header];
            return;
          }
          const normalized = format ? formatHeader(header) : String(header).trim();
          if (normalized !== header) {
            delete self2[header];
          }
          self2[normalized] = normalizeValue(value);
          headers[normalized] = true;
        });
        return this;
      }
      concat(...targets) {
        return this.constructor.concat(this, ...targets);
      }
      toJSON(asStrings) {
        const obj = /* @__PURE__ */ Object.create(null);
        utils_default.forEach(this, (value, header) => {
          value != null && value !== false && (obj[header] = asStrings && utils_default.isArray(value) ? value.join(\\", \\") : value);
        });
        return obj;
      }
      [Symbol.iterator]() {
        return Object.entries(this.toJSON())[Symbol.iterator]();
      }
      toString() {
        return Object.entries(this.toJSON()).map(([header, value]) => header + \\": \\" + value).join(\\"\\\\n\\");
      }
      get [Symbol.toStringTag]() {
        return \\"AxiosHeaders\\";
      }
      static from(thing) {
        return thing instanceof this ? thing : new this(thing);
      }
      static concat(first, ...targets) {
        const computed = new this(first);
        targets.forEach((target) => computed.set(target));
        return computed;
      }
      static accessor(header) {
        const internals = this[$internals] = this[$internals] = {
          accessors: {}
        };
        const accessors = internals.accessors;
        const prototype3 = this.prototype;
        function defineAccessor(_header) {
          const lHeader = normalizeHeader(_header);
          if (!accessors[lHeader]) {
            buildAccessors(prototype3, _header);
            accessors[lHeader] = true;
          }
        }
        utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
        return this;
      }
    };
    AxiosHeaders.accessor([\\"Content-Type\\", \\"Content-Length\\", \\"Accept\\", \\"Accept-Encoding\\", \\"User-Agent\\", \\"Authorization\\"]);
    utils_default.freezeMethods(AxiosHeaders.prototype);
    utils_default.freezeMethods(AxiosHeaders);
    AxiosHeaders_default = AxiosHeaders;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/transformData.js
function transformData(fns, response) {
  const config = this || defaults_default;
  const context = response || config;
  const headers = AxiosHeaders_default.from(context.headers);
  let data = context.data;
  utils_default.forEach(fns, function transform2(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
  });
  headers.normalize();
  return data;
}
var init_transformData = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/transformData.js\\"() {
    \\"use strict\\";
    init_utils();
    init_defaults();
    init_AxiosHeaders();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/cancel/isCancel.js
function isCancel(value) {
  return !!(value && value.__CANCEL__);
}
var init_isCancel = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/cancel/isCancel.js\\"() {
    \\"use strict\\";
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/cancel/CanceledError.js
function CanceledError(message, config, request) {
  AxiosError_default.call(this, message == null ? \\"canceled\\" : message, AxiosError_default.ERR_CANCELED, config, request);
  this.name = \\"CanceledError\\";
}
var CanceledError_default;
var init_CanceledError = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/cancel/CanceledError.js\\"() {
    \\"use strict\\";
    init_AxiosError();
    init_utils();
    utils_default.inherits(CanceledError, AxiosError_default, {
      __CANCEL__: true
    });
    CanceledError_default = CanceledError;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/settle.js
function settle(resolve, reject, response) {
  const validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError_default(
      \\"Request failed with status code \\" + response.status,
      [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}
var init_settle = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/settle.js\\"() {
    \\"use strict\\";
    init_AxiosError();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/isAbsoluteURL.js
function isAbsoluteURL(url2) {
  return /^([a-z][a-z\\\\d+\\\\-.]*:)?\\\\/\\\\//i.test(url2);
}
var init_isAbsoluteURL = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/isAbsoluteURL.js\\"() {
    \\"use strict\\";
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/combineURLs.js
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\\\\/+$/, \\"\\") + \\"/\\" + relativeURL.replace(/^\\\\/+/, \\"\\") : baseURL;
}
var init_combineURLs = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/combineURLs.js\\"() {
    \\"use strict\\";
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/buildFullPath.js
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}
var init_buildFullPath = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/buildFullPath.js\\"() {
    \\"use strict\\";
    init_isAbsoluteURL();
    init_combineURLs();
  }
});

// .yarn/cache/proxy-from-env-npm-1.1.0-c13d07f26b-ed7fcc2ba0.zip/node_modules/proxy-from-env/index.js
var require_proxy_from_env = __commonJS({
  \\".yarn/cache/proxy-from-env-npm-1.1.0-c13d07f26b-ed7fcc2ba0.zip/node_modules/proxy-from-env/index.js\\"(exports) {
    \\"use strict\\";
    var parseUrl = require(\\"url\\").parse;
    var DEFAULT_PORTS = {
      ftp: 21,
      gopher: 70,
      http: 80,
      https: 443,
      ws: 80,
      wss: 443
    };
    var stringEndsWith = String.prototype.endsWith || function(s) {
      return s.length <= this.length && this.indexOf(s, this.length - s.length) !== -1;
    };
    function getProxyForUrl2(url2) {
      var parsedUrl = typeof url2 === \\"string\\" ? parseUrl(url2) : url2 || {};
      var proto = parsedUrl.protocol;
      var hostname = parsedUrl.host;
      var port = parsedUrl.port;
      if (typeof hostname !== \\"string\\" || !hostname || typeof proto !== \\"string\\") {
        return \\"\\";
      }
      proto = proto.split(\\":\\", 1)[0];
      hostname = hostname.replace(/:\\\\d*$/, \\"\\");
      port = parseInt(port) || DEFAULT_PORTS[proto] || 0;
      if (!shouldProxy(hostname, port)) {
        return \\"\\";
      }
      var proxy = getEnv(\\"npm_config_\\" + proto + \\"_proxy\\") || getEnv(proto + \\"_proxy\\") || getEnv(\\"npm_config_proxy\\") || getEnv(\\"all_proxy\\");
      if (proxy && proxy.indexOf(\\"://\\") === -1) {
        proxy = proto + \\"://\\" + proxy;
      }
      return proxy;
    }
    function shouldProxy(hostname, port) {
      var NO_PROXY = (getEnv(\\"npm_config_no_proxy\\") || getEnv(\\"no_proxy\\")).toLowerCase();
      if (!NO_PROXY) {
        return true;
      }
      if (NO_PROXY === \\"*\\") {
        return false;
      }
      return NO_PROXY.split(/[,\\\\s]/).every(function(proxy) {
        if (!proxy) {
          return true;
        }
        var parsedProxy = proxy.match(/^(.+):(\\\\d+)$/);
        var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;
        var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;
        if (parsedProxyPort && parsedProxyPort !== port) {
          return true;
        }
        if (!/^[.*]/.test(parsedProxyHostname)) {
          return hostname !== parsedProxyHostname;
        }
        if (parsedProxyHostname.charAt(0) === \\"*\\") {
          parsedProxyHostname = parsedProxyHostname.slice(1);
        }
        return !stringEndsWith.call(hostname, parsedProxyHostname);
      });
    }
    function getEnv(key) {
      return process.env[key.toLowerCase()] || process.env[key.toUpperCase()] || \\"\\";
    }
    exports.getProxyForUrl = getProxyForUrl2;
  }
});

// .yarn/__virtual__/follow-redirects-virtual-359bc4c55c/0/cache/follow-redirects-npm-1.15.2-1ec1dd82be-faa66059b6.zip/node_modules/follow-redirects/debug.js
var require_debug = __commonJS({
  \\".yarn/__virtual__/follow-redirects-virtual-359bc4c55c/0/cache/follow-redirects-npm-1.15.2-1ec1dd82be-faa66059b6.zip/node_modules/follow-redirects/debug.js\\"(exports, module2) {
    var debug;
    module2.exports = function() {
      if (!debug) {
        try {
          debug = require(\\"debug\\")(\\"follow-redirects\\");
        } catch (error) {
        }
        if (typeof debug !== \\"function\\") {
          debug = function() {
          };
        }
      }
      debug.apply(null, arguments);
    };
  }
});

// .yarn/__virtual__/follow-redirects-virtual-359bc4c55c/0/cache/follow-redirects-npm-1.15.2-1ec1dd82be-faa66059b6.zip/node_modules/follow-redirects/index.js
var require_follow_redirects = __commonJS({
  \\".yarn/__virtual__/follow-redirects-virtual-359bc4c55c/0/cache/follow-redirects-npm-1.15.2-1ec1dd82be-faa66059b6.zip/node_modules/follow-redirects/index.js\\"(exports, module2) {
    var url2 = require(\\"url\\");
    var URL2 = url2.URL;
    var http2 = require(\\"http\\");
    var https2 = require(\\"https\\");
    var Writable = require(\\"stream\\").Writable;
    var assert = require(\\"assert\\");
    var debug = require_debug();
    var events = [\\"abort\\", \\"aborted\\", \\"connect\\", \\"error\\", \\"socket\\", \\"timeout\\"];
    var eventHandlers = /* @__PURE__ */ Object.create(null);
    events.forEach(function(event) {
      eventHandlers[event] = function(arg1, arg2, arg3) {
        this._redirectable.emit(event, arg1, arg2, arg3);
      };
    });
    var InvalidUrlError = createErrorType(
      \\"ERR_INVALID_URL\\",
      \\"Invalid URL\\",
      TypeError
    );
    var RedirectionError = createErrorType(
      \\"ERR_FR_REDIRECTION_FAILURE\\",
      \\"Redirected request failed\\"
    );
    var TooManyRedirectsError = createErrorType(
      \\"ERR_FR_TOO_MANY_REDIRECTS\\",
      \\"Maximum number of redirects exceeded\\"
    );
    var MaxBodyLengthExceededError = createErrorType(
      \\"ERR_FR_MAX_BODY_LENGTH_EXCEEDED\\",
      \\"Request body larger than maxBodyLength limit\\"
    );
    var WriteAfterEndError = createErrorType(
      \\"ERR_STREAM_WRITE_AFTER_END\\",
      \\"write after end\\"
    );
    function RedirectableRequest(options, responseCallback) {
      Writable.call(this);
      this._sanitizeOptions(options);
      this._options = options;
      this._ended = false;
      this._ending = false;
      this._redirectCount = 0;
      this._redirects = [];
      this._requestBodyLength = 0;
      this._requestBodyBuffers = [];
      if (responseCallback) {
        this.on(\\"response\\", responseCallback);
      }
      var self2 = this;
      this._onNativeResponse = function(response) {
        self2._processResponse(response);
      };
      this._performRequest();
    }
    RedirectableRequest.prototype = Object.create(Writable.prototype);
    RedirectableRequest.prototype.abort = function() {
      abortRequest(this._currentRequest);
      this.emit(\\"abort\\");
    };
    RedirectableRequest.prototype.write = function(data, encoding, callback) {
      if (this._ending) {
        throw new WriteAfterEndError();
      }
      if (!isString2(data) && !isBuffer2(data)) {
        throw new TypeError(\\"data should be a string, Buffer or Uint8Array\\");
      }
      if (isFunction2(encoding)) {
        callback = encoding;
        encoding = null;
      }
      if (data.length === 0) {
        if (callback) {
          callback();
        }
        return;
      }
      if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
        this._requestBodyLength += data.length;
        this._requestBodyBuffers.push({ data, encoding });
        this._currentRequest.write(data, encoding, callback);
      } else {
        this.emit(\\"error\\", new MaxBodyLengthExceededError());
        this.abort();
      }
    };
    RedirectableRequest.prototype.end = function(data, encoding, callback) {
      if (isFunction2(data)) {
        callback = data;
        data = encoding = null;
      } else if (isFunction2(encoding)) {
        callback = encoding;
        encoding = null;
      }
      if (!data) {
        this._ended = this._ending = true;
        this._currentRequest.end(null, null, callback);
      } else {
        var self2 = this;
        var currentRequest = this._currentRequest;
        this.write(data, encoding, function() {
          self2._ended = true;
          currentRequest.end(null, null, callback);
        });
        this._ending = true;
      }
    };
    RedirectableRequest.prototype.setHeader = function(name, value) {
      this._options.headers[name] = value;
      this._currentRequest.setHeader(name, value);
    };
    RedirectableRequest.prototype.removeHeader = function(name) {
      delete this._options.headers[name];
      this._currentRequest.removeHeader(name);
    };
    RedirectableRequest.prototype.setTimeout = function(msecs, callback) {
      var self2 = this;
      function destroyOnTimeout(socket) {
        socket.setTimeout(msecs);
        socket.removeListener(\\"timeout\\", socket.destroy);
        socket.addListener(\\"timeout\\", socket.destroy);
      }
      function startTimer(socket) {
        if (self2._timeout) {
          clearTimeout(self2._timeout);
        }
        self2._timeout = setTimeout(function() {
          self2.emit(\\"timeout\\");
          clearTimer();
        }, msecs);
        destroyOnTimeout(socket);
      }
      function clearTimer() {
        if (self2._timeout) {
          clearTimeout(self2._timeout);
          self2._timeout = null;
        }
        self2.removeListener(\\"abort\\", clearTimer);
        self2.removeListener(\\"error\\", clearTimer);
        self2.removeListener(\\"response\\", clearTimer);
        if (callback) {
          self2.removeListener(\\"timeout\\", callback);
        }
        if (!self2.socket) {
          self2._currentRequest.removeListener(\\"socket\\", startTimer);
        }
      }
      if (callback) {
        this.on(\\"timeout\\", callback);
      }
      if (this.socket) {
        startTimer(this.socket);
      } else {
        this._currentRequest.once(\\"socket\\", startTimer);
      }
      this.on(\\"socket\\", destroyOnTimeout);
      this.on(\\"abort\\", clearTimer);
      this.on(\\"error\\", clearTimer);
      this.on(\\"response\\", clearTimer);
      return this;
    };
    [
      \\"flushHeaders\\",
      \\"getHeader\\",
      \\"setNoDelay\\",
      \\"setSocketKeepAlive\\"
    ].forEach(function(method) {
      RedirectableRequest.prototype[method] = function(a, b) {
        return this._currentRequest[method](a, b);
      };
    });
    [\\"aborted\\", \\"connection\\", \\"socket\\"].forEach(function(property2) {
      Object.defineProperty(RedirectableRequest.prototype, property2, {
        get: function() {
          return this._currentRequest[property2];
        }
      });
    });
    RedirectableRequest.prototype._sanitizeOptions = function(options) {
      if (!options.headers) {
        options.headers = {};
      }
      if (options.host) {
        if (!options.hostname) {
          options.hostname = options.host;
        }
        delete options.host;
      }
      if (!options.pathname && options.path) {
        var searchPos = options.path.indexOf(\\"?\\");
        if (searchPos < 0) {
          options.pathname = options.path;
        } else {
          options.pathname = options.path.substring(0, searchPos);
          options.search = options.path.substring(searchPos);
        }
      }
    };
    RedirectableRequest.prototype._performRequest = function() {
      var protocol = this._options.protocol;
      var nativeProtocol = this._options.nativeProtocols[protocol];
      if (!nativeProtocol) {
        this.emit(\\"error\\", new TypeError(\\"Unsupported protocol \\" + protocol));
        return;
      }
      if (this._options.agents) {
        var scheme = protocol.slice(0, -1);
        this._options.agent = this._options.agents[scheme];
      }
      var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);
      request._redirectable = this;
      for (var event of events) {
        request.on(event, eventHandlers[event]);
      }
      this._currentUrl = /^\\\\//.test(this._options.path) ? url2.format(this._options) : (
        // When making a request to a proxy, […]
        // a client MUST send the target URI in absolute-form […].
        this._options.path
      );
      if (this._isRedirect) {
        var i = 0;
        var self2 = this;
        var buffers = this._requestBodyBuffers;
        (function writeNext(error) {
          if (request === self2._currentRequest) {
            if (error) {
              self2.emit(\\"error\\", error);
            } else if (i < buffers.length) {
              var buffer = buffers[i++];
              if (!request.finished) {
                request.write(buffer.data, buffer.encoding, writeNext);
              }
            } else if (self2._ended) {
              request.end();
            }
          }
        })();
      }
    };
    RedirectableRequest.prototype._processResponse = function(response) {
      var statusCode = response.statusCode;
      if (this._options.trackRedirects) {
        this._redirects.push({
          url: this._currentUrl,
          headers: response.headers,
          statusCode
        });
      }
      var location = response.headers.location;
      if (!location || this._options.followRedirects === false || statusCode < 300 || statusCode >= 400) {
        response.responseUrl = this._currentUrl;
        response.redirects = this._redirects;
        this.emit(\\"response\\", response);
        this._requestBodyBuffers = [];
        return;
      }
      abortRequest(this._currentRequest);
      response.destroy();
      if (++this._redirectCount > this._options.maxRedirects) {
        this.emit(\\"error\\", new TooManyRedirectsError());
        return;
      }
      var requestHeaders;
      var beforeRedirect = this._options.beforeRedirect;
      if (beforeRedirect) {
        requestHeaders = Object.assign({
          // The Host header was set by nativeProtocol.request
          Host: response.req.getHeader(\\"host\\")
        }, this._options.headers);
      }
      var method = this._options.method;
      if ((statusCode === 301 || statusCode === 302) && this._options.method === \\"POST\\" || statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method)) {
        this._options.method = \\"GET\\";
        this._requestBodyBuffers = [];
        removeMatchingHeaders(/^content-/i, this._options.headers);
      }
      var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);
      var currentUrlParts = url2.parse(this._currentUrl);
      var currentHost = currentHostHeader || currentUrlParts.host;
      var currentUrl = /^\\\\w+:/.test(location) ? this._currentUrl : url2.format(Object.assign(currentUrlParts, { host: currentHost }));
      var redirectUrl;
      try {
        redirectUrl = url2.resolve(currentUrl, location);
      } catch (cause) {
        this.emit(\\"error\\", new RedirectionError({ cause }));
        return;
      }
      debug(\\"redirecting to\\", redirectUrl);
      this._isRedirect = true;
      var redirectUrlParts = url2.parse(redirectUrl);
      Object.assign(this._options, redirectUrlParts);
      if (redirectUrlParts.protocol !== currentUrlParts.protocol && redirectUrlParts.protocol !== \\"https:\\" || redirectUrlParts.host !== currentHost && !isSubdomain(redirectUrlParts.host, currentHost)) {
        removeMatchingHeaders(/^(?:authorization|cookie)$/i, this._options.headers);
      }
      if (isFunction2(beforeRedirect)) {
        var responseDetails = {
          headers: response.headers,
          statusCode
        };
        var requestDetails = {
          url: currentUrl,
          method,
          headers: requestHeaders
        };
        try {
          beforeRedirect(this._options, responseDetails, requestDetails);
        } catch (err) {
          this.emit(\\"error\\", err);
          return;
        }
        this._sanitizeOptions(this._options);
      }
      try {
        this._performRequest();
      } catch (cause) {
        this.emit(\\"error\\", new RedirectionError({ cause }));
      }
    };
    function wrap(protocols) {
      var exports2 = {
        maxRedirects: 21,
        maxBodyLength: 10 * 1024 * 1024
      };
      var nativeProtocols = {};
      Object.keys(protocols).forEach(function(scheme) {
        var protocol = scheme + \\":\\";
        var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
        var wrappedProtocol = exports2[scheme] = Object.create(nativeProtocol);
        function request(input, options, callback) {
          if (isString2(input)) {
            var parsed;
            try {
              parsed = urlToOptions(new URL2(input));
            } catch (err) {
              parsed = url2.parse(input);
            }
            if (!isString2(parsed.protocol)) {
              throw new InvalidUrlError({ input });
            }
            input = parsed;
          } else if (URL2 && input instanceof URL2) {
            input = urlToOptions(input);
          } else {
            callback = options;
            options = input;
            input = { protocol };
          }
          if (isFunction2(options)) {
            callback = options;
            options = null;
          }
          options = Object.assign({
            maxRedirects: exports2.maxRedirects,
            maxBodyLength: exports2.maxBodyLength
          }, input, options);
          options.nativeProtocols = nativeProtocols;
          if (!isString2(options.host) && !isString2(options.hostname)) {
            options.hostname = \\"::1\\";
          }
          assert.equal(options.protocol, protocol, \\"protocol mismatch\\");
          debug(\\"options\\", options);
          return new RedirectableRequest(options, callback);
        }
        function get(input, options, callback) {
          var wrappedRequest = wrappedProtocol.request(input, options, callback);
          wrappedRequest.end();
          return wrappedRequest;
        }
        Object.defineProperties(wrappedProtocol, {
          request: { value: request, configurable: true, enumerable: true, writable: true },
          get: { value: get, configurable: true, enumerable: true, writable: true }
        });
      });
      return exports2;
    }
    function noop2() {
    }
    function urlToOptions(urlObject) {
      var options = {
        protocol: urlObject.protocol,
        hostname: urlObject.hostname.startsWith(\\"[\\") ? (
          /* istanbul ignore next */
          urlObject.hostname.slice(1, -1)
        ) : urlObject.hostname,
        hash: urlObject.hash,
        search: urlObject.search,
        pathname: urlObject.pathname,
        path: urlObject.pathname + urlObject.search,
        href: urlObject.href
      };
      if (urlObject.port !== \\"\\") {
        options.port = Number(urlObject.port);
      }
      return options;
    }
    function removeMatchingHeaders(regex, headers) {
      var lastValue;
      for (var header in headers) {
        if (regex.test(header)) {
          lastValue = headers[header];
          delete headers[header];
        }
      }
      return lastValue === null || typeof lastValue === \\"undefined\\" ? void 0 : String(lastValue).trim();
    }
    function createErrorType(code, message, baseClass) {
      function CustomError(properties) {
        Error.captureStackTrace(this, this.constructor);
        Object.assign(this, properties || {});
        this.code = code;
        this.message = this.cause ? message + \\": \\" + this.cause.message : message;
      }
      CustomError.prototype = new (baseClass || Error)();
      CustomError.prototype.constructor = CustomError;
      CustomError.prototype.name = \\"Error [\\" + code + \\"]\\";
      return CustomError;
    }
    function abortRequest(request) {
      for (var event of events) {
        request.removeListener(event, eventHandlers[event]);
      }
      request.on(\\"error\\", noop2);
      request.abort();
    }
    function isSubdomain(subdomain, domain) {
      assert(isString2(subdomain) && isString2(domain));
      var dot = subdomain.length - domain.length - 1;
      return dot > 0 && subdomain[dot] === \\".\\" && subdomain.endsWith(domain);
    }
    function isString2(value) {
      return typeof value === \\"string\\" || value instanceof String;
    }
    function isFunction2(value) {
      return typeof value === \\"function\\";
    }
    function isBuffer2(value) {
      return typeof value === \\"object\\" && \\"length\\" in value;
    }
    module2.exports = wrap({ http: http2, https: https2 });
    module2.exports.wrap = wrap;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/env/data.js
var VERSION;
var init_data = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/env/data.js\\"() {
    VERSION = \\"1.4.0\\";
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/parseProtocol.js
function parseProtocol(url2) {
  const match = /^([-+\\\\w]{1,25})(:?\\\\/\\\\/|:)/.exec(url2);
  return match && match[1] || \\"\\";
}
var init_parseProtocol = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/parseProtocol.js\\"() {
    \\"use strict\\";
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/fromDataURI.js
function fromDataURI(uri, asBlob, options) {
  const _Blob = options && options.Blob || node_default.classes.Blob;
  const protocol = parseProtocol(uri);
  if (asBlob === void 0 && _Blob) {
    asBlob = true;
  }
  if (protocol === \\"data\\") {
    uri = protocol.length ? uri.slice(protocol.length + 1) : uri;
    const match = DATA_URL_PATTERN.exec(uri);
    if (!match) {
      throw new AxiosError_default(\\"Invalid URL\\", AxiosError_default.ERR_INVALID_URL);
    }
    const mime = match[1];
    const isBase64 = match[2];
    const body = match[3];
    const buffer = Buffer.from(decodeURIComponent(body), isBase64 ? \\"base64\\" : \\"utf8\\");
    if (asBlob) {
      if (!_Blob) {
        throw new AxiosError_default(\\"Blob is not supported\\", AxiosError_default.ERR_NOT_SUPPORT);
      }
      return new _Blob([buffer], { type: mime });
    }
    return buffer;
  }
  throw new AxiosError_default(\\"Unsupported protocol \\" + protocol, AxiosError_default.ERR_NOT_SUPPORT);
}
var DATA_URL_PATTERN;
var init_fromDataURI = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/fromDataURI.js\\"() {
    \\"use strict\\";
    init_AxiosError();
    init_parseProtocol();
    init_platform();
    DATA_URL_PATTERN = /^(?:([^;]+);)?(?:[^;]+;)?(base64|),([\\\\s\\\\S]*)$/;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/throttle.js
function throttle(fn, freq) {
  let timestamp = 0;
  const threshold = 1e3 / freq;
  let timer = null;
  return function throttled(force, args) {
    const now = Date.now();
    if (force || now - timestamp > threshold) {
      if (timer) {
        clearTimeout(timer);
        timer = null;
      }
      timestamp = now;
      return fn.apply(null, args);
    }
    if (!timer) {
      timer = setTimeout(() => {
        timer = null;
        timestamp = Date.now();
        return fn.apply(null, args);
      }, threshold - (now - timestamp));
    }
  };
}
var throttle_default;
var init_throttle = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/throttle.js\\"() {
    \\"use strict\\";
    throttle_default = throttle;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/speedometer.js
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;
  min = min !== void 0 ? min : 1e3;
  return function push(chunkLength) {
    const now = Date.now();
    const startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now;
    }
    bytes[head] = chunkLength;
    timestamps[head] = now;
    let i = tail;
    let bytesCount = 0;
    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now - firstSampleTS < min) {
      return;
    }
    const passed = startedAt && now - startedAt;
    return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
  };
}
var speedometer_default;
var init_speedometer = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/speedometer.js\\"() {
    \\"use strict\\";
    speedometer_default = speedometer;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/AxiosTransformStream.js
var import_stream, kInternals, AxiosTransformStream, AxiosTransformStream_default;
var init_AxiosTransformStream = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/AxiosTransformStream.js\\"() {
    \\"use strict\\";
    import_stream = __toESM(require(\\"stream\\"), 1);
    init_utils();
    init_throttle();
    init_speedometer();
    kInternals = Symbol(\\"internals\\");
    AxiosTransformStream = class extends import_stream.default.Transform {
      constructor(options) {
        options = utils_default.toFlatObject(options, {
          maxRate: 0,
          chunkSize: 64 * 1024,
          minChunkSize: 100,
          timeWindow: 500,
          ticksRate: 2,
          samplesCount: 15
        }, null, (prop, source) => {
          return !utils_default.isUndefined(source[prop]);
        });
        super({
          readableHighWaterMark: options.chunkSize
        });
        const self2 = this;
        const internals = this[kInternals] = {
          length: options.length,
          timeWindow: options.timeWindow,
          ticksRate: options.ticksRate,
          chunkSize: options.chunkSize,
          maxRate: options.maxRate,
          minChunkSize: options.minChunkSize,
          bytesSeen: 0,
          isCaptured: false,
          notifiedBytesLoaded: 0,
          ts: Date.now(),
          bytes: 0,
          onReadCallback: null
        };
        const _speedometer = speedometer_default(internals.ticksRate * options.samplesCount, internals.timeWindow);
        this.on(\\"newListener\\", (event) => {
          if (event === \\"progress\\") {
            if (!internals.isCaptured) {
              internals.isCaptured = true;
            }
          }
        });
        let bytesNotified = 0;
        internals.updateProgress = throttle_default(function throttledHandler() {
          const totalBytes = internals.length;
          const bytesTransferred = internals.bytesSeen;
          const progressBytes = bytesTransferred - bytesNotified;
          if (!progressBytes || self2.destroyed)
            return;
          const rate = _speedometer(progressBytes);
          bytesNotified = bytesTransferred;
          process.nextTick(() => {
            self2.emit(\\"progress\\", {
              \\"loaded\\": bytesTransferred,
              \\"total\\": totalBytes,
              \\"progress\\": totalBytes ? bytesTransferred / totalBytes : void 0,
              \\"bytes\\": progressBytes,
              \\"rate\\": rate ? rate : void 0,
              \\"estimated\\": rate && totalBytes && bytesTransferred <= totalBytes ? (totalBytes - bytesTransferred) / rate : void 0
            });
          });
        }, internals.ticksRate);
        const onFinish = () => {
          internals.updateProgress(true);
        };
        this.once(\\"end\\", onFinish);
        this.once(\\"error\\", onFinish);
      }
      _read(size) {
        const internals = this[kInternals];
        if (internals.onReadCallback) {
          internals.onReadCallback();
        }
        return super._read(size);
      }
      _transform(chunk, encoding, callback) {
        const self2 = this;
        const internals = this[kInternals];
        const maxRate = internals.maxRate;
        const readableHighWaterMark = this.readableHighWaterMark;
        const timeWindow = internals.timeWindow;
        const divider = 1e3 / timeWindow;
        const bytesThreshold = maxRate / divider;
        const minChunkSize = internals.minChunkSize !== false ? Math.max(internals.minChunkSize, bytesThreshold * 0.01) : 0;
        function pushChunk(_chunk, _callback) {
          const bytes = Buffer.byteLength(_chunk);
          internals.bytesSeen += bytes;
          internals.bytes += bytes;
          if (internals.isCaptured) {
            internals.updateProgress();
          }
          if (self2.push(_chunk)) {
            process.nextTick(_callback);
          } else {
            internals.onReadCallback = () => {
              internals.onReadCallback = null;
              process.nextTick(_callback);
            };
          }
        }
        const transformChunk = (_chunk, _callback) => {
          const chunkSize = Buffer.byteLength(_chunk);
          let chunkRemainder = null;
          let maxChunkSize = readableHighWaterMark;
          let bytesLeft;
          let passed = 0;
          if (maxRate) {
            const now = Date.now();
            if (!internals.ts || (passed = now - internals.ts) >= timeWindow) {
              internals.ts = now;
              bytesLeft = bytesThreshold - internals.bytes;
              internals.bytes = bytesLeft < 0 ? -bytesLeft : 0;
              passed = 0;
            }
            bytesLeft = bytesThreshold - internals.bytes;
          }
          if (maxRate) {
            if (bytesLeft <= 0) {
              return setTimeout(() => {
                _callback(null, _chunk);
              }, timeWindow - passed);
            }
            if (bytesLeft < maxChunkSize) {
              maxChunkSize = bytesLeft;
            }
          }
          if (maxChunkSize && chunkSize > maxChunkSize && chunkSize - maxChunkSize > minChunkSize) {
            chunkRemainder = _chunk.subarray(maxChunkSize);
            _chunk = _chunk.subarray(0, maxChunkSize);
          }
          pushChunk(_chunk, chunkRemainder ? () => {
            process.nextTick(_callback, null, chunkRemainder);
          } : _callback);
        };
        transformChunk(chunk, function transformNextChunk(err, _chunk) {
          if (err) {
            return callback(err);
          }
          if (_chunk) {
            transformChunk(_chunk, transformNextChunk);
          } else {
            callback(null);
          }
        });
      }
      setLength(length) {
        this[kInternals].length = +length;
        return this;
      }
    };
    AxiosTransformStream_default = AxiosTransformStream;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/readBlob.js
var asyncIterator, readBlob, readBlob_default;
var init_readBlob = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/readBlob.js\\"() {
    ({ asyncIterator } = Symbol);
    readBlob = async function* (blob) {
      if (blob.stream) {
        yield* blob.stream();
      } else if (blob.arrayBuffer) {
        yield await blob.arrayBuffer();
      } else if (blob[asyncIterator]) {
        yield* blob[asyncIterator]();
      } else {
        yield blob;
      }
    };
    readBlob_default = readBlob;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/formDataToStream.js
var import_util, import_stream2, BOUNDARY_ALPHABET, textEncoder, CRLF, CRLF_BYTES, CRLF_BYTES_COUNT, FormDataPart, formDataToStream, formDataToStream_default;
var init_formDataToStream = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/formDataToStream.js\\"() {
    import_util = require(\\"util\\");
    import_stream2 = require(\\"stream\\");
    init_utils();
    init_readBlob();
    BOUNDARY_ALPHABET = utils_default.ALPHABET.ALPHA_DIGIT + \\"-_\\";
    textEncoder = new import_util.TextEncoder();
    CRLF = \\"\\\\r\\\\n\\";
    CRLF_BYTES = textEncoder.encode(CRLF);
    CRLF_BYTES_COUNT = 2;
    FormDataPart = class {
      constructor(name, value) {
        const { escapeName } = this.constructor;
        const isStringValue = utils_default.isString(value);
        let headers = \`Content-Disposition: form-data; name=\\"\${escapeName(name)}\\"\${!isStringValue && value.name ? \`; filename=\\"\${escapeName(value.name)}\\"\` : \\"\\"}\${CRLF}\`;
        if (isStringValue) {
          value = textEncoder.encode(String(value).replace(/\\\\r?\\\\n|\\\\r\\\\n?/g, CRLF));
        } else {
          headers += \`Content-Type: \${value.type || \\"application/octet-stream\\"}\${CRLF}\`;
        }
        this.headers = textEncoder.encode(headers + CRLF);
        this.contentLength = isStringValue ? value.byteLength : value.size;
        this.size = this.headers.byteLength + this.contentLength + CRLF_BYTES_COUNT;
        this.name = name;
        this.value = value;
      }
      async *encode() {
        yield this.headers;
        const { value } = this;
        if (utils_default.isTypedArray(value)) {
          yield value;
        } else {
          yield* readBlob_default(value);
        }
        yield CRLF_BYTES;
      }
      static escapeName(name) {
        return String(name).replace(/[\\\\r\\\\n\\"]/g, (match) => ({
          \\"\\\\r\\": \\"%0D\\",
          \\"\\\\n\\": \\"%0A\\",
          '\\"': \\"%22\\"
        })[match]);
      }
    };
    formDataToStream = (form, headersHandler, options) => {
      const {
        tag = \\"form-data-boundary\\",
        size = 25,
        boundary = tag + \\"-\\" + utils_default.generateString(size, BOUNDARY_ALPHABET)
      } = options || {};
      if (!utils_default.isFormData(form)) {
        throw TypeError(\\"FormData instance required\\");
      }
      if (boundary.length < 1 || boundary.length > 70) {
        throw Error(\\"boundary must be 10-70 characters long\\");
      }
      const boundaryBytes = textEncoder.encode(\\"--\\" + boundary + CRLF);
      const footerBytes = textEncoder.encode(\\"--\\" + boundary + \\"--\\" + CRLF + CRLF);
      let contentLength = footerBytes.byteLength;
      const parts = Array.from(form.entries()).map(([name, value]) => {
        const part = new FormDataPart(name, value);
        contentLength += part.size;
        return part;
      });
      contentLength += boundaryBytes.byteLength * parts.length;
      contentLength = utils_default.toFiniteNumber(contentLength);
      const computedHeaders = {
        \\"Content-Type\\": \`multipart/form-data; boundary=\${boundary}\`
      };
      if (Number.isFinite(contentLength)) {
        computedHeaders[\\"Content-Length\\"] = contentLength;
      }
      headersHandler && headersHandler(computedHeaders);
      return import_stream2.Readable.from(async function* () {
        for (const part of parts) {
          yield boundaryBytes;
          yield* part.encode();
        }
        yield footerBytes;
      }());
    };
    formDataToStream_default = formDataToStream;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/ZlibHeaderTransformStream.js
var import_stream3, ZlibHeaderTransformStream, ZlibHeaderTransformStream_default;
var init_ZlibHeaderTransformStream = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/ZlibHeaderTransformStream.js\\"() {
    \\"use strict\\";
    import_stream3 = __toESM(require(\\"stream\\"), 1);
    ZlibHeaderTransformStream = class extends import_stream3.default.Transform {
      __transform(chunk, encoding, callback) {
        this.push(chunk);
        callback();
      }
      _transform(chunk, encoding, callback) {
        if (chunk.length !== 0) {
          this._transform = this.__transform;
          if (chunk[0] !== 120) {
            const header = Buffer.alloc(2);
            header[0] = 120;
            header[1] = 156;
            this.push(header, encoding);
          }
        }
        this.__transform(chunk, encoding, callback);
      }
    };
    ZlibHeaderTransformStream_default = ZlibHeaderTransformStream;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/callbackify.js
var callbackify, callbackify_default;
var init_callbackify = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/callbackify.js\\"() {
    init_utils();
    callbackify = (fn, reducer) => {
      return utils_default.isAsyncFn(fn) ? function(...args) {
        const cb = args.pop();
        fn.apply(this, args).then((value) => {
          try {
            reducer ? cb(null, ...reducer(value)) : cb(null, value);
          } catch (err) {
            cb(err);
          }
        }, cb);
      } : fn;
    };
    callbackify_default = callbackify;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/adapters/http.js
function dispatchBeforeRedirect(options) {
  if (options.beforeRedirects.proxy) {
    options.beforeRedirects.proxy(options);
  }
  if (options.beforeRedirects.config) {
    options.beforeRedirects.config(options);
  }
}
function setProxy(options, configProxy, location) {
  let proxy = configProxy;
  if (!proxy && proxy !== false) {
    const proxyUrl = (0, import_proxy_from_env.getProxyForUrl)(location);
    if (proxyUrl) {
      proxy = new URL(proxyUrl);
    }
  }
  if (proxy) {
    if (proxy.username) {
      proxy.auth = (proxy.username || \\"\\") + \\":\\" + (proxy.password || \\"\\");
    }
    if (proxy.auth) {
      if (proxy.auth.username || proxy.auth.password) {
        proxy.auth = (proxy.auth.username || \\"\\") + \\":\\" + (proxy.auth.password || \\"\\");
      }
      const base64 = Buffer.from(proxy.auth, \\"utf8\\").toString(\\"base64\\");
      options.headers[\\"Proxy-Authorization\\"] = \\"Basic \\" + base64;
    }
    options.headers.host = options.hostname + (options.port ? \\":\\" + options.port : \\"\\");
    const proxyHost = proxy.hostname || proxy.host;
    options.hostname = proxyHost;
    options.host = proxyHost;
    options.port = proxy.port;
    options.path = location;
    if (proxy.protocol) {
      options.protocol = proxy.protocol.includes(\\":\\") ? proxy.protocol : \`\${proxy.protocol}:\`;
    }
  }
  options.beforeRedirects.proxy = function beforeRedirect(redirectOptions) {
    setProxy(redirectOptions, configProxy, redirectOptions.href);
  };
}
var import_proxy_from_env, import_http, import_https, import_util2, import_follow_redirects, import_zlib, import_stream4, import_events, zlibOptions, brotliOptions, isBrotliSupported, httpFollow, httpsFollow, isHttps, supportedProtocols, isHttpAdapterSupported, wrapAsync, http_default;
var init_http = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/adapters/http.js\\"() {
    \\"use strict\\";
    init_utils();
    init_settle();
    init_buildFullPath();
    init_buildURL();
    import_proxy_from_env = __toESM(require_proxy_from_env(), 1);
    import_http = __toESM(require(\\"http\\"), 1);
    import_https = __toESM(require(\\"https\\"), 1);
    import_util2 = __toESM(require(\\"util\\"), 1);
    import_follow_redirects = __toESM(require_follow_redirects(), 1);
    import_zlib = __toESM(require(\\"zlib\\"), 1);
    init_data();
    init_transitional();
    init_AxiosError();
    init_CanceledError();
    init_platform();
    init_fromDataURI();
    import_stream4 = __toESM(require(\\"stream\\"), 1);
    init_AxiosHeaders();
    init_AxiosTransformStream();
    import_events = __toESM(require(\\"events\\"), 1);
    init_formDataToStream();
    init_readBlob();
    init_ZlibHeaderTransformStream();
    init_callbackify();
    zlibOptions = {
      flush: import_zlib.default.constants.Z_SYNC_FLUSH,
      finishFlush: import_zlib.default.constants.Z_SYNC_FLUSH
    };
    brotliOptions = {
      flush: import_zlib.default.constants.BROTLI_OPERATION_FLUSH,
      finishFlush: import_zlib.default.constants.BROTLI_OPERATION_FLUSH
    };
    isBrotliSupported = utils_default.isFunction(import_zlib.default.createBrotliDecompress);
    ({ http: httpFollow, https: httpsFollow } = import_follow_redirects.default);
    isHttps = /https:?/;
    supportedProtocols = node_default.protocols.map((protocol) => {
      return protocol + \\":\\";
    });
    isHttpAdapterSupported = typeof process !== \\"undefined\\" && utils_default.kindOf(process) === \\"process\\";
    wrapAsync = (asyncExecutor) => {
      return new Promise((resolve, reject) => {
        let onDone;
        let isDone;
        const done = (value, isRejected) => {
          if (isDone)
            return;
          isDone = true;
          onDone && onDone(value, isRejected);
        };
        const _resolve = (value) => {
          done(value);
          resolve(value);
        };
        const _reject = (reason) => {
          done(reason, true);
          reject(reason);
        };
        asyncExecutor(_resolve, _reject, (onDoneHandler) => onDone = onDoneHandler).catch(_reject);
      });
    };
    http_default = isHttpAdapterSupported && function httpAdapter(config) {
      return wrapAsync(async function dispatchHttpRequest(resolve, reject, onDone) {
        let { data, lookup, family } = config;
        const { responseType, responseEncoding } = config;
        const method = config.method.toUpperCase();
        let isDone;
        let rejected = false;
        let req;
        if (lookup && utils_default.isAsyncFn(lookup)) {
          lookup = callbackify_default(lookup, (entry) => {
            if (utils_default.isString(entry)) {
              entry = [entry, entry.indexOf(\\".\\") < 0 ? 6 : 4];
            } else if (!utils_default.isArray(entry)) {
              throw new TypeError(\\"lookup async function must return an array [ip: string, family: number]]\\");
            }
            return entry;
          });
        }
        const emitter = new import_events.default();
        const onFinished = () => {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(abort);
          }
          if (config.signal) {
            config.signal.removeEventListener(\\"abort\\", abort);
          }
          emitter.removeAllListeners();
        };
        onDone((value, isRejected) => {
          isDone = true;
          if (isRejected) {
            rejected = true;
            onFinished();
          }
        });
        function abort(reason) {
          emitter.emit(\\"abort\\", !reason || reason.type ? new CanceledError_default(null, config, req) : reason);
        }
        emitter.once(\\"abort\\", reject);
        if (config.cancelToken || config.signal) {
          config.cancelToken && config.cancelToken.subscribe(abort);
          if (config.signal) {
            config.signal.aborted ? abort() : config.signal.addEventListener(\\"abort\\", abort);
          }
        }
        const fullPath = buildFullPath(config.baseURL, config.url);
        const parsed = new URL(fullPath, \\"http://localhost\\");
        const protocol = parsed.protocol || supportedProtocols[0];
        if (protocol === \\"data:\\") {
          let convertedData;
          if (method !== \\"GET\\") {
            return settle(resolve, reject, {
              status: 405,
              statusText: \\"method not allowed\\",
              headers: {},
              config
            });
          }
          try {
            convertedData = fromDataURI(config.url, responseType === \\"blob\\", {
              Blob: config.env && config.env.Blob
            });
          } catch (err) {
            throw AxiosError_default.from(err, AxiosError_default.ERR_BAD_REQUEST, config);
          }
          if (responseType === \\"text\\") {
            convertedData = convertedData.toString(responseEncoding);
            if (!responseEncoding || responseEncoding === \\"utf8\\") {
              convertedData = utils_default.stripBOM(convertedData);
            }
          } else if (responseType === \\"stream\\") {
            convertedData = import_stream4.default.Readable.from(convertedData);
          }
          return settle(resolve, reject, {
            data: convertedData,
            status: 200,
            statusText: \\"OK\\",
            headers: new AxiosHeaders_default(),
            config
          });
        }
        if (supportedProtocols.indexOf(protocol) === -1) {
          return reject(new AxiosError_default(
            \\"Unsupported protocol \\" + protocol,
            AxiosError_default.ERR_BAD_REQUEST,
            config
          ));
        }
        const headers = AxiosHeaders_default.from(config.headers).normalize();
        headers.set(\\"User-Agent\\", \\"axios/\\" + VERSION, false);
        const onDownloadProgress = config.onDownloadProgress;
        const onUploadProgress = config.onUploadProgress;
        const maxRate = config.maxRate;
        let maxUploadRate = void 0;
        let maxDownloadRate = void 0;
        if (utils_default.isSpecCompliantForm(data)) {
          const userBoundary = headers.getContentType(/boundary=([-_\\\\w\\\\d]{10,70})/i);
          data = formDataToStream_default(data, (formHeaders) => {
            headers.set(formHeaders);
          }, {
            tag: \`axios-\${VERSION}-boundary\`,
            boundary: userBoundary && userBoundary[1] || void 0
          });
        } else if (utils_default.isFormData(data) && utils_default.isFunction(data.getHeaders)) {
          headers.set(data.getHeaders());
          if (!headers.hasContentLength()) {
            try {
              const knownLength = await import_util2.default.promisify(data.getLength).call(data);
              Number.isFinite(knownLength) && knownLength >= 0 && headers.setContentLength(knownLength);
            } catch (e) {
            }
          }
        } else if (utils_default.isBlob(data)) {
          data.size && headers.setContentType(data.type || \\"application/octet-stream\\");
          headers.setContentLength(data.size || 0);
          data = import_stream4.default.Readable.from(readBlob_default(data));
        } else if (data && !utils_default.isStream(data)) {
          if (Buffer.isBuffer(data)) {
          } else if (utils_default.isArrayBuffer(data)) {
            data = Buffer.from(new Uint8Array(data));
          } else if (utils_default.isString(data)) {
            data = Buffer.from(data, \\"utf-8\\");
          } else {
            return reject(new AxiosError_default(
              \\"Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream\\",
              AxiosError_default.ERR_BAD_REQUEST,
              config
            ));
          }
          headers.setContentLength(data.length, false);
          if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {
            return reject(new AxiosError_default(
              \\"Request body larger than maxBodyLength limit\\",
              AxiosError_default.ERR_BAD_REQUEST,
              config
            ));
          }
        }
        const contentLength = utils_default.toFiniteNumber(headers.getContentLength());
        if (utils_default.isArray(maxRate)) {
          maxUploadRate = maxRate[0];
          maxDownloadRate = maxRate[1];
        } else {
          maxUploadRate = maxDownloadRate = maxRate;
        }
        if (data && (onUploadProgress || maxUploadRate)) {
          if (!utils_default.isStream(data)) {
            data = import_stream4.default.Readable.from(data, { objectMode: false });
          }
          data = import_stream4.default.pipeline([data, new AxiosTransformStream_default({
            length: contentLength,
            maxRate: utils_default.toFiniteNumber(maxUploadRate)
          })], utils_default.noop);
          onUploadProgress && data.on(\\"progress\\", (progress) => {
            onUploadProgress(Object.assign(progress, {
              upload: true
            }));
          });
        }
        let auth = void 0;
        if (config.auth) {
          const username = config.auth.username || \\"\\";
          const password = config.auth.password || \\"\\";
          auth = username + \\":\\" + password;
        }
        if (!auth && parsed.username) {
          const urlUsername = parsed.username;
          const urlPassword = parsed.password;
          auth = urlUsername + \\":\\" + urlPassword;
        }
        auth && headers.delete(\\"authorization\\");
        let path;
        try {
          path = buildURL(
            parsed.pathname + parsed.search,
            config.params,
            config.paramsSerializer
          ).replace(/^\\\\?/, \\"\\");
        } catch (err) {
          const customErr = new Error(err.message);
          customErr.config = config;
          customErr.url = config.url;
          customErr.exists = true;
          return reject(customErr);
        }
        headers.set(
          \\"Accept-Encoding\\",
          \\"gzip, compress, deflate\\" + (isBrotliSupported ? \\", br\\" : \\"\\"),
          false
        );
        const options = {
          path,
          method,
          headers: headers.toJSON(),
          agents: { http: config.httpAgent, https: config.httpsAgent },
          auth,
          protocol,
          family,
          lookup,
          beforeRedirect: dispatchBeforeRedirect,
          beforeRedirects: {}
        };
        if (config.socketPath) {
          options.socketPath = config.socketPath;
        } else {
          options.hostname = parsed.hostname;
          options.port = parsed.port;
          setProxy(options, config.proxy, protocol + \\"//\\" + parsed.hostname + (parsed.port ? \\":\\" + parsed.port : \\"\\") + options.path);
        }
        let transport;
        const isHttpsRequest = isHttps.test(options.protocol);
        options.agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;
        if (config.transport) {
          transport = config.transport;
        } else if (config.maxRedirects === 0) {
          transport = isHttpsRequest ? import_https.default : import_http.default;
        } else {
          if (config.maxRedirects) {
            options.maxRedirects = config.maxRedirects;
          }
          if (config.beforeRedirect) {
            options.beforeRedirects.config = config.beforeRedirect;
          }
          transport = isHttpsRequest ? httpsFollow : httpFollow;
        }
        if (config.maxBodyLength > -1) {
          options.maxBodyLength = config.maxBodyLength;
        } else {
          options.maxBodyLength = Infinity;
        }
        if (config.insecureHTTPParser) {
          options.insecureHTTPParser = config.insecureHTTPParser;
        }
        req = transport.request(options, function handleResponse(res) {
          if (req.destroyed)
            return;
          const streams = [res];
          const responseLength = +res.headers[\\"content-length\\"];
          if (onDownloadProgress) {
            const transformStream = new AxiosTransformStream_default({
              length: utils_default.toFiniteNumber(responseLength),
              maxRate: utils_default.toFiniteNumber(maxDownloadRate)
            });
            onDownloadProgress && transformStream.on(\\"progress\\", (progress) => {
              onDownloadProgress(Object.assign(progress, {
                download: true
              }));
            });
            streams.push(transformStream);
          }
          let responseStream = res;
          const lastRequest = res.req || req;
          if (config.decompress !== false && res.headers[\\"content-encoding\\"]) {
            if (method === \\"HEAD\\" || res.statusCode === 204) {
              delete res.headers[\\"content-encoding\\"];
            }
            switch (res.headers[\\"content-encoding\\"]) {
              case \\"gzip\\":
              case \\"x-gzip\\":
              case \\"compress\\":
              case \\"x-compress\\":
                streams.push(import_zlib.default.createUnzip(zlibOptions));
                delete res.headers[\\"content-encoding\\"];
                break;
              case \\"deflate\\":
                streams.push(new ZlibHeaderTransformStream_default());
                streams.push(import_zlib.default.createUnzip(zlibOptions));
                delete res.headers[\\"content-encoding\\"];
                break;
              case \\"br\\":
                if (isBrotliSupported) {
                  streams.push(import_zlib.default.createBrotliDecompress(brotliOptions));
                  delete res.headers[\\"content-encoding\\"];
                }
            }
          }
          responseStream = streams.length > 1 ? import_stream4.default.pipeline(streams, utils_default.noop) : streams[0];
          const offListeners = import_stream4.default.finished(responseStream, () => {
            offListeners();
            onFinished();
          });
          const response = {
            status: res.statusCode,
            statusText: res.statusMessage,
            headers: new AxiosHeaders_default(res.headers),
            config,
            request: lastRequest
          };
          if (responseType === \\"stream\\") {
            response.data = responseStream;
            settle(resolve, reject, response);
          } else {
            const responseBuffer = [];
            let totalResponseBytes = 0;
            responseStream.on(\\"data\\", function handleStreamData(chunk) {
              responseBuffer.push(chunk);
              totalResponseBytes += chunk.length;
              if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {
                rejected = true;
                responseStream.destroy();
                reject(new AxiosError_default(
                  \\"maxContentLength size of \\" + config.maxContentLength + \\" exceeded\\",
                  AxiosError_default.ERR_BAD_RESPONSE,
                  config,
                  lastRequest
                ));
              }
            });
            responseStream.on(\\"aborted\\", function handlerStreamAborted() {
              if (rejected) {
                return;
              }
              const err = new AxiosError_default(
                \\"maxContentLength size of \\" + config.maxContentLength + \\" exceeded\\",
                AxiosError_default.ERR_BAD_RESPONSE,
                config,
                lastRequest
              );
              responseStream.destroy(err);
              reject(err);
            });
            responseStream.on(\\"error\\", function handleStreamError(err) {
              if (req.destroyed)
                return;
              reject(AxiosError_default.from(err, null, config, lastRequest));
            });
            responseStream.on(\\"end\\", function handleStreamEnd() {
              try {
                let responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);
                if (responseType !== \\"arraybuffer\\") {
                  responseData = responseData.toString(responseEncoding);
                  if (!responseEncoding || responseEncoding === \\"utf8\\") {
                    responseData = utils_default.stripBOM(responseData);
                  }
                }
                response.data = responseData;
              } catch (err) {
                reject(AxiosError_default.from(err, null, config, response.request, response));
              }
              settle(resolve, reject, response);
            });
          }
          emitter.once(\\"abort\\", (err) => {
            if (!responseStream.destroyed) {
              responseStream.emit(\\"error\\", err);
              responseStream.destroy();
            }
          });
        });
        emitter.once(\\"abort\\", (err) => {
          reject(err);
          req.destroy(err);
        });
        req.on(\\"error\\", function handleRequestError(err) {
          reject(AxiosError_default.from(err, null, config, req));
        });
        req.on(\\"socket\\", function handleRequestSocket(socket) {
          socket.setKeepAlive(true, 1e3 * 60);
        });
        if (config.timeout) {
          const timeout = parseInt(config.timeout, 10);
          if (isNaN(timeout)) {
            reject(new AxiosError_default(
              \\"error trying to parse \`config.timeout\` to int\\",
              AxiosError_default.ERR_BAD_OPTION_VALUE,
              config,
              req
            ));
            return;
          }
          req.setTimeout(timeout, function handleRequestTimeout() {
            if (isDone)
              return;
            let timeoutErrorMessage = config.timeout ? \\"timeout of \\" + config.timeout + \\"ms exceeded\\" : \\"timeout exceeded\\";
            const transitional2 = config.transitional || transitional_default;
            if (config.timeoutErrorMessage) {
              timeoutErrorMessage = config.timeoutErrorMessage;
            }
            reject(new AxiosError_default(
              timeoutErrorMessage,
              transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,
              config,
              req
            ));
            abort();
          });
        }
        if (utils_default.isStream(data)) {
          let ended = false;
          let errored = false;
          data.on(\\"end\\", () => {
            ended = true;
          });
          data.once(\\"error\\", (err) => {
            errored = true;
            req.destroy(err);
          });
          data.on(\\"close\\", () => {
            if (!ended && !errored) {
              abort(new CanceledError_default(\\"Request stream has been aborted\\", config, req));
            }
          });
          data.pipe(req);
        } else {
          req.end(data);
        }
      });
    };
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/cookies.js
var cookies_default;
var init_cookies = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/cookies.js\\"() {
    \\"use strict\\";
    init_utils();
    init_platform();
    cookies_default = node_default.isStandardBrowserEnv ? function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          const cookie = [];
          cookie.push(name + \\"=\\" + encodeURIComponent(value));
          if (utils_default.isNumber(expires)) {
            cookie.push(\\"expires=\\" + new Date(expires).toGMTString());
          }
          if (utils_default.isString(path)) {
            cookie.push(\\"path=\\" + path);
          }
          if (utils_default.isString(domain)) {
            cookie.push(\\"domain=\\" + domain);
          }
          if (secure === true) {
            cookie.push(\\"secure\\");
          }
          document.cookie = cookie.join(\\"; \\");
        },
        read: function read(name) {
          const match = document.cookie.match(new RegExp(\\"(^|;\\\\\\\\s*)(\\" + name + \\")=([^;]*)\\"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
          this.write(name, \\"\\", Date.now() - 864e5);
        }
      };
    }() : function nonStandardBrowserEnv() {
      return {
        write: function write() {
        },
        read: function read() {
          return null;
        },
        remove: function remove() {
        }
      };
    }();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/isURLSameOrigin.js
var isURLSameOrigin_default;
var init_isURLSameOrigin = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/isURLSameOrigin.js\\"() {
    \\"use strict\\";
    init_utils();
    init_platform();
    isURLSameOrigin_default = node_default.isStandardBrowserEnv ? function standardBrowserEnv2() {
      const msie = /(msie|trident)/i.test(navigator.userAgent);
      const urlParsingNode = document.createElement(\\"a\\");
      let originURL;
      function resolveURL(url2) {
        let href = url2;
        if (msie) {
          urlParsingNode.setAttribute(\\"href\\", href);
          href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute(\\"href\\", href);
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, \\"\\") : \\"\\",
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\\\?/, \\"\\") : \\"\\",
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, \\"\\") : \\"\\",
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: urlParsingNode.pathname.charAt(0) === \\"/\\" ? urlParsingNode.pathname : \\"/\\" + urlParsingNode.pathname
        };
      }
      originURL = resolveURL(window.location.href);
      return function isURLSameOrigin(requestURL) {
        const parsed = utils_default.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
      };
    }() : function nonStandardBrowserEnv2() {
      return function isURLSameOrigin() {
        return true;
      };
    }();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/adapters/xhr.js
function progressEventReducer(listener, isDownloadStream) {
  let bytesNotified = 0;
  const _speedometer = speedometer_default(50, 250);
  return (e) => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : void 0;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;
    bytesNotified = loaded;
    const data = {
      loaded,
      total,
      progress: total ? loaded / total : void 0,
      bytes: progressBytes,
      rate: rate ? rate : void 0,
      estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
      event: e
    };
    data[isDownloadStream ? \\"download\\" : \\"upload\\"] = true;
    listener(data);
  };
}
var isXHRAdapterSupported, xhr_default;
var init_xhr = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/adapters/xhr.js\\"() {
    \\"use strict\\";
    init_utils();
    init_settle();
    init_cookies();
    init_buildURL();
    init_buildFullPath();
    init_isURLSameOrigin();
    init_transitional();
    init_AxiosError();
    init_CanceledError();
    init_parseProtocol();
    init_platform();
    init_AxiosHeaders();
    init_speedometer();
    isXHRAdapterSupported = typeof XMLHttpRequest !== \\"undefined\\";
    xhr_default = isXHRAdapterSupported && function(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        let requestData = config.data;
        const requestHeaders = AxiosHeaders_default.from(config.headers).normalize();
        const responseType = config.responseType;
        let onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener(\\"abort\\", onCanceled);
          }
        }
        if (utils_default.isFormData(requestData)) {
          if (node_default.isStandardBrowserEnv || node_default.isStandardBrowserWebWorkerEnv) {
            requestHeaders.setContentType(false);
          } else {
            requestHeaders.setContentType(\\"multipart/form-data;\\", false);
          }
        }
        let request = new XMLHttpRequest();
        if (config.auth) {
          const username = config.auth.username || \\"\\";
          const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : \\"\\";
          requestHeaders.set(\\"Authorization\\", \\"Basic \\" + btoa(username + \\":\\" + password));
        }
        const fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          const responseHeaders = AxiosHeaders_default.from(
            \\"getAllResponseHeaders\\" in request && request.getAllResponseHeaders()
          );
          const responseData = !responseType || responseType === \\"text\\" || responseType === \\"json\\" ? request.responseText : request.response;
          const response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if (\\"onloadend\\" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf(\\"file:\\") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(new AxiosError_default(\\"Request aborted\\", AxiosError_default.ECONNABORTED, config, request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(new AxiosError_default(\\"Network Error\\", AxiosError_default.ERR_NETWORK, config, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          let timeoutErrorMessage = config.timeout ? \\"timeout of \\" + config.timeout + \\"ms exceeded\\" : \\"timeout exceeded\\";
          const transitional2 = config.transitional || transitional_default;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(new AxiosError_default(
            timeoutErrorMessage,
            transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,
            config,
            request
          ));
          request = null;
        };
        if (node_default.isStandardBrowserEnv) {
          const xsrfValue = (config.withCredentials || isURLSameOrigin_default(fullPath)) && config.xsrfCookieName && cookies_default.read(config.xsrfCookieName);
          if (xsrfValue) {
            requestHeaders.set(config.xsrfHeaderName, xsrfValue);
          }
        }
        requestData === void 0 && requestHeaders.setContentType(null);
        if (\\"setRequestHeader\\" in request) {
          utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
            request.setRequestHeader(key, val);
          });
        }
        if (!utils_default.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== \\"json\\") {
          request.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === \\"function\\") {
          request.addEventListener(\\"progress\\", progressEventReducer(config.onDownloadProgress, true));
        }
        if (typeof config.onUploadProgress === \\"function\\" && request.upload) {
          request.upload.addEventListener(\\"progress\\", progressEventReducer(config.onUploadProgress));
        }
        if (config.cancelToken || config.signal) {
          onCanceled = (cancel) => {
            if (!request) {
              return;
            }
            reject(!cancel || cancel.type ? new CanceledError_default(null, config, request) : cancel);
            request.abort();
            request = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener(\\"abort\\", onCanceled);
          }
        }
        const protocol = parseProtocol(fullPath);
        if (protocol && node_default.protocols.indexOf(protocol) === -1) {
          reject(new AxiosError_default(\\"Unsupported protocol \\" + protocol + \\":\\", AxiosError_default.ERR_BAD_REQUEST, config));
          return;
        }
        request.send(requestData || null);
      });
    };
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/adapters/adapters.js
var knownAdapters, adapters_default;
var init_adapters = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/adapters/adapters.js\\"() {
    init_utils();
    init_http();
    init_xhr();
    init_AxiosError();
    knownAdapters = {
      http: http_default,
      xhr: xhr_default
    };
    utils_default.forEach(knownAdapters, (fn, value) => {
      if (fn) {
        try {
          Object.defineProperty(fn, \\"name\\", { value });
        } catch (e) {
        }
        Object.defineProperty(fn, \\"adapterName\\", { value });
      }
    });
    adapters_default = {
      getAdapter: (adapters) => {
        adapters = utils_default.isArray(adapters) ? adapters : [adapters];
        const { length } = adapters;
        let nameOrAdapter;
        let adapter;
        for (let i = 0; i < length; i++) {
          nameOrAdapter = adapters[i];
          if (adapter = utils_default.isString(nameOrAdapter) ? knownAdapters[nameOrAdapter.toLowerCase()] : nameOrAdapter) {
            break;
          }
        }
        if (!adapter) {
          if (adapter === false) {
            throw new AxiosError_default(
              \`Adapter \${nameOrAdapter} is not supported by the environment\`,
              \\"ERR_NOT_SUPPORT\\"
            );
          }
          throw new Error(
            utils_default.hasOwnProp(knownAdapters, nameOrAdapter) ? \`Adapter '\${nameOrAdapter}' is not available in the build\` : \`Unknown adapter '\${nameOrAdapter}'\`
          );
        }
        if (!utils_default.isFunction(adapter)) {
          throw new TypeError(\\"adapter is not a function\\");
        }
        return adapter;
      },
      adapters: knownAdapters
    };
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/dispatchRequest.js
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
  if (config.signal && config.signal.aborted) {
    throw new CanceledError_default(null, config);
  }
}
function dispatchRequest(config) {
  throwIfCancellationRequested(config);
  config.headers = AxiosHeaders_default.from(config.headers);
  config.data = transformData.call(
    config,
    config.transformRequest
  );
  if ([\\"post\\", \\"put\\", \\"patch\\"].indexOf(config.method) !== -1) {
    config.headers.setContentType(\\"application/x-www-form-urlencoded\\", false);
  }
  const adapter = adapters_default.getAdapter(config.adapter || defaults_default.adapter);
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);
    response.data = transformData.call(
      config,
      config.transformResponse,
      response
    );
    response.headers = AxiosHeaders_default.from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
      }
    }
    return Promise.reject(reason);
  });
}
var init_dispatchRequest = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/dispatchRequest.js\\"() {
    \\"use strict\\";
    init_transformData();
    init_isCancel();
    init_defaults();
    init_CanceledError();
    init_AxiosHeaders();
    init_adapters();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/mergeConfig.js
function mergeConfig(config1, config2) {
  config2 = config2 || {};
  const config = {};
  function getMergedValue(target, source, caseless) {
    if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
      return utils_default.merge.call({ caseless }, target, source);
    } else if (utils_default.isPlainObject(source)) {
      return utils_default.merge({}, source);
    } else if (utils_default.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(a, b, caseless) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(a, b, caseless);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a, caseless);
    }
  }
  function valueFromConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    }
  }
  function defaultToConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a);
    }
  }
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(void 0, a);
    }
  }
  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
  };
  utils_default.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge2 = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge2(config1[prop], config2[prop], prop);
    utils_default.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
}
var headersToObject;
var init_mergeConfig = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/mergeConfig.js\\"() {
    \\"use strict\\";
    init_utils();
    init_AxiosHeaders();
    headersToObject = (thing) => thing instanceof AxiosHeaders_default ? thing.toJSON() : thing;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/validator.js
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== \\"object\\") {
    throw new AxiosError_default(\\"options must be an object\\", AxiosError_default.ERR_BAD_OPTION_VALUE);
  }
  const keys2 = Object.keys(options);
  let i = keys2.length;
  while (i-- > 0) {
    const opt = keys2[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === void 0 || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError_default(\\"option \\" + opt + \\" must be \\" + result, AxiosError_default.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError_default(\\"Unknown option \\" + opt, AxiosError_default.ERR_BAD_OPTION);
    }
  }
}
var validators, deprecatedWarnings, validator_default;
var init_validator = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/validator.js\\"() {
    \\"use strict\\";
    init_data();
    init_AxiosError();
    validators = {};
    [\\"object\\", \\"boolean\\", \\"number\\", \\"function\\", \\"string\\", \\"symbol\\"].forEach((type, i) => {
      validators[type] = function validator(thing) {
        return typeof thing === type || \\"a\\" + (i < 1 ? \\"n \\" : \\" \\") + type;
      };
    });
    deprecatedWarnings = {};
    validators.transitional = function transitional(validator, version, message) {
      function formatMessage(opt, desc) {
        return \\"[Axios v\\" + VERSION + \\"] Transitional option '\\" + opt + \\"'\\" + desc + (message ? \\". \\" + message : \\"\\");
      }
      return (value, opt, opts) => {
        if (validator === false) {
          throw new AxiosError_default(
            formatMessage(opt, \\" has been removed\\" + (version ? \\" in \\" + version : \\"\\")),
            AxiosError_default.ERR_DEPRECATED
          );
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              \\" has been deprecated since v\\" + version + \\" and will be removed in the near future\\"
            )
          );
        }
        return validator ? validator(value, opt, opts) : true;
      };
    };
    validator_default = {
      assertOptions,
      validators
    };
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/Axios.js
var validators2, Axios, Axios_default;
var init_Axios = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/core/Axios.js\\"() {
    \\"use strict\\";
    init_utils();
    init_buildURL();
    init_InterceptorManager();
    init_dispatchRequest();
    init_mergeConfig();
    init_buildFullPath();
    init_validator();
    init_AxiosHeaders();
    validators2 = validator_default.validators;
    Axios = class {
      constructor(instanceConfig) {
        this.defaults = instanceConfig;
        this.interceptors = {
          request: new InterceptorManager_default(),
          response: new InterceptorManager_default()
        };
      }
      /**
       * Dispatch a request
       *
       * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
       * @param {?Object} config
       *
       * @returns {Promise} The Promise to be fulfilled
       */
      request(configOrUrl, config) {
        if (typeof configOrUrl === \\"string\\") {
          config = config || {};
          config.url = configOrUrl;
        } else {
          config = configOrUrl || {};
        }
        config = mergeConfig(this.defaults, config);
        const { transitional: transitional2, paramsSerializer, headers } = config;
        if (transitional2 !== void 0) {
          validator_default.assertOptions(transitional2, {
            silentJSONParsing: validators2.transitional(validators2.boolean),
            forcedJSONParsing: validators2.transitional(validators2.boolean),
            clarifyTimeoutError: validators2.transitional(validators2.boolean)
          }, false);
        }
        if (paramsSerializer != null) {
          if (utils_default.isFunction(paramsSerializer)) {
            config.paramsSerializer = {
              serialize: paramsSerializer
            };
          } else {
            validator_default.assertOptions(paramsSerializer, {
              encode: validators2.function,
              serialize: validators2.function
            }, true);
          }
        }
        config.method = (config.method || this.defaults.method || \\"get\\").toLowerCase();
        let contextHeaders;
        contextHeaders = headers && utils_default.merge(
          headers.common,
          headers[config.method]
        );
        contextHeaders && utils_default.forEach(
          [\\"delete\\", \\"get\\", \\"head\\", \\"post\\", \\"put\\", \\"patch\\", \\"common\\"],
          (method) => {
            delete headers[method];
          }
        );
        config.headers = AxiosHeaders_default.concat(contextHeaders, headers);
        const requestInterceptorChain = [];
        let synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === \\"function\\" && interceptor.runWhen(config) === false) {
            return;
          }
          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        const responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });
        let promise;
        let i = 0;
        let len;
        if (!synchronousRequestInterceptors) {
          const chain = [dispatchRequest.bind(this), void 0];
          chain.unshift.apply(chain, requestInterceptorChain);
          chain.push.apply(chain, responseInterceptorChain);
          len = chain.length;
          promise = Promise.resolve(config);
          while (i < len) {
            promise = promise.then(chain[i++], chain[i++]);
          }
          return promise;
        }
        len = requestInterceptorChain.length;
        let newConfig = config;
        i = 0;
        while (i < len) {
          const onFulfilled = requestInterceptorChain[i++];
          const onRejected = requestInterceptorChain[i++];
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error) {
            onRejected.call(this, error);
            break;
          }
        }
        try {
          promise = dispatchRequest.call(this, newConfig);
        } catch (error) {
          return Promise.reject(error);
        }
        i = 0;
        len = responseInterceptorChain.length;
        while (i < len) {
          promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
        }
        return promise;
      }
      getUri(config) {
        config = mergeConfig(this.defaults, config);
        const fullPath = buildFullPath(config.baseURL, config.url);
        return buildURL(fullPath, config.params, config.paramsSerializer);
      }
    };
    utils_default.forEach([\\"delete\\", \\"get\\", \\"head\\", \\"options\\"], function forEachMethodNoData2(method) {
      Axios.prototype[method] = function(url2, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url: url2,
          data: (config || {}).data
        }));
      };
    });
    utils_default.forEach([\\"post\\", \\"put\\", \\"patch\\"], function forEachMethodWithData2(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url2, data, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            headers: isForm ? {
              \\"Content-Type\\": \\"multipart/form-data\\"
            } : {},
            url: url2,
            data
          }));
        };
      }
      Axios.prototype[method] = generateHTTPMethod();
      Axios.prototype[method + \\"Form\\"] = generateHTTPMethod(true);
    });
    Axios_default = Axios;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/cancel/CancelToken.js
var CancelToken, CancelToken_default;
var init_CancelToken = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/cancel/CancelToken.js\\"() {
    \\"use strict\\";
    init_CanceledError();
    CancelToken = class {
      constructor(executor) {
        if (typeof executor !== \\"function\\") {
          throw new TypeError(\\"executor must be a function.\\");
        }
        let resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve) {
          resolvePromise = resolve;
        });
        const token = this;
        this.promise.then((cancel) => {
          if (!token._listeners)
            return;
          let i = token._listeners.length;
          while (i-- > 0) {
            token._listeners[i](cancel);
          }
          token._listeners = null;
        });
        this.promise.then = (onfulfilled) => {
          let _resolve;
          const promise = new Promise((resolve) => {
            token.subscribe(resolve);
            _resolve = resolve;
          }).then(onfulfilled);
          promise.cancel = function reject() {
            token.unsubscribe(_resolve);
          };
          return promise;
        };
        executor(function cancel(message, config, request) {
          if (token.reason) {
            return;
          }
          token.reason = new CanceledError_default(message, config, request);
          resolvePromise(token.reason);
        });
      }
      /**
       * Throws a \`CanceledError\` if cancellation has been requested.
       */
      throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      }
      /**
       * Subscribe to the cancel signal
       */
      subscribe(listener) {
        if (this.reason) {
          listener(this.reason);
          return;
        }
        if (this._listeners) {
          this._listeners.push(listener);
        } else {
          this._listeners = [listener];
        }
      }
      /**
       * Unsubscribe from the cancel signal
       */
      unsubscribe(listener) {
        if (!this._listeners) {
          return;
        }
        const index = this._listeners.indexOf(listener);
        if (index !== -1) {
          this._listeners.splice(index, 1);
        }
      }
      /**
       * Returns an object that contains a new \`CancelToken\` and a function that, when called,
       * cancels the \`CancelToken\`.
       */
      static source() {
        let cancel;
        const token = new CancelToken(function executor(c) {
          cancel = c;
        });
        return {
          token,
          cancel
        };
      }
    };
    CancelToken_default = CancelToken;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/spread.js
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}
var init_spread = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/spread.js\\"() {
    \\"use strict\\";
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/isAxiosError.js
function isAxiosError(payload) {
  return utils_default.isObject(payload) && payload.isAxiosError === true;
}
var init_isAxiosError = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/isAxiosError.js\\"() {
    \\"use strict\\";
    init_utils();
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/HttpStatusCode.js
var HttpStatusCode, HttpStatusCode_default;
var init_HttpStatusCode = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/helpers/HttpStatusCode.js\\"() {
    HttpStatusCode = {
      Continue: 100,
      SwitchingProtocols: 101,
      Processing: 102,
      EarlyHints: 103,
      Ok: 200,
      Created: 201,
      Accepted: 202,
      NonAuthoritativeInformation: 203,
      NoContent: 204,
      ResetContent: 205,
      PartialContent: 206,
      MultiStatus: 207,
      AlreadyReported: 208,
      ImUsed: 226,
      MultipleChoices: 300,
      MovedPermanently: 301,
      Found: 302,
      SeeOther: 303,
      NotModified: 304,
      UseProxy: 305,
      Unused: 306,
      TemporaryRedirect: 307,
      PermanentRedirect: 308,
      BadRequest: 400,
      Unauthorized: 401,
      PaymentRequired: 402,
      Forbidden: 403,
      NotFound: 404,
      MethodNotAllowed: 405,
      NotAcceptable: 406,
      ProxyAuthenticationRequired: 407,
      RequestTimeout: 408,
      Conflict: 409,
      Gone: 410,
      LengthRequired: 411,
      PreconditionFailed: 412,
      PayloadTooLarge: 413,
      UriTooLong: 414,
      UnsupportedMediaType: 415,
      RangeNotSatisfiable: 416,
      ExpectationFailed: 417,
      ImATeapot: 418,
      MisdirectedRequest: 421,
      UnprocessableEntity: 422,
      Locked: 423,
      FailedDependency: 424,
      TooEarly: 425,
      UpgradeRequired: 426,
      PreconditionRequired: 428,
      TooManyRequests: 429,
      RequestHeaderFieldsTooLarge: 431,
      UnavailableForLegalReasons: 451,
      InternalServerError: 500,
      NotImplemented: 501,
      BadGateway: 502,
      ServiceUnavailable: 503,
      GatewayTimeout: 504,
      HttpVersionNotSupported: 505,
      VariantAlsoNegotiates: 506,
      InsufficientStorage: 507,
      LoopDetected: 508,
      NotExtended: 510,
      NetworkAuthenticationRequired: 511
    };
    Object.entries(HttpStatusCode).forEach(([key, value]) => {
      HttpStatusCode[value] = key;
    });
    HttpStatusCode_default = HttpStatusCode;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/axios.js
function createInstance(defaultConfig) {
  const context = new Axios_default(defaultConfig);
  const instance = bind(Axios_default.prototype.request, context);
  utils_default.extend(instance, Axios_default.prototype, context, { allOwnKeys: true });
  utils_default.extend(instance, context, null, { allOwnKeys: true });
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };
  return instance;
}
var axios, axios_default;
var init_axios = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/lib/axios.js\\"() {
    \\"use strict\\";
    init_utils();
    init_bind();
    init_Axios();
    init_mergeConfig();
    init_defaults();
    init_formDataToJSON();
    init_CanceledError();
    init_CancelToken();
    init_isCancel();
    init_data();
    init_toFormData();
    init_AxiosError();
    init_spread();
    init_isAxiosError();
    init_AxiosHeaders();
    init_HttpStatusCode();
    axios = createInstance(defaults_default);
    axios.Axios = Axios_default;
    axios.CanceledError = CanceledError_default;
    axios.CancelToken = CancelToken_default;
    axios.isCancel = isCancel;
    axios.VERSION = VERSION;
    axios.toFormData = toFormData_default;
    axios.AxiosError = AxiosError_default;
    axios.Cancel = axios.CanceledError;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = spread;
    axios.isAxiosError = isAxiosError;
    axios.mergeConfig = mergeConfig;
    axios.AxiosHeaders = AxiosHeaders_default;
    axios.formToJSON = (thing) => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
    axios.HttpStatusCode = HttpStatusCode_default;
    axios.default = axios;
    axios_default = axios;
  }
});

// .yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/index.js
var Axios2, AxiosError2, CanceledError2, isCancel2, CancelToken2, VERSION2, all2, Cancel, isAxiosError2, spread2, toFormData2, AxiosHeaders2, HttpStatusCode2, formToJSON, mergeConfig2;
var init_axios2 = __esm({
  \\".yarn/cache/axios-npm-1.4.0-4d7ce8ca3e-7fb6a4313b.zip/node_modules/axios/index.js\\"() {
    init_axios();
    ({
      Axios: Axios2,
      AxiosError: AxiosError2,
      CanceledError: CanceledError2,
      isCancel: isCancel2,
      CancelToken: CancelToken2,
      VERSION: VERSION2,
      all: all2,
      Cancel,
      isAxiosError: isAxiosError2,
      spread: spread2,
      toFormData: toFormData2,
      AxiosHeaders: AxiosHeaders2,
      HttpStatusCode: HttpStatusCode2,
      formToJSON,
      mergeConfig: mergeConfig2
    } = axios_default);
  }
});

// src/core/fetcher/Fetcher.ts
async function fetcherImpl(args) {
  const headers = {};
  if (args.body !== void 0 && args.contentType != null) {
    headers[\\"Content-Type\\"] = args.contentType;
  }
  if (args.headers != null) {
    for (const [key, value] of Object.entries(args.headers)) {
      if (value != null) {
        headers[key] = value;
      }
    }
  }
  try {
    const response = await axios_default({
      url: args.url,
      params: args.queryParameters,
      method: args.method,
      headers,
      data: args.body,
      validateStatus: () => true,
      transformResponse: (response2) => response2,
      timeout: args.timeoutMs,
      transitional: {
        clarifyTimeoutError: true
      },
      withCredentials: args.withCredentials,
      adapter: args.adapter,
      onUploadProgress: args.onUploadProgress,
      maxBodyLength: Infinity,
      maxContentLength: Infinity,
      responseType: args.responseType ?? \\"json\\"
    });
    let body;
    if (args.responseType === \\"blob\\") {
      body = response.data;
    } else if (response.data != null && response.data.length > 0) {
      try {
        body = JSON.parse(response.data) ?? void 0;
      } catch {
        return {
          ok: false,
          error: {
            reason: \\"non-json\\",
            statusCode: response.status,
            rawBody: response.data
          }
        };
      }
    }
    if (response.status >= 200 && response.status < 400) {
      return {
        ok: true,
        body
      };
    } else {
      return {
        ok: false,
        error: {
          reason: \\"status-code\\",
          statusCode: response.status,
          body
        }
      };
    }
  } catch (error) {
    if (error.code === \\"ETIMEDOUT\\") {
      return {
        ok: false,
        error: {
          reason: \\"timeout\\"
        }
      };
    }
    return {
      ok: false,
      error: {
        reason: \\"unknown\\",
        errorMessage: error.message
      }
    };
  }
}
var fetcher;
var init_Fetcher = __esm({
  \\"src/core/fetcher/Fetcher.ts\\"() {
    \\"use strict\\";
    init_axios2();
    fetcher = fetcherImpl;
  }
});

// src/core/fetcher/Supplier.ts
var Supplier;
var init_Supplier = __esm({
  \\"src/core/fetcher/Supplier.ts\\"() {
    \\"use strict\\";
    Supplier = {
      get: async (supplier) => {
        if (typeof supplier === \\"function\\") {
          return supplier();
        } else {
          return supplier;
        }
      }
    };
  }
});

// src/core/fetcher/index.ts
var init_fetcher = __esm({
  \\"src/core/fetcher/index.ts\\"() {
    \\"use strict\\";
    init_Fetcher();
    init_Supplier();
  }
});

// .yarn/cache/js-base64-npm-3.7.2-706fb77a0b-573f28e9a2.zip/node_modules/js-base64/base64.mjs
var _TD, _TE, b64ch, b64chs, b64tab, _fromCC, _U8Afrom;
var init_base64 = __esm({
  \\".yarn/cache/js-base64-npm-3.7.2-706fb77a0b-573f28e9a2.zip/node_modules/js-base64/base64.mjs\\"() {
    _TD = typeof TextDecoder === \\"function\\" ? new TextDecoder() : void 0;
    _TE = typeof TextEncoder === \\"function\\" ? new TextEncoder() : void 0;
    b64ch = \\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\";
    b64chs = Array.prototype.slice.call(b64ch);
    b64tab = ((a) => {
      let tab = {};
      a.forEach((c, i) => tab[c] = i);
      return tab;
    })(b64chs);
    _fromCC = String.fromCharCode.bind(String);
    _U8Afrom = typeof Uint8Array.from === \\"function\\" ? Uint8Array.from.bind(Uint8Array) : (it, fn = (x) => x) => new Uint8Array(Array.prototype.slice.call(it, 0).map(fn));
  }
});

// src/core/auth/BasicAuth.ts
var init_BasicAuth = __esm({
  \\"src/core/auth/BasicAuth.ts\\"() {
    \\"use strict\\";
    init_base64();
  }
});

// src/core/auth/BearerToken.ts
var init_BearerToken = __esm({
  \\"src/core/auth/BearerToken.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/auth/index.ts
var init_auth = __esm({
  \\"src/core/auth/index.ts\\"() {
    \\"use strict\\";
    init_BasicAuth();
    init_BearerToken();
  }
});

// src/core/schemas/Schema.ts
var SchemaType;
var init_Schema = __esm({
  \\"src/core/schemas/Schema.ts\\"() {
    \\"use strict\\";
    SchemaType = {
      DATE: \\"date\\",
      ENUM: \\"enum\\",
      LIST: \\"list\\",
      STRING_LITERAL: \\"stringLiteral\\",
      OBJECT: \\"object\\",
      ANY: \\"any\\",
      BOOLEAN: \\"boolean\\",
      NUMBER: \\"number\\",
      STRING: \\"string\\",
      UNKNOWN: \\"unknown\\",
      RECORD: \\"record\\",
      SET: \\"set\\",
      UNION: \\"union\\",
      UNDISCRIMINATED_UNION: \\"undiscriminatedUnion\\",
      OPTIONAL: \\"optional\\"
    };
  }
});

// src/core/schemas/utils/getErrorMessageForIncorrectType.ts
function getErrorMessageForIncorrectType(value, expectedType) {
  return \`Expected \${expectedType}. Received \${getTypeAsString(value)}.\`;
}
function getTypeAsString(value) {
  if (Array.isArray(value)) {
    return \\"list\\";
  }
  if (value === null) {
    return \\"null\\";
  }
  switch (typeof value) {
    case \\"string\\":
      return \`\\"\${value}\\"\`;
    case \\"number\\":
    case \\"boolean\\":
    case \\"undefined\\":
      return \`\${value}\`;
  }
  return typeof value;
}
var init_getErrorMessageForIncorrectType = __esm({
  \\"src/core/schemas/utils/getErrorMessageForIncorrectType.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/utils/maybeSkipValidation.ts
function maybeSkipValidation(schema) {
  return {
    ...schema,
    json: transformAndMaybeSkipValidation(schema.json),
    parse: transformAndMaybeSkipValidation(schema.parse)
  };
}
function transformAndMaybeSkipValidation(transform2) {
  return async (value, opts) => {
    const transformed = await transform2(value, opts);
    const { skipValidation = false } = opts ?? {};
    if (!transformed.ok && skipValidation) {
      console.warn(
        [
          \\"Failed to validate.\\",
          ...transformed.errors.map(
            (error) => \\"  - \\" + (error.path.length > 0 ? \`\${error.path.join(\\".\\")}: \${error.message}\` : error.message)
          )
        ].join(\\"\\\\n\\")
      );
      return {
        ok: true,
        value
      };
    } else {
      return transformed;
    }
  };
}
var init_maybeSkipValidation = __esm({
  \\"src/core/schemas/utils/maybeSkipValidation.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
function stringifyValidationError(error) {
  if (error.path.length === 0) {
    return error.message;
  }
  return \`\${error.path.join(\\" -> \\")}: \${error.message}\`;
}
var init_stringifyValidationErrors = __esm({
  \\"src/core/schemas/builders/schema-utils/stringifyValidationErrors.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/builders/schema-utils/JsonError.ts
var JsonError;
var init_JsonError = __esm({
  \\"src/core/schemas/builders/schema-utils/JsonError.ts\\"() {
    \\"use strict\\";
    init_stringifyValidationErrors();
    JsonError = class extends Error {
      constructor(errors) {
        super(errors.map(stringifyValidationError).join(\\"; \\"));
        this.errors = errors;
        Object.setPrototypeOf(this, JsonError.prototype);
      }
    };
  }
});

// src/core/schemas/builders/schema-utils/ParseError.ts
var ParseError;
var init_ParseError = __esm({
  \\"src/core/schemas/builders/schema-utils/ParseError.ts\\"() {
    \\"use strict\\";
    init_stringifyValidationErrors();
    ParseError = class extends Error {
      constructor(errors) {
        super(errors.map(stringifyValidationError).join(\\"; \\"));
        this.errors = errors;
        Object.setPrototypeOf(this, ParseError.prototype);
      }
    };
  }
});

// src/core/schemas/builders/schema-utils/getSchemaUtils.ts
function getSchemaUtils(schema) {
  return {
    optional: () => optional(schema),
    transform: (transformer) => transform(schema, transformer),
    parseOrThrow: async (raw, opts) => {
      const parsed = await schema.parse(raw, opts);
      if (parsed.ok) {
        return parsed.value;
      }
      throw new ParseError(parsed.errors);
    },
    jsonOrThrow: async (parsed, opts) => {
      const raw = await schema.json(parsed, opts);
      if (raw.ok) {
        return raw.value;
      }
      throw new JsonError(raw.errors);
    }
  };
}
function optional(schema) {
  const baseSchema = {
    parse: (raw, opts) => {
      if (raw == null) {
        return {
          ok: true,
          value: void 0
        };
      }
      return schema.parse(raw, opts);
    },
    json: (parsed, opts) => {
      if (parsed == null) {
        return {
          ok: true,
          value: null
        };
      }
      return schema.json(parsed, opts);
    },
    getType: () => SchemaType.OPTIONAL
  };
  return {
    ...baseSchema,
    ...getSchemaUtils(baseSchema)
  };
}
function transform(schema, transformer) {
  const baseSchema = {
    parse: async (raw, opts) => {
      const parsed = await schema.parse(raw, opts);
      if (!parsed.ok) {
        return parsed;
      }
      return {
        ok: true,
        value: transformer.transform(parsed.value)
      };
    },
    json: async (transformed, opts) => {
      const parsed = await transformer.untransform(transformed);
      return schema.json(parsed, opts);
    },
    getType: () => schema.getType()
  };
  return {
    ...baseSchema,
    ...getSchemaUtils(baseSchema)
  };
}
var init_getSchemaUtils = __esm({
  \\"src/core/schemas/builders/schema-utils/getSchemaUtils.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_JsonError();
    init_ParseError();
  }
});

// src/core/schemas/builders/schema-utils/index.ts
var init_schema_utils = __esm({
  \\"src/core/schemas/builders/schema-utils/index.ts\\"() {
    \\"use strict\\";
    init_getSchemaUtils();
    init_JsonError();
    init_ParseError();
  }
});

// src/core/schemas/builders/date/date.ts
function date() {
  const baseSchema = {
    parse: (raw, { breadcrumbsPrefix = [] } = {}) => {
      if (typeof raw !== \\"string\\") {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(raw, \\"string\\")
            }
          ]
        };
      }
      if (!ISO_8601_REGEX.test(raw)) {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(raw, \\"ISO 8601 date string\\")
            }
          ]
        };
      }
      return {
        ok: true,
        value: new Date(raw)
      };
    },
    json: (date2, { breadcrumbsPrefix = [] } = {}) => {
      if (date2 instanceof Date) {
        return {
          ok: true,
          value: date2.toISOString()
        };
      } else {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(date2, \\"Date object\\")
            }
          ]
        };
      }
    },
    getType: () => SchemaType.DATE
  };
  return {
    ...maybeSkipValidation(baseSchema),
    ...getSchemaUtils(baseSchema)
  };
}
var ISO_8601_REGEX;
var init_date = __esm({
  \\"src/core/schemas/builders/date/date.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_getErrorMessageForIncorrectType();
    init_maybeSkipValidation();
    init_schema_utils();
    ISO_8601_REGEX = /^([+-]?\\\\d{4}(?!\\\\d{2}\\\\b))((-?)((0[1-9]|1[0-2])(\\\\3([12]\\\\d|0[1-9]|3[01]))?|W([0-4]\\\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\\\d|[12]\\\\d{2}|3([0-5]\\\\d|6[1-6])))([T\\\\s]((([01]\\\\d|2[0-3])((:?)[0-5]\\\\d)?|24:?00)([.,]\\\\d+(?!:))?)?(\\\\17[0-5]\\\\d([.,]\\\\d+)?)?([zZ]|([+-])([01]\\\\d|2[0-3]):?([0-5]\\\\d)?)?)?)?$/;
  }
});

// src/core/schemas/builders/date/index.ts
var init_date2 = __esm({
  \\"src/core/schemas/builders/date/index.ts\\"() {
    \\"use strict\\";
    init_date();
  }
});

// src/core/schemas/utils/createIdentitySchemaCreator.ts
function createIdentitySchemaCreator(schemaType, validate) {
  return () => {
    const baseSchema = {
      parse: validate,
      json: validate,
      getType: () => schemaType
    };
    return {
      ...maybeSkipValidation(baseSchema),
      ...getSchemaUtils(baseSchema)
    };
  };
}
var init_createIdentitySchemaCreator = __esm({
  \\"src/core/schemas/utils/createIdentitySchemaCreator.ts\\"() {
    \\"use strict\\";
    init_schema_utils();
    init_maybeSkipValidation();
  }
});

// src/core/schemas/builders/enum/enum.ts
function enum_(values) {
  const validValues = new Set(values);
  const schemaCreator = createIdentitySchemaCreator(
    SchemaType.ENUM,
    (value, { allowUnrecognizedEnumValues, breadcrumbsPrefix = [] } = {}) => {
      if (typeof value !== \\"string\\") {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(value, \\"string\\")
            }
          ]
        };
      }
      if (!validValues.has(value) && !allowUnrecognizedEnumValues) {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(value, \\"enum\\")
            }
          ]
        };
      }
      return {
        ok: true,
        value
      };
    }
  );
  return schemaCreator();
}
var init_enum = __esm({
  \\"src/core/schemas/builders/enum/enum.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    init_getErrorMessageForIncorrectType();
  }
});

// src/core/schemas/builders/enum/index.ts
var init_enum2 = __esm({
  \\"src/core/schemas/builders/enum/index.ts\\"() {
    \\"use strict\\";
    init_enum();
  }
});

// src/core/schemas/builders/lazy/lazy.ts
function lazy(getter) {
  const baseSchema = constructLazyBaseSchema(getter);
  return {
    ...baseSchema,
    ...getSchemaUtils(baseSchema)
  };
}
function constructLazyBaseSchema(getter) {
  return {
    parse: async (raw, opts) => (await getMemoizedSchema(getter)).parse(raw, opts),
    json: async (parsed, opts) => (await getMemoizedSchema(getter)).json(parsed, opts),
    getType: async () => (await getMemoizedSchema(getter)).getType()
  };
}
async function getMemoizedSchema(getter) {
  const castedGetter = getter;
  if (castedGetter.__zurg_memoized == null) {
    castedGetter.__zurg_memoized = await getter();
  }
  return castedGetter.__zurg_memoized;
}
var init_lazy = __esm({
  \\"src/core/schemas/builders/lazy/lazy.ts\\"() {
    \\"use strict\\";
    init_schema_utils();
  }
});

// src/core/schemas/utils/entries.ts
function entries(object2) {
  return Object.entries(object2);
}
var init_entries = __esm({
  \\"src/core/schemas/utils/entries.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/utils/filterObject.ts
function filterObject(obj, keysToInclude) {
  const keysToIncludeSet = new Set(keysToInclude);
  return Object.entries(obj).reduce((acc, [key, value]) => {
    if (keysToIncludeSet.has(key)) {
      acc[key] = value;
    }
    return acc;
  }, {});
}
var init_filterObject = __esm({
  \\"src/core/schemas/utils/filterObject.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/utils/isPlainObject.ts
function isPlainObject2(value) {
  if (typeof value !== \\"object\\" || value === null) {
    return false;
  }
  if (Object.getPrototypeOf(value) === null) {
    return true;
  }
  let proto = value;
  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }
  return Object.getPrototypeOf(value) === proto;
}
var init_isPlainObject = __esm({
  \\"src/core/schemas/utils/isPlainObject.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/utils/keys.ts
function keys(object2) {
  return Object.keys(object2);
}
var init_keys = __esm({
  \\"src/core/schemas/utils/keys.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/utils/partition.ts
function partition(items, predicate) {
  const trueItems = [], falseItems = [];
  for (const item of items) {
    if (predicate(item)) {
      trueItems.push(item);
    } else {
      falseItems.push(item);
    }
  }
  return [trueItems, falseItems];
}
var init_partition = __esm({
  \\"src/core/schemas/utils/partition.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/builders/object-like/getObjectLikeUtils.ts
function getObjectLikeUtils(schema) {
  return {
    withParsedProperties: (properties) => withParsedProperties(schema, properties)
  };
}
function withParsedProperties(objectLike, properties) {
  const objectSchema = {
    parse: async (raw, opts) => {
      const parsedObject = await objectLike.parse(raw, opts);
      if (!parsedObject.ok) {
        return parsedObject;
      }
      const additionalProperties = Object.entries(properties).reduce(
        (processed, [key, value]) => {
          return {
            ...processed,
            [key]: typeof value === \\"function\\" ? value(parsedObject.value) : value
          };
        },
        {}
      );
      return {
        ok: true,
        value: {
          ...parsedObject.value,
          ...additionalProperties
        }
      };
    },
    json: (parsed, opts) => {
      if (!isPlainObject2(parsed)) {
        return {
          ok: false,
          errors: [
            {
              path: (opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [],
              message: getErrorMessageForIncorrectType(parsed, \\"object\\")
            }
          ]
        };
      }
      const addedPropertyKeys = new Set(Object.keys(properties));
      const parsedWithoutAddedProperties = filterObject(
        parsed,
        Object.keys(parsed).filter((key) => !addedPropertyKeys.has(key))
      );
      return objectLike.json(parsedWithoutAddedProperties, opts);
    },
    getType: () => objectLike.getType()
  };
  return {
    ...objectSchema,
    ...getSchemaUtils(objectSchema),
    ...getObjectLikeUtils(objectSchema)
  };
}
var init_getObjectLikeUtils = __esm({
  \\"src/core/schemas/builders/object-like/getObjectLikeUtils.ts\\"() {
    \\"use strict\\";
    init_filterObject();
    init_getErrorMessageForIncorrectType();
    init_isPlainObject();
    init_schema_utils();
  }
});

// src/core/schemas/builders/object-like/index.ts
var init_object_like = __esm({
  \\"src/core/schemas/builders/object-like/index.ts\\"() {
    \\"use strict\\";
    init_getObjectLikeUtils();
  }
});

// src/core/schemas/builders/object/property.ts
function property(rawKey, valueSchema) {
  return {
    rawKey,
    valueSchema,
    isProperty: true
  };
}
function isProperty(maybeProperty) {
  return maybeProperty.isProperty;
}
var init_property = __esm({
  \\"src/core/schemas/builders/object/property.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/builders/object/object.ts
function object(schemas) {
  const baseSchema = {
    _getRawProperties: () => Promise.resolve(
      Object.entries(schemas).map(
        ([parsedKey, propertySchema]) => isProperty(propertySchema) ? propertySchema.rawKey : parsedKey
      )
    ),
    _getParsedProperties: () => Promise.resolve(keys(schemas)),
    parse: async (raw, opts) => {
      const rawKeyToProperty = {};
      const requiredKeys = [];
      for (const [parsedKey, schemaOrObjectProperty] of entries(schemas)) {
        const rawKey = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.rawKey : parsedKey;
        const valueSchema = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.valueSchema : schemaOrObjectProperty;
        const property2 = {
          rawKey,
          parsedKey,
          valueSchema
        };
        rawKeyToProperty[rawKey] = property2;
        if (await isSchemaRequired(valueSchema)) {
          requiredKeys.push(rawKey);
        }
      }
      return validateAndTransformObject({
        value: raw,
        requiredKeys,
        getProperty: (rawKey) => {
          const property2 = rawKeyToProperty[rawKey];
          if (property2 == null) {
            return void 0;
          }
          return {
            transformedKey: property2.parsedKey,
            transform: (propertyValue) => property2.valueSchema.parse(propertyValue, {
              ...opts,
              breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], rawKey]
            })
          };
        },
        unrecognizedObjectKeys: opts == null ? void 0 : opts.unrecognizedObjectKeys,
        skipValidation: opts == null ? void 0 : opts.skipValidation,
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    },
    json: async (parsed, opts) => {
      const requiredKeys = [];
      for (const [parsedKey, schemaOrObjectProperty] of entries(schemas)) {
        const valueSchema = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.valueSchema : schemaOrObjectProperty;
        if (await isSchemaRequired(valueSchema)) {
          requiredKeys.push(parsedKey);
        }
      }
      return validateAndTransformObject({
        value: parsed,
        requiredKeys,
        getProperty: (parsedKey) => {
          const property2 = schemas[parsedKey];
          if (property2 == null) {
            return void 0;
          }
          if (isProperty(property2)) {
            return {
              transformedKey: property2.rawKey,
              transform: (propertyValue) => property2.valueSchema.json(propertyValue, {
                ...opts,
                breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], parsedKey]
              })
            };
          } else {
            return {
              transformedKey: parsedKey,
              transform: (propertyValue) => property2.json(propertyValue, {
                ...opts,
                breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], parsedKey]
              })
            };
          }
        },
        unrecognizedObjectKeys: opts == null ? void 0 : opts.unrecognizedObjectKeys,
        skipValidation: opts == null ? void 0 : opts.skipValidation,
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    },
    getType: () => SchemaType.OBJECT
  };
  return {
    ...maybeSkipValidation(baseSchema),
    ...getSchemaUtils(baseSchema),
    ...getObjectLikeUtils(baseSchema),
    ...getObjectUtils(baseSchema)
  };
}
async function validateAndTransformObject({
  value,
  requiredKeys,
  getProperty,
  unrecognizedObjectKeys = \\"fail\\",
  skipValidation = false,
  breadcrumbsPrefix = []
}) {
  if (!isPlainObject2(value)) {
    return {
      ok: false,
      errors: [
        {
          path: breadcrumbsPrefix,
          message: getErrorMessageForIncorrectType(value, \\"object\\")
        }
      ]
    };
  }
  const missingRequiredKeys = new Set(requiredKeys);
  const errors = [];
  const transformed = {};
  for (const [preTransformedKey, preTransformedItemValue] of Object.entries(value)) {
    const property2 = getProperty(preTransformedKey);
    if (property2 != null) {
      missingRequiredKeys.delete(preTransformedKey);
      const value2 = await property2.transform(preTransformedItemValue);
      if (value2.ok) {
        transformed[property2.transformedKey] = value2.value;
      } else {
        transformed[preTransformedKey] = preTransformedItemValue;
        errors.push(...value2.errors);
      }
    } else {
      switch (unrecognizedObjectKeys) {
        case \\"fail\\":
          errors.push({
            path: [...breadcrumbsPrefix, preTransformedKey],
            message: \`Unexpected key \\"\${preTransformedKey}\\"\`
          });
          break;
        case \\"strip\\":
          break;
        case \\"passthrough\\":
          transformed[preTransformedKey] = preTransformedItemValue;
          break;
      }
    }
  }
  errors.push(
    ...requiredKeys.filter((key) => missingRequiredKeys.has(key)).map((key) => ({
      path: breadcrumbsPrefix,
      message: \`Missing required key \\"\${key}\\"\`
    }))
  );
  if (errors.length === 0 || skipValidation) {
    return {
      ok: true,
      value: transformed
    };
  } else {
    return {
      ok: false,
      errors
    };
  }
}
function getObjectUtils(schema) {
  return {
    extend: (extension) => {
      const baseSchema = {
        _getParsedProperties: async () => [
          ...await schema._getParsedProperties(),
          ...await extension._getParsedProperties()
        ],
        _getRawProperties: async () => [
          ...await schema._getRawProperties(),
          ...await extension._getRawProperties()
        ],
        parse: async (raw, opts) => {
          return validateAndTransformExtendedObject({
            extensionKeys: await extension._getRawProperties(),
            value: raw,
            transformBase: (rawBase) => schema.parse(rawBase, opts),
            transformExtension: (rawExtension) => extension.parse(rawExtension, opts)
          });
        },
        json: async (parsed, opts) => {
          return validateAndTransformExtendedObject({
            extensionKeys: await extension._getParsedProperties(),
            value: parsed,
            transformBase: (parsedBase) => schema.json(parsedBase, opts),
            transformExtension: (parsedExtension) => extension.json(parsedExtension, opts)
          });
        },
        getType: () => SchemaType.OBJECT
      };
      return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
        ...getObjectLikeUtils(baseSchema),
        ...getObjectUtils(baseSchema)
      };
    }
  };
}
async function validateAndTransformExtendedObject({
  extensionKeys,
  value,
  transformBase,
  transformExtension
}) {
  const extensionPropertiesSet = new Set(extensionKeys);
  const [extensionProperties, baseProperties] = partition(
    keys(value),
    (key) => extensionPropertiesSet.has(key)
  );
  const transformedBase = await transformBase(filterObject(value, baseProperties));
  const transformedExtension = await transformExtension(filterObject(value, extensionProperties));
  if (transformedBase.ok && transformedExtension.ok) {
    return {
      ok: true,
      value: {
        ...transformedBase.value,
        ...transformedExtension.value
      }
    };
  } else {
    return {
      ok: false,
      errors: [
        ...transformedBase.ok ? [] : transformedBase.errors,
        ...transformedExtension.ok ? [] : transformedExtension.errors
      ]
    };
  }
}
async function isSchemaRequired(schema) {
  return !await isSchemaOptional(schema);
}
async function isSchemaOptional(schema) {
  switch (await schema.getType()) {
    case SchemaType.ANY:
    case SchemaType.UNKNOWN:
    case SchemaType.OPTIONAL:
      return true;
    default:
      return false;
  }
}
var init_object = __esm({
  \\"src/core/schemas/builders/object/object.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_entries();
    init_filterObject();
    init_getErrorMessageForIncorrectType();
    init_isPlainObject();
    init_keys();
    init_maybeSkipValidation();
    init_partition();
    init_object_like();
    init_schema_utils();
    init_property();
  }
});

// src/core/schemas/builders/object/index.ts
var init_object2 = __esm({
  \\"src/core/schemas/builders/object/index.ts\\"() {
    \\"use strict\\";
    init_object();
    init_property();
  }
});

// src/core/schemas/builders/lazy/lazyObject.ts
function lazyObject(getter) {
  const baseSchema = {
    ...constructLazyBaseSchema(getter),
    _getRawProperties: async () => (await getMemoizedSchema(getter))._getRawProperties(),
    _getParsedProperties: async () => (await getMemoizedSchema(getter))._getParsedProperties()
  };
  return {
    ...baseSchema,
    ...getSchemaUtils(baseSchema),
    ...getObjectLikeUtils(baseSchema),
    ...getObjectUtils(baseSchema)
  };
}
var init_lazyObject = __esm({
  \\"src/core/schemas/builders/lazy/lazyObject.ts\\"() {
    \\"use strict\\";
    init_object2();
    init_object_like();
    init_schema_utils();
    init_lazy();
  }
});

// src/core/schemas/builders/lazy/index.ts
var init_lazy2 = __esm({
  \\"src/core/schemas/builders/lazy/index.ts\\"() {
    \\"use strict\\";
    init_lazy();
    init_lazyObject();
  }
});

// src/core/schemas/builders/list/list.ts
function list(schema) {
  const baseSchema = {
    parse: async (raw, opts) => validateAndTransformArray(
      raw,
      (item, index) => schema.parse(item, {
        ...opts,
        breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], \`[\${index}]\`]
      })
    ),
    json: (parsed, opts) => validateAndTransformArray(
      parsed,
      (item, index) => schema.json(item, {
        ...opts,
        breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], \`[\${index}]\`]
      })
    ),
    getType: () => SchemaType.LIST
  };
  return {
    ...maybeSkipValidation(baseSchema),
    ...getSchemaUtils(baseSchema)
  };
}
async function validateAndTransformArray(value, transformItem) {
  if (!Array.isArray(value)) {
    return {
      ok: false,
      errors: [
        {
          message: getErrorMessageForIncorrectType(value, \\"list\\"),
          path: []
        }
      ]
    };
  }
  const maybeValidItems = await Promise.all(value.map((item, index) => transformItem(item, index)));
  return maybeValidItems.reduce(
    (acc, item) => {
      if (acc.ok && item.ok) {
        return {
          ok: true,
          value: [...acc.value, item.value]
        };
      }
      const errors = [];
      if (!acc.ok) {
        errors.push(...acc.errors);
      }
      if (!item.ok) {
        errors.push(...item.errors);
      }
      return {
        ok: false,
        errors
      };
    },
    { ok: true, value: [] }
  );
}
var init_list = __esm({
  \\"src/core/schemas/builders/list/list.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_getErrorMessageForIncorrectType();
    init_maybeSkipValidation();
    init_schema_utils();
  }
});

// src/core/schemas/builders/list/index.ts
var init_list2 = __esm({
  \\"src/core/schemas/builders/list/index.ts\\"() {
    \\"use strict\\";
    init_list();
  }
});

// src/core/schemas/builders/literals/stringLiteral.ts
function stringLiteral(literal) {
  const schemaCreator = createIdentitySchemaCreator(
    SchemaType.STRING_LITERAL,
    (value, { breadcrumbsPrefix = [] } = {}) => {
      if (value === literal) {
        return {
          ok: true,
          value: literal
        };
      } else {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(value, \`\\"\${literal}\\"\`)
            }
          ]
        };
      }
    }
  );
  return schemaCreator();
}
var init_stringLiteral = __esm({
  \\"src/core/schemas/builders/literals/stringLiteral.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    init_getErrorMessageForIncorrectType();
  }
});

// src/core/schemas/builders/literals/index.ts
var init_literals = __esm({
  \\"src/core/schemas/builders/literals/index.ts\\"() {
    \\"use strict\\";
    init_stringLiteral();
  }
});

// src/core/schemas/builders/primitives/any.ts
var any;
var init_any = __esm({
  \\"src/core/schemas/builders/primitives/any.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    any = createIdentitySchemaCreator(SchemaType.ANY, (value) => ({ ok: true, value }));
  }
});

// src/core/schemas/builders/primitives/boolean.ts
var boolean;
var init_boolean = __esm({
  \\"src/core/schemas/builders/primitives/boolean.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    init_getErrorMessageForIncorrectType();
    boolean = createIdentitySchemaCreator(
      SchemaType.BOOLEAN,
      (value, { breadcrumbsPrefix = [] } = {}) => {
        if (typeof value === \\"boolean\\") {
          return {
            ok: true,
            value
          };
        } else {
          return {
            ok: false,
            errors: [
              {
                path: breadcrumbsPrefix,
                message: getErrorMessageForIncorrectType(value, \\"boolean\\")
              }
            ]
          };
        }
      }
    );
  }
});

// src/core/schemas/builders/primitives/number.ts
var number;
var init_number = __esm({
  \\"src/core/schemas/builders/primitives/number.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    init_getErrorMessageForIncorrectType();
    number = createIdentitySchemaCreator(
      SchemaType.NUMBER,
      (value, { breadcrumbsPrefix = [] } = {}) => {
        if (typeof value === \\"number\\") {
          return {
            ok: true,
            value
          };
        } else {
          return {
            ok: false,
            errors: [
              {
                path: breadcrumbsPrefix,
                message: getErrorMessageForIncorrectType(value, \\"number\\")
              }
            ]
          };
        }
      }
    );
  }
});

// src/core/schemas/builders/primitives/string.ts
var string;
var init_string = __esm({
  \\"src/core/schemas/builders/primitives/string.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    init_getErrorMessageForIncorrectType();
    string = createIdentitySchemaCreator(
      SchemaType.STRING,
      (value, { breadcrumbsPrefix = [] } = {}) => {
        if (typeof value === \\"string\\") {
          return {
            ok: true,
            value
          };
        } else {
          return {
            ok: false,
            errors: [
              {
                path: breadcrumbsPrefix,
                message: getErrorMessageForIncorrectType(value, \\"string\\")
              }
            ]
          };
        }
      }
    );
  }
});

// src/core/schemas/builders/primitives/unknown.ts
var unknown;
var init_unknown = __esm({
  \\"src/core/schemas/builders/primitives/unknown.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    unknown = createIdentitySchemaCreator(SchemaType.UNKNOWN, (value) => ({ ok: true, value }));
  }
});

// src/core/schemas/builders/primitives/index.ts
var init_primitives = __esm({
  \\"src/core/schemas/builders/primitives/index.ts\\"() {
    \\"use strict\\";
    init_any();
    init_boolean();
    init_number();
    init_string();
    init_unknown();
  }
});

// src/core/schemas/builders/record/record.ts
function record(keySchema, valueSchema) {
  const baseSchema = {
    parse: async (raw, opts) => {
      return validateAndTransformRecord({
        value: raw,
        isKeyNumeric: await keySchema.getType() === SchemaType.NUMBER,
        transformKey: (key) => keySchema.parse(key, {
          ...opts,
          breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], \`\${key} (key)\`]
        }),
        transformValue: (value, key) => valueSchema.parse(value, {
          ...opts,
          breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], \`\${key}\`]
        }),
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    },
    json: async (parsed, opts) => {
      return validateAndTransformRecord({
        value: parsed,
        isKeyNumeric: await keySchema.getType() === SchemaType.NUMBER,
        transformKey: (key) => keySchema.json(key, {
          ...opts,
          breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], \`\${key} (key)\`]
        }),
        transformValue: (value, key) => valueSchema.json(value, {
          ...opts,
          breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], \`\${key}\`]
        }),
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    },
    getType: () => SchemaType.RECORD
  };
  return {
    ...maybeSkipValidation(baseSchema),
    ...getSchemaUtils(baseSchema)
  };
}
async function validateAndTransformRecord({
  value,
  isKeyNumeric,
  transformKey,
  transformValue,
  breadcrumbsPrefix = []
}) {
  if (!isPlainObject2(value)) {
    return {
      ok: false,
      errors: [
        {
          path: breadcrumbsPrefix,
          message: getErrorMessageForIncorrectType(value, \\"object\\")
        }
      ]
    };
  }
  return entries(value).reduce(
    async (accPromise, [stringKey, value2]) => {
      if (value2 == null) {
        return accPromise;
      }
      const acc = await accPromise;
      let key = stringKey;
      if (isKeyNumeric) {
        const numberKey = stringKey.length > 0 ? Number(stringKey) : NaN;
        if (!isNaN(numberKey)) {
          key = numberKey;
        }
      }
      const transformedKey = await transformKey(key);
      const transformedValue = await transformValue(value2, key);
      if (acc.ok && transformedKey.ok && transformedValue.ok) {
        return {
          ok: true,
          value: {
            ...acc.value,
            [transformedKey.value]: transformedValue.value
          }
        };
      }
      const errors = [];
      if (!acc.ok) {
        errors.push(...acc.errors);
      }
      if (!transformedKey.ok) {
        errors.push(...transformedKey.errors);
      }
      if (!transformedValue.ok) {
        errors.push(...transformedValue.errors);
      }
      return {
        ok: false,
        errors
      };
    },
    Promise.resolve({ ok: true, value: {} })
  );
}
var init_record = __esm({
  \\"src/core/schemas/builders/record/record.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_entries();
    init_getErrorMessageForIncorrectType();
    init_isPlainObject();
    init_maybeSkipValidation();
    init_schema_utils();
  }
});

// src/core/schemas/builders/record/index.ts
var init_record2 = __esm({
  \\"src/core/schemas/builders/record/index.ts\\"() {
    \\"use strict\\";
    init_record();
  }
});

// src/core/schemas/builders/set/set.ts
function set(schema) {
  const listSchema = list(schema);
  const baseSchema = {
    parse: async (raw, opts) => {
      const parsedList = await listSchema.parse(raw, opts);
      if (parsedList.ok) {
        return {
          ok: true,
          value: new Set(parsedList.value)
        };
      } else {
        return parsedList;
      }
    },
    json: async (parsed, opts) => {
      if (!(parsed instanceof Set)) {
        return {
          ok: false,
          errors: [
            {
              path: (opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [],
              message: getErrorMessageForIncorrectType(parsed, \\"Set\\")
            }
          ]
        };
      }
      const jsonList = await listSchema.json([...parsed], opts);
      return jsonList;
    },
    getType: () => SchemaType.SET
  };
  return {
    ...maybeSkipValidation(baseSchema),
    ...getSchemaUtils(baseSchema)
  };
}
var init_set = __esm({
  \\"src/core/schemas/builders/set/set.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_getErrorMessageForIncorrectType();
    init_maybeSkipValidation();
    init_list2();
    init_schema_utils();
  }
});

// src/core/schemas/builders/set/index.ts
var init_set2 = __esm({
  \\"src/core/schemas/builders/set/index.ts\\"() {
    \\"use strict\\";
    init_set();
  }
});

// src/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
function undiscriminatedUnion(schemas) {
  const baseSchema = {
    parse: async (raw, opts) => {
      return validateAndTransformUndiscriminatedUnion(
        (schema) => schema.parse(raw, opts),
        schemas
      );
    },
    json: async (parsed, opts) => {
      return validateAndTransformUndiscriminatedUnion(
        (schema) => schema.json(parsed, opts),
        schemas
      );
    },
    getType: () => SchemaType.UNDISCRIMINATED_UNION
  };
  return {
    ...maybeSkipValidation(baseSchema),
    ...getSchemaUtils(baseSchema)
  };
}
async function validateAndTransformUndiscriminatedUnion(transform2, schemas) {
  const errors = [];
  for (const [index, schema] of schemas.entries()) {
    const transformed = await transform2(schema);
    if (transformed.ok) {
      return transformed;
    } else {
      for (const error of errors) {
        errors.push({
          path: error.path,
          message: \`[Variant \${index}] \${error.message}\`
        });
      }
    }
  }
  return {
    ok: false,
    errors
  };
}
var init_undiscriminatedUnion = __esm({
  \\"src/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_maybeSkipValidation();
    init_schema_utils();
  }
});

// src/core/schemas/builders/undiscriminated-union/index.ts
var init_undiscriminated_union = __esm({
  \\"src/core/schemas/builders/undiscriminated-union/index.ts\\"() {
    \\"use strict\\";
    init_undiscriminatedUnion();
  }
});

// src/core/schemas/builders/union/discriminant.ts
function discriminant(parsedDiscriminant, rawDiscriminant) {
  return {
    parsedDiscriminant,
    rawDiscriminant
  };
}
var init_discriminant = __esm({
  \\"src/core/schemas/builders/union/discriminant.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/builders/union/union.ts
function union(discriminant2, union2) {
  const rawDiscriminant = typeof discriminant2 === \\"string\\" ? discriminant2 : discriminant2.rawDiscriminant;
  const parsedDiscriminant = typeof discriminant2 === \\"string\\" ? discriminant2 : discriminant2.parsedDiscriminant;
  const discriminantValueSchema = enum_(keys(union2));
  const baseSchema = {
    parse: async (raw, opts) => {
      return transformAndValidateUnion({
        value: raw,
        discriminant: rawDiscriminant,
        transformedDiscriminant: parsedDiscriminant,
        transformDiscriminantValue: (discriminantValue) => discriminantValueSchema.parse(discriminantValue, {
          allowUnrecognizedEnumValues: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
          breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], rawDiscriminant]
        }),
        getAdditionalPropertiesSchema: (discriminantValue) => union2[discriminantValue],
        allowUnrecognizedUnionMembers: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
        transformAdditionalProperties: (additionalProperties, additionalPropertiesSchema) => additionalPropertiesSchema.parse(additionalProperties, opts),
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    },
    json: async (parsed, opts) => {
      return transformAndValidateUnion({
        value: parsed,
        discriminant: parsedDiscriminant,
        transformedDiscriminant: rawDiscriminant,
        transformDiscriminantValue: (discriminantValue) => discriminantValueSchema.json(discriminantValue, {
          allowUnrecognizedEnumValues: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
          breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], parsedDiscriminant]
        }),
        getAdditionalPropertiesSchema: (discriminantValue) => union2[discriminantValue],
        allowUnrecognizedUnionMembers: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
        transformAdditionalProperties: (additionalProperties, additionalPropertiesSchema) => additionalPropertiesSchema.json(additionalProperties, opts),
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    },
    getType: () => SchemaType.UNION
  };
  return {
    ...maybeSkipValidation(baseSchema),
    ...getSchemaUtils(baseSchema),
    ...getObjectLikeUtils(baseSchema)
  };
}
async function transformAndValidateUnion({
  value,
  discriminant: discriminant2,
  transformedDiscriminant,
  transformDiscriminantValue,
  getAdditionalPropertiesSchema,
  allowUnrecognizedUnionMembers = false,
  transformAdditionalProperties,
  breadcrumbsPrefix = []
}) {
  if (!isPlainObject2(value)) {
    return {
      ok: false,
      errors: [
        {
          path: breadcrumbsPrefix,
          message: getErrorMessageForIncorrectType(value, \\"object\\")
        }
      ]
    };
  }
  const { [discriminant2]: discriminantValue, ...additionalProperties } = value;
  if (discriminantValue == null) {
    return {
      ok: false,
      errors: [
        {
          path: breadcrumbsPrefix,
          message: \`Missing discriminant (\\"\${discriminant2}\\")\`
        }
      ]
    };
  }
  const transformedDiscriminantValue = await transformDiscriminantValue(discriminantValue);
  if (!transformedDiscriminantValue.ok) {
    return {
      ok: false,
      errors: transformedDiscriminantValue.errors
    };
  }
  const additionalPropertiesSchema = getAdditionalPropertiesSchema(transformedDiscriminantValue.value);
  if (additionalPropertiesSchema == null) {
    if (allowUnrecognizedUnionMembers) {
      return {
        ok: true,
        value: {
          [transformedDiscriminant]: transformedDiscriminantValue.value,
          ...additionalProperties
        }
      };
    } else {
      return {
        ok: false,
        errors: [
          {
            path: [...breadcrumbsPrefix, discriminant2],
            message: \\"Unexpected discriminant value\\"
          }
        ]
      };
    }
  }
  const transformedAdditionalProperties = await transformAdditionalProperties(
    additionalProperties,
    additionalPropertiesSchema
  );
  if (!transformedAdditionalProperties.ok) {
    return transformedAdditionalProperties;
  }
  return {
    ok: true,
    value: {
      [transformedDiscriminant]: discriminantValue,
      ...transformedAdditionalProperties.value
    }
  };
}
var init_union = __esm({
  \\"src/core/schemas/builders/union/union.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_getErrorMessageForIncorrectType();
    init_isPlainObject();
    init_keys();
    init_maybeSkipValidation();
    init_enum2();
    init_object_like();
    init_schema_utils();
  }
});

// src/core/schemas/builders/union/index.ts
var init_union2 = __esm({
  \\"src/core/schemas/builders/union/index.ts\\"() {
    \\"use strict\\";
    init_discriminant();
    init_union();
  }
});

// src/core/schemas/builders/index.ts
var init_builders = __esm({
  \\"src/core/schemas/builders/index.ts\\"() {
    \\"use strict\\";
    init_date2();
    init_enum2();
    init_lazy2();
    init_list2();
    init_literals();
    init_object2();
    init_object_like();
    init_primitives();
    init_record2();
    init_schema_utils();
    init_set2();
    init_undiscriminated_union();
    init_union2();
  }
});

// src/core/schemas/index.ts
var schemas_exports = {};
__export(schemas_exports, {
  JsonError: () => JsonError,
  ParseError: () => ParseError,
  any: () => any,
  boolean: () => boolean,
  date: () => date,
  discriminant: () => discriminant,
  enum_: () => enum_,
  getObjectLikeUtils: () => getObjectLikeUtils,
  getObjectUtils: () => getObjectUtils,
  getSchemaUtils: () => getSchemaUtils,
  isProperty: () => isProperty,
  lazy: () => lazy,
  lazyObject: () => lazyObject,
  list: () => list,
  number: () => number,
  object: () => object,
  optional: () => optional,
  property: () => property,
  record: () => record,
  set: () => set,
  string: () => string,
  stringLiteral: () => stringLiteral,
  transform: () => transform,
  undiscriminatedUnion: () => undiscriminatedUnion,
  union: () => union,
  unknown: () => unknown,
  withParsedProperties: () => withParsedProperties
});
var init_schemas = __esm({
  \\"src/core/schemas/index.ts\\"() {
    \\"use strict\\";
    init_builders();
  }
});

// src/core/index.ts
var init_core = __esm({
  \\"src/core/index.ts\\"() {
    \\"use strict\\";
    init_fetcher();
    init_auth();
    init_schemas();
  }
});

// .yarn/cache/url-join-npm-4.0.1-e1f4415722-f74e868bf2.zip/node_modules/url-join/lib/url-join.js
var require_url_join = __commonJS({
  \\".yarn/cache/url-join-npm-4.0.1-e1f4415722-f74e868bf2.zip/node_modules/url-join/lib/url-join.js\\"(exports, module2) {
    (function(name, context, definition) {
      if (typeof module2 !== \\"undefined\\" && module2.exports)
        module2.exports = definition();
      else if (typeof define === \\"function\\" && define.amd)
        define(definition);
      else
        context[name] = definition();
    })(\\"urljoin\\", exports, function() {
      function normalize(strArray) {
        var resultArray = [];
        if (strArray.length === 0) {
          return \\"\\";
        }
        if (typeof strArray[0] !== \\"string\\") {
          throw new TypeError(\\"Url must be a string. Received \\" + strArray[0]);
        }
        if (strArray[0].match(/^[^/:]+:\\\\/*$/) && strArray.length > 1) {
          var first = strArray.shift();
          strArray[0] = first + strArray[0];
        }
        if (strArray[0].match(/^file:\\\\/\\\\/\\\\//)) {
          strArray[0] = strArray[0].replace(/^([^/:]+):\\\\/*/, \\"$1:///\\");
        } else {
          strArray[0] = strArray[0].replace(/^([^/:]+):\\\\/*/, \\"$1://\\");
        }
        for (var i = 0; i < strArray.length; i++) {
          var component = strArray[i];
          if (typeof component !== \\"string\\") {
            throw new TypeError(\\"Url must be a string. Received \\" + component);
          }
          if (component === \\"\\") {
            continue;
          }
          if (i > 0) {
            component = component.replace(/^[\\\\/]+/, \\"\\");
          }
          if (i < strArray.length - 1) {
            component = component.replace(/[\\\\/]+$/, \\"\\");
          } else {
            component = component.replace(/[\\\\/]+$/, \\"/\\");
          }
          resultArray.push(component);
        }
        var str = resultArray.join(\\"/\\");
        str = str.replace(/\\\\/(\\\\?|&|#[^!])/g, \\"$1\\");
        var parts = str.split(\\"?\\");
        str = parts.shift() + (parts.length > 0 ? \\"?\\" : \\"\\") + parts.join(\\"&\\");
        return str;
      }
      return function() {
        var input;
        if (typeof arguments[0] === \\"object\\") {
          input = arguments[0];
        } else {
          input = [].slice.call(arguments);
        }
        return normalize(input);
      };
    });
  }
});

// src/serialization/resources/remoteGen/types/RemoteGenJobId.ts
var RemoteGenJobId2;
var init_RemoteGenJobId2 = __esm({
  \\"src/serialization/resources/remoteGen/types/RemoteGenJobId.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    RemoteGenJobId2 = schemas_exports.string().transform({
      transform: RemoteGenJobId,
      untransform: (value) => value
    });
  }
});

// src/serialization/resources/remoteGen/types/RemoteGenTaskId.ts
var RemoteGenTaskId2;
var init_RemoteGenTaskId2 = __esm({
  \\"src/serialization/resources/remoteGen/types/RemoteGenTaskId.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    RemoteGenTaskId2 = schemas_exports.string().transform({
      transform: RemoteGenTaskId,
      untransform: (value) => value
    });
  }
});

// src/serialization/resources/remoteGen/types/GeneratorIdAndVersion.ts
var GeneratorIdAndVersion;
var init_GeneratorIdAndVersion2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GeneratorIdAndVersion.ts\\"() {
    \\"use strict\\";
    init_core();
    GeneratorIdAndVersion = schemas_exports.object({
      id: schemas_exports.string(),
      version: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/GeneratorConfig.ts
var GeneratorConfig;
var init_GeneratorConfig2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GeneratorConfig.ts\\"() {
    \\"use strict\\";
    init_core();
    GeneratorConfig = schemas_exports.object({
      id: schemas_exports.string(),
      version: schemas_exports.string(),
      customConfig: schemas_exports.unknown(),
      willDownloadFiles: schemas_exports.boolean(),
      outputs: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorOutputs)
    });
  }
});

// src/serialization/resources/remoteGen/types/GeneratorConfigV2.ts
var GeneratorConfigV2;
var init_GeneratorConfigV22 = __esm({
  \\"src/serialization/resources/remoteGen/types/GeneratorConfigV2.ts\\"() {
    \\"use strict\\";
    init_core();
    GeneratorConfigV2 = schemas_exports.object({
      id: schemas_exports.string(),
      version: schemas_exports.string(),
      customConfig: schemas_exports.unknown(),
      outputMode: schemas_exports.lazy(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).OutputMode)
    });
  }
});

// src/serialization/resources/remoteGen/types/OutputMode.ts
var OutputMode2;
var init_OutputMode2 = __esm({
  \\"src/serialization/resources/remoteGen/types/OutputMode.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    OutputMode2 = schemas_exports.union(\\"type\\", {
      publish: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).PublishOutputMode),
      publishV2: schemas_exports.object({
        publishV2: schemas_exports.lazy(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).PublishOutputModeV2)
      }),
      downloadFiles: schemas_exports.object({}),
      github: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).GithubOutputMode)
    }).transform({
      transform: (value) => {
        switch (value.type) {
          case \\"publish\\":
            return OutputMode.publish(value);
          case \\"publishV2\\":
            return OutputMode.publishV2(value.publishV2);
          case \\"downloadFiles\\":
            return OutputMode.downloadFiles();
          case \\"github\\":
            return OutputMode.github(value);
          default:
            return OutputMode._unknown(value);
        }
      },
      untransform: ({ _visit, ...value }) => value
    });
  }
});

// src/serialization/resources/remoteGen/types/PublishOutputMode.ts
var PublishOutputMode;
var init_PublishOutputMode2 = __esm({
  \\"src/serialization/resources/remoteGen/types/PublishOutputMode.ts\\"() {
    \\"use strict\\";
    init_core();
    PublishOutputMode = schemas_exports.object({
      registryOverrides: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).RegistryOverrides)
    });
  }
});

// src/serialization/resources/remoteGen/types/PublishOutputModeV2.ts
var PublishOutputModeV22;
var init_PublishOutputModeV22 = __esm({
  \\"src/serialization/resources/remoteGen/types/PublishOutputModeV2.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    PublishOutputModeV22 = schemas_exports.union(\\"type\\", {
      npmOverride: schemas_exports.object({
        npmOverride: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).NpmOutput).optional()
      }),
      mavenOverride: schemas_exports.object({
        mavenOverride: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).MavenOutput).optional()
      }),
      postman: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).PostmanOutput)
    }).transform({
      transform: (value) => {
        switch (value.type) {
          case \\"npmOverride\\":
            return PublishOutputModeV2.npmOverride(value.npmOverride);
          case \\"mavenOverride\\":
            return PublishOutputModeV2.mavenOverride(value.mavenOverride);
          case \\"postman\\":
            return PublishOutputModeV2.postman(value);
          default:
            return PublishOutputModeV2._unknown(value);
        }
      },
      untransform: ({ _visit, ...value }) => value
    });
  }
});

// src/serialization/resources/remoteGen/types/RegistryOverrides.ts
var RegistryOverrides;
var init_RegistryOverrides2 = __esm({
  \\"src/serialization/resources/remoteGen/types/RegistryOverrides.ts\\"() {
    \\"use strict\\";
    init_core();
    RegistryOverrides = schemas_exports.object({
      npm: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).NpmOutput).optional(),
      maven: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).MavenOutput).optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/GeneratorOutputs.ts
var GeneratorOutputs;
var init_GeneratorOutputs2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GeneratorOutputs.ts\\"() {
    \\"use strict\\";
    init_core();
    GeneratorOutputs = schemas_exports.object({
      npm: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).NpmOutput).optional(),
      maven: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).MavenOutput).optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/NpmOutput.ts
var NpmOutput;
var init_NpmOutput2 = __esm({
  \\"src/serialization/resources/remoteGen/types/NpmOutput.ts\\"() {
    \\"use strict\\";
    init_core();
    NpmOutput = schemas_exports.object({
      registryUrl: schemas_exports.string(),
      packageName: schemas_exports.string(),
      token: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/MavenOutput.ts
var MavenOutput;
var init_MavenOutput2 = __esm({
  \\"src/serialization/resources/remoteGen/types/MavenOutput.ts\\"() {
    \\"use strict\\";
    init_core();
    MavenOutput = schemas_exports.object({
      registryUrl: schemas_exports.string(),
      username: schemas_exports.string(),
      password: schemas_exports.string(),
      coordinate: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/PostmanOutput.ts
var PostmanOutput;
var init_PostmanOutput2 = __esm({
  \\"src/serialization/resources/remoteGen/types/PostmanOutput.ts\\"() {
    \\"use strict\\";
    init_core();
    PostmanOutput = schemas_exports.object({
      apiKey: schemas_exports.string(),
      workspaceId: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/GithubOutputMode.ts
var GithubOutputMode;
var init_GithubOutputMode2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GithubOutputMode.ts\\"() {
    \\"use strict\\";
    init_core();
    GithubOutputMode = schemas_exports.object({
      owner: schemas_exports.string(),
      repo: schemas_exports.string(),
      publishInfo: schemas_exports.lazy(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).GithubPublishInfo).optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/GithubPublishInfo.ts
var GithubPublishInfo2;
var init_GithubPublishInfo2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GithubPublishInfo.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    GithubPublishInfo2 = schemas_exports.union(\\"type\\", {
      npm: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).NpmOutputWithOptionalToken),
      maven: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).MavenOutputWithOptionalCreds),
      postman: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).PostmanOutput)
    }).transform({
      transform: (value) => {
        switch (value.type) {
          case \\"npm\\":
            return GithubPublishInfo.npm(value);
          case \\"maven\\":
            return GithubPublishInfo.maven(value);
          case \\"postman\\":
            return GithubPublishInfo.postman(value);
          default:
            return GithubPublishInfo._unknown(value);
        }
      },
      untransform: ({ _visit, ...value }) => value
    });
  }
});

// src/serialization/resources/remoteGen/types/NpmOutputWithOptionalToken.ts
var NpmOutputWithOptionalToken;
var init_NpmOutputWithOptionalToken2 = __esm({
  \\"src/serialization/resources/remoteGen/types/NpmOutputWithOptionalToken.ts\\"() {
    \\"use strict\\";
    init_core();
    NpmOutputWithOptionalToken = schemas_exports.object({
      registryUrl: schemas_exports.string(),
      packageName: schemas_exports.string(),
      token: schemas_exports.string().optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/MavenOutputWithOptionalCreds.ts
var MavenOutputWithOptionalCreds;
var init_MavenOutputWithOptionalCreds2 = __esm({
  \\"src/serialization/resources/remoteGen/types/MavenOutputWithOptionalCreds.ts\\"() {
    \\"use strict\\";
    init_core();
    MavenOutputWithOptionalCreds = schemas_exports.object({
      registryUrl: schemas_exports.string(),
      coordinate: schemas_exports.string(),
      credentials: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).UsernamePassword).optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/UsernamePassword.ts
var UsernamePassword;
var init_UsernamePassword2 = __esm({
  \\"src/serialization/resources/remoteGen/types/UsernamePassword.ts\\"() {
    \\"use strict\\";
    init_core();
    UsernamePassword = schemas_exports.object({
      username: schemas_exports.string(),
      password: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/Task.ts
var Task;
var init_Task2 = __esm({
  \\"src/serialization/resources/remoteGen/types/Task.ts\\"() {
    \\"use strict\\";
    init_core();
    Task = schemas_exports.object({
      status: schemas_exports.lazy(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).TaskStatus),
      packages: schemas_exports.list(schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).Package)),
      logs: schemas_exports.list(schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).TaskLog))
    });
  }
});

// src/serialization/resources/remoteGen/types/TaskStatus.ts
var TaskStatus2;
var init_TaskStatus2 = __esm({
  \\"src/serialization/resources/remoteGen/types/TaskStatus.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    TaskStatus2 = schemas_exports.union(schemas_exports.discriminant(\\"type\\", \\"_type\\"), {
      notStarted: schemas_exports.object({}),
      running: schemas_exports.object({}),
      failed: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).FailedTaskStatus),
      finished: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).FinishedTaskStatus)
    }).transform({
      transform: (value) => {
        switch (value.type) {
          case \\"notStarted\\":
            return TaskStatus.notStarted();
          case \\"running\\":
            return TaskStatus.running();
          case \\"failed\\":
            return TaskStatus.failed(value);
          case \\"finished\\":
            return TaskStatus.finished(value);
          default:
            return TaskStatus._unknown(value);
        }
      },
      untransform: ({ _visit, ...value }) => value
    });
  }
});

// src/serialization/resources/remoteGen/types/FailedTaskStatus.ts
var FailedTaskStatus;
var init_FailedTaskStatus2 = __esm({
  \\"src/serialization/resources/remoteGen/types/FailedTaskStatus.ts\\"() {
    \\"use strict\\";
    init_core();
    FailedTaskStatus = schemas_exports.object({
      message: schemas_exports.string(),
      s3PreSignedReadUrl: schemas_exports.string().optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/FinishedTaskStatus.ts
var FinishedTaskStatus;
var init_FinishedTaskStatus2 = __esm({
  \\"src/serialization/resources/remoteGen/types/FinishedTaskStatus.ts\\"() {
    \\"use strict\\";
    init_core();
    FinishedTaskStatus = schemas_exports.object({
      hasFilesToDownload: schemas_exports.boolean(),
      s3PreSignedReadUrl: schemas_exports.string(),
      s3PreSignedReadUrlV2: schemas_exports.string().optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/TaskLog.ts
var TaskLog;
var init_TaskLog2 = __esm({
  \\"src/serialization/resources/remoteGen/types/TaskLog.ts\\"() {
    \\"use strict\\";
    init_core();
    TaskLog = schemas_exports.object({
      level: schemas_exports.lazy(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).LogLevel),
      message: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/LogLevel.ts
var LogLevel2;
var init_LogLevel2 = __esm({
  \\"src/serialization/resources/remoteGen/types/LogLevel.ts\\"() {
    \\"use strict\\";
    init_core();
    LogLevel2 = schemas_exports.enum_([
      \\"DEBUG\\",
      \\"INFO\\",
      \\"WARN\\",
      \\"ERROR\\"
    ]);
  }
});

// src/serialization/resources/remoteGen/types/Package.ts
var Package;
var init_Package2 = __esm({
  \\"src/serialization/resources/remoteGen/types/Package.ts\\"() {
    \\"use strict\\";
    init_core();
    Package = schemas_exports.object({
      coordinate: schemas_exports.lazy(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).PackageCoordinate),
      status: schemas_exports.lazy(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).PackagePublishStatus)
    });
  }
});

// src/serialization/resources/remoteGen/types/PackagePublishStatus.ts
var PackagePublishStatus2;
var init_PackagePublishStatus2 = __esm({
  \\"src/serialization/resources/remoteGen/types/PackagePublishStatus.ts\\"() {
    \\"use strict\\";
    init_core();
    PackagePublishStatus2 = schemas_exports.enum_([\\"NOT_STARTED_PUBLISHING\\", \\"PUBLISHING\\", \\"PUBLISHED\\", \\"FAILED_TO_PUBLISH\\"]);
  }
});

// src/serialization/resources/remoteGen/types/PackageCoordinate.ts
var PackageCoordinate2;
var init_PackageCoordinate2 = __esm({
  \\"src/serialization/resources/remoteGen/types/PackageCoordinate.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    PackageCoordinate2 = schemas_exports.union(schemas_exports.discriminant(\\"type\\", \\"_type\\"), {
      npm: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).NpmCoordinate),
      maven: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).MavenCoordinate),
      pypi: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).PypiCoordinate)
    }).transform({
      transform: (value) => {
        switch (value.type) {
          case \\"npm\\":
            return PackageCoordinate.npm(value);
          case \\"maven\\":
            return PackageCoordinate.maven(value);
          case \\"pypi\\":
            return PackageCoordinate.pypi(value);
          default:
            return PackageCoordinate._unknown(value);
        }
      },
      untransform: ({ _visit, ...value }) => value
    });
  }
});

// src/serialization/resources/remoteGen/types/NpmCoordinate.ts
var NpmCoordinate;
var init_NpmCoordinate2 = __esm({
  \\"src/serialization/resources/remoteGen/types/NpmCoordinate.ts\\"() {
    \\"use strict\\";
    init_core();
    NpmCoordinate = schemas_exports.object({
      name: schemas_exports.string(),
      version: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/MavenCoordinate.ts
var MavenCoordinate;
var init_MavenCoordinate2 = __esm({
  \\"src/serialization/resources/remoteGen/types/MavenCoordinate.ts\\"() {
    \\"use strict\\";
    init_core();
    MavenCoordinate = schemas_exports.object({
      group: schemas_exports.string(),
      artifact: schemas_exports.string(),
      version: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/PypiCoordinate.ts
var PypiCoordinate;
var init_PypiCoordinate2 = __esm({
  \\"src/serialization/resources/remoteGen/types/PypiCoordinate.ts\\"() {
    \\"use strict\\";
    init_core();
    PypiCoordinate = schemas_exports.object({
      name: schemas_exports.string(),
      version: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/CreateJobResponse.ts
var CreateJobResponse;
var init_CreateJobResponse2 = __esm({
  \\"src/serialization/resources/remoteGen/types/CreateJobResponse.ts\\"() {
    \\"use strict\\";
    init_core();
    CreateJobResponse = schemas_exports.object({
      jobId: schemas_exports.lazy(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).RemoteGenJobId),
      taskIds: schemas_exports.list(schemas_exports.lazy(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).RemoteGenTaskId))
    });
  }
});

// src/serialization/resources/remoteGen/types/GeneratorsDoNotExistErrorBodyType.ts
var GeneratorsDoNotExistErrorBodyType;
var init_GeneratorsDoNotExistErrorBodyType2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GeneratorsDoNotExistErrorBodyType.ts\\"() {
    \\"use strict\\";
    init_core();
    GeneratorsDoNotExistErrorBodyType = schemas_exports.object({
      nonExistentGenerators: schemas_exports.list(
        schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorIdAndVersion)
      )
    });
  }
});

// src/serialization/resources/remoteGen/types/CannotPublishToNpmScopeDetails.ts
var CannotPublishToNpmScopeDetails;
var init_CannotPublishToNpmScopeDetails2 = __esm({
  \\"src/serialization/resources/remoteGen/types/CannotPublishToNpmScopeDetails.ts\\"() {
    \\"use strict\\";
    init_core();
    CannotPublishToNpmScopeDetails = schemas_exports.object({
      generatorId: schemas_exports.string(),
      invalidScope: schemas_exports.string(),
      validScope: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/CannotPublishToMavenGroupDetails.ts
var CannotPublishToMavenGroupDetails;
var init_CannotPublishToMavenGroupDetails2 = __esm({
  \\"src/serialization/resources/remoteGen/types/CannotPublishToMavenGroupDetails.ts\\"() {
    \\"use strict\\";
    init_core();
    CannotPublishToMavenGroupDetails = schemas_exports.object({
      generatorId: schemas_exports.string(),
      invalidGroup: schemas_exports.string(),
      validGroup: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/InsufficientPermissionsDetails.ts
var InsufficientPermissionsDetails;
var init_InsufficientPermissionsDetails2 = __esm({
  \\"src/serialization/resources/remoteGen/types/InsufficientPermissionsDetails.ts\\"() {
    \\"use strict\\";
    init_core();
    InsufficientPermissionsDetails = schemas_exports.object({
      dummy: schemas_exports.string().optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/index.ts
var init_types2 = __esm({
  \\"src/serialization/resources/remoteGen/types/index.ts\\"() {
    \\"use strict\\";
    init_RemoteGenJobId2();
    init_RemoteGenTaskId2();
    init_GeneratorIdAndVersion2();
    init_GeneratorConfig2();
    init_GeneratorConfigV22();
    init_OutputMode2();
    init_PublishOutputMode2();
    init_PublishOutputModeV22();
    init_RegistryOverrides2();
    init_GeneratorOutputs2();
    init_NpmOutput2();
    init_MavenOutput2();
    init_PostmanOutput2();
    init_GithubOutputMode2();
    init_GithubPublishInfo2();
    init_NpmOutputWithOptionalToken2();
    init_MavenOutputWithOptionalCreds2();
    init_UsernamePassword2();
    init_Task2();
    init_TaskStatus2();
    init_FailedTaskStatus2();
    init_FinishedTaskStatus2();
    init_TaskLog2();
    init_LogLevel2();
    init_Package2();
    init_PackagePublishStatus2();
    init_PackageCoordinate2();
    init_NpmCoordinate2();
    init_MavenCoordinate2();
    init_PypiCoordinate2();
    init_CreateJobResponse2();
    init_GeneratorsDoNotExistErrorBodyType2();
    init_CannotPublishToNpmScopeDetails2();
    init_CannotPublishToMavenGroupDetails2();
    init_InsufficientPermissionsDetails2();
  }
});

// src/serialization/resources/remoteGen/client/createJob.ts
var createJob_exports2 = {};
__export(createJob_exports2, {
  Error: () => Error7
});
var Error7;
var init_createJob2 = __esm({
  \\"src/serialization/resources/remoteGen/client/createJob.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    Error7 = schemas_exports.union(\\"error\\", {
      IllegalApiNameError: schemas_exports.object({}),
      GeneratorsDoNotExistError: schemas_exports.object({
        content: schemas_exports.lazyObject(
          async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorsDoNotExistErrorBodyType
        )
      }),
      CannotPublishToNpmScope: schemas_exports.object({
        content: schemas_exports.lazyObject(
          async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).CannotPublishToNpmScopeDetails
        )
      }),
      CannotPublishToMavenGroup: schemas_exports.object({
        content: schemas_exports.lazyObject(
          async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).CannotPublishToMavenGroupDetails
        )
      }),
      InsufficientPermissions: schemas_exports.object({
        content: schemas_exports.lazyObject(
          async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).InsufficientPermissionsDetails
        )
      })
    }).transform({
      transform: (value) => {
        switch (value.error) {
          case \\"IllegalApiNameError\\":
            return remoteGen_exports.createJob.Error.illegalApiNameError();
          case \\"GeneratorsDoNotExistError\\":
            return remoteGen_exports.createJob.Error.generatorsDoNotExistError(value.content);
          case \\"CannotPublishToNpmScope\\":
            return remoteGen_exports.createJob.Error.cannotPublishToNpmScope(value.content);
          case \\"CannotPublishToMavenGroup\\":
            return remoteGen_exports.createJob.Error.cannotPublishToMavenGroup(value.content);
          case \\"InsufficientPermissions\\":
            return remoteGen_exports.createJob.Error.insufficientPermissions(value.content);
        }
      },
      untransform: ({ _visit, ...value }) => value
    });
  }
});

// src/serialization/resources/remoteGen/client/createJobV2.ts
var createJobV2_exports2 = {};
__export(createJobV2_exports2, {
  Error: () => Error8
});
var Error8;
var init_createJobV22 = __esm({
  \\"src/serialization/resources/remoteGen/client/createJobV2.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    Error8 = schemas_exports.union(\\"error\\", {
      IllegalApiNameError: schemas_exports.object({}),
      GeneratorsDoNotExistError: schemas_exports.object({
        content: schemas_exports.lazyObject(
          async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorsDoNotExistErrorBodyType
        )
      }),
      CannotPublishToNpmScope: schemas_exports.object({
        content: schemas_exports.lazyObject(
          async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).CannotPublishToNpmScopeDetails
        )
      }),
      CannotPublishToMavenGroup: schemas_exports.object({
        content: schemas_exports.lazyObject(
          async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).CannotPublishToMavenGroupDetails
        )
      }),
      InsufficientPermissions: schemas_exports.object({
        content: schemas_exports.lazyObject(
          async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).InsufficientPermissionsDetails
        )
      })
    }).transform({
      transform: (value) => {
        switch (value.error) {
          case \\"IllegalApiNameError\\":
            return remoteGen_exports.createJobV2.Error.illegalApiNameError();
          case \\"GeneratorsDoNotExistError\\":
            return remoteGen_exports.createJobV2.Error.generatorsDoNotExistError(value.content);
          case \\"CannotPublishToNpmScope\\":
            return remoteGen_exports.createJobV2.Error.cannotPublishToNpmScope(value.content);
          case \\"CannotPublishToMavenGroup\\":
            return remoteGen_exports.createJobV2.Error.cannotPublishToMavenGroup(value.content);
          case \\"InsufficientPermissions\\":
            return remoteGen_exports.createJobV2.Error.insufficientPermissions(value.content);
        }
      },
      untransform: ({ _visit, ...value }) => value
    });
  }
});

// src/serialization/resources/remoteGen/client/getJobStatus.ts
var getJobStatus_exports2 = {};
__export(getJobStatus_exports2, {
  Response: () => Response
});
var Response;
var init_getJobStatus2 = __esm({
  \\"src/serialization/resources/remoteGen/client/getJobStatus.ts\\"() {
    \\"use strict\\";
    init_core();
    Response = schemas_exports.record(
      schemas_exports.lazy(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).RemoteGenTaskId),
      schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).Task)
    );
  }
});

// src/serialization/resources/remoteGen/client/requests/CreateJobRequest.ts
var CreateJobRequest;
var init_CreateJobRequest = __esm({
  \\"src/serialization/resources/remoteGen/client/requests/CreateJobRequest.ts\\"() {
    \\"use strict\\";
    init_core();
    CreateJobRequest = schemas_exports.object({
      apiName: schemas_exports.string(),
      organizationName: schemas_exports.string(),
      version: schemas_exports.string().optional(),
      generators: schemas_exports.list(
        schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorConfig)
      )
    });
  }
});

// src/serialization/resources/remoteGen/client/requests/CreateJobRequestV2.ts
var CreateJobRequestV2;
var init_CreateJobRequestV2 = __esm({
  \\"src/serialization/resources/remoteGen/client/requests/CreateJobRequestV2.ts\\"() {
    \\"use strict\\";
    init_core();
    CreateJobRequestV2 = schemas_exports.object({
      apiName: schemas_exports.string(),
      organizationName: schemas_exports.string(),
      version: schemas_exports.string().optional(),
      generators: schemas_exports.list(
        schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorConfigV2)
      ),
      uploadToS3: schemas_exports.boolean().optional()
    });
  }
});

// src/serialization/resources/remoteGen/client/requests/index.ts
var init_requests2 = __esm({
  \\"src/serialization/resources/remoteGen/client/requests/index.ts\\"() {
    \\"use strict\\";
    init_CreateJobRequest();
    init_CreateJobRequestV2();
  }
});

// src/serialization/resources/remoteGen/client/index.ts
var init_client4 = __esm({
  \\"src/serialization/resources/remoteGen/client/index.ts\\"() {
    \\"use strict\\";
    init_createJob2();
    init_createJobV22();
    init_getJobStatus2();
    init_requests2();
  }
});

// src/serialization/resources/remoteGen/index.ts
var remoteGen_exports2 = {};
__export(remoteGen_exports2, {
  CannotPublishToMavenGroupDetails: () => CannotPublishToMavenGroupDetails,
  CannotPublishToNpmScopeDetails: () => CannotPublishToNpmScopeDetails,
  CreateJobRequest: () => CreateJobRequest,
  CreateJobRequestV2: () => CreateJobRequestV2,
  CreateJobResponse: () => CreateJobResponse,
  FailedTaskStatus: () => FailedTaskStatus,
  FinishedTaskStatus: () => FinishedTaskStatus,
  GeneratorConfig: () => GeneratorConfig,
  GeneratorConfigV2: () => GeneratorConfigV2,
  GeneratorIdAndVersion: () => GeneratorIdAndVersion,
  GeneratorOutputs: () => GeneratorOutputs,
  GeneratorsDoNotExistErrorBodyType: () => GeneratorsDoNotExistErrorBodyType,
  GithubOutputMode: () => GithubOutputMode,
  GithubPublishInfo: () => GithubPublishInfo2,
  InsufficientPermissionsDetails: () => InsufficientPermissionsDetails,
  LogLevel: () => LogLevel2,
  MavenCoordinate: () => MavenCoordinate,
  MavenOutput: () => MavenOutput,
  MavenOutputWithOptionalCreds: () => MavenOutputWithOptionalCreds,
  NpmCoordinate: () => NpmCoordinate,
  NpmOutput: () => NpmOutput,
  NpmOutputWithOptionalToken: () => NpmOutputWithOptionalToken,
  OutputMode: () => OutputMode2,
  Package: () => Package,
  PackageCoordinate: () => PackageCoordinate2,
  PackagePublishStatus: () => PackagePublishStatus2,
  PostmanOutput: () => PostmanOutput,
  PublishOutputMode: () => PublishOutputMode,
  PublishOutputModeV2: () => PublishOutputModeV22,
  PypiCoordinate: () => PypiCoordinate,
  RegistryOverrides: () => RegistryOverrides,
  RemoteGenJobId: () => RemoteGenJobId2,
  RemoteGenTaskId: () => RemoteGenTaskId2,
  Task: () => Task,
  TaskLog: () => TaskLog,
  TaskStatus: () => TaskStatus2,
  UsernamePassword: () => UsernamePassword,
  createJob: () => createJob_exports2,
  createJobV2: () => createJobV2_exports2,
  getJobStatus: () => getJobStatus_exports2
});
var init_remoteGen2 = __esm({
  \\"src/serialization/resources/remoteGen/index.ts\\"() {
    \\"use strict\\";
    init_types2();
    init_client4();
  }
});

// src/serialization/resources/index.ts
var init_resources2 = __esm({
  \\"src/serialization/resources/index.ts\\"() {
    \\"use strict\\";
    init_remoteGen2();
    init_types2();
    init_requests2();
  }
});

// src/serialization/index.ts
var serialization_exports = {};
__export(serialization_exports, {
  CannotPublishToMavenGroupDetails: () => CannotPublishToMavenGroupDetails,
  CannotPublishToNpmScopeDetails: () => CannotPublishToNpmScopeDetails,
  CreateJobRequest: () => CreateJobRequest,
  CreateJobRequestV2: () => CreateJobRequestV2,
  CreateJobResponse: () => CreateJobResponse,
  FailedTaskStatus: () => FailedTaskStatus,
  FinishedTaskStatus: () => FinishedTaskStatus,
  GeneratorConfig: () => GeneratorConfig,
  GeneratorConfigV2: () => GeneratorConfigV2,
  GeneratorIdAndVersion: () => GeneratorIdAndVersion,
  GeneratorOutputs: () => GeneratorOutputs,
  GeneratorsDoNotExistErrorBodyType: () => GeneratorsDoNotExistErrorBodyType,
  GithubOutputMode: () => GithubOutputMode,
  GithubPublishInfo: () => GithubPublishInfo2,
  InsufficientPermissionsDetails: () => InsufficientPermissionsDetails,
  LogLevel: () => LogLevel2,
  MavenCoordinate: () => MavenCoordinate,
  MavenOutput: () => MavenOutput,
  MavenOutputWithOptionalCreds: () => MavenOutputWithOptionalCreds,
  NpmCoordinate: () => NpmCoordinate,
  NpmOutput: () => NpmOutput,
  NpmOutputWithOptionalToken: () => NpmOutputWithOptionalToken,
  OutputMode: () => OutputMode2,
  Package: () => Package,
  PackageCoordinate: () => PackageCoordinate2,
  PackagePublishStatus: () => PackagePublishStatus2,
  PostmanOutput: () => PostmanOutput,
  PublishOutputMode: () => PublishOutputMode,
  PublishOutputModeV2: () => PublishOutputModeV22,
  PypiCoordinate: () => PypiCoordinate,
  RegistryOverrides: () => RegistryOverrides,
  RemoteGenJobId: () => RemoteGenJobId2,
  RemoteGenTaskId: () => RemoteGenTaskId2,
  Task: () => Task,
  TaskLog: () => TaskLog,
  TaskStatus: () => TaskStatus2,
  UsernamePassword: () => UsernamePassword,
  remoteGen: () => remoteGen_exports2
});
var init_serialization = __esm({
  \\"src/serialization/index.ts\\"() {
    \\"use strict\\";
    init_resources2();
  }
});

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Fiddle: () => api_exports,
  FiddleClient: () => FiddleClient
});
module.exports = __toCommonJS(src_exports);
init_api();

// src/api/resources/fiddle/client/Client.ts
init_core();
init_api();
var FiddleService = class {
  constructor(_options) {
    this._options = _options;
  }
  async test(_requestOptions) {
    const _response = await fetcher({
      url: await Supplier.get(this._options.environment),
      method: \\"GET\\",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        \\"X-Fern-Language\\": \\"JavaScript\\",
        \\"X-Fern-SDK-Name\\": \\"@fern-fern/fiddle-sdk\\",
        \\"X-Fern-SDK-Version\\": \\"0.0.0\\"
      },
      contentType: \\"application/json\\",
      timeoutMs: (_requestOptions == null ? void 0 : _requestOptions.timeoutInSeconds) !== void 0 ? _requestOptions.timeoutInSeconds * 1e3 : 6e4
    });
    if (_response.ok) {
      return {
        ok: true,
        body: void 0
      };
    }
    return {
      ok: false,
      error: fiddle_exports.test.Error._unknown(_response.error)
    };
  }
  async _getAuthorizationHeader() {
    return \`Bearer \${await Supplier.get(this._options.token)}\`;
  }
};

// src/api/resources/health/client/Client.ts
init_core();
init_api();
var import_url_join = __toESM(require_url_join());
var Health = class {
  constructor(_options) {
    this._options = _options;
  }
  async status(_requestOptions) {
    const _response = await fetcher({
      url: (0, import_url_join.default)(await Supplier.get(this._options.environment), \\"/api/health\\"),
      method: \\"GET\\",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        \\"X-Fern-Language\\": \\"JavaScript\\",
        \\"X-Fern-SDK-Name\\": \\"@fern-fern/fiddle-sdk\\",
        \\"X-Fern-SDK-Version\\": \\"0.0.0\\"
      },
      contentType: \\"application/json\\",
      timeoutMs: (_requestOptions == null ? void 0 : _requestOptions.timeoutInSeconds) !== void 0 ? _requestOptions.timeoutInSeconds * 1e3 : 6e4
    });
    if (_response.ok) {
      return {
        ok: true,
        body: void 0
      };
    }
    return {
      ok: false,
      error: health_exports.status.Error._unknown(_response.error)
    };
  }
  async _getAuthorizationHeader() {
    return \`Bearer \${await Supplier.get(this._options.token)}\`;
  }
};

// src/api/resources/remoteGen/client/Client.ts
init_core();
init_api();
init_serialization();
var import_url_join2 = __toESM(require_url_join());
var RemoteGen = class {
  constructor(_options) {
    this._options = _options;
  }
  async createJob(request, _requestOptions) {
    var _a;
    const _response = await fetcher({
      url: (0, import_url_join2.default)(await Supplier.get(this._options.environment), \\"/api/remote-gen/create-job\\"),
      method: \\"POST\\",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        \\"X-Fern-Language\\": \\"JavaScript\\",
        \\"X-Fern-SDK-Name\\": \\"@fern-fern/fiddle-sdk\\",
        \\"X-Fern-SDK-Version\\": \\"0.0.0\\"
      },
      contentType: \\"application/json\\",
      body: await CreateJobRequest.jsonOrThrow(request, { unrecognizedObjectKeys: \\"strip\\" }),
      timeoutMs: (_requestOptions == null ? void 0 : _requestOptions.timeoutInSeconds) !== void 0 ? _requestOptions.timeoutInSeconds * 1e3 : 6e4
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await CreateJobResponse.parseOrThrow(_response.body, {
          unrecognizedObjectKeys: \\"passthrough\\",
          allowUnrecognizedUnionMembers: true,
          allowUnrecognizedEnumValues: true,
          breadcrumbsPrefix: [\\"response\\"]
        })
      };
    }
    if (_response.error.reason === \\"status-code\\") {
      switch ((_a = _response.error.body) == null ? void 0 : _a.error) {
        case \\"IllegalApiNameError\\":
        case \\"GeneratorsDoNotExistError\\":
        case \\"CannotPublishToNpmScope\\":
        case \\"CannotPublishToMavenGroup\\":
        case \\"InsufficientPermissions\\":
          return {
            ok: false,
            error: await remoteGen_exports2.createJob.Error.parseOrThrow(
              _response.error.body,
              {
                unrecognizedObjectKeys: \\"passthrough\\",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: [\\"response\\"]
              }
            )
          };
      }
    }
    return {
      ok: false,
      error: remoteGen_exports.createJob.Error._unknown(_response.error)
    };
  }
  async createJobV2(request, _requestOptions) {
    var _a;
    const _response = await fetcher({
      url: (0, import_url_join2.default)(await Supplier.get(this._options.environment), \\"/api/remote-gen/create-job-v2\\"),
      method: \\"POST\\",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        \\"X-Fern-Language\\": \\"JavaScript\\",
        \\"X-Fern-SDK-Name\\": \\"@fern-fern/fiddle-sdk\\",
        \\"X-Fern-SDK-Version\\": \\"0.0.0\\"
      },
      contentType: \\"application/json\\",
      body: await CreateJobRequestV2.jsonOrThrow(request, { unrecognizedObjectKeys: \\"strip\\" }),
      timeoutMs: (_requestOptions == null ? void 0 : _requestOptions.timeoutInSeconds) !== void 0 ? _requestOptions.timeoutInSeconds * 1e3 : 6e4
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await CreateJobResponse.parseOrThrow(_response.body, {
          unrecognizedObjectKeys: \\"passthrough\\",
          allowUnrecognizedUnionMembers: true,
          allowUnrecognizedEnumValues: true,
          breadcrumbsPrefix: [\\"response\\"]
        })
      };
    }
    if (_response.error.reason === \\"status-code\\") {
      switch ((_a = _response.error.body) == null ? void 0 : _a.error) {
        case \\"IllegalApiNameError\\":
        case \\"GeneratorsDoNotExistError\\":
        case \\"CannotPublishToNpmScope\\":
        case \\"CannotPublishToMavenGroup\\":
        case \\"InsufficientPermissions\\":
          return {
            ok: false,
            error: await remoteGen_exports2.createJobV2.Error.parseOrThrow(
              _response.error.body,
              {
                unrecognizedObjectKeys: \\"passthrough\\",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: [\\"response\\"]
              }
            )
          };
      }
    }
    return {
      ok: false,
      error: remoteGen_exports.createJobV2.Error._unknown(_response.error)
    };
  }
  async getJobStatus(jobId, _requestOptions) {
    const _response = await fetcher({
      url: (0, import_url_join2.default)(
        await Supplier.get(this._options.environment),
        \`/api/remote-gen/jobs/\${await RemoteGenJobId2.jsonOrThrow(jobId)}/status\`
      ),
      method: \\"POST\\",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        \\"X-Fern-Language\\": \\"JavaScript\\",
        \\"X-Fern-SDK-Name\\": \\"@fern-fern/fiddle-sdk\\",
        \\"X-Fern-SDK-Version\\": \\"0.0.0\\"
      },
      contentType: \\"application/json\\",
      timeoutMs: (_requestOptions == null ? void 0 : _requestOptions.timeoutInSeconds) !== void 0 ? _requestOptions.timeoutInSeconds * 1e3 : 6e4
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await remoteGen_exports2.getJobStatus.Response.parseOrThrow(_response.body, {
          unrecognizedObjectKeys: \\"passthrough\\",
          allowUnrecognizedUnionMembers: true,
          allowUnrecognizedEnumValues: true,
          breadcrumbsPrefix: [\\"response\\"]
        })
      };
    }
    return {
      ok: false,
      error: remoteGen_exports.getJobStatus.Error._unknown(_response.error)
    };
  }
  async _getAuthorizationHeader() {
    return \`Bearer \${await Supplier.get(this._options.token)}\`;
  }
};

// src/Client.ts
var FiddleClient = class {
  constructor(_options) {
    this._options = _options;
  }
  get fiddle() {
    return this._fiddle ?? (this._fiddle = new FiddleService(this._options));
  }
  get health() {
    return this._health ?? (this._health = new Health(this._options));
  }
  get remoteGen() {
    return this._remoteGen ?? (this._remoteGen = new RemoteGen(this._options));
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Fiddle,
  FiddleClient
});
/*! Bundled license information:

mime-db/index.js:
  (*!
   * mime-db
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015-2022 Douglas Christopher Wilson
   * MIT Licensed
   *)

mime-types/index.js:
  (*!
   * mime-types
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)
*/
",
            "name": "index.js",
            "type": "file",
          },
          Object {
            "contents": "\\"use strict\\";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === \\"object\\" || typeof from === \\"function\\") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, \\"__esModule\\", { value: true }), mod);

// src/api/resources/remoteGen/types/RemoteGenJobId.ts
function RemoteGenJobId(value) {
  return value;
}
var init_RemoteGenJobId = __esm({
  \\"src/api/resources/remoteGen/types/RemoteGenJobId.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/RemoteGenTaskId.ts
function RemoteGenTaskId(value) {
  return value;
}
var init_RemoteGenTaskId = __esm({
  \\"src/api/resources/remoteGen/types/RemoteGenTaskId.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GeneratorIdAndVersion.ts
var init_GeneratorIdAndVersion = __esm({
  \\"src/api/resources/remoteGen/types/GeneratorIdAndVersion.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GeneratorConfig.ts
var init_GeneratorConfig = __esm({
  \\"src/api/resources/remoteGen/types/GeneratorConfig.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GeneratorConfigV2.ts
var init_GeneratorConfigV2 = __esm({
  \\"src/api/resources/remoteGen/types/GeneratorConfigV2.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/OutputMode.ts
var OutputMode;
var init_OutputMode = __esm({
  \\"src/api/resources/remoteGen/types/OutputMode.ts\\"() {
    \\"use strict\\";
    init_api();
    OutputMode = {
      publish: (value) => {
        return {
          ...value,
          type: \\"publish\\",
          _visit: function(visitor) {
            return OutputMode._visit(this, visitor);
          }
        };
      },
      publishV2: (value) => {
        return {
          publishV2: value,
          type: \\"publishV2\\",
          _visit: function(visitor) {
            return OutputMode._visit(this, visitor);
          }
        };
      },
      downloadFiles: () => {
        return {
          type: \\"downloadFiles\\",
          _visit: function(visitor) {
            return OutputMode._visit(this, visitor);
          }
        };
      },
      github: (value) => {
        return {
          ...value,
          type: \\"github\\",
          _visit: function(visitor) {
            return OutputMode._visit(this, visitor);
          }
        };
      },
      _unknown: (value) => {
        return {
          ...value,
          _visit: function(visitor) {
            return OutputMode._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.type) {
          case \\"publish\\":
            return visitor.publish(value);
          case \\"publishV2\\":
            return visitor.publishV2(value.publishV2);
          case \\"downloadFiles\\":
            return visitor.downloadFiles();
          case \\"github\\":
            return visitor.github(value);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/types/PublishOutputMode.ts
var init_PublishOutputMode = __esm({
  \\"src/api/resources/remoteGen/types/PublishOutputMode.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/PublishOutputModeV2.ts
var PublishOutputModeV2;
var init_PublishOutputModeV2 = __esm({
  \\"src/api/resources/remoteGen/types/PublishOutputModeV2.ts\\"() {
    \\"use strict\\";
    init_api();
    PublishOutputModeV2 = {
      npmOverride: (value) => {
        return {
          npmOverride: value,
          type: \\"npmOverride\\",
          _visit: function(visitor) {
            return PublishOutputModeV2._visit(this, visitor);
          }
        };
      },
      mavenOverride: (value) => {
        return {
          mavenOverride: value,
          type: \\"mavenOverride\\",
          _visit: function(visitor) {
            return PublishOutputModeV2._visit(this, visitor);
          }
        };
      },
      postman: (value) => {
        return {
          ...value,
          type: \\"postman\\",
          _visit: function(visitor) {
            return PublishOutputModeV2._visit(this, visitor);
          }
        };
      },
      _unknown: (value) => {
        return {
          ...value,
          _visit: function(visitor) {
            return PublishOutputModeV2._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.type) {
          case \\"npmOverride\\":
            return visitor.npmOverride(value.npmOverride);
          case \\"mavenOverride\\":
            return visitor.mavenOverride(value.mavenOverride);
          case \\"postman\\":
            return visitor.postman(value);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/types/RegistryOverrides.ts
var init_RegistryOverrides = __esm({
  \\"src/api/resources/remoteGen/types/RegistryOverrides.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GeneratorOutputs.ts
var init_GeneratorOutputs = __esm({
  \\"src/api/resources/remoteGen/types/GeneratorOutputs.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/NpmOutput.ts
var init_NpmOutput = __esm({
  \\"src/api/resources/remoteGen/types/NpmOutput.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/MavenOutput.ts
var init_MavenOutput = __esm({
  \\"src/api/resources/remoteGen/types/MavenOutput.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/PostmanOutput.ts
var init_PostmanOutput = __esm({
  \\"src/api/resources/remoteGen/types/PostmanOutput.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GithubOutputMode.ts
var init_GithubOutputMode = __esm({
  \\"src/api/resources/remoteGen/types/GithubOutputMode.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GithubPublishInfo.ts
var GithubPublishInfo;
var init_GithubPublishInfo = __esm({
  \\"src/api/resources/remoteGen/types/GithubPublishInfo.ts\\"() {
    \\"use strict\\";
    init_api();
    GithubPublishInfo = {
      npm: (value) => {
        return {
          ...value,
          type: \\"npm\\",
          _visit: function(visitor) {
            return GithubPublishInfo._visit(this, visitor);
          }
        };
      },
      maven: (value) => {
        return {
          ...value,
          type: \\"maven\\",
          _visit: function(visitor) {
            return GithubPublishInfo._visit(this, visitor);
          }
        };
      },
      postman: (value) => {
        return {
          ...value,
          type: \\"postman\\",
          _visit: function(visitor) {
            return GithubPublishInfo._visit(this, visitor);
          }
        };
      },
      _unknown: (value) => {
        return {
          ...value,
          _visit: function(visitor) {
            return GithubPublishInfo._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.type) {
          case \\"npm\\":
            return visitor.npm(value);
          case \\"maven\\":
            return visitor.maven(value);
          case \\"postman\\":
            return visitor.postman(value);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/types/NpmOutputWithOptionalToken.ts
var init_NpmOutputWithOptionalToken = __esm({
  \\"src/api/resources/remoteGen/types/NpmOutputWithOptionalToken.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/MavenOutputWithOptionalCreds.ts
var init_MavenOutputWithOptionalCreds = __esm({
  \\"src/api/resources/remoteGen/types/MavenOutputWithOptionalCreds.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/UsernamePassword.ts
var init_UsernamePassword = __esm({
  \\"src/api/resources/remoteGen/types/UsernamePassword.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/Task.ts
var init_Task = __esm({
  \\"src/api/resources/remoteGen/types/Task.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/TaskStatus.ts
var TaskStatus;
var init_TaskStatus = __esm({
  \\"src/api/resources/remoteGen/types/TaskStatus.ts\\"() {
    \\"use strict\\";
    init_api();
    TaskStatus = {
      notStarted: () => {
        return {
          type: \\"notStarted\\",
          _visit: function(visitor) {
            return TaskStatus._visit(this, visitor);
          }
        };
      },
      running: () => {
        return {
          type: \\"running\\",
          _visit: function(visitor) {
            return TaskStatus._visit(this, visitor);
          }
        };
      },
      failed: (value) => {
        return {
          ...value,
          type: \\"failed\\",
          _visit: function(visitor) {
            return TaskStatus._visit(this, visitor);
          }
        };
      },
      finished: (value) => {
        return {
          ...value,
          type: \\"finished\\",
          _visit: function(visitor) {
            return TaskStatus._visit(this, visitor);
          }
        };
      },
      _unknown: (value) => {
        return {
          ...value,
          _visit: function(visitor) {
            return TaskStatus._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.type) {
          case \\"notStarted\\":
            return visitor.notStarted();
          case \\"running\\":
            return visitor.running();
          case \\"failed\\":
            return visitor.failed(value);
          case \\"finished\\":
            return visitor.finished(value);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/types/FailedTaskStatus.ts
var init_FailedTaskStatus = __esm({
  \\"src/api/resources/remoteGen/types/FailedTaskStatus.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/FinishedTaskStatus.ts
var init_FinishedTaskStatus = __esm({
  \\"src/api/resources/remoteGen/types/FinishedTaskStatus.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/TaskLog.ts
var init_TaskLog = __esm({
  \\"src/api/resources/remoteGen/types/TaskLog.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/LogLevel.ts
var LogLevel;
var init_LogLevel = __esm({
  \\"src/api/resources/remoteGen/types/LogLevel.ts\\"() {
    \\"use strict\\";
    LogLevel = {
      Debug: \\"DEBUG\\",
      Info: \\"INFO\\",
      Warn: \\"WARN\\",
      Error: \\"ERROR\\"
    };
  }
});

// src/api/resources/remoteGen/types/Package.ts
var init_Package = __esm({
  \\"src/api/resources/remoteGen/types/Package.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/PackagePublishStatus.ts
var PackagePublishStatus;
var init_PackagePublishStatus = __esm({
  \\"src/api/resources/remoteGen/types/PackagePublishStatus.ts\\"() {
    \\"use strict\\";
    PackagePublishStatus = {
      NotStartedPublishing: \\"NOT_STARTED_PUBLISHING\\",
      Publishing: \\"PUBLISHING\\",
      Published: \\"PUBLISHED\\",
      FailedToPublish: \\"FAILED_TO_PUBLISH\\"
    };
  }
});

// src/api/resources/remoteGen/types/PackageCoordinate.ts
var PackageCoordinate;
var init_PackageCoordinate = __esm({
  \\"src/api/resources/remoteGen/types/PackageCoordinate.ts\\"() {
    \\"use strict\\";
    init_api();
    PackageCoordinate = {
      npm: (value) => {
        return {
          ...value,
          type: \\"npm\\",
          _visit: function(visitor) {
            return PackageCoordinate._visit(this, visitor);
          }
        };
      },
      maven: (value) => {
        return {
          ...value,
          type: \\"maven\\",
          _visit: function(visitor) {
            return PackageCoordinate._visit(this, visitor);
          }
        };
      },
      pypi: (value) => {
        return {
          ...value,
          type: \\"pypi\\",
          _visit: function(visitor) {
            return PackageCoordinate._visit(this, visitor);
          }
        };
      },
      _unknown: (value) => {
        return {
          ...value,
          _visit: function(visitor) {
            return PackageCoordinate._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.type) {
          case \\"npm\\":
            return visitor.npm(value);
          case \\"maven\\":
            return visitor.maven(value);
          case \\"pypi\\":
            return visitor.pypi(value);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/types/NpmCoordinate.ts
var init_NpmCoordinate = __esm({
  \\"src/api/resources/remoteGen/types/NpmCoordinate.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/MavenCoordinate.ts
var init_MavenCoordinate = __esm({
  \\"src/api/resources/remoteGen/types/MavenCoordinate.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/PypiCoordinate.ts
var init_PypiCoordinate = __esm({
  \\"src/api/resources/remoteGen/types/PypiCoordinate.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/CreateJobResponse.ts
var init_CreateJobResponse = __esm({
  \\"src/api/resources/remoteGen/types/CreateJobResponse.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/GeneratorsDoNotExistErrorBodyType.ts
var init_GeneratorsDoNotExistErrorBodyType = __esm({
  \\"src/api/resources/remoteGen/types/GeneratorsDoNotExistErrorBodyType.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/CannotPublishToNpmScopeDetails.ts
var init_CannotPublishToNpmScopeDetails = __esm({
  \\"src/api/resources/remoteGen/types/CannotPublishToNpmScopeDetails.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/CannotPublishToMavenGroupDetails.ts
var init_CannotPublishToMavenGroupDetails = __esm({
  \\"src/api/resources/remoteGen/types/CannotPublishToMavenGroupDetails.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/InsufficientPermissionsDetails.ts
var init_InsufficientPermissionsDetails = __esm({
  \\"src/api/resources/remoteGen/types/InsufficientPermissionsDetails.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/types/index.ts
var init_types = __esm({
  \\"src/api/resources/remoteGen/types/index.ts\\"() {
    \\"use strict\\";
    init_RemoteGenJobId();
    init_RemoteGenTaskId();
    init_GeneratorIdAndVersion();
    init_GeneratorConfig();
    init_GeneratorConfigV2();
    init_OutputMode();
    init_PublishOutputMode();
    init_PublishOutputModeV2();
    init_RegistryOverrides();
    init_GeneratorOutputs();
    init_NpmOutput();
    init_MavenOutput();
    init_PostmanOutput();
    init_GithubOutputMode();
    init_GithubPublishInfo();
    init_NpmOutputWithOptionalToken();
    init_MavenOutputWithOptionalCreds();
    init_UsernamePassword();
    init_Task();
    init_TaskStatus();
    init_FailedTaskStatus();
    init_FinishedTaskStatus();
    init_TaskLog();
    init_LogLevel();
    init_Package();
    init_PackagePublishStatus();
    init_PackageCoordinate();
    init_NpmCoordinate();
    init_MavenCoordinate();
    init_PypiCoordinate();
    init_CreateJobResponse();
    init_GeneratorsDoNotExistErrorBodyType();
    init_CannotPublishToNpmScopeDetails();
    init_CannotPublishToMavenGroupDetails();
    init_InsufficientPermissionsDetails();
  }
});

// src/api/resources/remoteGen/client/requests/index.ts
var init_requests = __esm({
  \\"src/api/resources/remoteGen/client/requests/index.ts\\"() {
    \\"use strict\\";
  }
});

// src/api/resources/remoteGen/client/createJob.ts
var createJob_exports = {};
__export(createJob_exports, {
  Error: () => Error2
});
var Error2;
var init_createJob = __esm({
  \\"src/api/resources/remoteGen/client/createJob.ts\\"() {
    \\"use strict\\";
    init_api();
    Error2 = {
      illegalApiNameError: () => {
        return {
          error: \\"IllegalApiNameError\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      generatorsDoNotExistError: (value) => {
        return {
          content: value,
          error: \\"GeneratorsDoNotExistError\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      cannotPublishToNpmScope: (value) => {
        return {
          content: value,
          error: \\"CannotPublishToNpmScope\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      cannotPublishToMavenGroup: (value) => {
        return {
          content: value,
          error: \\"CannotPublishToMavenGroup\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      insufficientPermissions: (value) => {
        return {
          content: value,
          error: \\"InsufficientPermissions\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      _unknown: (fetcherError) => {
        return {
          error: void 0,
          content: fetcherError,
          _visit: function(visitor) {
            return remoteGen_exports.createJob.Error._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.error) {
          case \\"IllegalApiNameError\\":
            return visitor.illegalApiNameError();
          case \\"GeneratorsDoNotExistError\\":
            return visitor.generatorsDoNotExistError(value.content);
          case \\"CannotPublishToNpmScope\\":
            return visitor.cannotPublishToNpmScope(value.content);
          case \\"CannotPublishToMavenGroup\\":
            return visitor.cannotPublishToMavenGroup(value.content);
          case \\"InsufficientPermissions\\":
            return visitor.insufficientPermissions(value.content);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/client/createJobV2.ts
var createJobV2_exports = {};
__export(createJobV2_exports, {
  Error: () => Error3
});
var Error3;
var init_createJobV2 = __esm({
  \\"src/api/resources/remoteGen/client/createJobV2.ts\\"() {
    \\"use strict\\";
    init_api();
    Error3 = {
      illegalApiNameError: () => {
        return {
          error: \\"IllegalApiNameError\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      generatorsDoNotExistError: (value) => {
        return {
          content: value,
          error: \\"GeneratorsDoNotExistError\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      cannotPublishToNpmScope: (value) => {
        return {
          content: value,
          error: \\"CannotPublishToNpmScope\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      cannotPublishToMavenGroup: (value) => {
        return {
          content: value,
          error: \\"CannotPublishToMavenGroup\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      insufficientPermissions: (value) => {
        return {
          content: value,
          error: \\"InsufficientPermissions\\",
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      _unknown: (fetcherError) => {
        return {
          error: void 0,
          content: fetcherError,
          _visit: function(visitor) {
            return remoteGen_exports.createJobV2.Error._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.error) {
          case \\"IllegalApiNameError\\":
            return visitor.illegalApiNameError();
          case \\"GeneratorsDoNotExistError\\":
            return visitor.generatorsDoNotExistError(value.content);
          case \\"CannotPublishToNpmScope\\":
            return visitor.cannotPublishToNpmScope(value.content);
          case \\"CannotPublishToMavenGroup\\":
            return visitor.cannotPublishToMavenGroup(value.content);
          case \\"InsufficientPermissions\\":
            return visitor.insufficientPermissions(value.content);
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/client/getJobStatus.ts
var getJobStatus_exports = {};
__export(getJobStatus_exports, {
  Error: () => Error4
});
var Error4;
var init_getJobStatus = __esm({
  \\"src/api/resources/remoteGen/client/getJobStatus.ts\\"() {
    \\"use strict\\";
    init_api();
    Error4 = {
      _unknown: (fetcherError) => {
        return {
          error: void 0,
          content: fetcherError,
          _visit: function(visitor) {
            return remoteGen_exports.getJobStatus.Error._visit(this, visitor);
          }
        };
      },
      _visit: (value, visitor) => {
        switch (value.error) {
          default:
            return visitor._other(value);
        }
      }
    };
  }
});

// src/api/resources/remoteGen/client/index.ts
var init_client = __esm({
  \\"src/api/resources/remoteGen/client/index.ts\\"() {
    \\"use strict\\";
    init_requests();
    init_createJob();
    init_createJobV2();
    init_getJobStatus();
  }
});

// src/api/resources/remoteGen/index.ts
var remoteGen_exports = {};
__export(remoteGen_exports, {
  GithubPublishInfo: () => GithubPublishInfo,
  LogLevel: () => LogLevel,
  OutputMode: () => OutputMode,
  PackageCoordinate: () => PackageCoordinate,
  PackagePublishStatus: () => PackagePublishStatus,
  PublishOutputModeV2: () => PublishOutputModeV2,
  RemoteGenJobId: () => RemoteGenJobId,
  RemoteGenTaskId: () => RemoteGenTaskId,
  TaskStatus: () => TaskStatus,
  createJob: () => createJob_exports,
  createJobV2: () => createJobV2_exports,
  getJobStatus: () => getJobStatus_exports
});
var init_remoteGen = __esm({
  \\"src/api/resources/remoteGen/index.ts\\"() {
    \\"use strict\\";
    init_types();
    init_client();
  }
});

// src/api/resources/fiddle/client/test.ts
var init_test = __esm({
  \\"src/api/resources/fiddle/client/test.ts\\"() {
    \\"use strict\\";
    init_api();
  }
});

// src/api/resources/fiddle/client/index.ts
var init_client2 = __esm({
  \\"src/api/resources/fiddle/client/index.ts\\"() {
    \\"use strict\\";
    init_test();
  }
});

// src/api/resources/fiddle/index.ts
var init_fiddle = __esm({
  \\"src/api/resources/fiddle/index.ts\\"() {
    \\"use strict\\";
    init_client2();
  }
});

// src/api/resources/health/client/status.ts
var init_status = __esm({
  \\"src/api/resources/health/client/status.ts\\"() {
    \\"use strict\\";
    init_api();
  }
});

// src/api/resources/health/client/index.ts
var init_client3 = __esm({
  \\"src/api/resources/health/client/index.ts\\"() {
    \\"use strict\\";
    init_status();
  }
});

// src/api/resources/health/index.ts
var init_health = __esm({
  \\"src/api/resources/health/index.ts\\"() {
    \\"use strict\\";
    init_client3();
  }
});

// src/api/resources/index.ts
var init_resources = __esm({
  \\"src/api/resources/index.ts\\"() {
    \\"use strict\\";
    init_remoteGen();
    init_types();
    init_fiddle();
    init_health();
    init_requests();
  }
});

// src/api/index.ts
var init_api = __esm({
  \\"src/api/index.ts\\"() {
    \\"use strict\\";
    init_resources();
  }
});

// src/core/fetcher/Fetcher.ts
var init_Fetcher = __esm({
  \\"src/core/fetcher/Fetcher.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/fetcher/Supplier.ts
var init_Supplier = __esm({
  \\"src/core/fetcher/Supplier.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/fetcher/index.ts
var init_fetcher = __esm({
  \\"src/core/fetcher/index.ts\\"() {
    \\"use strict\\";
    init_Fetcher();
    init_Supplier();
  }
});

// .yarn/cache/js-base64-npm-3.7.2-706fb77a0b-573f28e9a2.zip/node_modules/js-base64/base64.mjs
var _TD, _TE, b64ch, b64chs, b64tab, _fromCC, _U8Afrom;
var init_base64 = __esm({
  \\".yarn/cache/js-base64-npm-3.7.2-706fb77a0b-573f28e9a2.zip/node_modules/js-base64/base64.mjs\\"() {
    _TD = typeof TextDecoder === \\"function\\" ? new TextDecoder() : void 0;
    _TE = typeof TextEncoder === \\"function\\" ? new TextEncoder() : void 0;
    b64ch = \\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\";
    b64chs = Array.prototype.slice.call(b64ch);
    b64tab = ((a) => {
      let tab = {};
      a.forEach((c, i) => tab[c] = i);
      return tab;
    })(b64chs);
    _fromCC = String.fromCharCode.bind(String);
    _U8Afrom = typeof Uint8Array.from === \\"function\\" ? Uint8Array.from.bind(Uint8Array) : (it, fn = (x) => x) => new Uint8Array(Array.prototype.slice.call(it, 0).map(fn));
  }
});

// src/core/auth/BasicAuth.ts
var init_BasicAuth = __esm({
  \\"src/core/auth/BasicAuth.ts\\"() {
    \\"use strict\\";
    init_base64();
  }
});

// src/core/auth/BearerToken.ts
var init_BearerToken = __esm({
  \\"src/core/auth/BearerToken.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/auth/index.ts
var init_auth = __esm({
  \\"src/core/auth/index.ts\\"() {
    \\"use strict\\";
    init_BasicAuth();
    init_BearerToken();
  }
});

// src/core/schemas/Schema.ts
var SchemaType;
var init_Schema = __esm({
  \\"src/core/schemas/Schema.ts\\"() {
    \\"use strict\\";
    SchemaType = {
      DATE: \\"date\\",
      ENUM: \\"enum\\",
      LIST: \\"list\\",
      STRING_LITERAL: \\"stringLiteral\\",
      OBJECT: \\"object\\",
      ANY: \\"any\\",
      BOOLEAN: \\"boolean\\",
      NUMBER: \\"number\\",
      STRING: \\"string\\",
      UNKNOWN: \\"unknown\\",
      RECORD: \\"record\\",
      SET: \\"set\\",
      UNION: \\"union\\",
      UNDISCRIMINATED_UNION: \\"undiscriminatedUnion\\",
      OPTIONAL: \\"optional\\"
    };
  }
});

// src/core/schemas/utils/getErrorMessageForIncorrectType.ts
function getErrorMessageForIncorrectType(value, expectedType) {
  return \`Expected \${expectedType}. Received \${getTypeAsString(value)}.\`;
}
function getTypeAsString(value) {
  if (Array.isArray(value)) {
    return \\"list\\";
  }
  if (value === null) {
    return \\"null\\";
  }
  switch (typeof value) {
    case \\"string\\":
      return \`\\"\${value}\\"\`;
    case \\"number\\":
    case \\"boolean\\":
    case \\"undefined\\":
      return \`\${value}\`;
  }
  return typeof value;
}
var init_getErrorMessageForIncorrectType = __esm({
  \\"src/core/schemas/utils/getErrorMessageForIncorrectType.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/utils/maybeSkipValidation.ts
function maybeSkipValidation(schema) {
  return {
    ...schema,
    json: transformAndMaybeSkipValidation(schema.json),
    parse: transformAndMaybeSkipValidation(schema.parse)
  };
}
function transformAndMaybeSkipValidation(transform2) {
  return async (value, opts) => {
    const transformed = await transform2(value, opts);
    const { skipValidation = false } = opts ?? {};
    if (!transformed.ok && skipValidation) {
      console.warn(
        [
          \\"Failed to validate.\\",
          ...transformed.errors.map(
            (error) => \\"  - \\" + (error.path.length > 0 ? \`\${error.path.join(\\".\\")}: \${error.message}\` : error.message)
          )
        ].join(\\"\\\\n\\")
      );
      return {
        ok: true,
        value
      };
    } else {
      return transformed;
    }
  };
}
var init_maybeSkipValidation = __esm({
  \\"src/core/schemas/utils/maybeSkipValidation.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
function stringifyValidationError(error) {
  if (error.path.length === 0) {
    return error.message;
  }
  return \`\${error.path.join(\\" -> \\")}: \${error.message}\`;
}
var init_stringifyValidationErrors = __esm({
  \\"src/core/schemas/builders/schema-utils/stringifyValidationErrors.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/builders/schema-utils/JsonError.ts
var JsonError;
var init_JsonError = __esm({
  \\"src/core/schemas/builders/schema-utils/JsonError.ts\\"() {
    \\"use strict\\";
    init_stringifyValidationErrors();
    JsonError = class extends Error {
      constructor(errors) {
        super(errors.map(stringifyValidationError).join(\\"; \\"));
        this.errors = errors;
        Object.setPrototypeOf(this, JsonError.prototype);
      }
    };
  }
});

// src/core/schemas/builders/schema-utils/ParseError.ts
var ParseError;
var init_ParseError = __esm({
  \\"src/core/schemas/builders/schema-utils/ParseError.ts\\"() {
    \\"use strict\\";
    init_stringifyValidationErrors();
    ParseError = class extends Error {
      constructor(errors) {
        super(errors.map(stringifyValidationError).join(\\"; \\"));
        this.errors = errors;
        Object.setPrototypeOf(this, ParseError.prototype);
      }
    };
  }
});

// src/core/schemas/builders/schema-utils/getSchemaUtils.ts
function getSchemaUtils(schema) {
  return {
    optional: () => optional(schema),
    transform: (transformer) => transform(schema, transformer),
    parseOrThrow: async (raw, opts) => {
      const parsed = await schema.parse(raw, opts);
      if (parsed.ok) {
        return parsed.value;
      }
      throw new ParseError(parsed.errors);
    },
    jsonOrThrow: async (parsed, opts) => {
      const raw = await schema.json(parsed, opts);
      if (raw.ok) {
        return raw.value;
      }
      throw new JsonError(raw.errors);
    }
  };
}
function optional(schema) {
  const baseSchema = {
    parse: (raw, opts) => {
      if (raw == null) {
        return {
          ok: true,
          value: void 0
        };
      }
      return schema.parse(raw, opts);
    },
    json: (parsed, opts) => {
      if (parsed == null) {
        return {
          ok: true,
          value: null
        };
      }
      return schema.json(parsed, opts);
    },
    getType: () => SchemaType.OPTIONAL
  };
  return {
    ...baseSchema,
    ...getSchemaUtils(baseSchema)
  };
}
function transform(schema, transformer) {
  const baseSchema = {
    parse: async (raw, opts) => {
      const parsed = await schema.parse(raw, opts);
      if (!parsed.ok) {
        return parsed;
      }
      return {
        ok: true,
        value: transformer.transform(parsed.value)
      };
    },
    json: async (transformed, opts) => {
      const parsed = await transformer.untransform(transformed);
      return schema.json(parsed, opts);
    },
    getType: () => schema.getType()
  };
  return {
    ...baseSchema,
    ...getSchemaUtils(baseSchema)
  };
}
var init_getSchemaUtils = __esm({
  \\"src/core/schemas/builders/schema-utils/getSchemaUtils.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_JsonError();
    init_ParseError();
  }
});

// src/core/schemas/builders/schema-utils/index.ts
var init_schema_utils = __esm({
  \\"src/core/schemas/builders/schema-utils/index.ts\\"() {
    \\"use strict\\";
    init_getSchemaUtils();
    init_JsonError();
    init_ParseError();
  }
});

// src/core/schemas/builders/date/date.ts
function date() {
  const baseSchema = {
    parse: (raw, { breadcrumbsPrefix = [] } = {}) => {
      if (typeof raw !== \\"string\\") {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(raw, \\"string\\")
            }
          ]
        };
      }
      if (!ISO_8601_REGEX.test(raw)) {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(raw, \\"ISO 8601 date string\\")
            }
          ]
        };
      }
      return {
        ok: true,
        value: new Date(raw)
      };
    },
    json: (date2, { breadcrumbsPrefix = [] } = {}) => {
      if (date2 instanceof Date) {
        return {
          ok: true,
          value: date2.toISOString()
        };
      } else {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(date2, \\"Date object\\")
            }
          ]
        };
      }
    },
    getType: () => SchemaType.DATE
  };
  return {
    ...maybeSkipValidation(baseSchema),
    ...getSchemaUtils(baseSchema)
  };
}
var ISO_8601_REGEX;
var init_date = __esm({
  \\"src/core/schemas/builders/date/date.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_getErrorMessageForIncorrectType();
    init_maybeSkipValidation();
    init_schema_utils();
    ISO_8601_REGEX = /^([+-]?\\\\d{4}(?!\\\\d{2}\\\\b))((-?)((0[1-9]|1[0-2])(\\\\3([12]\\\\d|0[1-9]|3[01]))?|W([0-4]\\\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\\\d|[12]\\\\d{2}|3([0-5]\\\\d|6[1-6])))([T\\\\s]((([01]\\\\d|2[0-3])((:?)[0-5]\\\\d)?|24:?00)([.,]\\\\d+(?!:))?)?(\\\\17[0-5]\\\\d([.,]\\\\d+)?)?([zZ]|([+-])([01]\\\\d|2[0-3]):?([0-5]\\\\d)?)?)?)?$/;
  }
});

// src/core/schemas/builders/date/index.ts
var init_date2 = __esm({
  \\"src/core/schemas/builders/date/index.ts\\"() {
    \\"use strict\\";
    init_date();
  }
});

// src/core/schemas/utils/createIdentitySchemaCreator.ts
function createIdentitySchemaCreator(schemaType, validate) {
  return () => {
    const baseSchema = {
      parse: validate,
      json: validate,
      getType: () => schemaType
    };
    return {
      ...maybeSkipValidation(baseSchema),
      ...getSchemaUtils(baseSchema)
    };
  };
}
var init_createIdentitySchemaCreator = __esm({
  \\"src/core/schemas/utils/createIdentitySchemaCreator.ts\\"() {
    \\"use strict\\";
    init_schema_utils();
    init_maybeSkipValidation();
  }
});

// src/core/schemas/builders/enum/enum.ts
function enum_(values) {
  const validValues = new Set(values);
  const schemaCreator = createIdentitySchemaCreator(
    SchemaType.ENUM,
    (value, { allowUnrecognizedEnumValues, breadcrumbsPrefix = [] } = {}) => {
      if (typeof value !== \\"string\\") {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(value, \\"string\\")
            }
          ]
        };
      }
      if (!validValues.has(value) && !allowUnrecognizedEnumValues) {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(value, \\"enum\\")
            }
          ]
        };
      }
      return {
        ok: true,
        value
      };
    }
  );
  return schemaCreator();
}
var init_enum = __esm({
  \\"src/core/schemas/builders/enum/enum.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    init_getErrorMessageForIncorrectType();
  }
});

// src/core/schemas/builders/enum/index.ts
var init_enum2 = __esm({
  \\"src/core/schemas/builders/enum/index.ts\\"() {
    \\"use strict\\";
    init_enum();
  }
});

// src/core/schemas/builders/lazy/lazy.ts
function lazy(getter) {
  const baseSchema = constructLazyBaseSchema(getter);
  return {
    ...baseSchema,
    ...getSchemaUtils(baseSchema)
  };
}
function constructLazyBaseSchema(getter) {
  return {
    parse: async (raw, opts) => (await getMemoizedSchema(getter)).parse(raw, opts),
    json: async (parsed, opts) => (await getMemoizedSchema(getter)).json(parsed, opts),
    getType: async () => (await getMemoizedSchema(getter)).getType()
  };
}
async function getMemoizedSchema(getter) {
  const castedGetter = getter;
  if (castedGetter.__zurg_memoized == null) {
    castedGetter.__zurg_memoized = await getter();
  }
  return castedGetter.__zurg_memoized;
}
var init_lazy = __esm({
  \\"src/core/schemas/builders/lazy/lazy.ts\\"() {
    \\"use strict\\";
    init_schema_utils();
  }
});

// src/core/schemas/utils/entries.ts
function entries(object2) {
  return Object.entries(object2);
}
var init_entries = __esm({
  \\"src/core/schemas/utils/entries.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/utils/filterObject.ts
function filterObject(obj, keysToInclude) {
  const keysToIncludeSet = new Set(keysToInclude);
  return Object.entries(obj).reduce((acc, [key, value]) => {
    if (keysToIncludeSet.has(key)) {
      acc[key] = value;
    }
    return acc;
  }, {});
}
var init_filterObject = __esm({
  \\"src/core/schemas/utils/filterObject.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/utils/isPlainObject.ts
function isPlainObject(value) {
  if (typeof value !== \\"object\\" || value === null) {
    return false;
  }
  if (Object.getPrototypeOf(value) === null) {
    return true;
  }
  let proto = value;
  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }
  return Object.getPrototypeOf(value) === proto;
}
var init_isPlainObject = __esm({
  \\"src/core/schemas/utils/isPlainObject.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/utils/keys.ts
function keys(object2) {
  return Object.keys(object2);
}
var init_keys = __esm({
  \\"src/core/schemas/utils/keys.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/utils/partition.ts
function partition(items, predicate) {
  const trueItems = [], falseItems = [];
  for (const item of items) {
    if (predicate(item)) {
      trueItems.push(item);
    } else {
      falseItems.push(item);
    }
  }
  return [trueItems, falseItems];
}
var init_partition = __esm({
  \\"src/core/schemas/utils/partition.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/builders/object-like/getObjectLikeUtils.ts
function getObjectLikeUtils(schema) {
  return {
    withParsedProperties: (properties) => withParsedProperties(schema, properties)
  };
}
function withParsedProperties(objectLike, properties) {
  const objectSchema = {
    parse: async (raw, opts) => {
      const parsedObject = await objectLike.parse(raw, opts);
      if (!parsedObject.ok) {
        return parsedObject;
      }
      const additionalProperties = Object.entries(properties).reduce(
        (processed, [key, value]) => {
          return {
            ...processed,
            [key]: typeof value === \\"function\\" ? value(parsedObject.value) : value
          };
        },
        {}
      );
      return {
        ok: true,
        value: {
          ...parsedObject.value,
          ...additionalProperties
        }
      };
    },
    json: (parsed, opts) => {
      if (!isPlainObject(parsed)) {
        return {
          ok: false,
          errors: [
            {
              path: (opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [],
              message: getErrorMessageForIncorrectType(parsed, \\"object\\")
            }
          ]
        };
      }
      const addedPropertyKeys = new Set(Object.keys(properties));
      const parsedWithoutAddedProperties = filterObject(
        parsed,
        Object.keys(parsed).filter((key) => !addedPropertyKeys.has(key))
      );
      return objectLike.json(parsedWithoutAddedProperties, opts);
    },
    getType: () => objectLike.getType()
  };
  return {
    ...objectSchema,
    ...getSchemaUtils(objectSchema),
    ...getObjectLikeUtils(objectSchema)
  };
}
var init_getObjectLikeUtils = __esm({
  \\"src/core/schemas/builders/object-like/getObjectLikeUtils.ts\\"() {
    \\"use strict\\";
    init_filterObject();
    init_getErrorMessageForIncorrectType();
    init_isPlainObject();
    init_schema_utils();
  }
});

// src/core/schemas/builders/object-like/index.ts
var init_object_like = __esm({
  \\"src/core/schemas/builders/object-like/index.ts\\"() {
    \\"use strict\\";
    init_getObjectLikeUtils();
  }
});

// src/core/schemas/builders/object/property.ts
function property(rawKey, valueSchema) {
  return {
    rawKey,
    valueSchema,
    isProperty: true
  };
}
function isProperty(maybeProperty) {
  return maybeProperty.isProperty;
}
var init_property = __esm({
  \\"src/core/schemas/builders/object/property.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/builders/object/object.ts
function object(schemas) {
  const baseSchema = {
    _getRawProperties: () => Promise.resolve(
      Object.entries(schemas).map(
        ([parsedKey, propertySchema]) => isProperty(propertySchema) ? propertySchema.rawKey : parsedKey
      )
    ),
    _getParsedProperties: () => Promise.resolve(keys(schemas)),
    parse: async (raw, opts) => {
      const rawKeyToProperty = {};
      const requiredKeys = [];
      for (const [parsedKey, schemaOrObjectProperty] of entries(schemas)) {
        const rawKey = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.rawKey : parsedKey;
        const valueSchema = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.valueSchema : schemaOrObjectProperty;
        const property2 = {
          rawKey,
          parsedKey,
          valueSchema
        };
        rawKeyToProperty[rawKey] = property2;
        if (await isSchemaRequired(valueSchema)) {
          requiredKeys.push(rawKey);
        }
      }
      return validateAndTransformObject({
        value: raw,
        requiredKeys,
        getProperty: (rawKey) => {
          const property2 = rawKeyToProperty[rawKey];
          if (property2 == null) {
            return void 0;
          }
          return {
            transformedKey: property2.parsedKey,
            transform: (propertyValue) => property2.valueSchema.parse(propertyValue, {
              ...opts,
              breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], rawKey]
            })
          };
        },
        unrecognizedObjectKeys: opts == null ? void 0 : opts.unrecognizedObjectKeys,
        skipValidation: opts == null ? void 0 : opts.skipValidation,
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    },
    json: async (parsed, opts) => {
      const requiredKeys = [];
      for (const [parsedKey, schemaOrObjectProperty] of entries(schemas)) {
        const valueSchema = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.valueSchema : schemaOrObjectProperty;
        if (await isSchemaRequired(valueSchema)) {
          requiredKeys.push(parsedKey);
        }
      }
      return validateAndTransformObject({
        value: parsed,
        requiredKeys,
        getProperty: (parsedKey) => {
          const property2 = schemas[parsedKey];
          if (property2 == null) {
            return void 0;
          }
          if (isProperty(property2)) {
            return {
              transformedKey: property2.rawKey,
              transform: (propertyValue) => property2.valueSchema.json(propertyValue, {
                ...opts,
                breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], parsedKey]
              })
            };
          } else {
            return {
              transformedKey: parsedKey,
              transform: (propertyValue) => property2.json(propertyValue, {
                ...opts,
                breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], parsedKey]
              })
            };
          }
        },
        unrecognizedObjectKeys: opts == null ? void 0 : opts.unrecognizedObjectKeys,
        skipValidation: opts == null ? void 0 : opts.skipValidation,
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    },
    getType: () => SchemaType.OBJECT
  };
  return {
    ...maybeSkipValidation(baseSchema),
    ...getSchemaUtils(baseSchema),
    ...getObjectLikeUtils(baseSchema),
    ...getObjectUtils(baseSchema)
  };
}
async function validateAndTransformObject({
  value,
  requiredKeys,
  getProperty,
  unrecognizedObjectKeys = \\"fail\\",
  skipValidation = false,
  breadcrumbsPrefix = []
}) {
  if (!isPlainObject(value)) {
    return {
      ok: false,
      errors: [
        {
          path: breadcrumbsPrefix,
          message: getErrorMessageForIncorrectType(value, \\"object\\")
        }
      ]
    };
  }
  const missingRequiredKeys = new Set(requiredKeys);
  const errors = [];
  const transformed = {};
  for (const [preTransformedKey, preTransformedItemValue] of Object.entries(value)) {
    const property2 = getProperty(preTransformedKey);
    if (property2 != null) {
      missingRequiredKeys.delete(preTransformedKey);
      const value2 = await property2.transform(preTransformedItemValue);
      if (value2.ok) {
        transformed[property2.transformedKey] = value2.value;
      } else {
        transformed[preTransformedKey] = preTransformedItemValue;
        errors.push(...value2.errors);
      }
    } else {
      switch (unrecognizedObjectKeys) {
        case \\"fail\\":
          errors.push({
            path: [...breadcrumbsPrefix, preTransformedKey],
            message: \`Unexpected key \\"\${preTransformedKey}\\"\`
          });
          break;
        case \\"strip\\":
          break;
        case \\"passthrough\\":
          transformed[preTransformedKey] = preTransformedItemValue;
          break;
      }
    }
  }
  errors.push(
    ...requiredKeys.filter((key) => missingRequiredKeys.has(key)).map((key) => ({
      path: breadcrumbsPrefix,
      message: \`Missing required key \\"\${key}\\"\`
    }))
  );
  if (errors.length === 0 || skipValidation) {
    return {
      ok: true,
      value: transformed
    };
  } else {
    return {
      ok: false,
      errors
    };
  }
}
function getObjectUtils(schema) {
  return {
    extend: (extension) => {
      const baseSchema = {
        _getParsedProperties: async () => [
          ...await schema._getParsedProperties(),
          ...await extension._getParsedProperties()
        ],
        _getRawProperties: async () => [
          ...await schema._getRawProperties(),
          ...await extension._getRawProperties()
        ],
        parse: async (raw, opts) => {
          return validateAndTransformExtendedObject({
            extensionKeys: await extension._getRawProperties(),
            value: raw,
            transformBase: (rawBase) => schema.parse(rawBase, opts),
            transformExtension: (rawExtension) => extension.parse(rawExtension, opts)
          });
        },
        json: async (parsed, opts) => {
          return validateAndTransformExtendedObject({
            extensionKeys: await extension._getParsedProperties(),
            value: parsed,
            transformBase: (parsedBase) => schema.json(parsedBase, opts),
            transformExtension: (parsedExtension) => extension.json(parsedExtension, opts)
          });
        },
        getType: () => SchemaType.OBJECT
      };
      return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
        ...getObjectLikeUtils(baseSchema),
        ...getObjectUtils(baseSchema)
      };
    }
  };
}
async function validateAndTransformExtendedObject({
  extensionKeys,
  value,
  transformBase,
  transformExtension
}) {
  const extensionPropertiesSet = new Set(extensionKeys);
  const [extensionProperties, baseProperties] = partition(
    keys(value),
    (key) => extensionPropertiesSet.has(key)
  );
  const transformedBase = await transformBase(filterObject(value, baseProperties));
  const transformedExtension = await transformExtension(filterObject(value, extensionProperties));
  if (transformedBase.ok && transformedExtension.ok) {
    return {
      ok: true,
      value: {
        ...transformedBase.value,
        ...transformedExtension.value
      }
    };
  } else {
    return {
      ok: false,
      errors: [
        ...transformedBase.ok ? [] : transformedBase.errors,
        ...transformedExtension.ok ? [] : transformedExtension.errors
      ]
    };
  }
}
async function isSchemaRequired(schema) {
  return !await isSchemaOptional(schema);
}
async function isSchemaOptional(schema) {
  switch (await schema.getType()) {
    case SchemaType.ANY:
    case SchemaType.UNKNOWN:
    case SchemaType.OPTIONAL:
      return true;
    default:
      return false;
  }
}
var init_object = __esm({
  \\"src/core/schemas/builders/object/object.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_entries();
    init_filterObject();
    init_getErrorMessageForIncorrectType();
    init_isPlainObject();
    init_keys();
    init_maybeSkipValidation();
    init_partition();
    init_object_like();
    init_schema_utils();
    init_property();
  }
});

// src/core/schemas/builders/object/index.ts
var init_object2 = __esm({
  \\"src/core/schemas/builders/object/index.ts\\"() {
    \\"use strict\\";
    init_object();
    init_property();
  }
});

// src/core/schemas/builders/lazy/lazyObject.ts
function lazyObject(getter) {
  const baseSchema = {
    ...constructLazyBaseSchema(getter),
    _getRawProperties: async () => (await getMemoizedSchema(getter))._getRawProperties(),
    _getParsedProperties: async () => (await getMemoizedSchema(getter))._getParsedProperties()
  };
  return {
    ...baseSchema,
    ...getSchemaUtils(baseSchema),
    ...getObjectLikeUtils(baseSchema),
    ...getObjectUtils(baseSchema)
  };
}
var init_lazyObject = __esm({
  \\"src/core/schemas/builders/lazy/lazyObject.ts\\"() {
    \\"use strict\\";
    init_object2();
    init_object_like();
    init_schema_utils();
    init_lazy();
  }
});

// src/core/schemas/builders/lazy/index.ts
var init_lazy2 = __esm({
  \\"src/core/schemas/builders/lazy/index.ts\\"() {
    \\"use strict\\";
    init_lazy();
    init_lazyObject();
  }
});

// src/core/schemas/builders/list/list.ts
function list(schema) {
  const baseSchema = {
    parse: async (raw, opts) => validateAndTransformArray(
      raw,
      (item, index) => schema.parse(item, {
        ...opts,
        breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], \`[\${index}]\`]
      })
    ),
    json: (parsed, opts) => validateAndTransformArray(
      parsed,
      (item, index) => schema.json(item, {
        ...opts,
        breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], \`[\${index}]\`]
      })
    ),
    getType: () => SchemaType.LIST
  };
  return {
    ...maybeSkipValidation(baseSchema),
    ...getSchemaUtils(baseSchema)
  };
}
async function validateAndTransformArray(value, transformItem) {
  if (!Array.isArray(value)) {
    return {
      ok: false,
      errors: [
        {
          message: getErrorMessageForIncorrectType(value, \\"list\\"),
          path: []
        }
      ]
    };
  }
  const maybeValidItems = await Promise.all(value.map((item, index) => transformItem(item, index)));
  return maybeValidItems.reduce(
    (acc, item) => {
      if (acc.ok && item.ok) {
        return {
          ok: true,
          value: [...acc.value, item.value]
        };
      }
      const errors = [];
      if (!acc.ok) {
        errors.push(...acc.errors);
      }
      if (!item.ok) {
        errors.push(...item.errors);
      }
      return {
        ok: false,
        errors
      };
    },
    { ok: true, value: [] }
  );
}
var init_list = __esm({
  \\"src/core/schemas/builders/list/list.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_getErrorMessageForIncorrectType();
    init_maybeSkipValidation();
    init_schema_utils();
  }
});

// src/core/schemas/builders/list/index.ts
var init_list2 = __esm({
  \\"src/core/schemas/builders/list/index.ts\\"() {
    \\"use strict\\";
    init_list();
  }
});

// src/core/schemas/builders/literals/stringLiteral.ts
function stringLiteral(literal) {
  const schemaCreator = createIdentitySchemaCreator(
    SchemaType.STRING_LITERAL,
    (value, { breadcrumbsPrefix = [] } = {}) => {
      if (value === literal) {
        return {
          ok: true,
          value: literal
        };
      } else {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: getErrorMessageForIncorrectType(value, \`\\"\${literal}\\"\`)
            }
          ]
        };
      }
    }
  );
  return schemaCreator();
}
var init_stringLiteral = __esm({
  \\"src/core/schemas/builders/literals/stringLiteral.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    init_getErrorMessageForIncorrectType();
  }
});

// src/core/schemas/builders/literals/index.ts
var init_literals = __esm({
  \\"src/core/schemas/builders/literals/index.ts\\"() {
    \\"use strict\\";
    init_stringLiteral();
  }
});

// src/core/schemas/builders/primitives/any.ts
var any;
var init_any = __esm({
  \\"src/core/schemas/builders/primitives/any.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    any = createIdentitySchemaCreator(SchemaType.ANY, (value) => ({ ok: true, value }));
  }
});

// src/core/schemas/builders/primitives/boolean.ts
var boolean;
var init_boolean = __esm({
  \\"src/core/schemas/builders/primitives/boolean.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    init_getErrorMessageForIncorrectType();
    boolean = createIdentitySchemaCreator(
      SchemaType.BOOLEAN,
      (value, { breadcrumbsPrefix = [] } = {}) => {
        if (typeof value === \\"boolean\\") {
          return {
            ok: true,
            value
          };
        } else {
          return {
            ok: false,
            errors: [
              {
                path: breadcrumbsPrefix,
                message: getErrorMessageForIncorrectType(value, \\"boolean\\")
              }
            ]
          };
        }
      }
    );
  }
});

// src/core/schemas/builders/primitives/number.ts
var number;
var init_number = __esm({
  \\"src/core/schemas/builders/primitives/number.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    init_getErrorMessageForIncorrectType();
    number = createIdentitySchemaCreator(
      SchemaType.NUMBER,
      (value, { breadcrumbsPrefix = [] } = {}) => {
        if (typeof value === \\"number\\") {
          return {
            ok: true,
            value
          };
        } else {
          return {
            ok: false,
            errors: [
              {
                path: breadcrumbsPrefix,
                message: getErrorMessageForIncorrectType(value, \\"number\\")
              }
            ]
          };
        }
      }
    );
  }
});

// src/core/schemas/builders/primitives/string.ts
var string;
var init_string = __esm({
  \\"src/core/schemas/builders/primitives/string.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    init_getErrorMessageForIncorrectType();
    string = createIdentitySchemaCreator(
      SchemaType.STRING,
      (value, { breadcrumbsPrefix = [] } = {}) => {
        if (typeof value === \\"string\\") {
          return {
            ok: true,
            value
          };
        } else {
          return {
            ok: false,
            errors: [
              {
                path: breadcrumbsPrefix,
                message: getErrorMessageForIncorrectType(value, \\"string\\")
              }
            ]
          };
        }
      }
    );
  }
});

// src/core/schemas/builders/primitives/unknown.ts
var unknown;
var init_unknown = __esm({
  \\"src/core/schemas/builders/primitives/unknown.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_createIdentitySchemaCreator();
    unknown = createIdentitySchemaCreator(SchemaType.UNKNOWN, (value) => ({ ok: true, value }));
  }
});

// src/core/schemas/builders/primitives/index.ts
var init_primitives = __esm({
  \\"src/core/schemas/builders/primitives/index.ts\\"() {
    \\"use strict\\";
    init_any();
    init_boolean();
    init_number();
    init_string();
    init_unknown();
  }
});

// src/core/schemas/builders/record/record.ts
function record(keySchema, valueSchema) {
  const baseSchema = {
    parse: async (raw, opts) => {
      return validateAndTransformRecord({
        value: raw,
        isKeyNumeric: await keySchema.getType() === SchemaType.NUMBER,
        transformKey: (key) => keySchema.parse(key, {
          ...opts,
          breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], \`\${key} (key)\`]
        }),
        transformValue: (value, key) => valueSchema.parse(value, {
          ...opts,
          breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], \`\${key}\`]
        }),
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    },
    json: async (parsed, opts) => {
      return validateAndTransformRecord({
        value: parsed,
        isKeyNumeric: await keySchema.getType() === SchemaType.NUMBER,
        transformKey: (key) => keySchema.json(key, {
          ...opts,
          breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], \`\${key} (key)\`]
        }),
        transformValue: (value, key) => valueSchema.json(value, {
          ...opts,
          breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], \`\${key}\`]
        }),
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    },
    getType: () => SchemaType.RECORD
  };
  return {
    ...maybeSkipValidation(baseSchema),
    ...getSchemaUtils(baseSchema)
  };
}
async function validateAndTransformRecord({
  value,
  isKeyNumeric,
  transformKey,
  transformValue,
  breadcrumbsPrefix = []
}) {
  if (!isPlainObject(value)) {
    return {
      ok: false,
      errors: [
        {
          path: breadcrumbsPrefix,
          message: getErrorMessageForIncorrectType(value, \\"object\\")
        }
      ]
    };
  }
  return entries(value).reduce(
    async (accPromise, [stringKey, value2]) => {
      if (value2 == null) {
        return accPromise;
      }
      const acc = await accPromise;
      let key = stringKey;
      if (isKeyNumeric) {
        const numberKey = stringKey.length > 0 ? Number(stringKey) : NaN;
        if (!isNaN(numberKey)) {
          key = numberKey;
        }
      }
      const transformedKey = await transformKey(key);
      const transformedValue = await transformValue(value2, key);
      if (acc.ok && transformedKey.ok && transformedValue.ok) {
        return {
          ok: true,
          value: {
            ...acc.value,
            [transformedKey.value]: transformedValue.value
          }
        };
      }
      const errors = [];
      if (!acc.ok) {
        errors.push(...acc.errors);
      }
      if (!transformedKey.ok) {
        errors.push(...transformedKey.errors);
      }
      if (!transformedValue.ok) {
        errors.push(...transformedValue.errors);
      }
      return {
        ok: false,
        errors
      };
    },
    Promise.resolve({ ok: true, value: {} })
  );
}
var init_record = __esm({
  \\"src/core/schemas/builders/record/record.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_entries();
    init_getErrorMessageForIncorrectType();
    init_isPlainObject();
    init_maybeSkipValidation();
    init_schema_utils();
  }
});

// src/core/schemas/builders/record/index.ts
var init_record2 = __esm({
  \\"src/core/schemas/builders/record/index.ts\\"() {
    \\"use strict\\";
    init_record();
  }
});

// src/core/schemas/builders/set/set.ts
function set(schema) {
  const listSchema = list(schema);
  const baseSchema = {
    parse: async (raw, opts) => {
      const parsedList = await listSchema.parse(raw, opts);
      if (parsedList.ok) {
        return {
          ok: true,
          value: new Set(parsedList.value)
        };
      } else {
        return parsedList;
      }
    },
    json: async (parsed, opts) => {
      if (!(parsed instanceof Set)) {
        return {
          ok: false,
          errors: [
            {
              path: (opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [],
              message: getErrorMessageForIncorrectType(parsed, \\"Set\\")
            }
          ]
        };
      }
      const jsonList = await listSchema.json([...parsed], opts);
      return jsonList;
    },
    getType: () => SchemaType.SET
  };
  return {
    ...maybeSkipValidation(baseSchema),
    ...getSchemaUtils(baseSchema)
  };
}
var init_set = __esm({
  \\"src/core/schemas/builders/set/set.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_getErrorMessageForIncorrectType();
    init_maybeSkipValidation();
    init_list2();
    init_schema_utils();
  }
});

// src/core/schemas/builders/set/index.ts
var init_set2 = __esm({
  \\"src/core/schemas/builders/set/index.ts\\"() {
    \\"use strict\\";
    init_set();
  }
});

// src/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
function undiscriminatedUnion(schemas) {
  const baseSchema = {
    parse: async (raw, opts) => {
      return validateAndTransformUndiscriminatedUnion(
        (schema) => schema.parse(raw, opts),
        schemas
      );
    },
    json: async (parsed, opts) => {
      return validateAndTransformUndiscriminatedUnion(
        (schema) => schema.json(parsed, opts),
        schemas
      );
    },
    getType: () => SchemaType.UNDISCRIMINATED_UNION
  };
  return {
    ...maybeSkipValidation(baseSchema),
    ...getSchemaUtils(baseSchema)
  };
}
async function validateAndTransformUndiscriminatedUnion(transform2, schemas) {
  const errors = [];
  for (const [index, schema] of schemas.entries()) {
    const transformed = await transform2(schema);
    if (transformed.ok) {
      return transformed;
    } else {
      for (const error of errors) {
        errors.push({
          path: error.path,
          message: \`[Variant \${index}] \${error.message}\`
        });
      }
    }
  }
  return {
    ok: false,
    errors
  };
}
var init_undiscriminatedUnion = __esm({
  \\"src/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_maybeSkipValidation();
    init_schema_utils();
  }
});

// src/core/schemas/builders/undiscriminated-union/index.ts
var init_undiscriminated_union = __esm({
  \\"src/core/schemas/builders/undiscriminated-union/index.ts\\"() {
    \\"use strict\\";
    init_undiscriminatedUnion();
  }
});

// src/core/schemas/builders/union/discriminant.ts
function discriminant(parsedDiscriminant, rawDiscriminant) {
  return {
    parsedDiscriminant,
    rawDiscriminant
  };
}
var init_discriminant = __esm({
  \\"src/core/schemas/builders/union/discriminant.ts\\"() {
    \\"use strict\\";
  }
});

// src/core/schemas/builders/union/union.ts
function union(discriminant2, union2) {
  const rawDiscriminant = typeof discriminant2 === \\"string\\" ? discriminant2 : discriminant2.rawDiscriminant;
  const parsedDiscriminant = typeof discriminant2 === \\"string\\" ? discriminant2 : discriminant2.parsedDiscriminant;
  const discriminantValueSchema = enum_(keys(union2));
  const baseSchema = {
    parse: async (raw, opts) => {
      return transformAndValidateUnion({
        value: raw,
        discriminant: rawDiscriminant,
        transformedDiscriminant: parsedDiscriminant,
        transformDiscriminantValue: (discriminantValue) => discriminantValueSchema.parse(discriminantValue, {
          allowUnrecognizedEnumValues: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
          breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], rawDiscriminant]
        }),
        getAdditionalPropertiesSchema: (discriminantValue) => union2[discriminantValue],
        allowUnrecognizedUnionMembers: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
        transformAdditionalProperties: (additionalProperties, additionalPropertiesSchema) => additionalPropertiesSchema.parse(additionalProperties, opts),
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    },
    json: async (parsed, opts) => {
      return transformAndValidateUnion({
        value: parsed,
        discriminant: parsedDiscriminant,
        transformedDiscriminant: rawDiscriminant,
        transformDiscriminantValue: (discriminantValue) => discriminantValueSchema.json(discriminantValue, {
          allowUnrecognizedEnumValues: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
          breadcrumbsPrefix: [...(opts == null ? void 0 : opts.breadcrumbsPrefix) ?? [], parsedDiscriminant]
        }),
        getAdditionalPropertiesSchema: (discriminantValue) => union2[discriminantValue],
        allowUnrecognizedUnionMembers: opts == null ? void 0 : opts.allowUnrecognizedUnionMembers,
        transformAdditionalProperties: (additionalProperties, additionalPropertiesSchema) => additionalPropertiesSchema.json(additionalProperties, opts),
        breadcrumbsPrefix: opts == null ? void 0 : opts.breadcrumbsPrefix
      });
    },
    getType: () => SchemaType.UNION
  };
  return {
    ...maybeSkipValidation(baseSchema),
    ...getSchemaUtils(baseSchema),
    ...getObjectLikeUtils(baseSchema)
  };
}
async function transformAndValidateUnion({
  value,
  discriminant: discriminant2,
  transformedDiscriminant,
  transformDiscriminantValue,
  getAdditionalPropertiesSchema,
  allowUnrecognizedUnionMembers = false,
  transformAdditionalProperties,
  breadcrumbsPrefix = []
}) {
  if (!isPlainObject(value)) {
    return {
      ok: false,
      errors: [
        {
          path: breadcrumbsPrefix,
          message: getErrorMessageForIncorrectType(value, \\"object\\")
        }
      ]
    };
  }
  const { [discriminant2]: discriminantValue, ...additionalProperties } = value;
  if (discriminantValue == null) {
    return {
      ok: false,
      errors: [
        {
          path: breadcrumbsPrefix,
          message: \`Missing discriminant (\\"\${discriminant2}\\")\`
        }
      ]
    };
  }
  const transformedDiscriminantValue = await transformDiscriminantValue(discriminantValue);
  if (!transformedDiscriminantValue.ok) {
    return {
      ok: false,
      errors: transformedDiscriminantValue.errors
    };
  }
  const additionalPropertiesSchema = getAdditionalPropertiesSchema(transformedDiscriminantValue.value);
  if (additionalPropertiesSchema == null) {
    if (allowUnrecognizedUnionMembers) {
      return {
        ok: true,
        value: {
          [transformedDiscriminant]: transformedDiscriminantValue.value,
          ...additionalProperties
        }
      };
    } else {
      return {
        ok: false,
        errors: [
          {
            path: [...breadcrumbsPrefix, discriminant2],
            message: \\"Unexpected discriminant value\\"
          }
        ]
      };
    }
  }
  const transformedAdditionalProperties = await transformAdditionalProperties(
    additionalProperties,
    additionalPropertiesSchema
  );
  if (!transformedAdditionalProperties.ok) {
    return transformedAdditionalProperties;
  }
  return {
    ok: true,
    value: {
      [transformedDiscriminant]: discriminantValue,
      ...transformedAdditionalProperties.value
    }
  };
}
var init_union = __esm({
  \\"src/core/schemas/builders/union/union.ts\\"() {
    \\"use strict\\";
    init_Schema();
    init_getErrorMessageForIncorrectType();
    init_isPlainObject();
    init_keys();
    init_maybeSkipValidation();
    init_enum2();
    init_object_like();
    init_schema_utils();
  }
});

// src/core/schemas/builders/union/index.ts
var init_union2 = __esm({
  \\"src/core/schemas/builders/union/index.ts\\"() {
    \\"use strict\\";
    init_discriminant();
    init_union();
  }
});

// src/core/schemas/builders/index.ts
var init_builders = __esm({
  \\"src/core/schemas/builders/index.ts\\"() {
    \\"use strict\\";
    init_date2();
    init_enum2();
    init_lazy2();
    init_list2();
    init_literals();
    init_object2();
    init_object_like();
    init_primitives();
    init_record2();
    init_schema_utils();
    init_set2();
    init_undiscriminated_union();
    init_union2();
  }
});

// src/core/schemas/index.ts
var schemas_exports = {};
__export(schemas_exports, {
  JsonError: () => JsonError,
  ParseError: () => ParseError,
  any: () => any,
  boolean: () => boolean,
  date: () => date,
  discriminant: () => discriminant,
  enum_: () => enum_,
  getObjectLikeUtils: () => getObjectLikeUtils,
  getObjectUtils: () => getObjectUtils,
  getSchemaUtils: () => getSchemaUtils,
  isProperty: () => isProperty,
  lazy: () => lazy,
  lazyObject: () => lazyObject,
  list: () => list,
  number: () => number,
  object: () => object,
  optional: () => optional,
  property: () => property,
  record: () => record,
  set: () => set,
  string: () => string,
  stringLiteral: () => stringLiteral,
  transform: () => transform,
  undiscriminatedUnion: () => undiscriminatedUnion,
  union: () => union,
  unknown: () => unknown,
  withParsedProperties: () => withParsedProperties
});
var init_schemas = __esm({
  \\"src/core/schemas/index.ts\\"() {
    \\"use strict\\";
    init_builders();
  }
});

// src/core/index.ts
var init_core = __esm({
  \\"src/core/index.ts\\"() {
    \\"use strict\\";
    init_fetcher();
    init_auth();
    init_schemas();
  }
});

// src/serialization/resources/remoteGen/types/RemoteGenJobId.ts
var RemoteGenJobId2;
var init_RemoteGenJobId2 = __esm({
  \\"src/serialization/resources/remoteGen/types/RemoteGenJobId.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    RemoteGenJobId2 = schemas_exports.string().transform({
      transform: RemoteGenJobId,
      untransform: (value) => value
    });
  }
});

// src/serialization/resources/remoteGen/types/RemoteGenTaskId.ts
var RemoteGenTaskId2;
var init_RemoteGenTaskId2 = __esm({
  \\"src/serialization/resources/remoteGen/types/RemoteGenTaskId.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    RemoteGenTaskId2 = schemas_exports.string().transform({
      transform: RemoteGenTaskId,
      untransform: (value) => value
    });
  }
});

// src/serialization/resources/remoteGen/types/GeneratorIdAndVersion.ts
var GeneratorIdAndVersion;
var init_GeneratorIdAndVersion2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GeneratorIdAndVersion.ts\\"() {
    \\"use strict\\";
    init_core();
    GeneratorIdAndVersion = schemas_exports.object({
      id: schemas_exports.string(),
      version: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/GeneratorConfig.ts
var GeneratorConfig;
var init_GeneratorConfig2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GeneratorConfig.ts\\"() {
    \\"use strict\\";
    init_core();
    GeneratorConfig = schemas_exports.object({
      id: schemas_exports.string(),
      version: schemas_exports.string(),
      customConfig: schemas_exports.unknown(),
      willDownloadFiles: schemas_exports.boolean(),
      outputs: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorOutputs)
    });
  }
});

// src/serialization/resources/remoteGen/types/GeneratorConfigV2.ts
var GeneratorConfigV2;
var init_GeneratorConfigV22 = __esm({
  \\"src/serialization/resources/remoteGen/types/GeneratorConfigV2.ts\\"() {
    \\"use strict\\";
    init_core();
    GeneratorConfigV2 = schemas_exports.object({
      id: schemas_exports.string(),
      version: schemas_exports.string(),
      customConfig: schemas_exports.unknown(),
      outputMode: schemas_exports.lazy(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).OutputMode)
    });
  }
});

// src/serialization/resources/remoteGen/types/OutputMode.ts
var OutputMode2;
var init_OutputMode2 = __esm({
  \\"src/serialization/resources/remoteGen/types/OutputMode.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    OutputMode2 = schemas_exports.union(\\"type\\", {
      publish: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).PublishOutputMode),
      publishV2: schemas_exports.object({
        publishV2: schemas_exports.lazy(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).PublishOutputModeV2)
      }),
      downloadFiles: schemas_exports.object({}),
      github: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).GithubOutputMode)
    }).transform({
      transform: (value) => {
        switch (value.type) {
          case \\"publish\\":
            return OutputMode.publish(value);
          case \\"publishV2\\":
            return OutputMode.publishV2(value.publishV2);
          case \\"downloadFiles\\":
            return OutputMode.downloadFiles();
          case \\"github\\":
            return OutputMode.github(value);
          default:
            return OutputMode._unknown(value);
        }
      },
      untransform: ({ _visit, ...value }) => value
    });
  }
});

// src/serialization/resources/remoteGen/types/PublishOutputMode.ts
var PublishOutputMode;
var init_PublishOutputMode2 = __esm({
  \\"src/serialization/resources/remoteGen/types/PublishOutputMode.ts\\"() {
    \\"use strict\\";
    init_core();
    PublishOutputMode = schemas_exports.object({
      registryOverrides: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).RegistryOverrides)
    });
  }
});

// src/serialization/resources/remoteGen/types/PublishOutputModeV2.ts
var PublishOutputModeV22;
var init_PublishOutputModeV22 = __esm({
  \\"src/serialization/resources/remoteGen/types/PublishOutputModeV2.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    PublishOutputModeV22 = schemas_exports.union(\\"type\\", {
      npmOverride: schemas_exports.object({
        npmOverride: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).NpmOutput).optional()
      }),
      mavenOverride: schemas_exports.object({
        mavenOverride: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).MavenOutput).optional()
      }),
      postman: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).PostmanOutput)
    }).transform({
      transform: (value) => {
        switch (value.type) {
          case \\"npmOverride\\":
            return PublishOutputModeV2.npmOverride(value.npmOverride);
          case \\"mavenOverride\\":
            return PublishOutputModeV2.mavenOverride(value.mavenOverride);
          case \\"postman\\":
            return PublishOutputModeV2.postman(value);
          default:
            return PublishOutputModeV2._unknown(value);
        }
      },
      untransform: ({ _visit, ...value }) => value
    });
  }
});

// src/serialization/resources/remoteGen/types/RegistryOverrides.ts
var RegistryOverrides;
var init_RegistryOverrides2 = __esm({
  \\"src/serialization/resources/remoteGen/types/RegistryOverrides.ts\\"() {
    \\"use strict\\";
    init_core();
    RegistryOverrides = schemas_exports.object({
      npm: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).NpmOutput).optional(),
      maven: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).MavenOutput).optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/GeneratorOutputs.ts
var GeneratorOutputs;
var init_GeneratorOutputs2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GeneratorOutputs.ts\\"() {
    \\"use strict\\";
    init_core();
    GeneratorOutputs = schemas_exports.object({
      npm: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).NpmOutput).optional(),
      maven: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).MavenOutput).optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/NpmOutput.ts
var NpmOutput;
var init_NpmOutput2 = __esm({
  \\"src/serialization/resources/remoteGen/types/NpmOutput.ts\\"() {
    \\"use strict\\";
    init_core();
    NpmOutput = schemas_exports.object({
      registryUrl: schemas_exports.string(),
      packageName: schemas_exports.string(),
      token: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/MavenOutput.ts
var MavenOutput;
var init_MavenOutput2 = __esm({
  \\"src/serialization/resources/remoteGen/types/MavenOutput.ts\\"() {
    \\"use strict\\";
    init_core();
    MavenOutput = schemas_exports.object({
      registryUrl: schemas_exports.string(),
      username: schemas_exports.string(),
      password: schemas_exports.string(),
      coordinate: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/PostmanOutput.ts
var PostmanOutput;
var init_PostmanOutput2 = __esm({
  \\"src/serialization/resources/remoteGen/types/PostmanOutput.ts\\"() {
    \\"use strict\\";
    init_core();
    PostmanOutput = schemas_exports.object({
      apiKey: schemas_exports.string(),
      workspaceId: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/GithubOutputMode.ts
var GithubOutputMode;
var init_GithubOutputMode2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GithubOutputMode.ts\\"() {
    \\"use strict\\";
    init_core();
    GithubOutputMode = schemas_exports.object({
      owner: schemas_exports.string(),
      repo: schemas_exports.string(),
      publishInfo: schemas_exports.lazy(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).GithubPublishInfo).optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/GithubPublishInfo.ts
var GithubPublishInfo2;
var init_GithubPublishInfo2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GithubPublishInfo.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    GithubPublishInfo2 = schemas_exports.union(\\"type\\", {
      npm: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).NpmOutputWithOptionalToken),
      maven: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).MavenOutputWithOptionalCreds),
      postman: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).PostmanOutput)
    }).transform({
      transform: (value) => {
        switch (value.type) {
          case \\"npm\\":
            return GithubPublishInfo.npm(value);
          case \\"maven\\":
            return GithubPublishInfo.maven(value);
          case \\"postman\\":
            return GithubPublishInfo.postman(value);
          default:
            return GithubPublishInfo._unknown(value);
        }
      },
      untransform: ({ _visit, ...value }) => value
    });
  }
});

// src/serialization/resources/remoteGen/types/NpmOutputWithOptionalToken.ts
var NpmOutputWithOptionalToken;
var init_NpmOutputWithOptionalToken2 = __esm({
  \\"src/serialization/resources/remoteGen/types/NpmOutputWithOptionalToken.ts\\"() {
    \\"use strict\\";
    init_core();
    NpmOutputWithOptionalToken = schemas_exports.object({
      registryUrl: schemas_exports.string(),
      packageName: schemas_exports.string(),
      token: schemas_exports.string().optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/MavenOutputWithOptionalCreds.ts
var MavenOutputWithOptionalCreds;
var init_MavenOutputWithOptionalCreds2 = __esm({
  \\"src/serialization/resources/remoteGen/types/MavenOutputWithOptionalCreds.ts\\"() {
    \\"use strict\\";
    init_core();
    MavenOutputWithOptionalCreds = schemas_exports.object({
      registryUrl: schemas_exports.string(),
      coordinate: schemas_exports.string(),
      credentials: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).UsernamePassword).optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/UsernamePassword.ts
var UsernamePassword;
var init_UsernamePassword2 = __esm({
  \\"src/serialization/resources/remoteGen/types/UsernamePassword.ts\\"() {
    \\"use strict\\";
    init_core();
    UsernamePassword = schemas_exports.object({
      username: schemas_exports.string(),
      password: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/Task.ts
var Task;
var init_Task2 = __esm({
  \\"src/serialization/resources/remoteGen/types/Task.ts\\"() {
    \\"use strict\\";
    init_core();
    Task = schemas_exports.object({
      status: schemas_exports.lazy(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).TaskStatus),
      packages: schemas_exports.list(schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).Package)),
      logs: schemas_exports.list(schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).TaskLog))
    });
  }
});

// src/serialization/resources/remoteGen/types/TaskStatus.ts
var TaskStatus2;
var init_TaskStatus2 = __esm({
  \\"src/serialization/resources/remoteGen/types/TaskStatus.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    TaskStatus2 = schemas_exports.union(schemas_exports.discriminant(\\"type\\", \\"_type\\"), {
      notStarted: schemas_exports.object({}),
      running: schemas_exports.object({}),
      failed: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).FailedTaskStatus),
      finished: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).FinishedTaskStatus)
    }).transform({
      transform: (value) => {
        switch (value.type) {
          case \\"notStarted\\":
            return TaskStatus.notStarted();
          case \\"running\\":
            return TaskStatus.running();
          case \\"failed\\":
            return TaskStatus.failed(value);
          case \\"finished\\":
            return TaskStatus.finished(value);
          default:
            return TaskStatus._unknown(value);
        }
      },
      untransform: ({ _visit, ...value }) => value
    });
  }
});

// src/serialization/resources/remoteGen/types/FailedTaskStatus.ts
var FailedTaskStatus;
var init_FailedTaskStatus2 = __esm({
  \\"src/serialization/resources/remoteGen/types/FailedTaskStatus.ts\\"() {
    \\"use strict\\";
    init_core();
    FailedTaskStatus = schemas_exports.object({
      message: schemas_exports.string(),
      s3PreSignedReadUrl: schemas_exports.string().optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/FinishedTaskStatus.ts
var FinishedTaskStatus;
var init_FinishedTaskStatus2 = __esm({
  \\"src/serialization/resources/remoteGen/types/FinishedTaskStatus.ts\\"() {
    \\"use strict\\";
    init_core();
    FinishedTaskStatus = schemas_exports.object({
      hasFilesToDownload: schemas_exports.boolean(),
      s3PreSignedReadUrl: schemas_exports.string(),
      s3PreSignedReadUrlV2: schemas_exports.string().optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/TaskLog.ts
var TaskLog;
var init_TaskLog2 = __esm({
  \\"src/serialization/resources/remoteGen/types/TaskLog.ts\\"() {
    \\"use strict\\";
    init_core();
    TaskLog = schemas_exports.object({
      level: schemas_exports.lazy(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).LogLevel),
      message: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/LogLevel.ts
var LogLevel2;
var init_LogLevel2 = __esm({
  \\"src/serialization/resources/remoteGen/types/LogLevel.ts\\"() {
    \\"use strict\\";
    init_core();
    LogLevel2 = schemas_exports.enum_([
      \\"DEBUG\\",
      \\"INFO\\",
      \\"WARN\\",
      \\"ERROR\\"
    ]);
  }
});

// src/serialization/resources/remoteGen/types/Package.ts
var Package;
var init_Package2 = __esm({
  \\"src/serialization/resources/remoteGen/types/Package.ts\\"() {
    \\"use strict\\";
    init_core();
    Package = schemas_exports.object({
      coordinate: schemas_exports.lazy(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).PackageCoordinate),
      status: schemas_exports.lazy(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).PackagePublishStatus)
    });
  }
});

// src/serialization/resources/remoteGen/types/PackagePublishStatus.ts
var PackagePublishStatus2;
var init_PackagePublishStatus2 = __esm({
  \\"src/serialization/resources/remoteGen/types/PackagePublishStatus.ts\\"() {
    \\"use strict\\";
    init_core();
    PackagePublishStatus2 = schemas_exports.enum_([\\"NOT_STARTED_PUBLISHING\\", \\"PUBLISHING\\", \\"PUBLISHED\\", \\"FAILED_TO_PUBLISH\\"]);
  }
});

// src/serialization/resources/remoteGen/types/PackageCoordinate.ts
var PackageCoordinate2;
var init_PackageCoordinate2 = __esm({
  \\"src/serialization/resources/remoteGen/types/PackageCoordinate.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    PackageCoordinate2 = schemas_exports.union(schemas_exports.discriminant(\\"type\\", \\"_type\\"), {
      npm: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).NpmCoordinate),
      maven: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).MavenCoordinate),
      pypi: schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).PypiCoordinate)
    }).transform({
      transform: (value) => {
        switch (value.type) {
          case \\"npm\\":
            return PackageCoordinate.npm(value);
          case \\"maven\\":
            return PackageCoordinate.maven(value);
          case \\"pypi\\":
            return PackageCoordinate.pypi(value);
          default:
            return PackageCoordinate._unknown(value);
        }
      },
      untransform: ({ _visit, ...value }) => value
    });
  }
});

// src/serialization/resources/remoteGen/types/NpmCoordinate.ts
var NpmCoordinate;
var init_NpmCoordinate2 = __esm({
  \\"src/serialization/resources/remoteGen/types/NpmCoordinate.ts\\"() {
    \\"use strict\\";
    init_core();
    NpmCoordinate = schemas_exports.object({
      name: schemas_exports.string(),
      version: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/MavenCoordinate.ts
var MavenCoordinate;
var init_MavenCoordinate2 = __esm({
  \\"src/serialization/resources/remoteGen/types/MavenCoordinate.ts\\"() {
    \\"use strict\\";
    init_core();
    MavenCoordinate = schemas_exports.object({
      group: schemas_exports.string(),
      artifact: schemas_exports.string(),
      version: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/PypiCoordinate.ts
var PypiCoordinate;
var init_PypiCoordinate2 = __esm({
  \\"src/serialization/resources/remoteGen/types/PypiCoordinate.ts\\"() {
    \\"use strict\\";
    init_core();
    PypiCoordinate = schemas_exports.object({
      name: schemas_exports.string(),
      version: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/CreateJobResponse.ts
var CreateJobResponse;
var init_CreateJobResponse2 = __esm({
  \\"src/serialization/resources/remoteGen/types/CreateJobResponse.ts\\"() {
    \\"use strict\\";
    init_core();
    CreateJobResponse = schemas_exports.object({
      jobId: schemas_exports.lazy(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).RemoteGenJobId),
      taskIds: schemas_exports.list(schemas_exports.lazy(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).RemoteGenTaskId))
    });
  }
});

// src/serialization/resources/remoteGen/types/GeneratorsDoNotExistErrorBodyType.ts
var GeneratorsDoNotExistErrorBodyType;
var init_GeneratorsDoNotExistErrorBodyType2 = __esm({
  \\"src/serialization/resources/remoteGen/types/GeneratorsDoNotExistErrorBodyType.ts\\"() {
    \\"use strict\\";
    init_core();
    GeneratorsDoNotExistErrorBodyType = schemas_exports.object({
      nonExistentGenerators: schemas_exports.list(
        schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorIdAndVersion)
      )
    });
  }
});

// src/serialization/resources/remoteGen/types/CannotPublishToNpmScopeDetails.ts
var CannotPublishToNpmScopeDetails;
var init_CannotPublishToNpmScopeDetails2 = __esm({
  \\"src/serialization/resources/remoteGen/types/CannotPublishToNpmScopeDetails.ts\\"() {
    \\"use strict\\";
    init_core();
    CannotPublishToNpmScopeDetails = schemas_exports.object({
      generatorId: schemas_exports.string(),
      invalidScope: schemas_exports.string(),
      validScope: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/CannotPublishToMavenGroupDetails.ts
var CannotPublishToMavenGroupDetails;
var init_CannotPublishToMavenGroupDetails2 = __esm({
  \\"src/serialization/resources/remoteGen/types/CannotPublishToMavenGroupDetails.ts\\"() {
    \\"use strict\\";
    init_core();
    CannotPublishToMavenGroupDetails = schemas_exports.object({
      generatorId: schemas_exports.string(),
      invalidGroup: schemas_exports.string(),
      validGroup: schemas_exports.string()
    });
  }
});

// src/serialization/resources/remoteGen/types/InsufficientPermissionsDetails.ts
var InsufficientPermissionsDetails;
var init_InsufficientPermissionsDetails2 = __esm({
  \\"src/serialization/resources/remoteGen/types/InsufficientPermissionsDetails.ts\\"() {
    \\"use strict\\";
    init_core();
    InsufficientPermissionsDetails = schemas_exports.object({
      dummy: schemas_exports.string().optional()
    });
  }
});

// src/serialization/resources/remoteGen/types/index.ts
var init_types2 = __esm({
  \\"src/serialization/resources/remoteGen/types/index.ts\\"() {
    \\"use strict\\";
    init_RemoteGenJobId2();
    init_RemoteGenTaskId2();
    init_GeneratorIdAndVersion2();
    init_GeneratorConfig2();
    init_GeneratorConfigV22();
    init_OutputMode2();
    init_PublishOutputMode2();
    init_PublishOutputModeV22();
    init_RegistryOverrides2();
    init_GeneratorOutputs2();
    init_NpmOutput2();
    init_MavenOutput2();
    init_PostmanOutput2();
    init_GithubOutputMode2();
    init_GithubPublishInfo2();
    init_NpmOutputWithOptionalToken2();
    init_MavenOutputWithOptionalCreds2();
    init_UsernamePassword2();
    init_Task2();
    init_TaskStatus2();
    init_FailedTaskStatus2();
    init_FinishedTaskStatus2();
    init_TaskLog2();
    init_LogLevel2();
    init_Package2();
    init_PackagePublishStatus2();
    init_PackageCoordinate2();
    init_NpmCoordinate2();
    init_MavenCoordinate2();
    init_PypiCoordinate2();
    init_CreateJobResponse2();
    init_GeneratorsDoNotExistErrorBodyType2();
    init_CannotPublishToNpmScopeDetails2();
    init_CannotPublishToMavenGroupDetails2();
    init_InsufficientPermissionsDetails2();
  }
});

// src/serialization/resources/remoteGen/client/createJob.ts
var createJob_exports2 = {};
__export(createJob_exports2, {
  Error: () => Error5
});
var Error5;
var init_createJob2 = __esm({
  \\"src/serialization/resources/remoteGen/client/createJob.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    Error5 = schemas_exports.union(\\"error\\", {
      IllegalApiNameError: schemas_exports.object({}),
      GeneratorsDoNotExistError: schemas_exports.object({
        content: schemas_exports.lazyObject(
          async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorsDoNotExistErrorBodyType
        )
      }),
      CannotPublishToNpmScope: schemas_exports.object({
        content: schemas_exports.lazyObject(
          async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).CannotPublishToNpmScopeDetails
        )
      }),
      CannotPublishToMavenGroup: schemas_exports.object({
        content: schemas_exports.lazyObject(
          async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).CannotPublishToMavenGroupDetails
        )
      }),
      InsufficientPermissions: schemas_exports.object({
        content: schemas_exports.lazyObject(
          async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).InsufficientPermissionsDetails
        )
      })
    }).transform({
      transform: (value) => {
        switch (value.error) {
          case \\"IllegalApiNameError\\":
            return remoteGen_exports.createJob.Error.illegalApiNameError();
          case \\"GeneratorsDoNotExistError\\":
            return remoteGen_exports.createJob.Error.generatorsDoNotExistError(value.content);
          case \\"CannotPublishToNpmScope\\":
            return remoteGen_exports.createJob.Error.cannotPublishToNpmScope(value.content);
          case \\"CannotPublishToMavenGroup\\":
            return remoteGen_exports.createJob.Error.cannotPublishToMavenGroup(value.content);
          case \\"InsufficientPermissions\\":
            return remoteGen_exports.createJob.Error.insufficientPermissions(value.content);
        }
      },
      untransform: ({ _visit, ...value }) => value
    });
  }
});

// src/serialization/resources/remoteGen/client/createJobV2.ts
var createJobV2_exports2 = {};
__export(createJobV2_exports2, {
  Error: () => Error6
});
var Error6;
var init_createJobV22 = __esm({
  \\"src/serialization/resources/remoteGen/client/createJobV2.ts\\"() {
    \\"use strict\\";
    init_api();
    init_core();
    Error6 = schemas_exports.union(\\"error\\", {
      IllegalApiNameError: schemas_exports.object({}),
      GeneratorsDoNotExistError: schemas_exports.object({
        content: schemas_exports.lazyObject(
          async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorsDoNotExistErrorBodyType
        )
      }),
      CannotPublishToNpmScope: schemas_exports.object({
        content: schemas_exports.lazyObject(
          async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).CannotPublishToNpmScopeDetails
        )
      }),
      CannotPublishToMavenGroup: schemas_exports.object({
        content: schemas_exports.lazyObject(
          async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).CannotPublishToMavenGroupDetails
        )
      }),
      InsufficientPermissions: schemas_exports.object({
        content: schemas_exports.lazyObject(
          async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).InsufficientPermissionsDetails
        )
      })
    }).transform({
      transform: (value) => {
        switch (value.error) {
          case \\"IllegalApiNameError\\":
            return remoteGen_exports.createJobV2.Error.illegalApiNameError();
          case \\"GeneratorsDoNotExistError\\":
            return remoteGen_exports.createJobV2.Error.generatorsDoNotExistError(value.content);
          case \\"CannotPublishToNpmScope\\":
            return remoteGen_exports.createJobV2.Error.cannotPublishToNpmScope(value.content);
          case \\"CannotPublishToMavenGroup\\":
            return remoteGen_exports.createJobV2.Error.cannotPublishToMavenGroup(value.content);
          case \\"InsufficientPermissions\\":
            return remoteGen_exports.createJobV2.Error.insufficientPermissions(value.content);
        }
      },
      untransform: ({ _visit, ...value }) => value
    });
  }
});

// src/serialization/resources/remoteGen/client/getJobStatus.ts
var getJobStatus_exports2 = {};
__export(getJobStatus_exports2, {
  Response: () => Response
});
var Response;
var init_getJobStatus2 = __esm({
  \\"src/serialization/resources/remoteGen/client/getJobStatus.ts\\"() {
    \\"use strict\\";
    init_core();
    Response = schemas_exports.record(
      schemas_exports.lazy(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).RemoteGenTaskId),
      schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).Task)
    );
  }
});

// src/serialization/resources/remoteGen/client/requests/CreateJobRequest.ts
var CreateJobRequest;
var init_CreateJobRequest = __esm({
  \\"src/serialization/resources/remoteGen/client/requests/CreateJobRequest.ts\\"() {
    \\"use strict\\";
    init_core();
    CreateJobRequest = schemas_exports.object({
      apiName: schemas_exports.string(),
      organizationName: schemas_exports.string(),
      version: schemas_exports.string().optional(),
      generators: schemas_exports.list(
        schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorConfig)
      )
    });
  }
});

// src/serialization/resources/remoteGen/client/requests/CreateJobRequestV2.ts
var CreateJobRequestV2;
var init_CreateJobRequestV2 = __esm({
  \\"src/serialization/resources/remoteGen/client/requests/CreateJobRequestV2.ts\\"() {
    \\"use strict\\";
    init_core();
    CreateJobRequestV2 = schemas_exports.object({
      apiName: schemas_exports.string(),
      organizationName: schemas_exports.string(),
      version: schemas_exports.string().optional(),
      generators: schemas_exports.list(
        schemas_exports.lazyObject(async () => (await Promise.resolve().then(() => (init_serialization(), serialization_exports))).GeneratorConfigV2)
      ),
      uploadToS3: schemas_exports.boolean().optional()
    });
  }
});

// src/serialization/resources/remoteGen/client/requests/index.ts
var init_requests2 = __esm({
  \\"src/serialization/resources/remoteGen/client/requests/index.ts\\"() {
    \\"use strict\\";
    init_CreateJobRequest();
    init_CreateJobRequestV2();
  }
});

// src/serialization/resources/remoteGen/client/index.ts
var init_client4 = __esm({
  \\"src/serialization/resources/remoteGen/client/index.ts\\"() {
    \\"use strict\\";
    init_createJob2();
    init_createJobV22();
    init_getJobStatus2();
    init_requests2();
  }
});

// src/serialization/resources/remoteGen/index.ts
var remoteGen_exports2 = {};
__export(remoteGen_exports2, {
  CannotPublishToMavenGroupDetails: () => CannotPublishToMavenGroupDetails,
  CannotPublishToNpmScopeDetails: () => CannotPublishToNpmScopeDetails,
  CreateJobRequest: () => CreateJobRequest,
  CreateJobRequestV2: () => CreateJobRequestV2,
  CreateJobResponse: () => CreateJobResponse,
  FailedTaskStatus: () => FailedTaskStatus,
  FinishedTaskStatus: () => FinishedTaskStatus,
  GeneratorConfig: () => GeneratorConfig,
  GeneratorConfigV2: () => GeneratorConfigV2,
  GeneratorIdAndVersion: () => GeneratorIdAndVersion,
  GeneratorOutputs: () => GeneratorOutputs,
  GeneratorsDoNotExistErrorBodyType: () => GeneratorsDoNotExistErrorBodyType,
  GithubOutputMode: () => GithubOutputMode,
  GithubPublishInfo: () => GithubPublishInfo2,
  InsufficientPermissionsDetails: () => InsufficientPermissionsDetails,
  LogLevel: () => LogLevel2,
  MavenCoordinate: () => MavenCoordinate,
  MavenOutput: () => MavenOutput,
  MavenOutputWithOptionalCreds: () => MavenOutputWithOptionalCreds,
  NpmCoordinate: () => NpmCoordinate,
  NpmOutput: () => NpmOutput,
  NpmOutputWithOptionalToken: () => NpmOutputWithOptionalToken,
  OutputMode: () => OutputMode2,
  Package: () => Package,
  PackageCoordinate: () => PackageCoordinate2,
  PackagePublishStatus: () => PackagePublishStatus2,
  PostmanOutput: () => PostmanOutput,
  PublishOutputMode: () => PublishOutputMode,
  PublishOutputModeV2: () => PublishOutputModeV22,
  PypiCoordinate: () => PypiCoordinate,
  RegistryOverrides: () => RegistryOverrides,
  RemoteGenJobId: () => RemoteGenJobId2,
  RemoteGenTaskId: () => RemoteGenTaskId2,
  Task: () => Task,
  TaskLog: () => TaskLog,
  TaskStatus: () => TaskStatus2,
  UsernamePassword: () => UsernamePassword,
  createJob: () => createJob_exports2,
  createJobV2: () => createJobV2_exports2,
  getJobStatus: () => getJobStatus_exports2
});
var init_remoteGen2 = __esm({
  \\"src/serialization/resources/remoteGen/index.ts\\"() {
    \\"use strict\\";
    init_types2();
    init_client4();
  }
});

// src/serialization/resources/index.ts
var init_resources2 = __esm({
  \\"src/serialization/resources/index.ts\\"() {
    \\"use strict\\";
    init_remoteGen2();
    init_types2();
    init_requests2();
  }
});

// src/serialization/index.ts
var serialization_exports = {};
__export(serialization_exports, {
  CannotPublishToMavenGroupDetails: () => CannotPublishToMavenGroupDetails,
  CannotPublishToNpmScopeDetails: () => CannotPublishToNpmScopeDetails,
  CreateJobRequest: () => CreateJobRequest,
  CreateJobRequestV2: () => CreateJobRequestV2,
  CreateJobResponse: () => CreateJobResponse,
  FailedTaskStatus: () => FailedTaskStatus,
  FinishedTaskStatus: () => FinishedTaskStatus,
  GeneratorConfig: () => GeneratorConfig,
  GeneratorConfigV2: () => GeneratorConfigV2,
  GeneratorIdAndVersion: () => GeneratorIdAndVersion,
  GeneratorOutputs: () => GeneratorOutputs,
  GeneratorsDoNotExistErrorBodyType: () => GeneratorsDoNotExistErrorBodyType,
  GithubOutputMode: () => GithubOutputMode,
  GithubPublishInfo: () => GithubPublishInfo2,
  InsufficientPermissionsDetails: () => InsufficientPermissionsDetails,
  LogLevel: () => LogLevel2,
  MavenCoordinate: () => MavenCoordinate,
  MavenOutput: () => MavenOutput,
  MavenOutputWithOptionalCreds: () => MavenOutputWithOptionalCreds,
  NpmCoordinate: () => NpmCoordinate,
  NpmOutput: () => NpmOutput,
  NpmOutputWithOptionalToken: () => NpmOutputWithOptionalToken,
  OutputMode: () => OutputMode2,
  Package: () => Package,
  PackageCoordinate: () => PackageCoordinate2,
  PackagePublishStatus: () => PackagePublishStatus2,
  PostmanOutput: () => PostmanOutput,
  PublishOutputMode: () => PublishOutputMode,
  PublishOutputModeV2: () => PublishOutputModeV22,
  PypiCoordinate: () => PypiCoordinate,
  RegistryOverrides: () => RegistryOverrides,
  RemoteGenJobId: () => RemoteGenJobId2,
  RemoteGenTaskId: () => RemoteGenTaskId2,
  Task: () => Task,
  TaskLog: () => TaskLog,
  TaskStatus: () => TaskStatus2,
  UsernamePassword: () => UsernamePassword,
  remoteGen: () => remoteGen_exports2
});
module.exports = __toCommonJS(serialization_exports);
var init_serialization = __esm({
  \\"src/serialization/index.ts\\"() {
    init_resources2();
  }
});
init_serialization();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CannotPublishToMavenGroupDetails,
  CannotPublishToNpmScopeDetails,
  CreateJobRequest,
  CreateJobRequestV2,
  CreateJobResponse,
  FailedTaskStatus,
  FinishedTaskStatus,
  GeneratorConfig,
  GeneratorConfigV2,
  GeneratorIdAndVersion,
  GeneratorOutputs,
  GeneratorsDoNotExistErrorBodyType,
  GithubOutputMode,
  GithubPublishInfo,
  InsufficientPermissionsDetails,
  LogLevel,
  MavenCoordinate,
  MavenOutput,
  MavenOutputWithOptionalCreds,
  NpmCoordinate,
  NpmOutput,
  NpmOutputWithOptionalToken,
  OutputMode,
  Package,
  PackageCoordinate,
  PackagePublishStatus,
  PostmanOutput,
  PublishOutputMode,
  PublishOutputModeV2,
  PypiCoordinate,
  RegistryOverrides,
  RemoteGenJobId,
  RemoteGenTaskId,
  Task,
  TaskLog,
  TaskStatus,
  UsernamePassword,
  remoteGen
});
",
            "name": "serialization.js",
            "type": "file",
          },
        ],
        "name": "node",
        "type": "directory",
      },
    ],
    "name": "dist",
    "type": "directory",
  },
  Object {
    "contents": "{
    \\"name\\": \\"@fern-fern/fiddle-sdk\\",
    \\"version\\": \\"0.0.0\\",
    \\"files\\": [
        \\"dist\\",
        \\"types\\",
        \\"core.d.ts\\",
        \\"serialization.d.ts\\"
    ],
    \\"exports\\": {
        \\".\\": {
            \\"node\\": \\"./dist/node/index.js\\",
            \\"import\\": \\"./dist/browser/esm/index.js\\",
            \\"require\\": \\"./dist/browser/cjs/index.js\\",
            \\"default\\": \\"./dist/browser/cjs/index.js\\",
            \\"types\\": \\"./types/index.d.ts\\"
        },
        \\"./core\\": {
            \\"node\\": \\"./dist/node/core.js\\",
            \\"import\\": \\"./dist/browser/esm/core.js\\",
            \\"require\\": \\"./dist/browser/cjs/core.js\\",
            \\"default\\": \\"./dist/browser/cjs/core.js\\",
            \\"types\\": \\"./types/core/index.d.ts\\"
        },
        \\"./serialization\\": {
            \\"node\\": \\"./dist/node/serialization.js\\",
            \\"import\\": \\"./dist/browser/esm/serialization.js\\",
            \\"require\\": \\"./dist/browser/cjs/serialization.js\\",
            \\"default\\": \\"./dist/browser/cjs/serialization.js\\",
            \\"types\\": \\"./types/serialization/index.d.ts\\"
        }
    },
    \\"types\\": \\"./types/index.d.ts\\",
    \\"scripts\\": {
        \\"format\\": \\"prettier --write 'src/**/*.ts'\\",
        \\"compile\\": \\"tsc\\",
        \\"bundle\\": \\"node build.js\\",
        \\"build\\": \\"yarn compile && yarn bundle\\"
    },
    \\"dependencies\\": {
        \\"@types/url-join\\": \\"4.0.1\\",
        \\"@ungap/url-search-params\\": \\"0.2.2\\",
        \\"axios\\": \\"1.4.0\\",
        \\"js-base64\\": \\"3.7.2\\",
        \\"lodash-es\\": \\"^4.17.21\\",
        \\"url-join\\": \\"4.0.1\\"
    },
    \\"devDependencies\\": {
        \\"@types/node\\": \\"17.0.33\\",
        \\"esbuild\\": \\"0.16.15\\",
        \\"prettier\\": \\"2.7.1\\",
        \\"typescript\\": \\"4.6.4\\"
    }
}
",
    "name": "package.json",
    "type": "file",
  },
  Object {
    "contents": "// this is needed for older versions of TypeScript
// that don't read the \\"exports\\" field in package.json
export * from \\"./types/serialization\\";
            ",
    "name": "serialization.d.ts",
    "type": "file",
  },
  Object {
    "contents": Array [
      Object {
        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"./core\\";
import { FiddleService } from \\"./api/resources/fiddle/client/Client\\";
import { Health } from \\"./api/resources/health/client/Client\\";
import { RemoteGen } from \\"./api/resources/remoteGen/client/Client\\";
export declare namespace FiddleClient {
    interface Options {
        environment: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
    }
}
export declare class FiddleClient {
    protected readonly _options: FiddleClient.Options;
    constructor(_options: FiddleClient.Options);
    protected _fiddle: FiddleService | undefined;
    get fiddle(): FiddleService;
    protected _health: Health | undefined;
    get health(): Health;
    protected _remoteGen: RemoteGen | undefined;
    get remoteGen(): RemoteGen;
}
",
        "name": "Client.d.ts",
        "type": "file",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "export * from \\"./resources\\";
",
            "name": "index.d.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": Array [
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
import * as Fiddle from \\"../../..\\";
export declare namespace FiddleService {
    interface Options {
        environment: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
    }
}
export declare class FiddleService {
    protected readonly _options: FiddleService.Options;
    constructor(_options: FiddleService.Options);
    test(_requestOptions?: FiddleService.RequestOptions): Promise<core.APIResponse<void, Fiddle.fiddle.test.Error>>;
    protected _getAuthorizationHeader(): Promise<string>;
}
",
                        "name": "Client.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * as test from \\"./test\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Fiddle from \\"../../..\\";
import * as core from \\"../../../../core\\";
export declare type Error = Fiddle.fiddle.test.Error._Unknown;
export declare namespace Error {
    interface _Unknown extends _Utils {
        error: void;
        content: core.Fetcher.Error;
    }
    interface _Utils {
        _visit: <_Result>(visitor: Fiddle.fiddle.test.Error._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        _other: (value: core.Fetcher.Error) => _Result;
    }
}
export declare const Error: {
    readonly _unknown: (fetcherError: core.Fetcher.Error) => Fiddle.fiddle.test.Error._Unknown;
    readonly _visit: <_Result>(value: Fiddle.fiddle.test.Error, visitor: Fiddle.fiddle.test.Error._Visitor<_Result>) => _Result;
};
",
                        "name": "test.d.ts",
                        "type": "file",
                      },
                    ],
                    "name": "client",
                    "type": "directory",
                  },
                  Object {
                    "contents": "export * from \\"./client\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                ],
                "name": "fiddle",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
import * as Fiddle from \\"../../..\\";
export declare namespace Health {
    interface Options {
        environment: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
    }
}
export declare class Health {
    protected readonly _options: Health.Options;
    constructor(_options: Health.Options);
    status(_requestOptions?: Health.RequestOptions): Promise<core.APIResponse<void, Fiddle.health.status.Error>>;
    protected _getAuthorizationHeader(): Promise<string>;
}
",
                        "name": "Client.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * as status from \\"./status\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Fiddle from \\"../../..\\";
import * as core from \\"../../../../core\\";
export declare type Error = Fiddle.health.status.Error._Unknown;
export declare namespace Error {
    interface _Unknown extends _Utils {
        error: void;
        content: core.Fetcher.Error;
    }
    interface _Utils {
        _visit: <_Result>(visitor: Fiddle.health.status.Error._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        _other: (value: core.Fetcher.Error) => _Result;
    }
}
export declare const Error: {
    readonly _unknown: (fetcherError: core.Fetcher.Error) => Fiddle.health.status.Error._Unknown;
    readonly _visit: <_Result>(value: Fiddle.health.status.Error, visitor: Fiddle.health.status.Error._Visitor<_Result>) => _Result;
};
",
                        "name": "status.d.ts",
                        "type": "file",
                      },
                    ],
                    "name": "client",
                    "type": "directory",
                  },
                  Object {
                    "contents": "export * from \\"./client\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                ],
                "name": "health",
                "type": "directory",
              },
              Object {
                "contents": "export * as remoteGen from \\"./remoteGen\\";
export * from \\"./remoteGen/types\\";
export * as fiddle from \\"./fiddle\\";
export * as health from \\"./health\\";
export * from \\"./remoteGen/client/requests\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from \\"../../../../core\\";
import * as Fiddle from \\"../../..\\";
export declare namespace RemoteGen {
    interface Options {
        environment: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
    }
}
export declare class RemoteGen {
    protected readonly _options: RemoteGen.Options;
    constructor(_options: RemoteGen.Options);
    createJob(request: Fiddle.CreateJobRequest, _requestOptions?: RemoteGen.RequestOptions): Promise<core.APIResponse<Fiddle.CreateJobResponse, Fiddle.remoteGen.createJob.Error>>;
    createJobV2(request: Fiddle.CreateJobRequestV2, _requestOptions?: RemoteGen.RequestOptions): Promise<core.APIResponse<Fiddle.CreateJobResponse, Fiddle.remoteGen.createJobV2.Error>>;
    getJobStatus(jobId: Fiddle.RemoteGenJobId, _requestOptions?: RemoteGen.RequestOptions): Promise<core.APIResponse<Record<Fiddle.RemoteGenTaskId, Fiddle.Task>, Fiddle.remoteGen.getJobStatus.Error>>;
    protected _getAuthorizationHeader(): Promise<string>;
}
",
                        "name": "Client.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Fiddle from \\"../../..\\";
import * as core from \\"../../../../core\\";
export declare type Error = Fiddle.remoteGen.createJob.Error.IllegalApiNameError | Fiddle.remoteGen.createJob.Error.GeneratorsDoNotExistError | Fiddle.remoteGen.createJob.Error.CannotPublishToNpmScope | Fiddle.remoteGen.createJob.Error.CannotPublishToMavenGroup | Fiddle.remoteGen.createJob.Error.InsufficientPermissions | Fiddle.remoteGen.createJob.Error._Unknown;
export declare namespace Error {
    interface IllegalApiNameError extends _Utils {
        error: \\"IllegalApiNameError\\";
    }
    interface GeneratorsDoNotExistError extends _Utils {
        error: \\"GeneratorsDoNotExistError\\";
        content: Fiddle.GeneratorsDoNotExistErrorBodyType;
    }
    interface CannotPublishToNpmScope extends _Utils {
        error: \\"CannotPublishToNpmScope\\";
        content: Fiddle.CannotPublishToNpmScopeDetails;
    }
    interface CannotPublishToMavenGroup extends _Utils {
        error: \\"CannotPublishToMavenGroup\\";
        content: Fiddle.CannotPublishToMavenGroupDetails;
    }
    interface InsufficientPermissions extends _Utils {
        error: \\"InsufficientPermissions\\";
        content: Fiddle.InsufficientPermissionsDetails;
    }
    interface _Unknown extends _Utils {
        error: void;
        content: core.Fetcher.Error;
    }
    interface _Utils {
        _visit: <_Result>(visitor: Fiddle.remoteGen.createJob.Error._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        illegalApiNameError: () => _Result;
        generatorsDoNotExistError: (value: Fiddle.GeneratorsDoNotExistErrorBodyType) => _Result;
        cannotPublishToNpmScope: (value: Fiddle.CannotPublishToNpmScopeDetails) => _Result;
        cannotPublishToMavenGroup: (value: Fiddle.CannotPublishToMavenGroupDetails) => _Result;
        insufficientPermissions: (value: Fiddle.InsufficientPermissionsDetails) => _Result;
        _other: (value: core.Fetcher.Error) => _Result;
    }
}
export declare const Error: {
    readonly illegalApiNameError: () => Fiddle.remoteGen.createJob.Error.IllegalApiNameError;
    readonly generatorsDoNotExistError: (value: Fiddle.GeneratorsDoNotExistErrorBodyType) => Fiddle.remoteGen.createJob.Error.GeneratorsDoNotExistError;
    readonly cannotPublishToNpmScope: (value: Fiddle.CannotPublishToNpmScopeDetails) => Fiddle.remoteGen.createJob.Error.CannotPublishToNpmScope;
    readonly cannotPublishToMavenGroup: (value: Fiddle.CannotPublishToMavenGroupDetails) => Fiddle.remoteGen.createJob.Error.CannotPublishToMavenGroup;
    readonly insufficientPermissions: (value: Fiddle.InsufficientPermissionsDetails) => Fiddle.remoteGen.createJob.Error.InsufficientPermissions;
    readonly _unknown: (fetcherError: core.Fetcher.Error) => Fiddle.remoteGen.createJob.Error._Unknown;
    readonly _visit: <_Result>(value: Fiddle.remoteGen.createJob.Error, visitor: Fiddle.remoteGen.createJob.Error._Visitor<_Result>) => _Result;
};
",
                        "name": "createJob.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Fiddle from \\"../../..\\";
import * as core from \\"../../../../core\\";
export declare type Error = Fiddle.remoteGen.createJobV2.Error.IllegalApiNameError | Fiddle.remoteGen.createJobV2.Error.GeneratorsDoNotExistError | Fiddle.remoteGen.createJobV2.Error.CannotPublishToNpmScope | Fiddle.remoteGen.createJobV2.Error.CannotPublishToMavenGroup | Fiddle.remoteGen.createJobV2.Error.InsufficientPermissions | Fiddle.remoteGen.createJobV2.Error._Unknown;
export declare namespace Error {
    interface IllegalApiNameError extends _Utils {
        error: \\"IllegalApiNameError\\";
    }
    interface GeneratorsDoNotExistError extends _Utils {
        error: \\"GeneratorsDoNotExistError\\";
        content: Fiddle.GeneratorsDoNotExistErrorBodyType;
    }
    interface CannotPublishToNpmScope extends _Utils {
        error: \\"CannotPublishToNpmScope\\";
        content: Fiddle.CannotPublishToNpmScopeDetails;
    }
    interface CannotPublishToMavenGroup extends _Utils {
        error: \\"CannotPublishToMavenGroup\\";
        content: Fiddle.CannotPublishToMavenGroupDetails;
    }
    interface InsufficientPermissions extends _Utils {
        error: \\"InsufficientPermissions\\";
        content: Fiddle.InsufficientPermissionsDetails;
    }
    interface _Unknown extends _Utils {
        error: void;
        content: core.Fetcher.Error;
    }
    interface _Utils {
        _visit: <_Result>(visitor: Fiddle.remoteGen.createJobV2.Error._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        illegalApiNameError: () => _Result;
        generatorsDoNotExistError: (value: Fiddle.GeneratorsDoNotExistErrorBodyType) => _Result;
        cannotPublishToNpmScope: (value: Fiddle.CannotPublishToNpmScopeDetails) => _Result;
        cannotPublishToMavenGroup: (value: Fiddle.CannotPublishToMavenGroupDetails) => _Result;
        insufficientPermissions: (value: Fiddle.InsufficientPermissionsDetails) => _Result;
        _other: (value: core.Fetcher.Error) => _Result;
    }
}
export declare const Error: {
    readonly illegalApiNameError: () => Fiddle.remoteGen.createJobV2.Error.IllegalApiNameError;
    readonly generatorsDoNotExistError: (value: Fiddle.GeneratorsDoNotExistErrorBodyType) => Fiddle.remoteGen.createJobV2.Error.GeneratorsDoNotExistError;
    readonly cannotPublishToNpmScope: (value: Fiddle.CannotPublishToNpmScopeDetails) => Fiddle.remoteGen.createJobV2.Error.CannotPublishToNpmScope;
    readonly cannotPublishToMavenGroup: (value: Fiddle.CannotPublishToMavenGroupDetails) => Fiddle.remoteGen.createJobV2.Error.CannotPublishToMavenGroup;
    readonly insufficientPermissions: (value: Fiddle.InsufficientPermissionsDetails) => Fiddle.remoteGen.createJobV2.Error.InsufficientPermissions;
    readonly _unknown: (fetcherError: core.Fetcher.Error) => Fiddle.remoteGen.createJobV2.Error._Unknown;
    readonly _visit: <_Result>(value: Fiddle.remoteGen.createJobV2.Error, visitor: Fiddle.remoteGen.createJobV2.Error._Visitor<_Result>) => _Result;
};
",
                        "name": "createJobV2.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Fiddle from \\"../../..\\";
import * as core from \\"../../../../core\\";
export declare type Error = Fiddle.remoteGen.getJobStatus.Error._Unknown;
export declare namespace Error {
    interface _Unknown extends _Utils {
        error: void;
        content: core.Fetcher.Error;
    }
    interface _Utils {
        _visit: <_Result>(visitor: Fiddle.remoteGen.getJobStatus.Error._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        _other: (value: core.Fetcher.Error) => _Result;
    }
}
export declare const Error: {
    readonly _unknown: (fetcherError: core.Fetcher.Error) => Fiddle.remoteGen.getJobStatus.Error._Unknown;
    readonly _visit: <_Result>(value: Fiddle.remoteGen.getJobStatus.Error, visitor: Fiddle.remoteGen.getJobStatus.Error._Visitor<_Result>) => _Result;
};
",
                        "name": "getJobStatus.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * from \\"./requests\\";
export * as createJob from \\"./createJob\\";
export * as createJobV2 from \\"./createJobV2\\";
export * as getJobStatus from \\"./getJobStatus\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": Array [
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Fiddle from \\"../../../..\\";
export interface CreateJobRequest {
    apiName: string;
    organizationName: string;
    version?: string;
    generators: Fiddle.GeneratorConfig[];
}
",
                            "name": "CreateJobRequest.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Fiddle from \\"../../../..\\";
export interface CreateJobRequestV2 {
    apiName: string;
    organizationName: string;
    version?: string;
    generators: Fiddle.GeneratorConfigV2[];
    /** defaults to False */
    uploadToS3?: boolean;
}
",
                            "name": "CreateJobRequestV2.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "export { CreateJobRequest } from \\"./CreateJobRequest\\";
export { CreateJobRequestV2 } from \\"./CreateJobRequestV2\\";
",
                            "name": "index.d.ts",
                            "type": "file",
                          },
                        ],
                        "name": "requests",
                        "type": "directory",
                      },
                    ],
                    "name": "client",
                    "type": "directory",
                  },
                  Object {
                    "contents": "export * from \\"./types\\";
export * from \\"./client\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface CannotPublishToMavenGroupDetails {
    generatorId: string;
    invalidGroup: string;
    validGroup: string;
}
",
                        "name": "CannotPublishToMavenGroupDetails.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface CannotPublishToNpmScopeDetails {
    generatorId: string;
    invalidScope: string;
    validScope: string;
}
",
                        "name": "CannotPublishToNpmScopeDetails.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Fiddle from \\"../../..\\";
export interface CreateJobResponse {
    jobId: Fiddle.RemoteGenJobId;
    /** The order of this list corresponds to the order of the generators supplied in the request. */
    taskIds: Fiddle.RemoteGenTaskId[];
}
",
                        "name": "CreateJobResponse.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface FailedTaskStatus {
    message: string;
    /** Pre-signed URL that points to a zipfile containing generated code. */
    s3PreSignedReadUrl?: string;
}
",
                        "name": "FailedTaskStatus.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface FinishedTaskStatus {
    /** This field is deprecated. */
    hasFilesToDownload: boolean;
    /** Deprecated (use v2). Pre-signed URL that points to a zipfile containing generated code. */
    s3PreSignedReadUrl: string;
    /** Pre-signed URL that points to a zipfile containing generated code. */
    s3PreSignedReadUrlV2?: string;
}
",
                        "name": "FinishedTaskStatus.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Fiddle from \\"../../..\\";
export interface GeneratorConfig {
    id: string;
    version: string;
    customConfig?: unknown;
    willDownloadFiles: boolean;
    /** Npm and Maven outputs default to fern registries. */
    outputs: Fiddle.GeneratorOutputs;
}
",
                        "name": "GeneratorConfig.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Fiddle from \\"../../..\\";
export interface GeneratorConfigV2 {
    id: string;
    version: string;
    customConfig?: unknown;
    outputMode: Fiddle.OutputMode;
}
",
                        "name": "GeneratorConfigV2.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface GeneratorIdAndVersion {
    id: string;
    version: string;
}
",
                        "name": "GeneratorIdAndVersion.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Fiddle from \\"../../..\\";
export interface GeneratorOutputs {
    npm?: Fiddle.NpmOutput;
    maven?: Fiddle.MavenOutput;
}
",
                        "name": "GeneratorOutputs.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Fiddle from \\"../../..\\";
export interface GeneratorsDoNotExistErrorBodyType {
    nonExistentGenerators: Fiddle.GeneratorIdAndVersion[];
}
",
                        "name": "GeneratorsDoNotExistErrorBodyType.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Fiddle from \\"../../..\\";
export interface GithubOutputMode {
    owner: string;
    repo: string;
    publishInfo?: Fiddle.GithubPublishInfo;
}
",
                        "name": "GithubOutputMode.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Fiddle from \\"../../..\\";
export declare type GithubPublishInfo = Fiddle.GithubPublishInfo.Npm | Fiddle.GithubPublishInfo.Maven | Fiddle.GithubPublishInfo.Postman | Fiddle.GithubPublishInfo._Unknown;
export declare namespace GithubPublishInfo {
    interface Npm extends Fiddle.NpmOutputWithOptionalToken, _Utils {
        type: \\"npm\\";
    }
    interface Maven extends Fiddle.MavenOutputWithOptionalCreds, _Utils {
        type: \\"maven\\";
    }
    interface Postman extends Fiddle.PostmanOutput, _Utils {
        type: \\"postman\\";
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: Fiddle.GithubPublishInfo._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        npm: (value: Fiddle.NpmOutputWithOptionalToken) => _Result;
        maven: (value: Fiddle.MavenOutputWithOptionalCreds) => _Result;
        postman: (value: Fiddle.PostmanOutput) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const GithubPublishInfo: {
    readonly npm: (value: Fiddle.NpmOutputWithOptionalToken) => Fiddle.GithubPublishInfo.Npm;
    readonly maven: (value: Fiddle.MavenOutputWithOptionalCreds) => Fiddle.GithubPublishInfo.Maven;
    readonly postman: (value: Fiddle.PostmanOutput) => Fiddle.GithubPublishInfo.Postman;
    readonly _unknown: (value: {
        type: string;
    }) => Fiddle.GithubPublishInfo._Unknown;
    readonly _visit: <_Result>(value: Fiddle.GithubPublishInfo, visitor: Fiddle.GithubPublishInfo._Visitor<_Result>) => _Result;
};
",
                        "name": "GithubPublishInfo.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface InsufficientPermissionsDetails {
    dummy?: string;
}
",
                        "name": "InsufficientPermissionsDetails.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export declare type LogLevel = \\"DEBUG\\" | \\"INFO\\" | \\"WARN\\" | \\"ERROR\\";
export declare const LogLevel: {
    readonly Debug: \\"DEBUG\\";
    readonly Info: \\"INFO\\";
    readonly Warn: \\"WARN\\";
    readonly Error: \\"ERROR\\";
};
",
                        "name": "LogLevel.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface MavenCoordinate {
    group: string;
    artifact: string;
    version: string;
}
",
                        "name": "MavenCoordinate.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface MavenOutput {
    registryUrl: string;
    username: string;
    password: string;
    coordinate: string;
}
",
                        "name": "MavenOutput.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Fiddle from \\"../../..\\";
export interface MavenOutputWithOptionalCreds {
    registryUrl: string;
    coordinate: string;
    credentials?: Fiddle.UsernamePassword;
}
",
                        "name": "MavenOutputWithOptionalCreds.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface NpmCoordinate {
    name: string;
    version: string;
}
",
                        "name": "NpmCoordinate.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface NpmOutput {
    registryUrl: string;
    packageName: string;
    token: string;
}
",
                        "name": "NpmOutput.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface NpmOutputWithOptionalToken {
    registryUrl: string;
    packageName: string;
    token?: string;
}
",
                        "name": "NpmOutputWithOptionalToken.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Fiddle from \\"../../..\\";
export declare type OutputMode = Fiddle.OutputMode.Publish | Fiddle.OutputMode.PublishV2 | Fiddle.OutputMode.DownloadFiles | Fiddle.OutputMode.Github | Fiddle.OutputMode._Unknown;
export declare namespace OutputMode {
    interface Publish extends Fiddle.PublishOutputMode, _Utils {
        type: \\"publish\\";
    }
    interface PublishV2 extends _Utils {
        type: \\"publishV2\\";
        publishV2: Fiddle.PublishOutputModeV2;
    }
    interface DownloadFiles extends _Utils {
        type: \\"downloadFiles\\";
    }
    interface Github extends Fiddle.GithubOutputMode, _Utils {
        type: \\"github\\";
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: Fiddle.OutputMode._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        publish: (value: Fiddle.PublishOutputMode) => _Result;
        publishV2: (value: Fiddle.PublishOutputModeV2) => _Result;
        downloadFiles: () => _Result;
        github: (value: Fiddle.GithubOutputMode) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const OutputMode: {
    readonly publish: (value: Fiddle.PublishOutputMode) => Fiddle.OutputMode.Publish;
    readonly publishV2: (value: Fiddle.PublishOutputModeV2) => Fiddle.OutputMode.PublishV2;
    readonly downloadFiles: () => Fiddle.OutputMode.DownloadFiles;
    readonly github: (value: Fiddle.GithubOutputMode) => Fiddle.OutputMode.Github;
    readonly _unknown: (value: {
        type: string;
    }) => Fiddle.OutputMode._Unknown;
    readonly _visit: <_Result>(value: Fiddle.OutputMode, visitor: Fiddle.OutputMode._Visitor<_Result>) => _Result;
};
",
                        "name": "OutputMode.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Fiddle from \\"../../..\\";
export interface Package {
    coordinate: Fiddle.PackageCoordinate;
    status: Fiddle.PackagePublishStatus;
}
",
                        "name": "Package.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Fiddle from \\"../../..\\";
export declare type PackageCoordinate = Fiddle.PackageCoordinate.Npm | Fiddle.PackageCoordinate.Maven | Fiddle.PackageCoordinate.Pypi | Fiddle.PackageCoordinate._Unknown;
export declare namespace PackageCoordinate {
    interface Npm extends Fiddle.NpmCoordinate, _Utils {
        type: \\"npm\\";
    }
    interface Maven extends Fiddle.MavenCoordinate, _Utils {
        type: \\"maven\\";
    }
    interface Pypi extends Fiddle.PypiCoordinate, _Utils {
        type: \\"pypi\\";
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: Fiddle.PackageCoordinate._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        npm: (value: Fiddle.NpmCoordinate) => _Result;
        maven: (value: Fiddle.MavenCoordinate) => _Result;
        pypi: (value: Fiddle.PypiCoordinate) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const PackageCoordinate: {
    readonly npm: (value: Fiddle.NpmCoordinate) => Fiddle.PackageCoordinate.Npm;
    readonly maven: (value: Fiddle.MavenCoordinate) => Fiddle.PackageCoordinate.Maven;
    readonly pypi: (value: Fiddle.PypiCoordinate) => Fiddle.PackageCoordinate.Pypi;
    readonly _unknown: (value: {
        type: string;
    }) => Fiddle.PackageCoordinate._Unknown;
    readonly _visit: <_Result>(value: Fiddle.PackageCoordinate, visitor: Fiddle.PackageCoordinate._Visitor<_Result>) => _Result;
};
",
                        "name": "PackageCoordinate.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export declare type PackagePublishStatus = \\"NOT_STARTED_PUBLISHING\\" | \\"PUBLISHING\\" | \\"PUBLISHED\\" | \\"FAILED_TO_PUBLISH\\";
export declare const PackagePublishStatus: {
    readonly NotStartedPublishing: \\"NOT_STARTED_PUBLISHING\\";
    readonly Publishing: \\"PUBLISHING\\";
    readonly Published: \\"PUBLISHED\\";
    readonly FailedToPublish: \\"FAILED_TO_PUBLISH\\";
};
",
                        "name": "PackagePublishStatus.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface PostmanOutput {
    apiKey: string;
    workspaceId: string;
}
",
                        "name": "PostmanOutput.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Fiddle from \\"../../..\\";
export interface PublishOutputMode {
    registryOverrides: Fiddle.RegistryOverrides;
}
",
                        "name": "PublishOutputMode.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Fiddle from \\"../../..\\";
export declare type PublishOutputModeV2 = Fiddle.PublishOutputModeV2.NpmOverride | Fiddle.PublishOutputModeV2.MavenOverride | Fiddle.PublishOutputModeV2.Postman | Fiddle.PublishOutputModeV2._Unknown;
export declare namespace PublishOutputModeV2 {
    interface NpmOverride extends _Utils {
        type: \\"npmOverride\\";
        npmOverride?: Fiddle.NpmOutput;
    }
    interface MavenOverride extends _Utils {
        type: \\"mavenOverride\\";
        mavenOverride?: Fiddle.MavenOutput;
    }
    interface Postman extends Fiddle.PostmanOutput, _Utils {
        type: \\"postman\\";
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: Fiddle.PublishOutputModeV2._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        npmOverride: (value: Fiddle.NpmOutput | undefined) => _Result;
        mavenOverride: (value: Fiddle.MavenOutput | undefined) => _Result;
        postman: (value: Fiddle.PostmanOutput) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const PublishOutputModeV2: {
    readonly npmOverride: (value?: Fiddle.NpmOutput | undefined) => Fiddle.PublishOutputModeV2.NpmOverride;
    readonly mavenOverride: (value?: Fiddle.MavenOutput | undefined) => Fiddle.PublishOutputModeV2.MavenOverride;
    readonly postman: (value: Fiddle.PostmanOutput) => Fiddle.PublishOutputModeV2.Postman;
    readonly _unknown: (value: {
        type: string;
    }) => Fiddle.PublishOutputModeV2._Unknown;
    readonly _visit: <_Result>(value: Fiddle.PublishOutputModeV2, visitor: Fiddle.PublishOutputModeV2._Visitor<_Result>) => _Result;
};
",
                        "name": "PublishOutputModeV2.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface PypiCoordinate {
    name: string;
    version: string;
}
",
                        "name": "PypiCoordinate.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Fiddle from \\"../../..\\";
export interface RegistryOverrides {
    npm?: Fiddle.NpmOutput;
    maven?: Fiddle.MavenOutput;
}
",
                        "name": "RegistryOverrides.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Fiddle from \\"../../..\\";
export declare type RemoteGenJobId = string & {
    RemoteGenJobId: void;
};
export declare function RemoteGenJobId(value: string): Fiddle.RemoteGenJobId;
",
                        "name": "RemoteGenJobId.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Fiddle from \\"../../..\\";
/**
 * A remote gen job can be made up of several tasks.
 * A task corresponds to an instance of a generator (in .fernrc.yml).
 *
 */
export declare type RemoteGenTaskId = string & {
    RemoteGenTaskId: void;
};
export declare function RemoteGenTaskId(value: string): Fiddle.RemoteGenTaskId;
",
                        "name": "RemoteGenTaskId.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Fiddle from \\"../../..\\";
export interface Task {
    status: Fiddle.TaskStatus;
    packages: Fiddle.Package[];
    logs: Fiddle.TaskLog[];
}
",
                        "name": "Task.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Fiddle from \\"../../..\\";
export interface TaskLog {
    level: Fiddle.LogLevel;
    message: string;
}
",
                        "name": "TaskLog.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as Fiddle from \\"../../..\\";
export declare type TaskStatus = Fiddle.TaskStatus.NotStarted | Fiddle.TaskStatus.Running | Fiddle.TaskStatus.Failed | Fiddle.TaskStatus.Finished | Fiddle.TaskStatus._Unknown;
export declare namespace TaskStatus {
    interface NotStarted extends _Utils {
        type: \\"notStarted\\";
    }
    interface Running extends _Utils {
        type: \\"running\\";
    }
    interface Failed extends Fiddle.FailedTaskStatus, _Utils {
        type: \\"failed\\";
    }
    interface Finished extends Fiddle.FinishedTaskStatus, _Utils {
        type: \\"finished\\";
    }
    interface _Unknown extends _Utils {
        type: void;
    }
    interface _Utils {
        _visit: <_Result>(visitor: Fiddle.TaskStatus._Visitor<_Result>) => _Result;
    }
    interface _Visitor<_Result> {
        notStarted: () => _Result;
        running: () => _Result;
        failed: (value: Fiddle.FailedTaskStatus) => _Result;
        finished: (value: Fiddle.FinishedTaskStatus) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}
export declare const TaskStatus: {
    readonly notStarted: () => Fiddle.TaskStatus.NotStarted;
    readonly running: () => Fiddle.TaskStatus.Running;
    readonly failed: (value: Fiddle.FailedTaskStatus) => Fiddle.TaskStatus.Failed;
    readonly finished: (value: Fiddle.FinishedTaskStatus) => Fiddle.TaskStatus.Finished;
    readonly _unknown: (value: {
        type: string;
    }) => Fiddle.TaskStatus._Unknown;
    readonly _visit: <_Result>(value: Fiddle.TaskStatus, visitor: Fiddle.TaskStatus._Visitor<_Result>) => _Result;
};
",
                        "name": "TaskStatus.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
export interface UsernamePassword {
    username: string;
    password: string;
}
",
                        "name": "UsernamePassword.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * from \\"./RemoteGenJobId\\";
export * from \\"./RemoteGenTaskId\\";
export * from \\"./GeneratorIdAndVersion\\";
export * from \\"./GeneratorConfig\\";
export * from \\"./GeneratorConfigV2\\";
export * from \\"./OutputMode\\";
export * from \\"./PublishOutputMode\\";
export * from \\"./PublishOutputModeV2\\";
export * from \\"./RegistryOverrides\\";
export * from \\"./GeneratorOutputs\\";
export * from \\"./NpmOutput\\";
export * from \\"./MavenOutput\\";
export * from \\"./PostmanOutput\\";
export * from \\"./GithubOutputMode\\";
export * from \\"./GithubPublishInfo\\";
export * from \\"./NpmOutputWithOptionalToken\\";
export * from \\"./MavenOutputWithOptionalCreds\\";
export * from \\"./UsernamePassword\\";
export * from \\"./Task\\";
export * from \\"./TaskStatus\\";
export * from \\"./FailedTaskStatus\\";
export * from \\"./FinishedTaskStatus\\";
export * from \\"./TaskLog\\";
export * from \\"./LogLevel\\";
export * from \\"./Package\\";
export * from \\"./PackagePublishStatus\\";
export * from \\"./PackageCoordinate\\";
export * from \\"./NpmCoordinate\\";
export * from \\"./MavenCoordinate\\";
export * from \\"./PypiCoordinate\\";
export * from \\"./CreateJobResponse\\";
export * from \\"./GeneratorsDoNotExistErrorBodyType\\";
export * from \\"./CannotPublishToNpmScopeDetails\\";
export * from \\"./CannotPublishToMavenGroupDetails\\";
export * from \\"./InsufficientPermissionsDetails\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                    ],
                    "name": "types",
                    "type": "directory",
                  },
                ],
                "name": "remoteGen",
                "type": "directory",
              },
            ],
            "name": "resources",
            "type": "directory",
          },
        ],
        "name": "api",
        "type": "directory",
      },
      Object {
        "contents": Array [
          Object {
            "contents": Array [
              Object {
                "contents": "export interface BasicAuth {
    username: string;
    password: string;
}
export declare const BasicAuth: {
    toAuthorizationHeader: (basicAuth: BasicAuth | undefined) => string | undefined;
    fromAuthorizationHeader: (header: string) => BasicAuth;
};
",
                "name": "BasicAuth.d.ts",
                "type": "file",
              },
              Object {
                "contents": "export declare type BearerToken = string;
export declare const BearerToken: {
    toAuthorizationHeader: (token: BearerToken | undefined) => string | undefined;
    fromAuthorizationHeader: (header: string) => BearerToken;
};
",
                "name": "BearerToken.d.ts",
                "type": "file",
              },
              Object {
                "contents": "export { BasicAuth } from \\"./BasicAuth\\";
export { BearerToken } from \\"./BearerToken\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
            ],
            "name": "auth",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export declare type APIResponse<Success, Failure> = SuccessfulResponse<Success> | FailedResponse<Failure>;
export interface SuccessfulResponse<T> {
    ok: true;
    body: T;
}
export interface FailedResponse<T> {
    ok: false;
    error: T;
}
",
                "name": "APIResponse.d.ts",
                "type": "file",
              },
              Object {
                "contents": "import { default as URLSearchParams } from \\"@ungap/url-search-params\\";
import { AxiosAdapter, AxiosProgressEvent } from \\"axios\\";
import { APIResponse } from \\"./APIResponse\\";
export declare type FetchFunction = <R = unknown>(args: Fetcher.Args) => Promise<APIResponse<R, Fetcher.Error>>;
export declare namespace Fetcher {
    interface Args {
        url: string;
        method: string;
        contentType?: string;
        headers?: Record<string, string | undefined>;
        queryParameters?: URLSearchParams;
        body?: unknown;
        timeoutMs?: number;
        withCredentials?: boolean;
        responseType?: \\"json\\" | \\"blob\\";
        adapter?: AxiosAdapter;
        onUploadProgress?: (event: AxiosProgressEvent) => void;
    }
    type Error = FailedStatusCodeError | NonJsonError | TimeoutError | UnknownError;
    interface FailedStatusCodeError {
        reason: \\"status-code\\";
        statusCode: number;
        body: unknown;
    }
    interface NonJsonError {
        reason: \\"non-json\\";
        statusCode: number;
        rawBody: string;
    }
    interface TimeoutError {
        reason: \\"timeout\\";
    }
    interface UnknownError {
        reason: \\"unknown\\";
        errorMessage: string;
    }
}
export declare const fetcher: FetchFunction;
",
                "name": "Fetcher.d.ts",
                "type": "file",
              },
              Object {
                "contents": "export declare type Supplier<T> = T | Promise<T> | (() => T | Promise<T>);
export declare const Supplier: {
    get: <T>(supplier: Supplier<T>) => Promise<T>;
};
",
                "name": "Supplier.d.ts",
                "type": "file",
              },
              Object {
                "contents": "export type { APIResponse } from \\"./APIResponse\\";
export { fetcher } from \\"./Fetcher\\";
export type { Fetcher, FetchFunction } from \\"./Fetcher\\";
export { Supplier } from \\"./Supplier\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
            ],
            "name": "fetcher",
            "type": "directory",
          },
          Object {
            "contents": "export * from \\"./fetcher\\";
export * from \\"./auth\\";
export * as serialization from \\"./schemas\\";
",
            "name": "index.d.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "import { SchemaUtils } from \\"./builders\\";
import { MaybePromise } from \\"./utils/MaybePromise\\";
export declare type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
export declare type inferRaw<S extends Schema> = S extends Schema<infer Raw, any> ? Raw : never;
export declare type inferParsed<S extends Schema> = S extends Schema<any, infer Parsed> ? Parsed : never;
export interface BaseSchema<Raw, Parsed> {
    parse: (raw: unknown, opts?: SchemaOptions) => MaybePromise<MaybeValid<Parsed>>;
    json: (parsed: unknown, opts?: SchemaOptions) => MaybePromise<MaybeValid<Raw>>;
    getType: () => SchemaType | Promise<SchemaType>;
}
export declare const SchemaType: {
    readonly DATE: \\"date\\";
    readonly ENUM: \\"enum\\";
    readonly LIST: \\"list\\";
    readonly STRING_LITERAL: \\"stringLiteral\\";
    readonly OBJECT: \\"object\\";
    readonly ANY: \\"any\\";
    readonly BOOLEAN: \\"boolean\\";
    readonly NUMBER: \\"number\\";
    readonly STRING: \\"string\\";
    readonly UNKNOWN: \\"unknown\\";
    readonly RECORD: \\"record\\";
    readonly SET: \\"set\\";
    readonly UNION: \\"union\\";
    readonly UNDISCRIMINATED_UNION: \\"undiscriminatedUnion\\";
    readonly OPTIONAL: \\"optional\\";
};
export declare type SchemaType = typeof SchemaType[keyof typeof SchemaType];
export declare type MaybeValid<T> = Valid<T> | Invalid;
export interface Valid<T> {
    ok: true;
    value: T;
}
export interface Invalid {
    ok: false;
    errors: ValidationError[];
}
export interface ValidationError {
    path: string[];
    message: string;
}
export interface SchemaOptions {
    /**
     * how to handle unrecognized keys in objects
     *
     * @default \\"fail\\"
     */
    unrecognizedObjectKeys?: \\"fail\\" | \\"passthrough\\" | \\"strip\\";
    /**
     * whether to fail when an unrecognized discriminant value is
     * encountered in a union
     *
     * @default false
     */
    allowUnrecognizedUnionMembers?: boolean;
    /**
     * whether to fail when an unrecognized enum value is encountered
     *
     * @default false
     */
    allowUnrecognizedEnumValues?: boolean;
    /**
     * whether to allow data that doesn't conform to the schema.
     * invalid data is passed through without transformation.
     *
     * when this is enabled, .parse() and .json() will always
     * return \`ok: true\`. \`.parseOrThrow()\` and \`.jsonOrThrow()\`
     * will never fail.
     *
     * @default false
     */
    skipValidation?: boolean;
    /**
     * each validation failure contains a \\"path\\" property, which is
     * the breadcrumbs to the offending node in the JSON. you can supply
     * a prefix that is prepended to all the errors' paths. this can be
     * helpful for zurg's internal debug logging.
     */
    breadcrumbsPrefix?: string[];
}
",
                "name": "Schema.d.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { Schema } from \\"../../Schema\\";
export declare function date(): Schema<string, Date>;
",
                        "name": "date.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { date } from \\"./date\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                    ],
                    "name": "date",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { Schema } from \\"../../Schema\\";
export declare function enum_<U extends string, E extends U[]>(values: E): Schema<E[number], E[number]>;
",
                        "name": "enum.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { enum_ } from \\"./enum\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                    ],
                    "name": "enum",
                    "type": "directory",
                  },
                  Object {
                    "contents": "export * from \\"./date\\";
export * from \\"./enum\\";
export * from \\"./lazy\\";
export * from \\"./list\\";
export * from \\"./literals\\";
export * from \\"./object\\";
export * from \\"./object-like\\";
export * from \\"./primitives\\";
export * from \\"./record\\";
export * from \\"./schema-utils\\";
export * from \\"./set\\";
export * from \\"./undiscriminated-union\\";
export * from \\"./union\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export { lazy } from \\"./lazy\\";
export type { SchemaGetter } from \\"./lazy\\";
export { lazyObject } from \\"./lazyObject\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { BaseSchema, Schema } from \\"../../Schema\\";
export declare type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType | Promise<SchemaType>;
export declare function lazy<Raw, Parsed>(getter: SchemaGetter<Schema<Raw, Parsed>>): Schema<Raw, Parsed>;
export declare function constructLazyBaseSchema<Raw, Parsed>(getter: SchemaGetter<Schema<Raw, Parsed>>): BaseSchema<Raw, Parsed>;
export declare function getMemoizedSchema<SchemaType extends Schema<any, any>>(getter: SchemaGetter<SchemaType>): Promise<SchemaType>;
",
                        "name": "lazy.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { ObjectSchema } from \\"../object/types\\";
import { SchemaGetter } from \\"./lazy\\";
export declare function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed>;
",
                        "name": "lazyObject.d.ts",
                        "type": "file",
                      },
                    ],
                    "name": "lazy",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export { list } from \\"./list\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { Schema } from \\"../../Schema\\";
export declare function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]>;
",
                        "name": "list.d.ts",
                        "type": "file",
                      },
                    ],
                    "name": "list",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export { stringLiteral } from \\"./stringLiteral\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { Schema } from \\"../../Schema\\";
export declare function stringLiteral<V extends string>(literal: V): Schema<V, V>;
",
                        "name": "stringLiteral.d.ts",
                        "type": "file",
                      },
                    ],
                    "name": "literals",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export { getObjectUtils, object } from \\"./object\\";
export { isProperty, property } from \\"./property\\";
export type { Property } from \\"./property\\";
export type { BaseObjectSchema, inferObjectSchemaFromPropertySchemas, inferParsedObject, inferParsedObjectFromPropertySchemas, inferParsedPropertySchema, inferRawKey, inferRawObject, inferRawObjectFromPropertySchemas, inferRawPropertySchema, ObjectSchema, ObjectUtils, PropertySchemas, } from \\"./types\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { BaseObjectSchema, inferObjectSchemaFromPropertySchemas, ObjectUtils, PropertySchemas } from \\"./types\\";
export declare function object<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(schemas: T): inferObjectSchemaFromPropertySchemas<T>;
export declare function getObjectUtils<Raw, Parsed>(schema: BaseObjectSchema<Raw, Parsed>): ObjectUtils<Raw, Parsed>;
",
                        "name": "object.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { Schema } from \\"../../Schema\\";
export declare function property<RawKey extends string, RawValue, ParsedValue>(rawKey: RawKey, valueSchema: Schema<RawValue, ParsedValue>): Property<RawKey, RawValue, ParsedValue>;
export interface Property<RawKey extends string, RawValue, ParsedValue> {
    rawKey: RawKey;
    valueSchema: Schema<RawValue, ParsedValue>;
    isProperty: true;
}
export declare function isProperty<O extends Property<any, any, any>>(maybeProperty: unknown): maybeProperty is O;
",
                        "name": "property.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { BaseSchema, inferParsed, inferRaw, Schema } from \\"../../Schema\\";
import { addQuestionMarksToNullableProperties } from \\"../../utils/addQuestionMarksToNullableProperties\\";
import { ObjectLikeUtils } from \\"../object-like\\";
import { SchemaUtils } from \\"../schema-utils\\";
import { Property } from \\"./property\\";
export declare type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> & ObjectLikeUtils<Raw, Parsed> & ObjectUtils<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
export interface BaseObjectSchema<Raw, Parsed> extends BaseSchema<Raw, Parsed> {
    _getRawProperties: () => Promise<(keyof Raw)[]>;
    _getParsedProperties: () => Promise<(keyof Parsed)[]>;
}
export interface ObjectUtils<Raw, Parsed> {
    extend: <RawExtension, ParsedExtension>(schemas: ObjectSchema<RawExtension, ParsedExtension>) => ObjectSchema<Raw & RawExtension, Parsed & ParsedExtension>;
}
export declare type inferRawObject<O extends ObjectSchema<any, any>> = O extends ObjectSchema<infer Raw, any> ? Raw : never;
export declare type inferParsedObject<O extends ObjectSchema<any, any>> = O extends ObjectSchema<any, infer Parsed> ? Parsed : never;
export declare type inferObjectSchemaFromPropertySchemas<T extends PropertySchemas<keyof T>> = ObjectSchema<inferRawObjectFromPropertySchemas<T>, inferParsedObjectFromPropertySchemas<T>>;
export declare type inferRawObjectFromPropertySchemas<T extends PropertySchemas<keyof T>> = addQuestionMarksToNullableProperties<{
    [ParsedKey in keyof T as inferRawKey<ParsedKey, T[ParsedKey]>]: inferRawPropertySchema<T[ParsedKey]>;
}>;
export declare type inferParsedObjectFromPropertySchemas<T extends PropertySchemas<keyof T>> = addQuestionMarksToNullableProperties<{
    [K in keyof T]: inferParsedPropertySchema<T[K]>;
}>;
export declare type PropertySchemas<ParsedKeys extends string | number | symbol> = Record<ParsedKeys, Property<any, any, any> | Schema<any, any>>;
export declare type inferRawPropertySchema<P extends Property<any, any, any> | Schema<any, any>> = P extends Property<any, infer Raw, any> ? Raw : P extends Schema<any, any> ? inferRaw<P> : never;
export declare type inferParsedPropertySchema<P extends Property<any, any, any> | Schema<any, any>> = P extends Property<any, any, infer Parsed> ? Parsed : P extends Schema<any, any> ? inferParsed<P> : never;
export declare type inferRawKey<ParsedKey extends string | number | symbol, P extends Property<any, any, any> | Schema<any, any>> = P extends Property<infer Raw, any, any> ? Raw : ParsedKey;
",
                        "name": "types.d.ts",
                        "type": "file",
                      },
                    ],
                    "name": "object",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { BaseSchema } from \\"../../Schema\\";
import { ObjectLikeSchema, ObjectLikeUtils } from \\"./types\\";
export declare function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed>;
/**
 * object-like utils are defined in one file to resolve issues with circular imports
 */
export declare function withParsedProperties<RawObjectShape, ParsedObjectShape, Properties>(objectLike: BaseSchema<RawObjectShape, ParsedObjectShape>, properties: {
    [K in keyof Properties]: Properties[K] | ((parsed: ParsedObjectShape) => Properties[K]);
}): ObjectLikeSchema<RawObjectShape, ParsedObjectShape & Properties>;
",
                        "name": "getObjectLikeUtils.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { getObjectLikeUtils, withParsedProperties } from \\"./getObjectLikeUtils\\";
export type { ObjectLikeSchema, ObjectLikeUtils } from \\"./types\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { BaseSchema, Schema } from \\"../../Schema\\";
export declare type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> & BaseSchema<Raw, Parsed> & ObjectLikeUtils<Raw, Parsed>;
export interface ObjectLikeUtils<Raw, Parsed> {
    withParsedProperties: <T extends Record<string, any>>(properties: {
        [K in keyof T]: T[K] | ((parsed: Parsed) => T[K]);
    }) => ObjectLikeSchema<Raw, Parsed & T>;
}
",
                        "name": "types.d.ts",
                        "type": "file",
                      },
                    ],
                    "name": "object-like",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export declare const any: () => import(\\"../../Schema\\").Schema<any, any>;
",
                        "name": "any.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export declare const boolean: () => import(\\"../../Schema\\").Schema<boolean, boolean>;
",
                        "name": "boolean.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { any } from \\"./any\\";
export { boolean } from \\"./boolean\\";
export { number } from \\"./number\\";
export { string } from \\"./string\\";
export { unknown } from \\"./unknown\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export declare const number: () => import(\\"../../Schema\\").Schema<number, number>;
",
                        "name": "number.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export declare const string: () => import(\\"../../Schema\\").Schema<string, string>;
",
                        "name": "string.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export declare const unknown: () => import(\\"../../Schema\\").Schema<unknown, unknown>;
",
                        "name": "unknown.d.ts",
                        "type": "file",
                      },
                    ],
                    "name": "primitives",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export { record } from \\"./record\\";
export type { BaseRecordSchema, RecordSchema } from \\"./types\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { Schema } from \\"../../Schema\\";
import { RecordSchema } from \\"./types\\";
export declare function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(keySchema: Schema<RawKey, ParsedKey>, valueSchema: Schema<RawValue, ParsedValue>): RecordSchema<RawKey, RawValue, ParsedKey, ParsedValue>;
",
                        "name": "record.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { BaseSchema } from \\"../../Schema\\";
import { SchemaUtils } from \\"../schema-utils\\";
export declare type RecordSchema<RawKey extends string | number, RawValue, ParsedKey extends string | number, ParsedValue> = BaseRecordSchema<RawKey, RawValue, ParsedKey, ParsedValue> & SchemaUtils<Record<RawKey, RawValue>, Record<ParsedKey, ParsedValue>>;
export declare type BaseRecordSchema<RawKey extends string | number, RawValue, ParsedKey extends string | number, ParsedValue> = BaseSchema<Record<RawKey, RawValue>, Record<ParsedKey, ParsedValue>>;
",
                        "name": "types.d.ts",
                        "type": "file",
                      },
                    ],
                    "name": "record",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "import { ValidationError } from \\"../../Schema\\";
export declare class JsonError extends Error {
    readonly errors: ValidationError[];
    constructor(errors: ValidationError[]);
}
",
                        "name": "JsonError.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { ValidationError } from \\"../../Schema\\";
export declare class ParseError extends Error {
    readonly errors: ValidationError[];
    constructor(errors: ValidationError[]);
}
",
                        "name": "ParseError.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { BaseSchema, Schema, SchemaOptions } from \\"../../Schema\\";
export interface SchemaUtils<Raw, Parsed> {
    optional: () => Schema<Raw | null | undefined, Parsed | undefined>;
    transform: <Transformed>(transformer: SchemaTransformer<Parsed, Transformed>) => Schema<Raw, Transformed>;
    parseOrThrow: (raw: unknown, opts?: SchemaOptions) => Promise<Parsed>;
    jsonOrThrow: (raw: unknown, opts?: SchemaOptions) => Promise<Raw>;
}
export interface SchemaTransformer<Parsed, Transformed> {
    transform: (parsed: Parsed) => Transformed;
    untransform: (transformed: any) => Parsed;
}
export declare function getSchemaUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): SchemaUtils<Raw, Parsed>;
/**
 * schema utils are defined in one file to resolve issues with circular imports
 */
export declare function optional<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): Schema<Raw | null | undefined, Parsed | undefined>;
export declare function transform<Raw, Parsed, Transformed>(schema: BaseSchema<Raw, Parsed>, transformer: SchemaTransformer<Parsed, Transformed>): Schema<Raw, Transformed>;
",
                        "name": "getSchemaUtils.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { getSchemaUtils, optional, transform } from \\"./getSchemaUtils\\";
export type { SchemaUtils } from \\"./getSchemaUtils\\";
export { JsonError } from \\"./JsonError\\";
export { ParseError } from \\"./ParseError\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { ValidationError } from \\"../../Schema\\";
export declare function stringifyValidationError(error: ValidationError): string;
",
                        "name": "stringifyValidationErrors.d.ts",
                        "type": "file",
                      },
                    ],
                    "name": "schema-utils",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export { set } from \\"./set\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { Schema } from \\"../../Schema\\";
export declare function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>>;
",
                        "name": "set.d.ts",
                        "type": "file",
                      },
                    ],
                    "name": "set",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema, UndiscriminatedUnionSchema, } from \\"./types\\";
export { undiscriminatedUnion } from \\"./undiscriminatedUnion\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { inferParsed, inferRaw, Schema } from \\"../../Schema\\";
export declare type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<inferRawUnidiscriminatedUnionSchema<Schemas>, inferParsedUnidiscriminatedUnionSchema<Schemas>>;
export declare type inferRawUnidiscriminatedUnionSchema<Schemas extends [...Schema[]]> = inferRaw<Schemas[number]>;
export declare type inferParsedUnidiscriminatedUnionSchema<Schemas extends [...Schema[]]> = inferParsed<Schemas[number]>;
",
                        "name": "types.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { Schema } from \\"../../Schema\\";
import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from \\"./types\\";
export declare function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(schemas: Schemas): Schema<inferRawUnidiscriminatedUnionSchema<Schemas>, inferParsedUnidiscriminatedUnionSchema<Schemas>>;
",
                        "name": "undiscriminatedUnion.d.ts",
                        "type": "file",
                      },
                    ],
                    "name": "undiscriminated-union",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export declare function discriminant<RawDiscriminant extends string, ParsedDiscriminant extends string>(parsedDiscriminant: ParsedDiscriminant, rawDiscriminant: RawDiscriminant): Discriminant<RawDiscriminant, ParsedDiscriminant>;
export interface Discriminant<RawDiscriminant extends string, ParsedDiscriminant extends string> {
    parsedDiscriminant: ParsedDiscriminant;
    rawDiscriminant: RawDiscriminant;
}
",
                        "name": "discriminant.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { discriminant } from \\"./discriminant\\";
export type { Discriminant } from \\"./discriminant\\";
export type { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes, } from \\"./types\\";
export { union } from \\"./union\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { inferParsedObject, inferRawObject, ObjectSchema } from \\"../object\\";
import { Discriminant } from \\"./discriminant\\";
export declare type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
    [K in DiscriminantValues]: ObjectSchema<any, any>;
};
export declare type inferRawUnion<D extends string | Discriminant<any, any>, U extends UnionSubtypes<keyof U>> = {
    [K in keyof U]: Record<inferRawDiscriminant<D>, K> & inferRawObject<U[K]>;
}[keyof U];
export declare type inferParsedUnion<D extends string | Discriminant<any, any>, U extends UnionSubtypes<keyof U>> = {
    [K in keyof U]: Record<inferParsedDiscriminant<D>, K> & inferParsedObject<U[K]>;
}[keyof U];
export declare type inferRawDiscriminant<D extends string | Discriminant<any, any>> = D extends string ? D : D extends Discriminant<infer Raw, any> ? Raw : never;
export declare type inferParsedDiscriminant<D extends string | Discriminant<any, any>> = D extends string ? D : D extends Discriminant<any, infer Parsed> ? Parsed : never;
",
                        "name": "types.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "import { ObjectLikeSchema } from \\"../object-like\\";
import { Discriminant } from \\"./discriminant\\";
import { inferParsedUnion, inferRawUnion, UnionSubtypes } from \\"./types\\";
export declare function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(discriminant: D, union: U): ObjectLikeSchema<inferRawUnion<D, U>, inferParsedUnion<D, U>>;
",
                        "name": "union.d.ts",
                        "type": "file",
                      },
                    ],
                    "name": "union",
                    "type": "directory",
                  },
                ],
                "name": "builders",
                "type": "directory",
              },
              Object {
                "contents": "export * from \\"./builders\\";
export type { inferParsed, inferRaw, Schema, SchemaOptions } from \\"./Schema\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export declare type MaybePromise<T> = T | Promise<T>;
",
                    "name": "MaybePromise.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export declare type addQuestionMarksToNullableProperties<T> = {
    [K in OptionalKeys<T>]?: T[K];
} & Pick<T, RequiredKeys<T>>;
export declare type OptionalKeys<T> = {
    [K in keyof T]-?: undefined extends T[K] ? K : null extends T[K] ? K : 1 extends (any extends T[K] ? 0 : 1) ? never : K;
}[keyof T];
export declare type RequiredKeys<T> = Exclude<keyof T, OptionalKeys<T>>;
",
                    "name": "addQuestionMarksToNullableProperties.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { MaybeValid, Schema, SchemaOptions, SchemaType } from \\"../Schema\\";
export declare function createIdentitySchemaCreator<T>(schemaType: SchemaType, validate: (value: unknown, opts?: SchemaOptions) => MaybeValid<T>): () => Schema<T, T>;
",
                    "name": "createIdentitySchemaCreator.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export declare function entries<T>(object: T): [keyof T, T[keyof T]][];
",
                    "name": "entries.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export declare function filterObject<T, K extends keyof T>(obj: T, keysToInclude: K[]): Pick<T, K>;
",
                    "name": "filterObject.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export declare function getErrorMessageForIncorrectType(value: unknown, expectedType: string): string;
",
                    "name": "getErrorMessageForIncorrectType.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export declare function isPlainObject(value: unknown): value is Record<string, unknown>;
",
                    "name": "isPlainObject.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export declare function keys<T>(object: T): (keyof T)[];
",
                    "name": "keys.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { BaseSchema } from \\"../Schema\\";
export declare function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S;
",
                    "name": "maybeSkipValidation.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export declare function partition<T>(items: readonly T[], predicate: (item: T) => boolean): [T[], T[]];
",
                    "name": "partition.d.ts",
                    "type": "file",
                  },
                ],
                "name": "utils",
                "type": "directory",
              },
            ],
            "name": "schemas",
            "type": "directory",
          },
        ],
        "name": "core",
        "type": "directory",
      },
      Object {
        "contents": "export * as Fiddle from \\"./api\\";
export { FiddleClient } from \\"./Client\\";
",
        "name": "index.d.ts",
        "type": "file",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "export * from \\"./resources\\";
",
            "name": "index.d.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * as remoteGen from \\"./remoteGen\\";
export * from \\"./remoteGen/types\\";
export * from \\"./remoteGen/client/requests\\";
",
                "name": "index.d.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const Error: core.serialization.Schema<serializers.remoteGen.createJob.Error.Raw, Fiddle.remoteGen.createJob.Error>;
export declare namespace Error {
    type Raw = Error.IllegalApiNameError | Error.GeneratorsDoNotExistError | Error.CannotPublishToNpmScope | Error.CannotPublishToMavenGroup | Error.InsufficientPermissions;
    interface IllegalApiNameError {
        error: \\"IllegalApiNameError\\";
    }
    interface GeneratorsDoNotExistError {
        error: \\"GeneratorsDoNotExistError\\";
        content: serializers.GeneratorsDoNotExistErrorBodyType.Raw;
    }
    interface CannotPublishToNpmScope {
        error: \\"CannotPublishToNpmScope\\";
        content: serializers.CannotPublishToNpmScopeDetails.Raw;
    }
    interface CannotPublishToMavenGroup {
        error: \\"CannotPublishToMavenGroup\\";
        content: serializers.CannotPublishToMavenGroupDetails.Raw;
    }
    interface InsufficientPermissions {
        error: \\"InsufficientPermissions\\";
        content: serializers.InsufficientPermissionsDetails.Raw;
    }
}
",
                        "name": "createJob.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const Error: core.serialization.Schema<serializers.remoteGen.createJobV2.Error.Raw, Fiddle.remoteGen.createJobV2.Error>;
export declare namespace Error {
    type Raw = Error.IllegalApiNameError | Error.GeneratorsDoNotExistError | Error.CannotPublishToNpmScope | Error.CannotPublishToMavenGroup | Error.InsufficientPermissions;
    interface IllegalApiNameError {
        error: \\"IllegalApiNameError\\";
    }
    interface GeneratorsDoNotExistError {
        error: \\"GeneratorsDoNotExistError\\";
        content: serializers.GeneratorsDoNotExistErrorBodyType.Raw;
    }
    interface CannotPublishToNpmScope {
        error: \\"CannotPublishToNpmScope\\";
        content: serializers.CannotPublishToNpmScopeDetails.Raw;
    }
    interface CannotPublishToMavenGroup {
        error: \\"CannotPublishToMavenGroup\\";
        content: serializers.CannotPublishToMavenGroupDetails.Raw;
    }
    interface InsufficientPermissions {
        error: \\"InsufficientPermissions\\";
        content: serializers.InsufficientPermissionsDetails.Raw;
    }
}
",
                        "name": "createJobV2.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const Response: core.serialization.Schema<serializers.remoteGen.getJobStatus.Response.Raw, Record<Fiddle.RemoteGenTaskId, Fiddle.Task>>;
export declare namespace Response {
    type Raw = Record<serializers.RemoteGenTaskId.Raw, serializers.Task.Raw>;
}
",
                        "name": "getJobStatus.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * as createJob from \\"./createJob\\";
export * as createJobV2 from \\"./createJobV2\\";
export * as getJobStatus from \\"./getJobStatus\\";
export * from \\"./requests\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": Array [
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../..\\";
import * as Fiddle from \\"../../../../../api\\";
import * as core from \\"../../../../../core\\";
export declare const CreateJobRequest: core.serialization.Schema<serializers.CreateJobRequest.Raw, Fiddle.CreateJobRequest>;
export declare namespace CreateJobRequest {
    interface Raw {
        apiName: string;
        organizationName: string;
        version?: string | null;
        generators: serializers.GeneratorConfig.Raw[];
    }
}
",
                            "name": "CreateJobRequest.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../../..\\";
import * as Fiddle from \\"../../../../../api\\";
import * as core from \\"../../../../../core\\";
export declare const CreateJobRequestV2: core.serialization.Schema<serializers.CreateJobRequestV2.Raw, Fiddle.CreateJobRequestV2>;
export declare namespace CreateJobRequestV2 {
    interface Raw {
        apiName: string;
        organizationName: string;
        version?: string | null;
        generators: serializers.GeneratorConfigV2.Raw[];
        uploadToS3?: boolean | null;
    }
}
",
                            "name": "CreateJobRequestV2.d.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "export { CreateJobRequest } from \\"./CreateJobRequest\\";
export { CreateJobRequestV2 } from \\"./CreateJobRequestV2\\";
",
                            "name": "index.d.ts",
                            "type": "file",
                          },
                        ],
                        "name": "requests",
                        "type": "directory",
                      },
                    ],
                    "name": "client",
                    "type": "directory",
                  },
                  Object {
                    "contents": "export * from \\"./types\\";
export * from \\"./client\\";
",
                    "name": "index.d.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const CannotPublishToMavenGroupDetails: core.serialization.ObjectSchema<serializers.CannotPublishToMavenGroupDetails.Raw, Fiddle.CannotPublishToMavenGroupDetails>;
export declare namespace CannotPublishToMavenGroupDetails {
    interface Raw {
        generatorId: string;
        invalidGroup: string;
        validGroup: string;
    }
}
",
                        "name": "CannotPublishToMavenGroupDetails.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const CannotPublishToNpmScopeDetails: core.serialization.ObjectSchema<serializers.CannotPublishToNpmScopeDetails.Raw, Fiddle.CannotPublishToNpmScopeDetails>;
export declare namespace CannotPublishToNpmScopeDetails {
    interface Raw {
        generatorId: string;
        invalidScope: string;
        validScope: string;
    }
}
",
                        "name": "CannotPublishToNpmScopeDetails.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const CreateJobResponse: core.serialization.ObjectSchema<serializers.CreateJobResponse.Raw, Fiddle.CreateJobResponse>;
export declare namespace CreateJobResponse {
    interface Raw {
        jobId: serializers.RemoteGenJobId.Raw;
        taskIds: serializers.RemoteGenTaskId.Raw[];
    }
}
",
                        "name": "CreateJobResponse.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const FailedTaskStatus: core.serialization.ObjectSchema<serializers.FailedTaskStatus.Raw, Fiddle.FailedTaskStatus>;
export declare namespace FailedTaskStatus {
    interface Raw {
        message: string;
        s3PreSignedReadUrl?: string | null;
    }
}
",
                        "name": "FailedTaskStatus.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const FinishedTaskStatus: core.serialization.ObjectSchema<serializers.FinishedTaskStatus.Raw, Fiddle.FinishedTaskStatus>;
export declare namespace FinishedTaskStatus {
    interface Raw {
        hasFilesToDownload: boolean;
        s3PreSignedReadUrl: string;
        s3PreSignedReadUrlV2?: string | null;
    }
}
",
                        "name": "FinishedTaskStatus.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const GeneratorConfig: core.serialization.ObjectSchema<serializers.GeneratorConfig.Raw, Fiddle.GeneratorConfig>;
export declare namespace GeneratorConfig {
    interface Raw {
        id: string;
        version: string;
        customConfig?: unknown;
        willDownloadFiles: boolean;
        outputs: serializers.GeneratorOutputs.Raw;
    }
}
",
                        "name": "GeneratorConfig.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const GeneratorConfigV2: core.serialization.ObjectSchema<serializers.GeneratorConfigV2.Raw, Fiddle.GeneratorConfigV2>;
export declare namespace GeneratorConfigV2 {
    interface Raw {
        id: string;
        version: string;
        customConfig?: unknown;
        outputMode: serializers.OutputMode.Raw;
    }
}
",
                        "name": "GeneratorConfigV2.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const GeneratorIdAndVersion: core.serialization.ObjectSchema<serializers.GeneratorIdAndVersion.Raw, Fiddle.GeneratorIdAndVersion>;
export declare namespace GeneratorIdAndVersion {
    interface Raw {
        id: string;
        version: string;
    }
}
",
                        "name": "GeneratorIdAndVersion.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const GeneratorOutputs: core.serialization.ObjectSchema<serializers.GeneratorOutputs.Raw, Fiddle.GeneratorOutputs>;
export declare namespace GeneratorOutputs {
    interface Raw {
        npm?: serializers.NpmOutput.Raw | null;
        maven?: serializers.MavenOutput.Raw | null;
    }
}
",
                        "name": "GeneratorOutputs.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const GeneratorsDoNotExistErrorBodyType: core.serialization.ObjectSchema<serializers.GeneratorsDoNotExistErrorBodyType.Raw, Fiddle.GeneratorsDoNotExistErrorBodyType>;
export declare namespace GeneratorsDoNotExistErrorBodyType {
    interface Raw {
        nonExistentGenerators: serializers.GeneratorIdAndVersion.Raw[];
    }
}
",
                        "name": "GeneratorsDoNotExistErrorBodyType.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const GithubOutputMode: core.serialization.ObjectSchema<serializers.GithubOutputMode.Raw, Fiddle.GithubOutputMode>;
export declare namespace GithubOutputMode {
    interface Raw {
        owner: string;
        repo: string;
        publishInfo?: serializers.GithubPublishInfo.Raw | null;
    }
}
",
                        "name": "GithubOutputMode.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const GithubPublishInfo: core.serialization.Schema<serializers.GithubPublishInfo.Raw, Fiddle.GithubPublishInfo>;
export declare namespace GithubPublishInfo {
    type Raw = GithubPublishInfo.Npm | GithubPublishInfo.Maven | GithubPublishInfo.Postman;
    interface Npm extends serializers.NpmOutputWithOptionalToken.Raw {
        type: \\"npm\\";
    }
    interface Maven extends serializers.MavenOutputWithOptionalCreds.Raw {
        type: \\"maven\\";
    }
    interface Postman extends serializers.PostmanOutput.Raw {
        type: \\"postman\\";
    }
}
",
                        "name": "GithubPublishInfo.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const InsufficientPermissionsDetails: core.serialization.ObjectSchema<serializers.InsufficientPermissionsDetails.Raw, Fiddle.InsufficientPermissionsDetails>;
export declare namespace InsufficientPermissionsDetails {
    interface Raw {
        dummy?: string | null;
    }
}
",
                        "name": "InsufficientPermissionsDetails.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const LogLevel: core.serialization.Schema<serializers.LogLevel.Raw, Fiddle.LogLevel>;
export declare namespace LogLevel {
    type Raw = \\"DEBUG\\" | \\"INFO\\" | \\"WARN\\" | \\"ERROR\\";
}
",
                        "name": "LogLevel.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const MavenCoordinate: core.serialization.ObjectSchema<serializers.MavenCoordinate.Raw, Fiddle.MavenCoordinate>;
export declare namespace MavenCoordinate {
    interface Raw {
        group: string;
        artifact: string;
        version: string;
    }
}
",
                        "name": "MavenCoordinate.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const MavenOutput: core.serialization.ObjectSchema<serializers.MavenOutput.Raw, Fiddle.MavenOutput>;
export declare namespace MavenOutput {
    interface Raw {
        registryUrl: string;
        username: string;
        password: string;
        coordinate: string;
    }
}
",
                        "name": "MavenOutput.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const MavenOutputWithOptionalCreds: core.serialization.ObjectSchema<serializers.MavenOutputWithOptionalCreds.Raw, Fiddle.MavenOutputWithOptionalCreds>;
export declare namespace MavenOutputWithOptionalCreds {
    interface Raw {
        registryUrl: string;
        coordinate: string;
        credentials?: serializers.UsernamePassword.Raw | null;
    }
}
",
                        "name": "MavenOutputWithOptionalCreds.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const NpmCoordinate: core.serialization.ObjectSchema<serializers.NpmCoordinate.Raw, Fiddle.NpmCoordinate>;
export declare namespace NpmCoordinate {
    interface Raw {
        name: string;
        version: string;
    }
}
",
                        "name": "NpmCoordinate.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const NpmOutput: core.serialization.ObjectSchema<serializers.NpmOutput.Raw, Fiddle.NpmOutput>;
export declare namespace NpmOutput {
    interface Raw {
        registryUrl: string;
        packageName: string;
        token: string;
    }
}
",
                        "name": "NpmOutput.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const NpmOutputWithOptionalToken: core.serialization.ObjectSchema<serializers.NpmOutputWithOptionalToken.Raw, Fiddle.NpmOutputWithOptionalToken>;
export declare namespace NpmOutputWithOptionalToken {
    interface Raw {
        registryUrl: string;
        packageName: string;
        token?: string | null;
    }
}
",
                        "name": "NpmOutputWithOptionalToken.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const OutputMode: core.serialization.Schema<serializers.OutputMode.Raw, Fiddle.OutputMode>;
export declare namespace OutputMode {
    type Raw = OutputMode.Publish | OutputMode.PublishV2 | OutputMode.DownloadFiles | OutputMode.Github;
    interface Publish extends serializers.PublishOutputMode.Raw {
        type: \\"publish\\";
    }
    interface PublishV2 {
        type: \\"publishV2\\";
        publishV2: serializers.PublishOutputModeV2.Raw;
    }
    interface DownloadFiles {
        type: \\"downloadFiles\\";
    }
    interface Github extends serializers.GithubOutputMode.Raw {
        type: \\"github\\";
    }
}
",
                        "name": "OutputMode.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const Package: core.serialization.ObjectSchema<serializers.Package.Raw, Fiddle.Package>;
export declare namespace Package {
    interface Raw {
        coordinate: serializers.PackageCoordinate.Raw;
        status: serializers.PackagePublishStatus.Raw;
    }
}
",
                        "name": "Package.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const PackageCoordinate: core.serialization.Schema<serializers.PackageCoordinate.Raw, Fiddle.PackageCoordinate>;
export declare namespace PackageCoordinate {
    type Raw = PackageCoordinate.Npm | PackageCoordinate.Maven | PackageCoordinate.Pypi;
    interface Npm extends serializers.NpmCoordinate.Raw {
        _type: \\"npm\\";
    }
    interface Maven extends serializers.MavenCoordinate.Raw {
        _type: \\"maven\\";
    }
    interface Pypi extends serializers.PypiCoordinate.Raw {
        _type: \\"pypi\\";
    }
}
",
                        "name": "PackageCoordinate.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const PackagePublishStatus: core.serialization.Schema<serializers.PackagePublishStatus.Raw, Fiddle.PackagePublishStatus>;
export declare namespace PackagePublishStatus {
    type Raw = \\"NOT_STARTED_PUBLISHING\\" | \\"PUBLISHING\\" | \\"PUBLISHED\\" | \\"FAILED_TO_PUBLISH\\";
}
",
                        "name": "PackagePublishStatus.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const PostmanOutput: core.serialization.ObjectSchema<serializers.PostmanOutput.Raw, Fiddle.PostmanOutput>;
export declare namespace PostmanOutput {
    interface Raw {
        apiKey: string;
        workspaceId: string;
    }
}
",
                        "name": "PostmanOutput.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const PublishOutputMode: core.serialization.ObjectSchema<serializers.PublishOutputMode.Raw, Fiddle.PublishOutputMode>;
export declare namespace PublishOutputMode {
    interface Raw {
        registryOverrides: serializers.RegistryOverrides.Raw;
    }
}
",
                        "name": "PublishOutputMode.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const PublishOutputModeV2: core.serialization.Schema<serializers.PublishOutputModeV2.Raw, Fiddle.PublishOutputModeV2>;
export declare namespace PublishOutputModeV2 {
    type Raw = PublishOutputModeV2.NpmOverride | PublishOutputModeV2.MavenOverride | PublishOutputModeV2.Postman;
    interface NpmOverride {
        type: \\"npmOverride\\";
        npmOverride?: serializers.NpmOutput.Raw | null;
    }
    interface MavenOverride {
        type: \\"mavenOverride\\";
        mavenOverride?: serializers.MavenOutput.Raw | null;
    }
    interface Postman extends serializers.PostmanOutput.Raw {
        type: \\"postman\\";
    }
}
",
                        "name": "PublishOutputModeV2.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const PypiCoordinate: core.serialization.ObjectSchema<serializers.PypiCoordinate.Raw, Fiddle.PypiCoordinate>;
export declare namespace PypiCoordinate {
    interface Raw {
        name: string;
        version: string;
    }
}
",
                        "name": "PypiCoordinate.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const RegistryOverrides: core.serialization.ObjectSchema<serializers.RegistryOverrides.Raw, Fiddle.RegistryOverrides>;
export declare namespace RegistryOverrides {
    interface Raw {
        npm?: serializers.NpmOutput.Raw | null;
        maven?: serializers.MavenOutput.Raw | null;
    }
}
",
                        "name": "RegistryOverrides.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const RemoteGenJobId: core.serialization.Schema<serializers.RemoteGenJobId.Raw, Fiddle.RemoteGenJobId>;
export declare namespace RemoteGenJobId {
    type Raw = string;
}
",
                        "name": "RemoteGenJobId.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const RemoteGenTaskId: core.serialization.Schema<serializers.RemoteGenTaskId.Raw, Fiddle.RemoteGenTaskId>;
export declare namespace RemoteGenTaskId {
    type Raw = string;
}
",
                        "name": "RemoteGenTaskId.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const Task: core.serialization.ObjectSchema<serializers.Task.Raw, Fiddle.Task>;
export declare namespace Task {
    interface Raw {
        status: serializers.TaskStatus.Raw;
        packages: serializers.Package.Raw[];
        logs: serializers.TaskLog.Raw[];
    }
}
",
                        "name": "Task.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const TaskLog: core.serialization.ObjectSchema<serializers.TaskLog.Raw, Fiddle.TaskLog>;
export declare namespace TaskLog {
    interface Raw {
        level: serializers.LogLevel.Raw;
        message: string;
    }
}
",
                        "name": "TaskLog.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const TaskStatus: core.serialization.Schema<serializers.TaskStatus.Raw, Fiddle.TaskStatus>;
export declare namespace TaskStatus {
    type Raw = TaskStatus.NotStarted | TaskStatus.Running | TaskStatus.Failed | TaskStatus.Finished;
    interface NotStarted {
        _type: \\"notStarted\\";
    }
    interface Running {
        _type: \\"running\\";
    }
    interface Failed extends serializers.FailedTaskStatus.Raw {
        _type: \\"failed\\";
    }
    interface Finished extends serializers.FinishedTaskStatus.Raw {
        _type: \\"finished\\";
    }
}
",
                        "name": "TaskStatus.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from \\"../../..\\";
import * as Fiddle from \\"../../../../api\\";
import * as core from \\"../../../../core\\";
export declare const UsernamePassword: core.serialization.ObjectSchema<serializers.UsernamePassword.Raw, Fiddle.UsernamePassword>;
export declare namespace UsernamePassword {
    interface Raw {
        username: string;
        password: string;
    }
}
",
                        "name": "UsernamePassword.d.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export * from \\"./RemoteGenJobId\\";
export * from \\"./RemoteGenTaskId\\";
export * from \\"./GeneratorIdAndVersion\\";
export * from \\"./GeneratorConfig\\";
export * from \\"./GeneratorConfigV2\\";
export * from \\"./OutputMode\\";
export * from \\"./PublishOutputMode\\";
export * from \\"./PublishOutputModeV2\\";
export * from \\"./RegistryOverrides\\";
export * from \\"./GeneratorOutputs\\";
export * from \\"./NpmOutput\\";
export * from \\"./MavenOutput\\";
export * from \\"./PostmanOutput\\";
export * from \\"./GithubOutputMode\\";
export * from \\"./GithubPublishInfo\\";
export * from \\"./NpmOutputWithOptionalToken\\";
export * from \\"./MavenOutputWithOptionalCreds\\";
export * from \\"./UsernamePassword\\";
export * from \\"./Task\\";
export * from \\"./TaskStatus\\";
export * from \\"./FailedTaskStatus\\";
export * from \\"./FinishedTaskStatus\\";
export * from \\"./TaskLog\\";
export * from \\"./LogLevel\\";
export * from \\"./Package\\";
export * from \\"./PackagePublishStatus\\";
export * from \\"./PackageCoordinate\\";
export * from \\"./NpmCoordinate\\";
export * from \\"./MavenCoordinate\\";
export * from \\"./PypiCoordinate\\";
export * from \\"./CreateJobResponse\\";
export * from \\"./GeneratorsDoNotExistErrorBodyType\\";
export * from \\"./CannotPublishToNpmScopeDetails\\";
export * from \\"./CannotPublishToMavenGroupDetails\\";
export * from \\"./InsufficientPermissionsDetails\\";
",
                        "name": "index.d.ts",
                        "type": "file",
                      },
                    ],
                    "name": "types",
                    "type": "directory",
                  },
                ],
                "name": "remoteGen",
                "type": "directory",
              },
            ],
            "name": "resources",
            "type": "directory",
          },
        ],
        "name": "serialization",
        "type": "directory",
      },
    ],
    "name": "types",
    "type": "directory",
  },
]
`;
